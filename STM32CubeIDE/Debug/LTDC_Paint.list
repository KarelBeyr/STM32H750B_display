
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d210  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026c8  9000d4b0  9000d4b0  0000e4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000fb78  9000fb78  000110cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000fb78  9000fb78  00010b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000fb80  9000fb80  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000fb80  9000fb80  00010b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000fb84  9000fb84  00010b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9000fb88  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200000d0  9000fc54  000110d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20001498  9000fc54  00011498  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a717  00000000  00000000  000110fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005376  00000000  00000000  0003b811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  00040b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019a8  00000000  00000000  00042c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004115d  00000000  00000000  00044638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c8ce  00000000  00000000  00085795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018da50  00000000  00000000  000b2063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023fab3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009794  00000000  00000000  0023faf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0024928c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000d498 	.word	0x9000d498

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000d498 	.word	0x9000d498

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <__aeabi_uldivmod>:
90000380:	b953      	cbnz	r3, 90000398 <__aeabi_uldivmod+0x18>
90000382:	b94a      	cbnz	r2, 90000398 <__aeabi_uldivmod+0x18>
90000384:	2900      	cmp	r1, #0
90000386:	bf08      	it	eq
90000388:	2800      	cmpeq	r0, #0
9000038a:	bf1c      	itt	ne
9000038c:	f04f 31ff 	movne.w	r1, #4294967295
90000390:	f04f 30ff 	movne.w	r0, #4294967295
90000394:	f000 b988 	b.w	900006a8 <__aeabi_idiv0>
90000398:	f1ad 0c08 	sub.w	ip, sp, #8
9000039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003a0:	f000 f806 	bl	900003b0 <__udivmoddi4>
900003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ac:	b004      	add	sp, #16
900003ae:	4770      	bx	lr

900003b0 <__udivmoddi4>:
900003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003b4:	9d08      	ldr	r5, [sp, #32]
900003b6:	468e      	mov	lr, r1
900003b8:	4604      	mov	r4, r0
900003ba:	4688      	mov	r8, r1
900003bc:	2b00      	cmp	r3, #0
900003be:	d14a      	bne.n	90000456 <__udivmoddi4+0xa6>
900003c0:	428a      	cmp	r2, r1
900003c2:	4617      	mov	r7, r2
900003c4:	d962      	bls.n	9000048c <__udivmoddi4+0xdc>
900003c6:	fab2 f682 	clz	r6, r2
900003ca:	b14e      	cbz	r6, 900003e0 <__udivmoddi4+0x30>
900003cc:	f1c6 0320 	rsb	r3, r6, #32
900003d0:	fa01 f806 	lsl.w	r8, r1, r6
900003d4:	fa20 f303 	lsr.w	r3, r0, r3
900003d8:	40b7      	lsls	r7, r6
900003da:	ea43 0808 	orr.w	r8, r3, r8
900003de:	40b4      	lsls	r4, r6
900003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003e4:	fa1f fc87 	uxth.w	ip, r7
900003e8:	fbb8 f1fe 	udiv	r1, r8, lr
900003ec:	0c23      	lsrs	r3, r4, #16
900003ee:	fb0e 8811 	mls	r8, lr, r1, r8
900003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900003f6:	fb01 f20c 	mul.w	r2, r1, ip
900003fa:	429a      	cmp	r2, r3
900003fc:	d909      	bls.n	90000412 <__udivmoddi4+0x62>
900003fe:	18fb      	adds	r3, r7, r3
90000400:	f101 30ff 	add.w	r0, r1, #4294967295
90000404:	f080 80ea 	bcs.w	900005dc <__udivmoddi4+0x22c>
90000408:	429a      	cmp	r2, r3
9000040a:	f240 80e7 	bls.w	900005dc <__udivmoddi4+0x22c>
9000040e:	3902      	subs	r1, #2
90000410:	443b      	add	r3, r7
90000412:	1a9a      	subs	r2, r3, r2
90000414:	b2a3      	uxth	r3, r4
90000416:	fbb2 f0fe 	udiv	r0, r2, lr
9000041a:	fb0e 2210 	mls	r2, lr, r0, r2
9000041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000422:	fb00 fc0c 	mul.w	ip, r0, ip
90000426:	459c      	cmp	ip, r3
90000428:	d909      	bls.n	9000043e <__udivmoddi4+0x8e>
9000042a:	18fb      	adds	r3, r7, r3
9000042c:	f100 32ff 	add.w	r2, r0, #4294967295
90000430:	f080 80d6 	bcs.w	900005e0 <__udivmoddi4+0x230>
90000434:	459c      	cmp	ip, r3
90000436:	f240 80d3 	bls.w	900005e0 <__udivmoddi4+0x230>
9000043a:	443b      	add	r3, r7
9000043c:	3802      	subs	r0, #2
9000043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000442:	eba3 030c 	sub.w	r3, r3, ip
90000446:	2100      	movs	r1, #0
90000448:	b11d      	cbz	r5, 90000452 <__udivmoddi4+0xa2>
9000044a:	40f3      	lsrs	r3, r6
9000044c:	2200      	movs	r2, #0
9000044e:	e9c5 3200 	strd	r3, r2, [r5]
90000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000456:	428b      	cmp	r3, r1
90000458:	d905      	bls.n	90000466 <__udivmoddi4+0xb6>
9000045a:	b10d      	cbz	r5, 90000460 <__udivmoddi4+0xb0>
9000045c:	e9c5 0100 	strd	r0, r1, [r5]
90000460:	2100      	movs	r1, #0
90000462:	4608      	mov	r0, r1
90000464:	e7f5      	b.n	90000452 <__udivmoddi4+0xa2>
90000466:	fab3 f183 	clz	r1, r3
9000046a:	2900      	cmp	r1, #0
9000046c:	d146      	bne.n	900004fc <__udivmoddi4+0x14c>
9000046e:	4573      	cmp	r3, lr
90000470:	d302      	bcc.n	90000478 <__udivmoddi4+0xc8>
90000472:	4282      	cmp	r2, r0
90000474:	f200 8105 	bhi.w	90000682 <__udivmoddi4+0x2d2>
90000478:	1a84      	subs	r4, r0, r2
9000047a:	eb6e 0203 	sbc.w	r2, lr, r3
9000047e:	2001      	movs	r0, #1
90000480:	4690      	mov	r8, r2
90000482:	2d00      	cmp	r5, #0
90000484:	d0e5      	beq.n	90000452 <__udivmoddi4+0xa2>
90000486:	e9c5 4800 	strd	r4, r8, [r5]
9000048a:	e7e2      	b.n	90000452 <__udivmoddi4+0xa2>
9000048c:	2a00      	cmp	r2, #0
9000048e:	f000 8090 	beq.w	900005b2 <__udivmoddi4+0x202>
90000492:	fab2 f682 	clz	r6, r2
90000496:	2e00      	cmp	r6, #0
90000498:	f040 80a4 	bne.w	900005e4 <__udivmoddi4+0x234>
9000049c:	1a8a      	subs	r2, r1, r2
9000049e:	0c03      	lsrs	r3, r0, #16
900004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004a4:	b280      	uxth	r0, r0
900004a6:	b2bc      	uxth	r4, r7
900004a8:	2101      	movs	r1, #1
900004aa:	fbb2 fcfe 	udiv	ip, r2, lr
900004ae:	fb0e 221c 	mls	r2, lr, ip, r2
900004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004b6:	fb04 f20c 	mul.w	r2, r4, ip
900004ba:	429a      	cmp	r2, r3
900004bc:	d907      	bls.n	900004ce <__udivmoddi4+0x11e>
900004be:	18fb      	adds	r3, r7, r3
900004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004c4:	d202      	bcs.n	900004cc <__udivmoddi4+0x11c>
900004c6:	429a      	cmp	r2, r3
900004c8:	f200 80e0 	bhi.w	9000068c <__udivmoddi4+0x2dc>
900004cc:	46c4      	mov	ip, r8
900004ce:	1a9b      	subs	r3, r3, r2
900004d0:	fbb3 f2fe 	udiv	r2, r3, lr
900004d4:	fb0e 3312 	mls	r3, lr, r2, r3
900004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004dc:	fb02 f404 	mul.w	r4, r2, r4
900004e0:	429c      	cmp	r4, r3
900004e2:	d907      	bls.n	900004f4 <__udivmoddi4+0x144>
900004e4:	18fb      	adds	r3, r7, r3
900004e6:	f102 30ff 	add.w	r0, r2, #4294967295
900004ea:	d202      	bcs.n	900004f2 <__udivmoddi4+0x142>
900004ec:	429c      	cmp	r4, r3
900004ee:	f200 80ca 	bhi.w	90000686 <__udivmoddi4+0x2d6>
900004f2:	4602      	mov	r2, r0
900004f4:	1b1b      	subs	r3, r3, r4
900004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
900004fa:	e7a5      	b.n	90000448 <__udivmoddi4+0x98>
900004fc:	f1c1 0620 	rsb	r6, r1, #32
90000500:	408b      	lsls	r3, r1
90000502:	fa22 f706 	lsr.w	r7, r2, r6
90000506:	431f      	orrs	r7, r3
90000508:	fa0e f401 	lsl.w	r4, lr, r1
9000050c:	fa20 f306 	lsr.w	r3, r0, r6
90000510:	fa2e fe06 	lsr.w	lr, lr, r6
90000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000518:	4323      	orrs	r3, r4
9000051a:	fa00 f801 	lsl.w	r8, r0, r1
9000051e:	fa1f fc87 	uxth.w	ip, r7
90000522:	fbbe f0f9 	udiv	r0, lr, r9
90000526:	0c1c      	lsrs	r4, r3, #16
90000528:	fb09 ee10 	mls	lr, r9, r0, lr
9000052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000530:	fb00 fe0c 	mul.w	lr, r0, ip
90000534:	45a6      	cmp	lr, r4
90000536:	fa02 f201 	lsl.w	r2, r2, r1
9000053a:	d909      	bls.n	90000550 <__udivmoddi4+0x1a0>
9000053c:	193c      	adds	r4, r7, r4
9000053e:	f100 3aff 	add.w	sl, r0, #4294967295
90000542:	f080 809c 	bcs.w	9000067e <__udivmoddi4+0x2ce>
90000546:	45a6      	cmp	lr, r4
90000548:	f240 8099 	bls.w	9000067e <__udivmoddi4+0x2ce>
9000054c:	3802      	subs	r0, #2
9000054e:	443c      	add	r4, r7
90000550:	eba4 040e 	sub.w	r4, r4, lr
90000554:	fa1f fe83 	uxth.w	lr, r3
90000558:	fbb4 f3f9 	udiv	r3, r4, r9
9000055c:	fb09 4413 	mls	r4, r9, r3, r4
90000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000564:	fb03 fc0c 	mul.w	ip, r3, ip
90000568:	45a4      	cmp	ip, r4
9000056a:	d908      	bls.n	9000057e <__udivmoddi4+0x1ce>
9000056c:	193c      	adds	r4, r7, r4
9000056e:	f103 3eff 	add.w	lr, r3, #4294967295
90000572:	f080 8082 	bcs.w	9000067a <__udivmoddi4+0x2ca>
90000576:	45a4      	cmp	ip, r4
90000578:	d97f      	bls.n	9000067a <__udivmoddi4+0x2ca>
9000057a:	3b02      	subs	r3, #2
9000057c:	443c      	add	r4, r7
9000057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000582:	eba4 040c 	sub.w	r4, r4, ip
90000586:	fba0 ec02 	umull	lr, ip, r0, r2
9000058a:	4564      	cmp	r4, ip
9000058c:	4673      	mov	r3, lr
9000058e:	46e1      	mov	r9, ip
90000590:	d362      	bcc.n	90000658 <__udivmoddi4+0x2a8>
90000592:	d05f      	beq.n	90000654 <__udivmoddi4+0x2a4>
90000594:	b15d      	cbz	r5, 900005ae <__udivmoddi4+0x1fe>
90000596:	ebb8 0203 	subs.w	r2, r8, r3
9000059a:	eb64 0409 	sbc.w	r4, r4, r9
9000059e:	fa04 f606 	lsl.w	r6, r4, r6
900005a2:	fa22 f301 	lsr.w	r3, r2, r1
900005a6:	431e      	orrs	r6, r3
900005a8:	40cc      	lsrs	r4, r1
900005aa:	e9c5 6400 	strd	r6, r4, [r5]
900005ae:	2100      	movs	r1, #0
900005b0:	e74f      	b.n	90000452 <__udivmoddi4+0xa2>
900005b2:	fbb1 fcf2 	udiv	ip, r1, r2
900005b6:	0c01      	lsrs	r1, r0, #16
900005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005bc:	b280      	uxth	r0, r0
900005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005c2:	463b      	mov	r3, r7
900005c4:	4638      	mov	r0, r7
900005c6:	463c      	mov	r4, r7
900005c8:	46b8      	mov	r8, r7
900005ca:	46be      	mov	lr, r7
900005cc:	2620      	movs	r6, #32
900005ce:	fbb1 f1f7 	udiv	r1, r1, r7
900005d2:	eba2 0208 	sub.w	r2, r2, r8
900005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005da:	e766      	b.n	900004aa <__udivmoddi4+0xfa>
900005dc:	4601      	mov	r1, r0
900005de:	e718      	b.n	90000412 <__udivmoddi4+0x62>
900005e0:	4610      	mov	r0, r2
900005e2:	e72c      	b.n	9000043e <__udivmoddi4+0x8e>
900005e4:	f1c6 0220 	rsb	r2, r6, #32
900005e8:	fa2e f302 	lsr.w	r3, lr, r2
900005ec:	40b7      	lsls	r7, r6
900005ee:	40b1      	lsls	r1, r6
900005f0:	fa20 f202 	lsr.w	r2, r0, r2
900005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900005f8:	430a      	orrs	r2, r1
900005fa:	fbb3 f8fe 	udiv	r8, r3, lr
900005fe:	b2bc      	uxth	r4, r7
90000600:	fb0e 3318 	mls	r3, lr, r8, r3
90000604:	0c11      	lsrs	r1, r2, #16
90000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000060a:	fb08 f904 	mul.w	r9, r8, r4
9000060e:	40b0      	lsls	r0, r6
90000610:	4589      	cmp	r9, r1
90000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000616:	b280      	uxth	r0, r0
90000618:	d93e      	bls.n	90000698 <__udivmoddi4+0x2e8>
9000061a:	1879      	adds	r1, r7, r1
9000061c:	f108 3cff 	add.w	ip, r8, #4294967295
90000620:	d201      	bcs.n	90000626 <__udivmoddi4+0x276>
90000622:	4589      	cmp	r9, r1
90000624:	d81f      	bhi.n	90000666 <__udivmoddi4+0x2b6>
90000626:	eba1 0109 	sub.w	r1, r1, r9
9000062a:	fbb1 f9fe 	udiv	r9, r1, lr
9000062e:	fb09 f804 	mul.w	r8, r9, r4
90000632:	fb0e 1119 	mls	r1, lr, r9, r1
90000636:	b292      	uxth	r2, r2
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	4542      	cmp	r2, r8
9000063e:	d229      	bcs.n	90000694 <__udivmoddi4+0x2e4>
90000640:	18ba      	adds	r2, r7, r2
90000642:	f109 31ff 	add.w	r1, r9, #4294967295
90000646:	d2c4      	bcs.n	900005d2 <__udivmoddi4+0x222>
90000648:	4542      	cmp	r2, r8
9000064a:	d2c2      	bcs.n	900005d2 <__udivmoddi4+0x222>
9000064c:	f1a9 0102 	sub.w	r1, r9, #2
90000650:	443a      	add	r2, r7
90000652:	e7be      	b.n	900005d2 <__udivmoddi4+0x222>
90000654:	45f0      	cmp	r8, lr
90000656:	d29d      	bcs.n	90000594 <__udivmoddi4+0x1e4>
90000658:	ebbe 0302 	subs.w	r3, lr, r2
9000065c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000660:	3801      	subs	r0, #1
90000662:	46e1      	mov	r9, ip
90000664:	e796      	b.n	90000594 <__udivmoddi4+0x1e4>
90000666:	eba7 0909 	sub.w	r9, r7, r9
9000066a:	4449      	add	r1, r9
9000066c:	f1a8 0c02 	sub.w	ip, r8, #2
90000670:	fbb1 f9fe 	udiv	r9, r1, lr
90000674:	fb09 f804 	mul.w	r8, r9, r4
90000678:	e7db      	b.n	90000632 <__udivmoddi4+0x282>
9000067a:	4673      	mov	r3, lr
9000067c:	e77f      	b.n	9000057e <__udivmoddi4+0x1ce>
9000067e:	4650      	mov	r0, sl
90000680:	e766      	b.n	90000550 <__udivmoddi4+0x1a0>
90000682:	4608      	mov	r0, r1
90000684:	e6fd      	b.n	90000482 <__udivmoddi4+0xd2>
90000686:	443b      	add	r3, r7
90000688:	3a02      	subs	r2, #2
9000068a:	e733      	b.n	900004f4 <__udivmoddi4+0x144>
9000068c:	f1ac 0c02 	sub.w	ip, ip, #2
90000690:	443b      	add	r3, r7
90000692:	e71c      	b.n	900004ce <__udivmoddi4+0x11e>
90000694:	4649      	mov	r1, r9
90000696:	e79c      	b.n	900005d2 <__udivmoddi4+0x222>
90000698:	eba1 0109 	sub.w	r1, r1, r9
9000069c:	46c4      	mov	ip, r8
9000069e:	fbb1 f9fe 	udiv	r9, r1, lr
900006a2:	fb09 f804 	mul.w	r8, r9, r4
900006a6:	e7c4      	b.n	90000632 <__udivmoddi4+0x282>

900006a8 <__aeabi_idiv0>:
900006a8:	4770      	bx	lr
900006aa:	bf00      	nop

900006ac <clearInput>:
#include "appLogic.h"


void clearInput(AppContext *ctx) {
900006ac:	b480      	push	{r7}
900006ae:	b083      	sub	sp, #12
900006b0:	af00      	add	r7, sp, #0
900006b2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
900006b4:	687b      	ldr	r3, [r7, #4]
900006b6:	2200      	movs	r2, #0
900006b8:	809a      	strh	r2, [r3, #4]
}
900006ba:	bf00      	nop
900006bc:	370c      	adds	r7, #12
900006be:	46bd      	mov	sp, r7
900006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006c4:	4770      	bx	lr

900006c6 <clearVoltage>:

void clearVoltage(AppContext *ctx) {
900006c6:	b480      	push	{r7}
900006c8:	b083      	sub	sp, #12
900006ca:	af00      	add	r7, sp, #0
900006cc:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
900006ce:	687b      	ldr	r3, [r7, #4]
900006d0:	2200      	movs	r2, #0
900006d2:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
900006d4:	687b      	ldr	r3, [r7, #4]
900006d6:	2200      	movs	r2, #0
900006d8:	719a      	strb	r2, [r3, #6]
}
900006da:	bf00      	nop
900006dc:	370c      	adds	r7, #12
900006de:	46bd      	mov	sp, r7
900006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006e4:	4770      	bx	lr
	...

900006e8 <backspace>:

void backspace(AppContext *ctx) {
900006e8:	b480      	push	{r7}
900006ea:	b083      	sub	sp, #12
900006ec:	af00      	add	r7, sp, #0
900006ee:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
900006f0:	687b      	ldr	r3, [r7, #4]
900006f2:	889b      	ldrh	r3, [r3, #4]
900006f4:	4a06      	ldr	r2, [pc, #24]	@ (90000710 <backspace+0x28>)
900006f6:	fba2 2303 	umull	r2, r3, r2, r3
900006fa:	08db      	lsrs	r3, r3, #3
900006fc:	b29a      	uxth	r2, r3
900006fe:	687b      	ldr	r3, [r7, #4]
90000700:	809a      	strh	r2, [r3, #4]
}
90000702:	bf00      	nop
90000704:	370c      	adds	r7, #12
90000706:	46bd      	mov	sp, r7
90000708:	f85d 7b04 	ldr.w	r7, [sp], #4
9000070c:	4770      	bx	lr
9000070e:	bf00      	nop
90000710:	cccccccd 	.word	0xcccccccd

90000714 <stopPWM>:

void stopPWM(AppContext *ctx) {
90000714:	b480      	push	{r7}
90000716:	b083      	sub	sp, #12
90000718:	af00      	add	r7, sp, #0
9000071a:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = false;
9000071c:	687b      	ldr	r3, [r7, #4]
9000071e:	2200      	movs	r2, #0
90000720:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
  // TODO callbakc
}
90000722:	bf00      	nop
90000724:	370c      	adds	r7, #12
90000726:	46bd      	mov	sp, r7
90000728:	f85d 7b04 	ldr.w	r7, [sp], #4
9000072c:	4770      	bx	lr

9000072e <startPWM>:

void startPWM(AppContext *ctx) {
9000072e:	b480      	push	{r7}
90000730:	b083      	sub	sp, #12
90000732:	af00      	add	r7, sp, #0
90000734:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = true;
90000736:	687b      	ldr	r3, [r7, #4]
90000738:	2201      	movs	r2, #1
9000073a:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ctx->voltage / 4);
  // TODO callbakc
}
9000073c:	bf00      	nop
9000073e:	370c      	adds	r7, #12
90000740:	46bd      	mov	sp, r7
90000742:	f85d 7b04 	ldr.w	r7, [sp], #4
90000746:	4770      	bx	lr

90000748 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
90000748:	b480      	push	{r7}
9000074a:	b083      	sub	sp, #12
9000074c:	af00      	add	r7, sp, #0
9000074e:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
90000750:	687b      	ldr	r3, [r7, #4]
90000752:	2201      	movs	r2, #1
90000754:	701a      	strb	r2, [r3, #0]
}
90000756:	bf00      	nop
90000758:	370c      	adds	r7, #12
9000075a:	46bd      	mov	sp, r7
9000075c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000760:	4770      	bx	lr

90000762 <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
90000762:	b480      	push	{r7}
90000764:	b083      	sub	sp, #12
90000766:	af00      	add	r7, sp, #0
90000768:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F1;
9000076a:	687b      	ldr	r3, [r7, #4]
9000076c:	2200      	movs	r2, #0
9000076e:	701a      	strb	r2, [r3, #0]
}
90000770:	bf00      	nop
90000772:	370c      	adds	r7, #12
90000774:	46bd      	mov	sp, r7
90000776:	f85d 7b04 	ldr.w	r7, [sp], #4
9000077a:	4770      	bx	lr

9000077c <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
9000077c:	b580      	push	{r7, lr}
9000077e:	b082      	sub	sp, #8
90000780:	af00      	add	r7, sp, #0
90000782:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
90000784:	687b      	ldr	r3, [r7, #4]
90000786:	889b      	ldrh	r3, [r3, #4]
90000788:	2b4f      	cmp	r3, #79	@ 0x4f
9000078a:	d904      	bls.n	90000796 <validateAndSetVoltage+0x1a>
9000078c:	687b      	ldr	r3, [r7, #4]
9000078e:	889b      	ldrh	r3, [r3, #4]
90000790:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000794:	d90c      	bls.n	900007b0 <validateAndSetVoltage+0x34>
  {
    strcpy(ctx->message, "Input voltage has to be in range 80 - 400. Resetting, try again!");
90000796:	687b      	ldr	r3, [r7, #4]
90000798:	3308      	adds	r3, #8
9000079a:	4a10      	ldr	r2, [pc, #64]	@ (900007dc <validateAndSetVoltage+0x60>)
9000079c:	4618      	mov	r0, r3
9000079e:	4611      	mov	r1, r2
900007a0:	2341      	movs	r3, #65	@ 0x41
900007a2:	461a      	mov	r2, r3
900007a4:	f00c f879 	bl	9000c89a <memcpy>
    clearInput(ctx);
900007a8:	6878      	ldr	r0, [r7, #4]
900007aa:	f7ff ff7f 	bl	900006ac <clearInput>
    return;
900007ae:	e012      	b.n	900007d6 <validateAndSetVoltage+0x5a>
  }
  ctx->isVoltageEntered = true;
900007b0:	687b      	ldr	r3, [r7, #4]
900007b2:	2201      	movs	r2, #1
900007b4:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
900007b6:	687b      	ldr	r3, [r7, #4]
900007b8:	889a      	ldrh	r2, [r3, #4]
900007ba:	687b      	ldr	r3, [r7, #4]
900007bc:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
900007be:	687b      	ldr	r3, [r7, #4]
900007c0:	2200      	movs	r2, #0
900007c2:	809a      	strh	r2, [r3, #4]
  sprintf(ctx->message, "Voltage %d has been successfully entered", ctx->voltage);
900007c4:	687b      	ldr	r3, [r7, #4]
900007c6:	f103 0008 	add.w	r0, r3, #8
900007ca:	687b      	ldr	r3, [r7, #4]
900007cc:	885b      	ldrh	r3, [r3, #2]
900007ce:	461a      	mov	r2, r3
900007d0:	4903      	ldr	r1, [pc, #12]	@ (900007e0 <validateAndSetVoltage+0x64>)
900007d2:	f00b fedd 	bl	9000c590 <siprintf>

}
900007d6:	3708      	adds	r7, #8
900007d8:	46bd      	mov	sp, r7
900007da:	bd80      	pop	{r7, pc}
900007dc:	9000d4b0 	.word	0x9000d4b0
900007e0:	9000d4f4 	.word	0x9000d4f4

900007e4 <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key) {
900007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
900007e6:	b085      	sub	sp, #20
900007e8:	af00      	add	r7, sp, #0
900007ea:	6078      	str	r0, [r7, #4]
900007ec:	460b      	mov	r3, r1
900007ee:	70fb      	strb	r3, [r7, #3]
  uint8_t digit = key - '0';
900007f0:	78fb      	ldrb	r3, [r7, #3]
900007f2:	3b30      	subs	r3, #48	@ 0x30
900007f4:	73fb      	strb	r3, [r7, #15]
  ctx->inputValue = ctx->inputValue * 10 + digit;
900007f6:	687b      	ldr	r3, [r7, #4]
900007f8:	889b      	ldrh	r3, [r3, #4]
900007fa:	461a      	mov	r2, r3
900007fc:	0092      	lsls	r2, r2, #2
900007fe:	4413      	add	r3, r2
90000800:	005b      	lsls	r3, r3, #1
90000802:	b29a      	uxth	r2, r3
90000804:	7bfb      	ldrb	r3, [r7, #15]
90000806:	b29b      	uxth	r3, r3
90000808:	4413      	add	r3, r2
9000080a:	b29a      	uxth	r2, r3
9000080c:	687b      	ldr	r3, [r7, #4]
9000080e:	809a      	strh	r2, [r3, #4]
  if (ctx->inputValue > 400) {
90000810:	687b      	ldr	r3, [r7, #4]
90000812:	889b      	ldrh	r3, [r3, #4]
90000814:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000818:	d91c      	bls.n	90000854 <updateInput+0x70>
    strcpy(ctx->message, "Input set too high, resetting. Try again");
9000081a:	687b      	ldr	r3, [r7, #4]
9000081c:	3308      	adds	r3, #8
9000081e:	4a0f      	ldr	r2, [pc, #60]	@ (9000085c <updateInput+0x78>)
90000820:	4614      	mov	r4, r2
90000822:	469c      	mov	ip, r3
90000824:	f104 0e20 	add.w	lr, r4, #32
90000828:	4665      	mov	r5, ip
9000082a:	4626      	mov	r6, r4
9000082c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
9000082e:	6028      	str	r0, [r5, #0]
90000830:	6069      	str	r1, [r5, #4]
90000832:	60aa      	str	r2, [r5, #8]
90000834:	60eb      	str	r3, [r5, #12]
90000836:	3410      	adds	r4, #16
90000838:	f10c 0c10 	add.w	ip, ip, #16
9000083c:	4574      	cmp	r4, lr
9000083e:	d1f3      	bne.n	90000828 <updateInput+0x44>
90000840:	4662      	mov	r2, ip
90000842:	4623      	mov	r3, r4
90000844:	cb03      	ldmia	r3!, {r0, r1}
90000846:	6010      	str	r0, [r2, #0]
90000848:	6051      	str	r1, [r2, #4]
9000084a:	781b      	ldrb	r3, [r3, #0]
9000084c:	7213      	strb	r3, [r2, #8]
    clearInput(ctx);
9000084e:	6878      	ldr	r0, [r7, #4]
90000850:	f7ff ff2c 	bl	900006ac <clearInput>
  }
}
90000854:	bf00      	nop
90000856:	3714      	adds	r7, #20
90000858:	46bd      	mov	sp, r7
9000085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000085c:	9000d520 	.word	0x9000d520

90000860 <handle_event>:

bool handle_event(AppContext *ctx, KeyboardButton key)
{
90000860:	b580      	push	{r7, lr}
90000862:	b082      	sub	sp, #8
90000864:	af00      	add	r7, sp, #0
90000866:	6078      	str	r0, [r7, #4]
90000868:	460b      	mov	r3, r1
9000086a:	70fb      	strb	r3, [r7, #3]
  if (key == KEY_NULL) return false;;
9000086c:	78fb      	ldrb	r3, [r7, #3]
9000086e:	2b4e      	cmp	r3, #78	@ 0x4e
90000870:	d101      	bne.n	90000876 <handle_event+0x16>
90000872:	2300      	movs	r3, #0
90000874:	e051      	b.n	9000091a <handle_event+0xba>
  strcpy(ctx->message, "");
90000876:	687b      	ldr	r3, [r7, #4]
90000878:	3308      	adds	r3, #8
9000087a:	2200      	movs	r2, #0
9000087c:	701a      	strb	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
9000087e:	687b      	ldr	r3, [r7, #4]
90000880:	781b      	ldrb	r3, [r3, #0]
90000882:	2b00      	cmp	r3, #0
90000884:	d13e      	bne.n	90000904 <handle_event+0xa4>
	if (ctx->isPwmRunning == true)
90000886:	687b      	ldr	r3, [r7, #4]
90000888:	79db      	ldrb	r3, [r3, #7]
9000088a:	2b00      	cmp	r3, #0
9000088c:	d007      	beq.n	9000089e <handle_event+0x3e>
	{
	  if (key == KEY_Stop) stopPWM(ctx);
9000088e:	78fb      	ldrb	r3, [r7, #3]
90000890:	2b73      	cmp	r3, #115	@ 0x73
90000892:	d102      	bne.n	9000089a <handle_event+0x3a>
90000894:	6878      	ldr	r0, [r7, #4]
90000896:	f7ff ff3d 	bl	90000714 <stopPWM>
	  return false; // when PWM is running, we can only press the "STOP" button
9000089a:	2300      	movs	r3, #0
9000089c:	e03d      	b.n	9000091a <handle_event+0xba>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
9000089e:	687b      	ldr	r3, [r7, #4]
900008a0:	799b      	ldrb	r3, [r3, #6]
900008a2:	2b00      	cmp	r3, #0
900008a4:	d005      	beq.n	900008b2 <handle_event+0x52>
	{
	  if (key == KEY_Start) startPWM(ctx);
900008a6:	78fb      	ldrb	r3, [r7, #3]
900008a8:	2b53      	cmp	r3, #83	@ 0x53
900008aa:	d102      	bne.n	900008b2 <handle_event+0x52>
900008ac:	6878      	ldr	r0, [r7, #4]
900008ae:	f7ff ff3e 	bl	9000072e <startPWM>
	}

	if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key);
900008b2:	78fb      	ldrb	r3, [r7, #3]
900008b4:	2b2f      	cmp	r3, #47	@ 0x2f
900008b6:	d907      	bls.n	900008c8 <handle_event+0x68>
900008b8:	78fb      	ldrb	r3, [r7, #3]
900008ba:	2b39      	cmp	r3, #57	@ 0x39
900008bc:	d804      	bhi.n	900008c8 <handle_event+0x68>
900008be:	78fb      	ldrb	r3, [r7, #3]
900008c0:	4619      	mov	r1, r3
900008c2:	6878      	ldr	r0, [r7, #4]
900008c4:	f7ff ff8e 	bl	900007e4 <updateInput>
	if (key == KEY_Clear) clearVoltage(ctx);
900008c8:	78fb      	ldrb	r3, [r7, #3]
900008ca:	2b63      	cmp	r3, #99	@ 0x63
900008cc:	d102      	bne.n	900008d4 <handle_event+0x74>
900008ce:	6878      	ldr	r0, [r7, #4]
900008d0:	f7ff fef9 	bl	900006c6 <clearVoltage>
	if (key == KEY_Enter) validateAndSetVoltage(ctx);
900008d4:	78fb      	ldrb	r3, [r7, #3]
900008d6:	2b65      	cmp	r3, #101	@ 0x65
900008d8:	d102      	bne.n	900008e0 <handle_event+0x80>
900008da:	6878      	ldr	r0, [r7, #4]
900008dc:	f7ff ff4e 	bl	9000077c <validateAndSetVoltage>
	if (key == KEY_BkSp) backspace(ctx);
900008e0:	78fb      	ldrb	r3, [r7, #3]
900008e2:	2b62      	cmp	r3, #98	@ 0x62
900008e4:	d102      	bne.n	900008ec <handle_event+0x8c>
900008e6:	6878      	ldr	r0, [r7, #4]
900008e8:	f7ff fefe 	bl	900006e8 <backspace>
	if (key == KEY_F2) setSTATE_F2(ctx);
900008ec:	78fb      	ldrb	r3, [r7, #3]
900008ee:	2b40      	cmp	r3, #64	@ 0x40
900008f0:	d102      	bne.n	900008f8 <handle_event+0x98>
900008f2:	6878      	ldr	r0, [r7, #4]
900008f4:	f7ff ff28 	bl	90000748 <setSTATE_F2>
	if (key == KEY_ESC) clearInput(ctx);
900008f8:	78fb      	ldrb	r3, [r7, #3]
900008fa:	2b60      	cmp	r3, #96	@ 0x60
900008fc:	d102      	bne.n	90000904 <handle_event+0xa4>
900008fe:	6878      	ldr	r0, [r7, #4]
90000900:	f7ff fed4 	bl	900006ac <clearInput>
  }

  if (ctx->currentState == STATE_F2) {
90000904:	687b      	ldr	r3, [r7, #4]
90000906:	781b      	ldrb	r3, [r3, #0]
90000908:	2b01      	cmp	r3, #1
9000090a:	d105      	bne.n	90000918 <handle_event+0xb8>
	if (key == KEY_F1) setSTATE_F1(ctx);
9000090c:	78fb      	ldrb	r3, [r7, #3]
9000090e:	2b21      	cmp	r3, #33	@ 0x21
90000910:	d102      	bne.n	90000918 <handle_event+0xb8>
90000912:	6878      	ldr	r0, [r7, #4]
90000914:	f7ff ff25 	bl	90000762 <setSTATE_F1>
  }
  return true;
90000918:	2301      	movs	r3, #1
}
9000091a:	4618      	mov	r0, r3
9000091c:	3708      	adds	r7, #8
9000091e:	46bd      	mov	sp, r7
90000920:	bd80      	pop	{r7, pc}

90000922 <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx) {
90000922:	b480      	push	{r7}
90000924:	b083      	sub	sp, #12
90000926:	af00      	add	r7, sp, #0
90000928:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_F1;
9000092a:	687b      	ldr	r3, [r7, #4]
9000092c:	2200      	movs	r2, #0
9000092e:	701a      	strb	r2, [r3, #0]
	ctx->isVoltageEntered = false;
90000930:	687b      	ldr	r3, [r7, #4]
90000932:	2200      	movs	r2, #0
90000934:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
90000936:	687b      	ldr	r3, [r7, #4]
90000938:	2200      	movs	r2, #0
9000093a:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
9000093c:	687b      	ldr	r3, [r7, #4]
9000093e:	2200      	movs	r2, #0
90000940:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
90000942:	687b      	ldr	r3, [r7, #4]
90000944:	2200      	movs	r2, #0
90000946:	809a      	strh	r2, [r3, #4]
}
90000948:	bf00      	nop
9000094a:	370c      	adds	r7, #12
9000094c:	46bd      	mov	sp, r7
9000094e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000952:	4770      	bx	lr

90000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90000954:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000990 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
90000958:	f002 fbd4 	bl	90003104 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
9000095c:	f002 fb70 	bl	90003040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000960:	480c      	ldr	r0, [pc, #48]	@ (90000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
90000962:	490d      	ldr	r1, [pc, #52]	@ (90000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90000964:	4a0d      	ldr	r2, [pc, #52]	@ (9000099c <LoopFillZerobss+0x1a>)
  movs r3, #0
90000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000968:	e002      	b.n	90000970 <LoopCopyDataInit>

9000096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
9000096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
9000096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
9000096e:	3304      	adds	r3, #4

90000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000974:	d3f9      	bcc.n	9000096a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000976:	4a0a      	ldr	r2, [pc, #40]	@ (900009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000978:	4c0a      	ldr	r4, [pc, #40]	@ (900009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
9000097a:	2300      	movs	r3, #0
  b LoopFillZerobss
9000097c:	e001      	b.n	90000982 <LoopFillZerobss>

9000097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
9000097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000980:	3204      	adds	r2, #4

90000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000984:	d3fb      	bcc.n	9000097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000986:	f00b ff61 	bl	9000c84c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
9000098a:	f000 f827 	bl	900009dc <main>
  bx  lr
9000098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000998:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
9000099c:	9000fb88 	.word	0x9000fb88
  ldr r2, =_sbss
900009a0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
900009a4:	20001498 	.word	0x20001498

900009a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900009a8:	e7fe      	b.n	900009a8 <ADC3_IRQHandler>
	...

900009ac <__io_putchar>:
static void CPU_CACHE_Enable(void);
static void CPU_CACHE_Disable(void);
static void MPU_Config(void);
static void MX_USART3_UART_Init(void);

int __io_putchar(int ch) {
900009ac:	b580      	push	{r7, lr}
900009ae:	b082      	sub	sp, #8
900009b0:	af00      	add	r7, sp, #0
900009b2:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
900009b4:	1d39      	adds	r1, r7, #4
900009b6:	f04f 33ff 	mov.w	r3, #4294967295
900009ba:	2201      	movs	r2, #1
900009bc:	4806      	ldr	r0, [pc, #24]	@ (900009d8 <__io_putchar+0x2c>)
900009be:	f009 f95b 	bl	90009c78 <HAL_UART_Transmit>
900009c2:	4603      	mov	r3, r0
900009c4:	2b00      	cmp	r3, #0
900009c6:	d002      	beq.n	900009ce <__io_putchar+0x22>
    return -1;
900009c8:	f04f 33ff 	mov.w	r3, #4294967295
900009cc:	e000      	b.n	900009d0 <__io_putchar+0x24>
  }
  return ch;
900009ce:	687b      	ldr	r3, [r7, #4]
}
900009d0:	4618      	mov	r0, r3
900009d2:	3708      	adds	r7, #8
900009d4:	46bd      	mov	sp, r7
900009d6:	bd80      	pop	{r7, pc}
900009d8:	200000ec 	.word	0x200000ec

900009dc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
900009dc:	b580      	push	{r7, lr}
900009de:	b094      	sub	sp, #80	@ 0x50
900009e0:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
900009e2:	f000 fa89 	bl	90000ef8 <MPU_Config>
  CPU_CACHE_Enable();
900009e6:	f000 f9f5 	bl	90000dd4 <CPU_CACHE_Enable>
  HAL_Init();
900009ea:	f002 fba3 	bl	90003134 <HAL_Init>
  SystemClock_Config();
900009ee:	f000 f8ed 	bl	90000bcc <SystemClock_Config>
  MX_USART3_UART_Init();
900009f2:	f000 f831 	bl	90000a58 <MX_USART3_UART_Init>
  
  printf("Starting...\r\n");
900009f6:	4817      	ldr	r0, [pc, #92]	@ (90000a54 <main+0x78>)
900009f8:	f00b fdc2 	bl	9000c580 <puts>

  AppContext ctx;
  InitializeAppContext(&ctx);
900009fc:	463b      	mov	r3, r7
900009fe:	4618      	mov	r0, r3
90000a00:	f7ff ff8f 	bl	90000922 <InitializeAppContext>

  InitializeLcd();
90000a04:	f000 fc18 	bl	90001238 <InitializeLcd>
  UartClearScreen();
90000a08:	f000 fc54 	bl	900012b4 <UartClearScreen>

  InitFlexiKeyboard(); // has to be AFTER InitializeLcd, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000a0c:	f00a ff16 	bl	9000b83c <InitFlexiKeyboard>

  while (1)
  {
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
90000a10:	f00a feaa 	bl	9000b768 <ReadFlexiKeyboard>
90000a14:	4603      	mov	r3, r0
90000a16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  bool ctxChanged = handle_event(&ctx, key);
90000a1a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
90000a1e:	463b      	mov	r3, r7
90000a20:	4611      	mov	r1, r2
90000a22:	4618      	mov	r0, r3
90000a24:	f7ff ff1c 	bl	90000860 <handle_event>
90000a28:	4603      	mov	r3, r0
90000a2a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	  if (!ctxChanged) continue;
90000a2e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
90000a32:	f083 0301 	eor.w	r3, r3, #1
90000a36:	b2db      	uxtb	r3, r3
90000a38:	2b00      	cmp	r3, #0
90000a3a:	d108      	bne.n	90000a4e <main+0x72>
	  UartRenderState(&ctx);
90000a3c:	463b      	mov	r3, r7
90000a3e:	4618      	mov	r0, r3
90000a40:	f000 fc46 	bl	900012d0 <UartRenderState>
	  DisplayRenderState(&ctx);
90000a44:	463b      	mov	r3, r7
90000a46:	4618      	mov	r0, r3
90000a48:	f000 fc9c 	bl	90001384 <DisplayRenderState>
90000a4c:	e7e0      	b.n	90000a10 <main+0x34>
	  if (!ctxChanged) continue;
90000a4e:	bf00      	nop
  {
90000a50:	e7de      	b.n	90000a10 <main+0x34>
90000a52:	bf00      	nop
90000a54:	9000d54c 	.word	0x9000d54c

90000a58 <MX_USART3_UART_Init>:
  }
}

static void MX_USART3_UART_Init(void)
{
90000a58:	b580      	push	{r7, lr}
90000a5a:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000a5c:	4b22      	ldr	r3, [pc, #136]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a5e:	4a23      	ldr	r2, [pc, #140]	@ (90000aec <MX_USART3_UART_Init+0x94>)
90000a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000a62:	4b21      	ldr	r3, [pc, #132]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000a6a:	4b1f      	ldr	r3, [pc, #124]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a6c:	2200      	movs	r2, #0
90000a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000a70:	4b1d      	ldr	r3, [pc, #116]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a72:	2200      	movs	r2, #0
90000a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000a76:	4b1c      	ldr	r3, [pc, #112]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a78:	2200      	movs	r2, #0
90000a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a7e:	220c      	movs	r2, #12
90000a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000a82:	4b19      	ldr	r3, [pc, #100]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a84:	2200      	movs	r2, #0
90000a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000a88:	4b17      	ldr	r3, [pc, #92]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a8a:	2200      	movs	r2, #0
90000a8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000a8e:	4b16      	ldr	r3, [pc, #88]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a90:	2200      	movs	r2, #0
90000a92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000a94:	4b14      	ldr	r3, [pc, #80]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a96:	2200      	movs	r2, #0
90000a98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000a9a:	4b13      	ldr	r3, [pc, #76]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a9c:	2200      	movs	r2, #0
90000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000aa0:	4811      	ldr	r0, [pc, #68]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000aa2:	f009 f899 	bl	90009bd8 <HAL_UART_Init>
90000aa6:	4603      	mov	r3, r0
90000aa8:	2b00      	cmp	r3, #0
90000aaa:	d001      	beq.n	90000ab0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000aac:	f000 f88a 	bl	90000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ab0:	2100      	movs	r1, #0
90000ab2:	480d      	ldr	r0, [pc, #52]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000ab4:	f00a f92f 	bl	9000ad16 <HAL_UARTEx_SetTxFifoThreshold>
90000ab8:	4603      	mov	r3, r0
90000aba:	2b00      	cmp	r3, #0
90000abc:	d001      	beq.n	90000ac2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000abe:	f000 f881 	bl	90000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ac2:	2100      	movs	r1, #0
90000ac4:	4808      	ldr	r0, [pc, #32]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000ac6:	f00a f964 	bl	9000ad92 <HAL_UARTEx_SetRxFifoThreshold>
90000aca:	4603      	mov	r3, r0
90000acc:	2b00      	cmp	r3, #0
90000ace:	d001      	beq.n	90000ad4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000ad0:	f000 f878 	bl	90000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000ad4:	4804      	ldr	r0, [pc, #16]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000ad6:	f00a f8e5 	bl	9000aca4 <HAL_UARTEx_DisableFifoMode>
90000ada:	4603      	mov	r3, r0
90000adc:	2b00      	cmp	r3, #0
90000ade:	d001      	beq.n	90000ae4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000ae0:	f000 f870 	bl	90000bc4 <Error_Handler>
  }
}
90000ae4:	bf00      	nop
90000ae6:	bd80      	pop	{r7, pc}
90000ae8:	200000ec 	.word	0x200000ec
90000aec:	40004800 	.word	0x40004800

90000af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000af0:	b580      	push	{r7, lr}
90000af2:	b0ba      	sub	sp, #232	@ 0xe8
90000af4:	af00      	add	r7, sp, #0
90000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000af8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000afc:	2200      	movs	r2, #0
90000afe:	601a      	str	r2, [r3, #0]
90000b00:	605a      	str	r2, [r3, #4]
90000b02:	609a      	str	r2, [r3, #8]
90000b04:	60da      	str	r2, [r3, #12]
90000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000b08:	f107 0310 	add.w	r3, r7, #16
90000b0c:	22c0      	movs	r2, #192	@ 0xc0
90000b0e:	2100      	movs	r1, #0
90000b10:	4618      	mov	r0, r3
90000b12:	f00b fe37 	bl	9000c784 <memset>
  if(huart->Instance==USART3)
90000b16:	687b      	ldr	r3, [r7, #4]
90000b18:	681b      	ldr	r3, [r3, #0]
90000b1a:	4a27      	ldr	r2, [pc, #156]	@ (90000bb8 <HAL_UART_MspInit+0xc8>)
90000b1c:	4293      	cmp	r3, r2
90000b1e:	d146      	bne.n	90000bae <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000b20:	f04f 0202 	mov.w	r2, #2
90000b24:	f04f 0300 	mov.w	r3, #0
90000b28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000b2c:	2300      	movs	r3, #0
90000b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000b32:	f107 0310 	add.w	r3, r7, #16
90000b36:	4618      	mov	r0, r3
90000b38:	f007 f818 	bl	90007b6c <HAL_RCCEx_PeriphCLKConfig>
90000b3c:	4603      	mov	r3, r0
90000b3e:	2b00      	cmp	r3, #0
90000b40:	d001      	beq.n	90000b46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000b42:	f000 f83f 	bl	90000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000b46:	4b1d      	ldr	r3, [pc, #116]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000b4c:	4a1b      	ldr	r2, [pc, #108]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000b52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000b56:	4b19      	ldr	r3, [pc, #100]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000b60:	60fb      	str	r3, [r7, #12]
90000b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000b64:	4b15      	ldr	r3, [pc, #84]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b6a:	4a14      	ldr	r2, [pc, #80]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b6c:	f043 0302 	orr.w	r3, r3, #2
90000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000b74:	4b11      	ldr	r3, [pc, #68]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b7a:	f003 0302 	and.w	r3, r3, #2
90000b7e:	60bb      	str	r3, [r7, #8]
90000b80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000b82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000b86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b8a:	2302      	movs	r3, #2
90000b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b90:	2300      	movs	r3, #0
90000b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b96:	2300      	movs	r3, #0
90000b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000b9c:	2307      	movs	r3, #7
90000b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000ba2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000ba6:	4619      	mov	r1, r3
90000ba8:	4805      	ldr	r0, [pc, #20]	@ (90000bc0 <HAL_UART_MspInit+0xd0>)
90000baa:	f002 fffb 	bl	90003ba4 <HAL_GPIO_Init>
  }
}
90000bae:	bf00      	nop
90000bb0:	37e8      	adds	r7, #232	@ 0xe8
90000bb2:	46bd      	mov	sp, r7
90000bb4:	bd80      	pop	{r7, pc}
90000bb6:	bf00      	nop
90000bb8:	40004800 	.word	0x40004800
90000bbc:	58024400 	.word	0x58024400
90000bc0:	58020400 	.word	0x58020400

90000bc4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000bc4:	b480      	push	{r7}
90000bc6:	af00      	add	r7, sp, #0
  while(1)
90000bc8:	bf00      	nop
90000bca:	e7fd      	b.n	90000bc8 <Error_Handler+0x4>

90000bcc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000bcc:	b580      	push	{r7, lr}
90000bce:	b0ce      	sub	sp, #312	@ 0x138
90000bd0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000bd2:	2300      	movs	r3, #0
90000bd4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000bd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000bdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000be0:	2200      	movs	r2, #0
90000be2:	601a      	str	r2, [r3, #0]
90000be4:	4b78      	ldr	r3, [pc, #480]	@ (90000dc8 <SystemClock_Config+0x1fc>)
90000be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000be8:	4a77      	ldr	r2, [pc, #476]	@ (90000dc8 <SystemClock_Config+0x1fc>)
90000bea:	f023 0301 	bic.w	r3, r3, #1
90000bee:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000bf0:	4b75      	ldr	r3, [pc, #468]	@ (90000dc8 <SystemClock_Config+0x1fc>)
90000bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000bf4:	f003 0201 	and.w	r2, r3, #1
90000bf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000bfc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c00:	601a      	str	r2, [r3, #0]
90000c02:	4b72      	ldr	r3, [pc, #456]	@ (90000dcc <SystemClock_Config+0x200>)
90000c04:	699b      	ldr	r3, [r3, #24]
90000c06:	4a71      	ldr	r2, [pc, #452]	@ (90000dcc <SystemClock_Config+0x200>)
90000c08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000c0c:	6193      	str	r3, [r2, #24]
90000c0e:	4b6f      	ldr	r3, [pc, #444]	@ (90000dcc <SystemClock_Config+0x200>)
90000c10:	699b      	ldr	r3, [r3, #24]
90000c12:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000c16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c1a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c1e:	601a      	str	r2, [r3, #0]
90000c20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c28:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000c2a:	bf00      	nop
90000c2c:	4b67      	ldr	r3, [pc, #412]	@ (90000dcc <SystemClock_Config+0x200>)
90000c2e:	699b      	ldr	r3, [r3, #24]
90000c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000c38:	d1f8      	bne.n	90000c2c <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000c3a:	2301      	movs	r3, #1
90000c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000c40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000c44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000c48:	2300      	movs	r3, #0
90000c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000c4e:	2300      	movs	r3, #0
90000c50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000c54:	2302      	movs	r3, #2
90000c56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000c5a:	2302      	movs	r3, #2
90000c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000c60:	2305      	movs	r3, #5
90000c62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000c66:	23a0      	movs	r3, #160	@ 0xa0
90000c68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000c6c:	2300      	movs	r3, #0
90000c6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000c72:	2302      	movs	r3, #2
90000c74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000c78:	2302      	movs	r3, #2
90000c7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000c7e:	2304      	movs	r3, #4
90000c80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000c84:	2300      	movs	r3, #0
90000c86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000c8a:	2308      	movs	r3, #8
90000c8c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000c90:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000c94:	4618      	mov	r0, r3
90000c96:	f005 ff83 	bl	90006ba0 <HAL_RCC_OscConfig>
90000c9a:	4603      	mov	r3, r0
90000c9c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000ca0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000ca4:	2b00      	cmp	r3, #0
90000ca6:	d001      	beq.n	90000cac <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000ca8:	f7ff ff8c 	bl	90000bc4 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000cac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cb0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cb4:	2205      	movs	r2, #5
90000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000cb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cbc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cc0:	2260      	movs	r2, #96	@ 0x60
90000cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000cc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ccc:	2202      	movs	r2, #2
90000cce:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000cd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cd4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cd8:	220a      	movs	r2, #10
90000cda:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000cdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ce0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ce4:	2212      	movs	r2, #18
90000ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000ce8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cf0:	2200      	movs	r2, #0
90000cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000cf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cf8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d06:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000d0a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000d0e:	f04f 0300 	mov.w	r3, #0
90000d12:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000d16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d1e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000d26:	f107 0308 	add.w	r3, r7, #8
90000d2a:	4618      	mov	r0, r3
90000d2c:	f006 ff1e 	bl	90007b6c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000d30:	233f      	movs	r3, #63	@ 0x3f
90000d32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000d36:	2303      	movs	r3, #3
90000d38:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000d3c:	2300      	movs	r3, #0
90000d3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000d42:	2308      	movs	r3, #8
90000d44:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000d48:	2340      	movs	r3, #64	@ 0x40
90000d4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000d4e:	2340      	movs	r3, #64	@ 0x40
90000d50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000d58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000d5c:	2340      	movs	r3, #64	@ 0x40
90000d5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000d62:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000d66:	2104      	movs	r1, #4
90000d68:	4618      	mov	r0, r3
90000d6a:	f006 fb73 	bl	90007454 <HAL_RCC_ClockConfig>
90000d6e:	4603      	mov	r3, r0
90000d70:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000d74:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000d78:	2b00      	cmp	r3, #0
90000d7a:	d001      	beq.n	90000d80 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000d7c:	f7ff ff22 	bl	90000bc4 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000d80:	4b13      	ldr	r3, [pc, #76]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d82:	681b      	ldr	r3, [r3, #0]
90000d84:	4a12      	ldr	r2, [pc, #72]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000d8a:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000d8c:	4b10      	ldr	r3, [pc, #64]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000d92:	4a0f      	ldr	r2, [pc, #60]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d94:	f043 0302 	orr.w	r3, r3, #2
90000d98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000da2:	f003 0202 	and.w	r2, r3, #2
90000da6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000daa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000dae:	601a      	str	r2, [r3, #0]
90000db0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000db4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000db8:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000dba:	f002 fa85 	bl	900032c8 <HAL_EnableCompensationCell>
}
90000dbe:	bf00      	nop
90000dc0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000dc4:	46bd      	mov	sp, r7
90000dc6:	bd80      	pop	{r7, pc}
90000dc8:	58000400 	.word	0x58000400
90000dcc:	58024800 	.word	0x58024800
90000dd0:	58024400 	.word	0x58024400

90000dd4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000dd4:	b480      	push	{r7}
90000dd6:	b085      	sub	sp, #20
90000dd8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000dda:	4b34      	ldr	r3, [pc, #208]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000ddc:	695b      	ldr	r3, [r3, #20]
90000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000de2:	2b00      	cmp	r3, #0
90000de4:	d11b      	bne.n	90000e1e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000de6:	f3bf 8f4f 	dsb	sy
}
90000dea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000dec:	f3bf 8f6f 	isb	sy
}
90000df0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000df2:	4b2e      	ldr	r3, [pc, #184]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000df4:	2200      	movs	r2, #0
90000df6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000dfa:	f3bf 8f4f 	dsb	sy
}
90000dfe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e00:	f3bf 8f6f 	isb	sy
}
90000e04:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000e06:	4b29      	ldr	r3, [pc, #164]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e08:	695b      	ldr	r3, [r3, #20]
90000e0a:	4a28      	ldr	r2, [pc, #160]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000e10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e12:	f3bf 8f4f 	dsb	sy
}
90000e16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e18:	f3bf 8f6f 	isb	sy
}
90000e1c:	e000      	b.n	90000e20 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e1e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e20:	4b22      	ldr	r3, [pc, #136]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e22:	695b      	ldr	r3, [r3, #20]
90000e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000e28:	2b00      	cmp	r3, #0
90000e2a:	d138      	bne.n	90000e9e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e2e:	2200      	movs	r2, #0
90000e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000e34:	f3bf 8f4f 	dsb	sy
}
90000e38:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000e40:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000e42:	68fb      	ldr	r3, [r7, #12]
90000e44:	0b5b      	lsrs	r3, r3, #13
90000e46:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000e4a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000e4c:	68fb      	ldr	r3, [r7, #12]
90000e4e:	08db      	lsrs	r3, r3, #3
90000e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000e54:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000e56:	68bb      	ldr	r3, [r7, #8]
90000e58:	015a      	lsls	r2, r3, #5
90000e5a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000e5e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000e60:	687a      	ldr	r2, [r7, #4]
90000e62:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000e64:	4911      	ldr	r1, [pc, #68]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e66:	4313      	orrs	r3, r2
90000e68:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000e6c:	687b      	ldr	r3, [r7, #4]
90000e6e:	1e5a      	subs	r2, r3, #1
90000e70:	607a      	str	r2, [r7, #4]
90000e72:	2b00      	cmp	r3, #0
90000e74:	d1ef      	bne.n	90000e56 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000e76:	68bb      	ldr	r3, [r7, #8]
90000e78:	1e5a      	subs	r2, r3, #1
90000e7a:	60ba      	str	r2, [r7, #8]
90000e7c:	2b00      	cmp	r3, #0
90000e7e:	d1e5      	bne.n	90000e4c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000e80:	f3bf 8f4f 	dsb	sy
}
90000e84:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000e86:	4b09      	ldr	r3, [pc, #36]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e88:	695b      	ldr	r3, [r3, #20]
90000e8a:	4a08      	ldr	r2, [pc, #32]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000e90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e92:	f3bf 8f4f 	dsb	sy
}
90000e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e98:	f3bf 8f6f 	isb	sy
}
90000e9c:	e000      	b.n	90000ea0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e9e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000ea0:	bf00      	nop
90000ea2:	3714      	adds	r7, #20
90000ea4:	46bd      	mov	sp, r7
90000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000eaa:	4770      	bx	lr
90000eac:	e000ed00 	.word	0xe000ed00

90000eb0 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000eb0:	b580      	push	{r7, lr}
90000eb2:	b082      	sub	sp, #8
90000eb4:	af00      	add	r7, sp, #0
90000eb6:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000eb8:	490e      	ldr	r1, [pc, #56]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000eba:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000ebe:	f04f 0300 	mov.w	r3, #0
90000ec2:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ec8:	2205      	movs	r2, #5
90000eca:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000ecc:	4b09      	ldr	r3, [pc, #36]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ece:	22c0      	movs	r2, #192	@ 0xc0
90000ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000ed2:	4b08      	ldr	r3, [pc, #32]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ed4:	2202      	movs	r2, #2
90000ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000ed8:	4b06      	ldr	r3, [pc, #24]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000eda:	2214      	movs	r2, #20
90000edc:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000ede:	4b05      	ldr	r3, [pc, #20]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ee0:	2263      	movs	r2, #99	@ 0x63
90000ee2:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000ee4:	4803      	ldr	r0, [pc, #12]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ee6:	f006 fe41 	bl	90007b6c <HAL_RCCEx_PeriphCLKConfig>
90000eea:	4603      	mov	r3, r0
}
90000eec:	4618      	mov	r0, r3
90000eee:	3708      	adds	r7, #8
90000ef0:	46bd      	mov	sp, r7
90000ef2:	bd80      	pop	{r7, pc}
90000ef4:	20000180 	.word	0x20000180

90000ef8 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000ef8:	b580      	push	{r7, lr}
90000efa:	b084      	sub	sp, #16
90000efc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000efe:	f002 fb03 	bl	90003508 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000f02:	2301      	movs	r3, #1
90000f04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000f06:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000f0a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000f0c:	2318      	movs	r3, #24
90000f0e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000f10:	2303      	movs	r3, #3
90000f12:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000f14:	2300      	movs	r3, #0
90000f16:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000f18:	2301      	movs	r3, #1
90000f1a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000f1c:	2300      	movs	r3, #0
90000f1e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000f20:	2301      	movs	r3, #1
90000f22:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000f24:	2300      	movs	r3, #0
90000f26:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000f28:	2300      	movs	r3, #0
90000f2a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000f2c:	2300      	movs	r3, #0
90000f2e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000f30:	463b      	mov	r3, r7
90000f32:	4618      	mov	r0, r3
90000f34:	f002 fb20 	bl	90003578 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000f38:	2004      	movs	r0, #4
90000f3a:	f002 fafd 	bl	90003538 <HAL_MPU_Enable>
}
90000f3e:	bf00      	nop
90000f40:	3710      	adds	r7, #16
90000f42:	46bd      	mov	sp, r7
90000f44:	bd80      	pop	{r7, pc}

90000f46 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000f46:	b480      	push	{r7}
90000f48:	af00      	add	r7, sp, #0
}
90000f4a:	bf00      	nop
90000f4c:	46bd      	mov	sp, r7
90000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f52:	4770      	bx	lr

90000f54 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000f54:	b480      	push	{r7}
90000f56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000f58:	bf00      	nop
90000f5a:	e7fd      	b.n	90000f58 <HardFault_Handler+0x4>

90000f5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000f5c:	b480      	push	{r7}
90000f5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000f60:	bf00      	nop
90000f62:	e7fd      	b.n	90000f60 <MemManage_Handler+0x4>

90000f64 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000f64:	b480      	push	{r7}
90000f66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000f68:	bf00      	nop
90000f6a:	e7fd      	b.n	90000f68 <BusFault_Handler+0x4>

90000f6c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000f6c:	b480      	push	{r7}
90000f6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000f70:	bf00      	nop
90000f72:	e7fd      	b.n	90000f70 <UsageFault_Handler+0x4>

90000f74 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000f74:	b480      	push	{r7}
90000f76:	af00      	add	r7, sp, #0
}
90000f78:	bf00      	nop
90000f7a:	46bd      	mov	sp, r7
90000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f80:	4770      	bx	lr

90000f82 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000f82:	b480      	push	{r7}
90000f84:	af00      	add	r7, sp, #0
}
90000f86:	bf00      	nop
90000f88:	46bd      	mov	sp, r7
90000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f8e:	4770      	bx	lr

90000f90 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000f90:	b480      	push	{r7}
90000f92:	af00      	add	r7, sp, #0
}
90000f94:	bf00      	nop
90000f96:	46bd      	mov	sp, r7
90000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f9c:	4770      	bx	lr

90000f9e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000f9e:	b580      	push	{r7, lr}
90000fa0:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000fa2:	f002 f941 	bl	90003228 <HAL_IncTick>
}
90000fa6:	bf00      	nop
90000fa8:	bd80      	pop	{r7, pc}
	...

90000fac <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90000fac:	b580      	push	{r7, lr}
90000fae:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000fb0:	4802      	ldr	r0, [pc, #8]	@ (90000fbc <OTG_FS_IRQHandler+0x10>)
90000fb2:	f002 ffd8 	bl	90003f66 <HAL_HCD_IRQHandler>
}
90000fb6:	bf00      	nop
90000fb8:	bd80      	pop	{r7, pc}
90000fba:	bf00      	nop
90000fbc:	20000244 	.word	0x20000244

90000fc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000fc0:	b580      	push	{r7, lr}
90000fc2:	b086      	sub	sp, #24
90000fc4:	af00      	add	r7, sp, #0
90000fc6:	60f8      	str	r0, [r7, #12]
90000fc8:	60b9      	str	r1, [r7, #8]
90000fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fcc:	2300      	movs	r3, #0
90000fce:	617b      	str	r3, [r7, #20]
90000fd0:	e00a      	b.n	90000fe8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
90000fd2:	f3af 8000 	nop.w
90000fd6:	4601      	mov	r1, r0
90000fd8:	68bb      	ldr	r3, [r7, #8]
90000fda:	1c5a      	adds	r2, r3, #1
90000fdc:	60ba      	str	r2, [r7, #8]
90000fde:	b2ca      	uxtb	r2, r1
90000fe0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fe2:	697b      	ldr	r3, [r7, #20]
90000fe4:	3301      	adds	r3, #1
90000fe6:	617b      	str	r3, [r7, #20]
90000fe8:	697a      	ldr	r2, [r7, #20]
90000fea:	687b      	ldr	r3, [r7, #4]
90000fec:	429a      	cmp	r2, r3
90000fee:	dbf0      	blt.n	90000fd2 <_read+0x12>
  }

  return len;
90000ff0:	687b      	ldr	r3, [r7, #4]
}
90000ff2:	4618      	mov	r0, r3
90000ff4:	3718      	adds	r7, #24
90000ff6:	46bd      	mov	sp, r7
90000ff8:	bd80      	pop	{r7, pc}

90000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90000ffa:	b580      	push	{r7, lr}
90000ffc:	b086      	sub	sp, #24
90000ffe:	af00      	add	r7, sp, #0
90001000:	60f8      	str	r0, [r7, #12]
90001002:	60b9      	str	r1, [r7, #8]
90001004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001006:	2300      	movs	r3, #0
90001008:	617b      	str	r3, [r7, #20]
9000100a:	e009      	b.n	90001020 <_write+0x26>
  {
    __io_putchar(*ptr++);
9000100c:	68bb      	ldr	r3, [r7, #8]
9000100e:	1c5a      	adds	r2, r3, #1
90001010:	60ba      	str	r2, [r7, #8]
90001012:	781b      	ldrb	r3, [r3, #0]
90001014:	4618      	mov	r0, r3
90001016:	f7ff fcc9 	bl	900009ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000101a:	697b      	ldr	r3, [r7, #20]
9000101c:	3301      	adds	r3, #1
9000101e:	617b      	str	r3, [r7, #20]
90001020:	697a      	ldr	r2, [r7, #20]
90001022:	687b      	ldr	r3, [r7, #4]
90001024:	429a      	cmp	r2, r3
90001026:	dbf1      	blt.n	9000100c <_write+0x12>
  }
  return len;
90001028:	687b      	ldr	r3, [r7, #4]
}
9000102a:	4618      	mov	r0, r3
9000102c:	3718      	adds	r7, #24
9000102e:	46bd      	mov	sp, r7
90001030:	bd80      	pop	{r7, pc}

90001032 <_close>:

int _close(int file)
{
90001032:	b480      	push	{r7}
90001034:	b083      	sub	sp, #12
90001036:	af00      	add	r7, sp, #0
90001038:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
9000103a:	f04f 33ff 	mov.w	r3, #4294967295
}
9000103e:	4618      	mov	r0, r3
90001040:	370c      	adds	r7, #12
90001042:	46bd      	mov	sp, r7
90001044:	f85d 7b04 	ldr.w	r7, [sp], #4
90001048:	4770      	bx	lr

9000104a <_fstat>:


int _fstat(int file, struct stat *st)
{
9000104a:	b480      	push	{r7}
9000104c:	b083      	sub	sp, #12
9000104e:	af00      	add	r7, sp, #0
90001050:	6078      	str	r0, [r7, #4]
90001052:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90001054:	683b      	ldr	r3, [r7, #0]
90001056:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
9000105a:	605a      	str	r2, [r3, #4]
  return 0;
9000105c:	2300      	movs	r3, #0
}
9000105e:	4618      	mov	r0, r3
90001060:	370c      	adds	r7, #12
90001062:	46bd      	mov	sp, r7
90001064:	f85d 7b04 	ldr.w	r7, [sp], #4
90001068:	4770      	bx	lr

9000106a <_isatty>:

int _isatty(int file)
{
9000106a:	b480      	push	{r7}
9000106c:	b083      	sub	sp, #12
9000106e:	af00      	add	r7, sp, #0
90001070:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
90001072:	2301      	movs	r3, #1
}
90001074:	4618      	mov	r0, r3
90001076:	370c      	adds	r7, #12
90001078:	46bd      	mov	sp, r7
9000107a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000107e:	4770      	bx	lr

90001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001080:	b480      	push	{r7}
90001082:	b085      	sub	sp, #20
90001084:	af00      	add	r7, sp, #0
90001086:	60f8      	str	r0, [r7, #12]
90001088:	60b9      	str	r1, [r7, #8]
9000108a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
9000108c:	2300      	movs	r3, #0
}
9000108e:	4618      	mov	r0, r3
90001090:	3714      	adds	r7, #20
90001092:	46bd      	mov	sp, r7
90001094:	f85d 7b04 	ldr.w	r7, [sp], #4
90001098:	4770      	bx	lr
	...

9000109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
9000109c:	b580      	push	{r7, lr}
9000109e:	b086      	sub	sp, #24
900010a0:	af00      	add	r7, sp, #0
900010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900010a4:	4a14      	ldr	r2, [pc, #80]	@ (900010f8 <_sbrk+0x5c>)
900010a6:	4b15      	ldr	r3, [pc, #84]	@ (900010fc <_sbrk+0x60>)
900010a8:	1ad3      	subs	r3, r2, r3
900010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
900010ac:	697b      	ldr	r3, [r7, #20]
900010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
900010b0:	4b13      	ldr	r3, [pc, #76]	@ (90001100 <_sbrk+0x64>)
900010b2:	681b      	ldr	r3, [r3, #0]
900010b4:	2b00      	cmp	r3, #0
900010b6:	d102      	bne.n	900010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900010b8:	4b11      	ldr	r3, [pc, #68]	@ (90001100 <_sbrk+0x64>)
900010ba:	4a12      	ldr	r2, [pc, #72]	@ (90001104 <_sbrk+0x68>)
900010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900010be:	4b10      	ldr	r3, [pc, #64]	@ (90001100 <_sbrk+0x64>)
900010c0:	681a      	ldr	r2, [r3, #0]
900010c2:	687b      	ldr	r3, [r7, #4]
900010c4:	4413      	add	r3, r2
900010c6:	693a      	ldr	r2, [r7, #16]
900010c8:	429a      	cmp	r2, r3
900010ca:	d207      	bcs.n	900010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
900010cc:	f00b fbb8 	bl	9000c840 <__errno>
900010d0:	4603      	mov	r3, r0
900010d2:	220c      	movs	r2, #12
900010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900010d6:	f04f 33ff 	mov.w	r3, #4294967295
900010da:	e009      	b.n	900010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900010dc:	4b08      	ldr	r3, [pc, #32]	@ (90001100 <_sbrk+0x64>)
900010de:	681b      	ldr	r3, [r3, #0]
900010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900010e2:	4b07      	ldr	r3, [pc, #28]	@ (90001100 <_sbrk+0x64>)
900010e4:	681a      	ldr	r2, [r3, #0]
900010e6:	687b      	ldr	r3, [r7, #4]
900010e8:	4413      	add	r3, r2
900010ea:	4a05      	ldr	r2, [pc, #20]	@ (90001100 <_sbrk+0x64>)
900010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
900010ee:	68fb      	ldr	r3, [r7, #12]
}
900010f0:	4618      	mov	r0, r3
900010f2:	3718      	adds	r7, #24
900010f4:	46bd      	mov	sp, r7
900010f6:	bd80      	pop	{r7, pc}
900010f8:	20020000 	.word	0x20020000
900010fc:	00001000 	.word	0x00001000
90001100:	20000240 	.word	0x20000240
90001104:	20001498 	.word	0x20001498

90001108 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90001108:	b580      	push	{r7, lr}
9000110a:	b082      	sub	sp, #8
9000110c:	af00      	add	r7, sp, #0
9000110e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90001110:	687b      	ldr	r3, [r7, #4]
90001112:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001116:	4618      	mov	r0, r3
90001118:	f00a fc5a 	bl	9000b9d0 <USBH_LL_IncTimer>
}
9000111c:	bf00      	nop
9000111e:	3708      	adds	r7, #8
90001120:	46bd      	mov	sp, r7
90001122:	bd80      	pop	{r7, pc}

90001124 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90001124:	b580      	push	{r7, lr}
90001126:	b082      	sub	sp, #8
90001128:	af00      	add	r7, sp, #0
9000112a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
9000112c:	687b      	ldr	r3, [r7, #4]
9000112e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001132:	4618      	mov	r0, r3
90001134:	f00a fc96 	bl	9000ba64 <USBH_LL_Connect>
}
90001138:	bf00      	nop
9000113a:	3708      	adds	r7, #8
9000113c:	46bd      	mov	sp, r7
9000113e:	bd80      	pop	{r7, pc}

90001140 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90001140:	b580      	push	{r7, lr}
90001142:	b082      	sub	sp, #8
90001144:	af00      	add	r7, sp, #0
90001146:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90001148:	687b      	ldr	r3, [r7, #4]
9000114a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000114e:	4618      	mov	r0, r3
90001150:	f00a fc9f 	bl	9000ba92 <USBH_LL_Disconnect>
}
90001154:	bf00      	nop
90001156:	3708      	adds	r7, #8
90001158:	46bd      	mov	sp, r7
9000115a:	bd80      	pop	{r7, pc}

9000115c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
9000115c:	b580      	push	{r7, lr}
9000115e:	b082      	sub	sp, #8
90001160:	af00      	add	r7, sp, #0
90001162:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90001164:	687b      	ldr	r3, [r7, #4]
90001166:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000116a:	4618      	mov	r0, r3
9000116c:	f00a fc5a 	bl	9000ba24 <USBH_LL_PortEnabled>
}
90001170:	bf00      	nop
90001172:	3708      	adds	r7, #8
90001174:	46bd      	mov	sp, r7
90001176:	bd80      	pop	{r7, pc}

90001178 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001178:	b580      	push	{r7, lr}
9000117a:	b082      	sub	sp, #8
9000117c:	af00      	add	r7, sp, #0
9000117e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90001180:	687b      	ldr	r3, [r7, #4]
90001182:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001186:	4618      	mov	r0, r3
90001188:	f00a fc5a 	bl	9000ba40 <USBH_LL_PortDisabled>
}
9000118c:	bf00      	nop
9000118e:	3708      	adds	r7, #8
90001190:	46bd      	mov	sp, r7
90001192:	bd80      	pop	{r7, pc}

90001194 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90001194:	b480      	push	{r7}
90001196:	b083      	sub	sp, #12
90001198:	af00      	add	r7, sp, #0
9000119a:	6078      	str	r0, [r7, #4]
9000119c:	460b      	mov	r3, r1
9000119e:	70fb      	strb	r3, [r7, #3]
900011a0:	4613      	mov	r3, r2
900011a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
900011a4:	bf00      	nop
900011a6:	370c      	adds	r7, #12
900011a8:	46bd      	mov	sp, r7
900011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900011ae:	4770      	bx	lr

900011b0 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
900011b0:	b580      	push	{r7, lr}
900011b2:	b082      	sub	sp, #8
900011b4:	af00      	add	r7, sp, #0
900011b6:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
900011b8:	687b      	ldr	r3, [r7, #4]
900011ba:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
900011be:	4618      	mov	r0, r3
900011c0:	f002 ffe1 	bl	90004186 <HAL_HCD_Stop>
  return USBH_OK;
900011c4:	2300      	movs	r3, #0
}
900011c6:	4618      	mov	r0, r3
900011c8:	3708      	adds	r7, #8
900011ca:	46bd      	mov	sp, r7
900011cc:	bd80      	pop	{r7, pc}
	...

900011d0 <ClearCache>:
#include "display.h"

uint32_t x_size, y_size;

void ClearCache()
{
900011d0:	b480      	push	{r7}
900011d2:	b085      	sub	sp, #20
900011d4:	af00      	add	r7, sp, #0
900011d6:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900011da:	60fb      	str	r3, [r7, #12]
900011dc:	f44f 23ff 	mov.w	r3, #522240	@ 0x7f800
900011e0:	60bb      	str	r3, [r7, #8]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
900011e2:	68bb      	ldr	r3, [r7, #8]
900011e4:	2b00      	cmp	r3, #0
900011e6:	dd1d      	ble.n	90001224 <ClearCache+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
900011e8:	68fb      	ldr	r3, [r7, #12]
900011ea:	f003 021f 	and.w	r2, r3, #31
900011ee:	68bb      	ldr	r3, [r7, #8]
900011f0:	4413      	add	r3, r2
900011f2:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
900011f4:	68fb      	ldr	r3, [r7, #12]
900011f6:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
900011f8:	f3bf 8f4f 	dsb	sy
}
900011fc:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
900011fe:	4a0d      	ldr	r2, [pc, #52]	@ (90001234 <ClearCache+0x64>)
90001200:	683b      	ldr	r3, [r7, #0]
90001202:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
90001206:	683b      	ldr	r3, [r7, #0]
90001208:	3320      	adds	r3, #32
9000120a:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
9000120c:	687b      	ldr	r3, [r7, #4]
9000120e:	3b20      	subs	r3, #32
90001210:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
90001212:	687b      	ldr	r3, [r7, #4]
90001214:	2b00      	cmp	r3, #0
90001216:	dcf2      	bgt.n	900011fe <ClearCache+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
90001218:	f3bf 8f4f 	dsb	sy
}
9000121c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000121e:	f3bf 8f6f 	isb	sy
}
90001222:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
90001224:	bf00      	nop
	// otherwise I get LCD artefacts
	SCB_CleanDCache_by_Addr(SDRAM_DEVICE_ADDR, 480*272*4);
}
90001226:	bf00      	nop
90001228:	3714      	adds	r7, #20
9000122a:	46bd      	mov	sp, r7
9000122c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001230:	4770      	bx	lr
90001232:	bf00      	nop
90001234:	e000ed00 	.word	0xe000ed00

90001238 <InitializeLcd>:

void InitializeLcd(void)
{
90001238:	b580      	push	{r7, lr}
9000123a:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
9000123c:	2101      	movs	r1, #1
9000123e:	2000      	movs	r0, #0
90001240:	f000 fe9e 	bl	90001f80 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90001244:	480f      	ldr	r0, [pc, #60]	@ (90001284 <InitializeLcd+0x4c>)
90001246:	f00a fc69 	bl	9000bb1c <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
9000124a:	2000      	movs	r0, #0
9000124c:	f00a fcbc 	bl	9000bbc8 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90001250:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001254:	f00a fd2e 	bl	9000bcb4 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90001258:	490b      	ldr	r1, [pc, #44]	@ (90001288 <InitializeLcd+0x50>)
9000125a:	2000      	movs	r0, #0
9000125c:	f001 f84a 	bl	900022f4 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90001260:	490a      	ldr	r1, [pc, #40]	@ (9000128c <InitializeLcd+0x54>)
90001262:	2000      	movs	r0, #0
90001264:	f001 f864 	bl	90002330 <BSP_LCD_GetYSize>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90001268:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
9000126c:	f00a fcca 	bl	9000bc04 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90001270:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001274:	f00a fcda 	bl	9000bc2c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90001278:	4805      	ldr	r0, [pc, #20]	@ (90001290 <InitializeLcd+0x58>)
9000127a:	f00a fceb 	bl	9000bc54 <UTIL_LCD_SetFont>
}
9000127e:	bf00      	nop
90001280:	bd80      	pop	{r7, pc}
90001282:	bf00      	nop
90001284:	9000d724 	.word	0x9000d724
90001288:	20000624 	.word	0x20000624
9000128c:	20000628 	.word	0x20000628
90001290:	20000068 	.word	0x20000068

90001294 <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
90001294:	b580      	push	{r7, lr}
90001296:	b082      	sub	sp, #8
90001298:	af00      	add	r7, sp, #0
9000129a:	6078      	str	r0, [r7, #4]
9000129c:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
9000129e:	683a      	ldr	r2, [r7, #0]
900012a0:	6879      	ldr	r1, [r7, #4]
900012a2:	4803      	ldr	r0, [pc, #12]	@ (900012b0 <uartSetCursorPosition+0x1c>)
900012a4:	f00b f904 	bl	9000c4b0 <iprintf>
}
900012a8:	bf00      	nop
900012aa:	3708      	adds	r7, #8
900012ac:	46bd      	mov	sp, r7
900012ae:	bd80      	pop	{r7, pc}
900012b0:	9000d55c 	.word	0x9000d55c

900012b4 <UartClearScreen>:

void UartClearScreen() {
900012b4:	b580      	push	{r7, lr}
900012b6:	af00      	add	r7, sp, #0
  printf("\033[2J");
900012b8:	4803      	ldr	r0, [pc, #12]	@ (900012c8 <UartClearScreen+0x14>)
900012ba:	f00b f8f9 	bl	9000c4b0 <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
900012be:	4803      	ldr	r0, [pc, #12]	@ (900012cc <UartClearScreen+0x18>)
900012c0:	f00b f8f6 	bl	9000c4b0 <iprintf>
}
900012c4:	bf00      	nop
900012c6:	bd80      	pop	{r7, pc}
900012c8:	9000d568 	.word	0x9000d568
900012cc:	9000d570 	.word	0x9000d570

900012d0 <UartRenderState>:

void UartRenderState(AppContext *ctx) {
900012d0:	b580      	push	{r7, lr}
900012d2:	b082      	sub	sp, #8
900012d4:	af00      	add	r7, sp, #0
900012d6:	6078      	str	r0, [r7, #4]
  uartSetCursorPosition(1, 1);
900012d8:	2101      	movs	r1, #1
900012da:	2001      	movs	r0, #1
900012dc:	f7ff ffda 	bl	90001294 <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
900012e0:	687b      	ldr	r3, [r7, #4]
900012e2:	781b      	ldrb	r3, [r3, #0]
900012e4:	2b00      	cmp	r3, #0
900012e6:	d13a      	bne.n	9000135e <UartRenderState+0x8e>
    printf("F1: Voltage control    ");
900012e8:	481f      	ldr	r0, [pc, #124]	@ (90001368 <UartRenderState+0x98>)
900012ea:	f00b f8e1 	bl	9000c4b0 <iprintf>
    uartSetCursorPosition(2, 1);
900012ee:	2101      	movs	r1, #1
900012f0:	2002      	movs	r0, #2
900012f2:	f7ff ffcf 	bl	90001294 <uartSetCursorPosition>
    printf("Current input: %d     ", ctx->inputValue);
900012f6:	687b      	ldr	r3, [r7, #4]
900012f8:	889b      	ldrh	r3, [r3, #4]
900012fa:	4619      	mov	r1, r3
900012fc:	481b      	ldr	r0, [pc, #108]	@ (9000136c <UartRenderState+0x9c>)
900012fe:	f00b f8d7 	bl	9000c4b0 <iprintf>
    uartSetCursorPosition(3, 1);
90001302:	2101      	movs	r1, #1
90001304:	2003      	movs	r0, #3
90001306:	f7ff ffc5 	bl	90001294 <uartSetCursorPosition>
    if (ctx->voltage > 0) {
9000130a:	687b      	ldr	r3, [r7, #4]
9000130c:	885b      	ldrh	r3, [r3, #2]
9000130e:	2b00      	cmp	r3, #0
90001310:	d006      	beq.n	90001320 <UartRenderState+0x50>
      printf("Voltage: %dV     ", ctx->voltage);
90001312:	687b      	ldr	r3, [r7, #4]
90001314:	885b      	ldrh	r3, [r3, #2]
90001316:	4619      	mov	r1, r3
90001318:	4815      	ldr	r0, [pc, #84]	@ (90001370 <UartRenderState+0xa0>)
9000131a:	f00b f8c9 	bl	9000c4b0 <iprintf>
9000131e:	e002      	b.n	90001326 <UartRenderState+0x56>
    } else {
      printf("Voltage: N/A     ");
90001320:	4814      	ldr	r0, [pc, #80]	@ (90001374 <UartRenderState+0xa4>)
90001322:	f00b f8c5 	bl	9000c4b0 <iprintf>
    }
    uartSetCursorPosition(4, 1);
90001326:	2101      	movs	r1, #1
90001328:	2004      	movs	r0, #4
9000132a:	f7ff ffb3 	bl	90001294 <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
9000132e:	687b      	ldr	r3, [r7, #4]
90001330:	79db      	ldrb	r3, [r3, #7]
90001332:	2b00      	cmp	r3, #0
90001334:	d006      	beq.n	90001344 <UartRenderState+0x74>
      printf("PWM is running at %dV   ", ctx->voltage);
90001336:	687b      	ldr	r3, [r7, #4]
90001338:	885b      	ldrh	r3, [r3, #2]
9000133a:	4619      	mov	r1, r3
9000133c:	480e      	ldr	r0, [pc, #56]	@ (90001378 <UartRenderState+0xa8>)
9000133e:	f00b f8b7 	bl	9000c4b0 <iprintf>
90001342:	e002      	b.n	9000134a <UartRenderState+0x7a>
    } else {
      printf("PWM is OFF              ");
90001344:	480d      	ldr	r0, [pc, #52]	@ (9000137c <UartRenderState+0xac>)
90001346:	f00b f8b3 	bl	9000c4b0 <iprintf>
    }
    uartSetCursorPosition(5, 1);
9000134a:	2101      	movs	r1, #1
9000134c:	2005      	movs	r0, #5
9000134e:	f7ff ffa1 	bl	90001294 <uartSetCursorPosition>
    printf("%s                                                               \r\n", ctx->message);
90001352:	687b      	ldr	r3, [r7, #4]
90001354:	3308      	adds	r3, #8
90001356:	4619      	mov	r1, r3
90001358:	4809      	ldr	r0, [pc, #36]	@ (90001380 <UartRenderState+0xb0>)
9000135a:	f00b f8a9 	bl	9000c4b0 <iprintf>
  }
}
9000135e:	bf00      	nop
90001360:	3708      	adds	r7, #8
90001362:	46bd      	mov	sp, r7
90001364:	bd80      	pop	{r7, pc}
90001366:	bf00      	nop
90001368:	9000d574 	.word	0x9000d574
9000136c:	9000d58c 	.word	0x9000d58c
90001370:	9000d5a4 	.word	0x9000d5a4
90001374:	9000d5b8 	.word	0x9000d5b8
90001378:	9000d5cc 	.word	0x9000d5cc
9000137c:	9000d5e8 	.word	0x9000d5e8
90001380:	9000d604 	.word	0x9000d604

90001384 <DisplayRenderState>:

void DisplayRenderState(AppContext *ctx)
{
90001384:	b590      	push	{r4, r7, lr}
90001386:	b08b      	sub	sp, #44	@ 0x2c
90001388:	af00      	add	r7, sp, #0
9000138a:	6078      	str	r0, [r7, #4]
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
9000138c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001390:	f00a fc90 	bl	9000bcb4 <UTIL_LCD_Clear>

  if (ctx->currentState == STATE_F1) {
90001394:	687b      	ldr	r3, [r7, #4]
90001396:	781b      	ldrb	r3, [r3, #0]
90001398:	2b00      	cmp	r3, #0
9000139a:	d16a      	bne.n	90001472 <DisplayRenderState+0xee>
	char buffer[32];  // Make sure it's large enough
    UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"F1: Voltage control    ", LEFT_MODE);
9000139c:	2303      	movs	r3, #3
9000139e:	4a37      	ldr	r2, [pc, #220]	@ (9000147c <DisplayRenderState+0xf8>)
900013a0:	2100      	movs	r1, #0
900013a2:	2000      	movs	r0, #0
900013a4:	f00a fcd2 	bl	9000bd4c <UTIL_LCD_DisplayStringAt>
    sprintf(buffer, "Current input: %d", ctx->inputValue);
900013a8:	687b      	ldr	r3, [r7, #4]
900013aa:	889b      	ldrh	r3, [r3, #4]
900013ac:	461a      	mov	r2, r3
900013ae:	f107 0308 	add.w	r3, r7, #8
900013b2:	4933      	ldr	r1, [pc, #204]	@ (90001480 <DisplayRenderState+0xfc>)
900013b4:	4618      	mov	r0, r3
900013b6:	f00b f8eb 	bl	9000c590 <siprintf>
    UTIL_LCD_DisplayStringAt(0, 32, (uint8_t *)buffer, LEFT_MODE);
900013ba:	f107 0208 	add.w	r2, r7, #8
900013be:	2303      	movs	r3, #3
900013c0:	2120      	movs	r1, #32
900013c2:	2000      	movs	r0, #0
900013c4:	f00a fcc2 	bl	9000bd4c <UTIL_LCD_DisplayStringAt>

    sprintf(buffer, "Current input: %d", ctx->inputValue);
900013c8:	687b      	ldr	r3, [r7, #4]
900013ca:	889b      	ldrh	r3, [r3, #4]
900013cc:	461a      	mov	r2, r3
900013ce:	f107 0308 	add.w	r3, r7, #8
900013d2:	492b      	ldr	r1, [pc, #172]	@ (90001480 <DisplayRenderState+0xfc>)
900013d4:	4618      	mov	r0, r3
900013d6:	f00b f8db 	bl	9000c590 <siprintf>
    UTIL_LCD_DisplayStringAt(0, 32, (uint8_t *)buffer, LEFT_MODE);
900013da:	f107 0208 	add.w	r2, r7, #8
900013de:	2303      	movs	r3, #3
900013e0:	2120      	movs	r1, #32
900013e2:	2000      	movs	r0, #0
900013e4:	f00a fcb2 	bl	9000bd4c <UTIL_LCD_DisplayStringAt>

    if (ctx->voltage > 0) {
900013e8:	687b      	ldr	r3, [r7, #4]
900013ea:	885b      	ldrh	r3, [r3, #2]
900013ec:	2b00      	cmp	r3, #0
900013ee:	d009      	beq.n	90001404 <DisplayRenderState+0x80>
      sprintf(buffer, "Voltage: %dV", ctx->voltage);
900013f0:	687b      	ldr	r3, [r7, #4]
900013f2:	885b      	ldrh	r3, [r3, #2]
900013f4:	461a      	mov	r2, r3
900013f6:	f107 0308 	add.w	r3, r7, #8
900013fa:	4922      	ldr	r1, [pc, #136]	@ (90001484 <DisplayRenderState+0x100>)
900013fc:	4618      	mov	r0, r3
900013fe:	f00b f8c7 	bl	9000c590 <siprintf>
90001402:	e007      	b.n	90001414 <DisplayRenderState+0x90>
    } else {
      strcpy(buffer, "Voltage: N/A");
90001404:	f107 0308 	add.w	r3, r7, #8
90001408:	4a1f      	ldr	r2, [pc, #124]	@ (90001488 <DisplayRenderState+0x104>)
9000140a:	461c      	mov	r4, r3
9000140c:	4613      	mov	r3, r2
9000140e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
90001410:	c407      	stmia	r4!, {r0, r1, r2}
90001412:	7023      	strb	r3, [r4, #0]
    }
    UTIL_LCD_DisplayStringAt(0, 64, (uint8_t *)buffer, LEFT_MODE);
90001414:	f107 0208 	add.w	r2, r7, #8
90001418:	2303      	movs	r3, #3
9000141a:	2140      	movs	r1, #64	@ 0x40
9000141c:	2000      	movs	r0, #0
9000141e:	f00a fc95 	bl	9000bd4c <UTIL_LCD_DisplayStringAt>

    if (ctx->isPwmRunning == true) {
90001422:	687b      	ldr	r3, [r7, #4]
90001424:	79db      	ldrb	r3, [r3, #7]
90001426:	2b00      	cmp	r3, #0
90001428:	d009      	beq.n	9000143e <DisplayRenderState+0xba>
      sprintf(buffer, "PWM is running at %dV", ctx->voltage);
9000142a:	687b      	ldr	r3, [r7, #4]
9000142c:	885b      	ldrh	r3, [r3, #2]
9000142e:	461a      	mov	r2, r3
90001430:	f107 0308 	add.w	r3, r7, #8
90001434:	4915      	ldr	r1, [pc, #84]	@ (9000148c <DisplayRenderState+0x108>)
90001436:	4618      	mov	r0, r3
90001438:	f00b f8aa 	bl	9000c590 <siprintf>
9000143c:	e008      	b.n	90001450 <DisplayRenderState+0xcc>
    } else {
      strcpy(buffer, "PWM is OFF");
9000143e:	f107 0308 	add.w	r3, r7, #8
90001442:	4a13      	ldr	r2, [pc, #76]	@ (90001490 <DisplayRenderState+0x10c>)
90001444:	ca07      	ldmia	r2, {r0, r1, r2}
90001446:	c303      	stmia	r3!, {r0, r1}
90001448:	801a      	strh	r2, [r3, #0]
9000144a:	3302      	adds	r3, #2
9000144c:	0c12      	lsrs	r2, r2, #16
9000144e:	701a      	strb	r2, [r3, #0]
    }
    UTIL_LCD_DisplayStringAt(0, 96, (uint8_t *)buffer, LEFT_MODE);
90001450:	f107 0208 	add.w	r2, r7, #8
90001454:	2303      	movs	r3, #3
90001456:	2160      	movs	r1, #96	@ 0x60
90001458:	2000      	movs	r0, #0
9000145a:	f00a fc77 	bl	9000bd4c <UTIL_LCD_DisplayStringAt>

    UTIL_LCD_DisplayStringAt(0, 128, (uint8_t *)ctx->message, LEFT_MODE);
9000145e:	687b      	ldr	r3, [r7, #4]
90001460:	f103 0208 	add.w	r2, r3, #8
90001464:	2303      	movs	r3, #3
90001466:	2180      	movs	r1, #128	@ 0x80
90001468:	2000      	movs	r0, #0
9000146a:	f00a fc6f 	bl	9000bd4c <UTIL_LCD_DisplayStringAt>

    ClearCache();
9000146e:	f7ff feaf 	bl	900011d0 <ClearCache>


//    uartSetCursorPosition(5, 1);
//    printf("%s                                                               \r\n", ctx->message);
  }
}
90001472:	bf00      	nop
90001474:	372c      	adds	r7, #44	@ 0x2c
90001476:	46bd      	mov	sp, r7
90001478:	bd90      	pop	{r4, r7, pc}
9000147a:	bf00      	nop
9000147c:	9000d574 	.word	0x9000d574
90001480:	9000d648 	.word	0x9000d648
90001484:	9000d65c 	.word	0x9000d65c
90001488:	9000d66c 	.word	0x9000d66c
9000148c:	9000d67c 	.word	0x9000d67c
90001490:	9000d694 	.word	0x9000d694

90001494 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001494:	b580      	push	{r7, lr}
90001496:	b084      	sub	sp, #16
90001498:	af00      	add	r7, sp, #0
9000149a:	6078      	str	r0, [r7, #4]
9000149c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
9000149e:	687b      	ldr	r3, [r7, #4]
900014a0:	2b00      	cmp	r3, #0
900014a2:	d103      	bne.n	900014ac <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
900014a4:	f04f 33ff 	mov.w	r3, #4294967295
900014a8:	60fb      	str	r3, [r7, #12]
900014aa:	e02c      	b.n	90001506 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
900014ac:	683b      	ldr	r3, [r7, #0]
900014ae:	681a      	ldr	r2, [r3, #0]
900014b0:	687b      	ldr	r3, [r7, #4]
900014b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
900014b4:	683b      	ldr	r3, [r7, #0]
900014b6:	685a      	ldr	r2, [r3, #4]
900014b8:	687b      	ldr	r3, [r7, #4]
900014ba:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
900014bc:	683b      	ldr	r3, [r7, #0]
900014be:	891a      	ldrh	r2, [r3, #8]
900014c0:	687b      	ldr	r3, [r7, #4]
900014c2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
900014c4:	683b      	ldr	r3, [r7, #0]
900014c6:	68da      	ldr	r2, [r3, #12]
900014c8:	687b      	ldr	r3, [r7, #4]
900014ca:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
900014cc:	683b      	ldr	r3, [r7, #0]
900014ce:	691a      	ldr	r2, [r3, #16]
900014d0:	687b      	ldr	r3, [r7, #4]
900014d2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
900014d4:	683b      	ldr	r3, [r7, #0]
900014d6:	695a      	ldr	r2, [r3, #20]
900014d8:	687b      	ldr	r3, [r7, #4]
900014da:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
900014dc:	687b      	ldr	r3, [r7, #4]
900014de:	4a0c      	ldr	r2, [pc, #48]	@ (90001510 <FT5336_RegisterBusIO+0x7c>)
900014e0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900014e2:	687b      	ldr	r3, [r7, #4]
900014e4:	4a0b      	ldr	r2, [pc, #44]	@ (90001514 <FT5336_RegisterBusIO+0x80>)
900014e6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
900014e8:	687b      	ldr	r3, [r7, #4]
900014ea:	687a      	ldr	r2, [r7, #4]
900014ec:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900014ee:	687b      	ldr	r3, [r7, #4]
900014f0:	681b      	ldr	r3, [r3, #0]
900014f2:	2b00      	cmp	r3, #0
900014f4:	d004      	beq.n	90001500 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900014f6:	687b      	ldr	r3, [r7, #4]
900014f8:	681b      	ldr	r3, [r3, #0]
900014fa:	4798      	blx	r3
900014fc:	60f8      	str	r0, [r7, #12]
900014fe:	e002      	b.n	90001506 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90001500:	f04f 33ff 	mov.w	r3, #4294967295
90001504:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
90001506:	68fb      	ldr	r3, [r7, #12]
}
90001508:	4618      	mov	r0, r3
9000150a:	3710      	adds	r7, #16
9000150c:	46bd      	mov	sp, r7
9000150e:	bd80      	pop	{r7, pc}
90001510:	90001539 	.word	0x90001539
90001514:	9000156d 	.word	0x9000156d

90001518 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90001518:	b580      	push	{r7, lr}
9000151a:	b082      	sub	sp, #8
9000151c:	af00      	add	r7, sp, #0
9000151e:	6078      	str	r0, [r7, #4]
90001520:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90001522:	687b      	ldr	r3, [r7, #4]
90001524:	3318      	adds	r3, #24
90001526:	6839      	ldr	r1, [r7, #0]
90001528:	4618      	mov	r0, r3
9000152a:	f000 f850 	bl	900015ce <ft5336_chip_id>
9000152e:	4603      	mov	r3, r0
}
90001530:	4618      	mov	r0, r3
90001532:	3708      	adds	r7, #8
90001534:	46bd      	mov	sp, r7
90001536:	bd80      	pop	{r7, pc}

90001538 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001538:	b590      	push	{r4, r7, lr}
9000153a:	b087      	sub	sp, #28
9000153c:	af00      	add	r7, sp, #0
9000153e:	60f8      	str	r0, [r7, #12]
90001540:	607a      	str	r2, [r7, #4]
90001542:	461a      	mov	r2, r3
90001544:	460b      	mov	r3, r1
90001546:	72fb      	strb	r3, [r7, #11]
90001548:	4613      	mov	r3, r2
9000154a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
9000154c:	68fb      	ldr	r3, [r7, #12]
9000154e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90001550:	697b      	ldr	r3, [r7, #20]
90001552:	691c      	ldr	r4, [r3, #16]
90001554:	697b      	ldr	r3, [r7, #20]
90001556:	8918      	ldrh	r0, [r3, #8]
90001558:	7afb      	ldrb	r3, [r7, #11]
9000155a:	b299      	uxth	r1, r3
9000155c:	893b      	ldrh	r3, [r7, #8]
9000155e:	687a      	ldr	r2, [r7, #4]
90001560:	47a0      	blx	r4
90001562:	4603      	mov	r3, r0
}
90001564:	4618      	mov	r0, r3
90001566:	371c      	adds	r7, #28
90001568:	46bd      	mov	sp, r7
9000156a:	bd90      	pop	{r4, r7, pc}

9000156c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000156c:	b590      	push	{r4, r7, lr}
9000156e:	b087      	sub	sp, #28
90001570:	af00      	add	r7, sp, #0
90001572:	60f8      	str	r0, [r7, #12]
90001574:	607a      	str	r2, [r7, #4]
90001576:	461a      	mov	r2, r3
90001578:	460b      	mov	r3, r1
9000157a:	72fb      	strb	r3, [r7, #11]
9000157c:	4613      	mov	r3, r2
9000157e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001580:	68fb      	ldr	r3, [r7, #12]
90001582:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001584:	697b      	ldr	r3, [r7, #20]
90001586:	68dc      	ldr	r4, [r3, #12]
90001588:	697b      	ldr	r3, [r7, #20]
9000158a:	8918      	ldrh	r0, [r3, #8]
9000158c:	7afb      	ldrb	r3, [r7, #11]
9000158e:	b299      	uxth	r1, r3
90001590:	893b      	ldrh	r3, [r7, #8]
90001592:	687a      	ldr	r2, [r7, #4]
90001594:	47a0      	blx	r4
90001596:	4603      	mov	r3, r0
}
90001598:	4618      	mov	r0, r3
9000159a:	371c      	adds	r7, #28
9000159c:	46bd      	mov	sp, r7
9000159e:	bd90      	pop	{r4, r7, pc}

900015a0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900015a0:	b590      	push	{r4, r7, lr}
900015a2:	b085      	sub	sp, #20
900015a4:	af00      	add	r7, sp, #0
900015a6:	60f8      	str	r0, [r7, #12]
900015a8:	607a      	str	r2, [r7, #4]
900015aa:	461a      	mov	r2, r3
900015ac:	460b      	mov	r3, r1
900015ae:	72fb      	strb	r3, [r7, #11]
900015b0:	4613      	mov	r3, r2
900015b2:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900015b4:	68fb      	ldr	r3, [r7, #12]
900015b6:	685c      	ldr	r4, [r3, #4]
900015b8:	68fb      	ldr	r3, [r7, #12]
900015ba:	6898      	ldr	r0, [r3, #8]
900015bc:	893b      	ldrh	r3, [r7, #8]
900015be:	7af9      	ldrb	r1, [r7, #11]
900015c0:	687a      	ldr	r2, [r7, #4]
900015c2:	47a0      	blx	r4
900015c4:	4603      	mov	r3, r0
}
900015c6:	4618      	mov	r0, r3
900015c8:	3714      	adds	r7, #20
900015ca:	46bd      	mov	sp, r7
900015cc:	bd90      	pop	{r4, r7, pc}

900015ce <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900015ce:	b580      	push	{r7, lr}
900015d0:	b084      	sub	sp, #16
900015d2:	af00      	add	r7, sp, #0
900015d4:	6078      	str	r0, [r7, #4]
900015d6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900015d8:	2301      	movs	r3, #1
900015da:	683a      	ldr	r2, [r7, #0]
900015dc:	21a8      	movs	r1, #168	@ 0xa8
900015de:	6878      	ldr	r0, [r7, #4]
900015e0:	f7ff ffde 	bl	900015a0 <ft5336_read_reg>
900015e4:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900015e6:	68fb      	ldr	r3, [r7, #12]
900015e8:	2b00      	cmp	r3, #0
900015ea:	d107      	bne.n	900015fc <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900015ec:	683b      	ldr	r3, [r7, #0]
900015ee:	781a      	ldrb	r2, [r3, #0]
900015f0:	683b      	ldr	r3, [r7, #0]
900015f2:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900015f4:	683b      	ldr	r3, [r7, #0]
900015f6:	781a      	ldrb	r2, [r3, #0]
900015f8:	683b      	ldr	r3, [r7, #0]
900015fa:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900015fc:	68fb      	ldr	r3, [r7, #12]
}
900015fe:	4618      	mov	r0, r3
90001600:	3710      	adds	r7, #16
90001602:	46bd      	mov	sp, r7
90001604:	bd80      	pop	{r7, pc}

90001606 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001606:	b580      	push	{r7, lr}
90001608:	b084      	sub	sp, #16
9000160a:	af00      	add	r7, sp, #0
9000160c:	6078      	str	r0, [r7, #4]
9000160e:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90001610:	f04f 33ff 	mov.w	r3, #4294967295
90001614:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90001616:	683b      	ldr	r3, [r7, #0]
90001618:	681b      	ldr	r3, [r3, #0]
9000161a:	4619      	mov	r1, r3
9000161c:	6878      	ldr	r0, [r7, #4]
9000161e:	f000 f831 	bl	90001684 <MT48LC4M32B2_ClockEnable>
90001622:	4603      	mov	r3, r0
90001624:	2b00      	cmp	r3, #0
90001626:	d128      	bne.n	9000167a <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90001628:	2001      	movs	r0, #1
9000162a:	f000 f8e1 	bl	900017f0 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000162e:	683b      	ldr	r3, [r7, #0]
90001630:	681b      	ldr	r3, [r3, #0]
90001632:	4619      	mov	r1, r3
90001634:	6878      	ldr	r0, [r7, #4]
90001636:	f000 f849 	bl	900016cc <MT48LC4M32B2_Precharge>
9000163a:	4603      	mov	r3, r0
9000163c:	2b00      	cmp	r3, #0
9000163e:	d11c      	bne.n	9000167a <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
90001640:	683b      	ldr	r3, [r7, #0]
90001642:	6819      	ldr	r1, [r3, #0]
90001644:	683b      	ldr	r3, [r7, #0]
90001646:	685b      	ldr	r3, [r3, #4]
90001648:	461a      	mov	r2, r3
9000164a:	6878      	ldr	r0, [r7, #4]
9000164c:	f000 f896 	bl	9000177c <MT48LC4M32B2_RefreshMode>
90001650:	4603      	mov	r3, r0
90001652:	2b00      	cmp	r3, #0
90001654:	d111      	bne.n	9000167a <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001656:	6839      	ldr	r1, [r7, #0]
90001658:	6878      	ldr	r0, [r7, #4]
9000165a:	f000 f85b 	bl	90001714 <MT48LC4M32B2_ModeRegConfig>
9000165e:	4603      	mov	r3, r0
90001660:	2b00      	cmp	r3, #0
90001662:	d10a      	bne.n	9000167a <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001664:	683b      	ldr	r3, [r7, #0]
90001666:	689b      	ldr	r3, [r3, #8]
90001668:	4619      	mov	r1, r3
9000166a:	6878      	ldr	r0, [r7, #4]
9000166c:	f000 f8ac 	bl	900017c8 <MT48LC4M32B2_RefreshRate>
90001670:	4603      	mov	r3, r0
90001672:	2b00      	cmp	r3, #0
90001674:	d101      	bne.n	9000167a <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001676:	2300      	movs	r3, #0
90001678:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
9000167a:	68fb      	ldr	r3, [r7, #12]
}
9000167c:	4618      	mov	r0, r3
9000167e:	3710      	adds	r7, #16
90001680:	46bd      	mov	sp, r7
90001682:	bd80      	pop	{r7, pc}

90001684 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001684:	b580      	push	{r7, lr}
90001686:	b082      	sub	sp, #8
90001688:	af00      	add	r7, sp, #0
9000168a:	6078      	str	r0, [r7, #4]
9000168c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000168e:	4b0e      	ldr	r3, [pc, #56]	@ (900016c8 <MT48LC4M32B2_ClockEnable+0x44>)
90001690:	2201      	movs	r2, #1
90001692:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001694:	4a0c      	ldr	r2, [pc, #48]	@ (900016c8 <MT48LC4M32B2_ClockEnable+0x44>)
90001696:	683b      	ldr	r3, [r7, #0]
90001698:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000169a:	4b0b      	ldr	r3, [pc, #44]	@ (900016c8 <MT48LC4M32B2_ClockEnable+0x44>)
9000169c:	2201      	movs	r2, #1
9000169e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900016a0:	4b09      	ldr	r3, [pc, #36]	@ (900016c8 <MT48LC4M32B2_ClockEnable+0x44>)
900016a2:	2200      	movs	r2, #0
900016a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900016a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900016aa:	4907      	ldr	r1, [pc, #28]	@ (900016c8 <MT48LC4M32B2_ClockEnable+0x44>)
900016ac:	6878      	ldr	r0, [r7, #4]
900016ae:	f008 f8cf 	bl	90009850 <HAL_SDRAM_SendCommand>
900016b2:	4603      	mov	r3, r0
900016b4:	2b00      	cmp	r3, #0
900016b6:	d002      	beq.n	900016be <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900016b8:	f04f 33ff 	mov.w	r3, #4294967295
900016bc:	e000      	b.n	900016c0 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900016be:	2300      	movs	r3, #0
  }
}
900016c0:	4618      	mov	r0, r3
900016c2:	3708      	adds	r7, #8
900016c4:	46bd      	mov	sp, r7
900016c6:	bd80      	pop	{r7, pc}
900016c8:	2000062c 	.word	0x2000062c

900016cc <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900016cc:	b580      	push	{r7, lr}
900016ce:	b082      	sub	sp, #8
900016d0:	af00      	add	r7, sp, #0
900016d2:	6078      	str	r0, [r7, #4]
900016d4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900016d6:	4b0e      	ldr	r3, [pc, #56]	@ (90001710 <MT48LC4M32B2_Precharge+0x44>)
900016d8:	2202      	movs	r2, #2
900016da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900016dc:	4a0c      	ldr	r2, [pc, #48]	@ (90001710 <MT48LC4M32B2_Precharge+0x44>)
900016de:	683b      	ldr	r3, [r7, #0]
900016e0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900016e2:	4b0b      	ldr	r3, [pc, #44]	@ (90001710 <MT48LC4M32B2_Precharge+0x44>)
900016e4:	2201      	movs	r2, #1
900016e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900016e8:	4b09      	ldr	r3, [pc, #36]	@ (90001710 <MT48LC4M32B2_Precharge+0x44>)
900016ea:	2200      	movs	r2, #0
900016ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900016ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900016f2:	4907      	ldr	r1, [pc, #28]	@ (90001710 <MT48LC4M32B2_Precharge+0x44>)
900016f4:	6878      	ldr	r0, [r7, #4]
900016f6:	f008 f8ab 	bl	90009850 <HAL_SDRAM_SendCommand>
900016fa:	4603      	mov	r3, r0
900016fc:	2b00      	cmp	r3, #0
900016fe:	d002      	beq.n	90001706 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001700:	f04f 33ff 	mov.w	r3, #4294967295
90001704:	e000      	b.n	90001708 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001706:	2300      	movs	r3, #0
  }
}
90001708:	4618      	mov	r0, r3
9000170a:	3708      	adds	r7, #8
9000170c:	46bd      	mov	sp, r7
9000170e:	bd80      	pop	{r7, pc}
90001710:	2000062c 	.word	0x2000062c

90001714 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001714:	b580      	push	{r7, lr}
90001716:	b084      	sub	sp, #16
90001718:	af00      	add	r7, sp, #0
9000171a:	6078      	str	r0, [r7, #4]
9000171c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000171e:	683b      	ldr	r3, [r7, #0]
90001720:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
90001722:	683b      	ldr	r3, [r7, #0]
90001724:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001726:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001728:	683b      	ldr	r3, [r7, #0]
9000172a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
9000172c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
9000172e:	683b      	ldr	r3, [r7, #0]
90001730:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001732:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001734:	683b      	ldr	r3, [r7, #0]
90001736:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001738:	4313      	orrs	r3, r2
9000173a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000173c:	4b0e      	ldr	r3, [pc, #56]	@ (90001778 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000173e:	2204      	movs	r2, #4
90001740:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001742:	683b      	ldr	r3, [r7, #0]
90001744:	681b      	ldr	r3, [r3, #0]
90001746:	4a0c      	ldr	r2, [pc, #48]	@ (90001778 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001748:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000174a:	4b0b      	ldr	r3, [pc, #44]	@ (90001778 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000174c:	2201      	movs	r2, #1
9000174e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001750:	4a09      	ldr	r2, [pc, #36]	@ (90001778 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001752:	68fb      	ldr	r3, [r7, #12]
90001754:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001756:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000175a:	4907      	ldr	r1, [pc, #28]	@ (90001778 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000175c:	6878      	ldr	r0, [r7, #4]
9000175e:	f008 f877 	bl	90009850 <HAL_SDRAM_SendCommand>
90001762:	4603      	mov	r3, r0
90001764:	2b00      	cmp	r3, #0
90001766:	d002      	beq.n	9000176e <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001768:	f04f 33ff 	mov.w	r3, #4294967295
9000176c:	e000      	b.n	90001770 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000176e:	2300      	movs	r3, #0
  }
}
90001770:	4618      	mov	r0, r3
90001772:	3710      	adds	r7, #16
90001774:	46bd      	mov	sp, r7
90001776:	bd80      	pop	{r7, pc}
90001778:	2000062c 	.word	0x2000062c

9000177c <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
9000177c:	b580      	push	{r7, lr}
9000177e:	b084      	sub	sp, #16
90001780:	af00      	add	r7, sp, #0
90001782:	60f8      	str	r0, [r7, #12]
90001784:	60b9      	str	r1, [r7, #8]
90001786:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001788:	4a0e      	ldr	r2, [pc, #56]	@ (900017c4 <MT48LC4M32B2_RefreshMode+0x48>)
9000178a:	687b      	ldr	r3, [r7, #4]
9000178c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
9000178e:	4a0d      	ldr	r2, [pc, #52]	@ (900017c4 <MT48LC4M32B2_RefreshMode+0x48>)
90001790:	68bb      	ldr	r3, [r7, #8]
90001792:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001794:	4b0b      	ldr	r3, [pc, #44]	@ (900017c4 <MT48LC4M32B2_RefreshMode+0x48>)
90001796:	2208      	movs	r2, #8
90001798:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000179a:	4b0a      	ldr	r3, [pc, #40]	@ (900017c4 <MT48LC4M32B2_RefreshMode+0x48>)
9000179c:	2200      	movs	r2, #0
9000179e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900017a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900017a4:	4907      	ldr	r1, [pc, #28]	@ (900017c4 <MT48LC4M32B2_RefreshMode+0x48>)
900017a6:	68f8      	ldr	r0, [r7, #12]
900017a8:	f008 f852 	bl	90009850 <HAL_SDRAM_SendCommand>
900017ac:	4603      	mov	r3, r0
900017ae:	2b00      	cmp	r3, #0
900017b0:	d002      	beq.n	900017b8 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
900017b2:	f04f 33ff 	mov.w	r3, #4294967295
900017b6:	e000      	b.n	900017ba <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
900017b8:	2300      	movs	r3, #0
  }
}
900017ba:	4618      	mov	r0, r3
900017bc:	3710      	adds	r7, #16
900017be:	46bd      	mov	sp, r7
900017c0:	bd80      	pop	{r7, pc}
900017c2:	bf00      	nop
900017c4:	2000062c 	.word	0x2000062c

900017c8 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
900017c8:	b580      	push	{r7, lr}
900017ca:	b082      	sub	sp, #8
900017cc:	af00      	add	r7, sp, #0
900017ce:	6078      	str	r0, [r7, #4]
900017d0:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900017d2:	6839      	ldr	r1, [r7, #0]
900017d4:	6878      	ldr	r0, [r7, #4]
900017d6:	f008 f870 	bl	900098ba <HAL_SDRAM_ProgramRefreshRate>
900017da:	4603      	mov	r3, r0
900017dc:	2b00      	cmp	r3, #0
900017de:	d002      	beq.n	900017e6 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
900017e0:	f04f 33ff 	mov.w	r3, #4294967295
900017e4:	e000      	b.n	900017e8 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
900017e6:	2300      	movs	r3, #0
  }
}
900017e8:	4618      	mov	r0, r3
900017ea:	3708      	adds	r7, #8
900017ec:	46bd      	mov	sp, r7
900017ee:	bd80      	pop	{r7, pc}

900017f0 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
900017f0:	b580      	push	{r7, lr}
900017f2:	b084      	sub	sp, #16
900017f4:	af00      	add	r7, sp, #0
900017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900017f8:	f001 fd2a 	bl	90003250 <HAL_GetTick>
900017fc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900017fe:	bf00      	nop
90001800:	f001 fd26 	bl	90003250 <HAL_GetTick>
90001804:	4602      	mov	r2, r0
90001806:	68fb      	ldr	r3, [r7, #12]
90001808:	1ad3      	subs	r3, r2, r3
9000180a:	687a      	ldr	r2, [r7, #4]
9000180c:	429a      	cmp	r2, r3
9000180e:	d8f7      	bhi.n	90001800 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001810:	2300      	movs	r3, #0
}
90001812:	4618      	mov	r0, r3
90001814:	3710      	adds	r7, #16
90001816:	46bd      	mov	sp, r7
90001818:	bd80      	pop	{r7, pc}
	...

9000181c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
9000181c:	b580      	push	{r7, lr}
9000181e:	b082      	sub	sp, #8
90001820:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001822:	2300      	movs	r3, #0
90001824:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001826:	4b16      	ldr	r3, [pc, #88]	@ (90001880 <BSP_I2C4_Init+0x64>)
90001828:	4a16      	ldr	r2, [pc, #88]	@ (90001884 <BSP_I2C4_Init+0x68>)
9000182a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
9000182c:	4b16      	ldr	r3, [pc, #88]	@ (90001888 <BSP_I2C4_Init+0x6c>)
9000182e:	681b      	ldr	r3, [r3, #0]
90001830:	2b00      	cmp	r3, #0
90001832:	d11f      	bne.n	90001874 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001834:	4b14      	ldr	r3, [pc, #80]	@ (90001888 <BSP_I2C4_Init+0x6c>)
90001836:	681b      	ldr	r3, [r3, #0]
90001838:	3301      	adds	r3, #1
9000183a:	4a13      	ldr	r2, [pc, #76]	@ (90001888 <BSP_I2C4_Init+0x6c>)
9000183c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
9000183e:	4810      	ldr	r0, [pc, #64]	@ (90001880 <BSP_I2C4_Init+0x64>)
90001840:	f004 faf8 	bl	90005e34 <HAL_I2C_GetState>
90001844:	4603      	mov	r3, r0
90001846:	2b00      	cmp	r3, #0
90001848:	d114      	bne.n	90001874 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
9000184a:	480d      	ldr	r0, [pc, #52]	@ (90001880 <BSP_I2C4_Init+0x64>)
9000184c:	f000 fb06 	bl	90001e5c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001850:	f006 f976 	bl	90007b40 <HAL_RCC_GetPCLK2Freq>
90001854:	4603      	mov	r3, r0
90001856:	490d      	ldr	r1, [pc, #52]	@ (9000188c <BSP_I2C4_Init+0x70>)
90001858:	4618      	mov	r0, r3
9000185a:	f000 f889 	bl	90001970 <I2C_GetTiming>
9000185e:	4603      	mov	r3, r0
90001860:	4619      	mov	r1, r3
90001862:	4807      	ldr	r0, [pc, #28]	@ (90001880 <BSP_I2C4_Init+0x64>)
90001864:	f000 f814 	bl	90001890 <MX_I2C4_Init>
90001868:	4603      	mov	r3, r0
9000186a:	2b00      	cmp	r3, #0
9000186c:	d002      	beq.n	90001874 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
9000186e:	f06f 0307 	mvn.w	r3, #7
90001872:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001874:	687b      	ldr	r3, [r7, #4]
}
90001876:	4618      	mov	r0, r3
90001878:	3708      	adds	r7, #8
9000187a:	46bd      	mov	sp, r7
9000187c:	bd80      	pop	{r7, pc}
9000187e:	bf00      	nop
90001880:	20001044 	.word	0x20001044
90001884:	58001c00 	.word	0x58001c00
90001888:	2000063c 	.word	0x2000063c
9000188c:	000186a0 	.word	0x000186a0

90001890 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001890:	b580      	push	{r7, lr}
90001892:	b084      	sub	sp, #16
90001894:	af00      	add	r7, sp, #0
90001896:	6078      	str	r0, [r7, #4]
90001898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
9000189a:	2300      	movs	r3, #0
9000189c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
9000189e:	687b      	ldr	r3, [r7, #4]
900018a0:	683a      	ldr	r2, [r7, #0]
900018a2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
900018a4:	687b      	ldr	r3, [r7, #4]
900018a6:	2200      	movs	r2, #0
900018a8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
900018aa:	687b      	ldr	r3, [r7, #4]
900018ac:	2201      	movs	r2, #1
900018ae:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
900018b0:	687b      	ldr	r3, [r7, #4]
900018b2:	2200      	movs	r2, #0
900018b4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
900018b6:	687b      	ldr	r3, [r7, #4]
900018b8:	2200      	movs	r2, #0
900018ba:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
900018bc:	687b      	ldr	r3, [r7, #4]
900018be:	2200      	movs	r2, #0
900018c0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
900018c2:	687b      	ldr	r3, [r7, #4]
900018c4:	2200      	movs	r2, #0
900018c6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
900018c8:	687b      	ldr	r3, [r7, #4]
900018ca:	2200      	movs	r2, #0
900018cc:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
900018ce:	6878      	ldr	r0, [r7, #4]
900018d0:	f004 f8f0 	bl	90005ab4 <HAL_I2C_Init>
900018d4:	4603      	mov	r3, r0
900018d6:	2b00      	cmp	r3, #0
900018d8:	d002      	beq.n	900018e0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
900018da:	2301      	movs	r3, #1
900018dc:	73fb      	strb	r3, [r7, #15]
900018de:	e014      	b.n	9000190a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
900018e0:	2300      	movs	r3, #0
900018e2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
900018e4:	68b9      	ldr	r1, [r7, #8]
900018e6:	6878      	ldr	r0, [r7, #4]
900018e8:	f004 fd2c 	bl	90006344 <HAL_I2CEx_ConfigAnalogFilter>
900018ec:	4603      	mov	r3, r0
900018ee:	2b00      	cmp	r3, #0
900018f0:	d002      	beq.n	900018f8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
900018f2:	2301      	movs	r3, #1
900018f4:	73fb      	strb	r3, [r7, #15]
900018f6:	e008      	b.n	9000190a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
900018f8:	2100      	movs	r1, #0
900018fa:	6878      	ldr	r0, [r7, #4]
900018fc:	f004 fd6d 	bl	900063da <HAL_I2CEx_ConfigDigitalFilter>
90001900:	4603      	mov	r3, r0
90001902:	2b00      	cmp	r3, #0
90001904:	d001      	beq.n	9000190a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001906:	2301      	movs	r3, #1
90001908:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
9000190a:	7bfb      	ldrb	r3, [r7, #15]
}
9000190c:	4618      	mov	r0, r3
9000190e:	3710      	adds	r7, #16
90001910:	46bd      	mov	sp, r7
90001912:	bd80      	pop	{r7, pc}

90001914 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001914:	b580      	push	{r7, lr}
90001916:	b088      	sub	sp, #32
90001918:	af02      	add	r7, sp, #8
9000191a:	60ba      	str	r2, [r7, #8]
9000191c:	461a      	mov	r2, r3
9000191e:	4603      	mov	r3, r0
90001920:	81fb      	strh	r3, [r7, #14]
90001922:	460b      	mov	r3, r1
90001924:	81bb      	strh	r3, [r7, #12]
90001926:	4613      	mov	r3, r2
90001928:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
9000192a:	89b9      	ldrh	r1, [r7, #12]
9000192c:	89f8      	ldrh	r0, [r7, #14]
9000192e:	88fb      	ldrh	r3, [r7, #6]
90001930:	9300      	str	r3, [sp, #0]
90001932:	68bb      	ldr	r3, [r7, #8]
90001934:	2201      	movs	r2, #1
90001936:	f000 fafd 	bl	90001f34 <I2C4_ReadReg>
9000193a:	4603      	mov	r3, r0
9000193c:	2b00      	cmp	r3, #0
9000193e:	d102      	bne.n	90001946 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001940:	2300      	movs	r3, #0
90001942:	617b      	str	r3, [r7, #20]
90001944:	e00c      	b.n	90001960 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001946:	4809      	ldr	r0, [pc, #36]	@ (9000196c <BSP_I2C4_ReadReg+0x58>)
90001948:	f004 fa82 	bl	90005e50 <HAL_I2C_GetError>
9000194c:	4603      	mov	r3, r0
9000194e:	2b04      	cmp	r3, #4
90001950:	d103      	bne.n	9000195a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001952:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001956:	617b      	str	r3, [r7, #20]
90001958:	e002      	b.n	90001960 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
9000195a:	f06f 0303 	mvn.w	r3, #3
9000195e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001960:	697b      	ldr	r3, [r7, #20]
}
90001962:	4618      	mov	r0, r3
90001964:	3718      	adds	r7, #24
90001966:	46bd      	mov	sp, r7
90001968:	bd80      	pop	{r7, pc}
9000196a:	bf00      	nop
9000196c:	20001044 	.word	0x20001044

90001970 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001970:	b580      	push	{r7, lr}
90001972:	b086      	sub	sp, #24
90001974:	af00      	add	r7, sp, #0
90001976:	6078      	str	r0, [r7, #4]
90001978:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
9000197a:	2300      	movs	r3, #0
9000197c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
9000197e:	687b      	ldr	r3, [r7, #4]
90001980:	2b00      	cmp	r3, #0
90001982:	d06b      	beq.n	90001a5c <I2C_GetTiming+0xec>
90001984:	683b      	ldr	r3, [r7, #0]
90001986:	2b00      	cmp	r3, #0
90001988:	d068      	beq.n	90001a5c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
9000198a:	2300      	movs	r3, #0
9000198c:	613b      	str	r3, [r7, #16]
9000198e:	e060      	b.n	90001a52 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001990:	4a35      	ldr	r2, [pc, #212]	@ (90001a68 <I2C_GetTiming+0xf8>)
90001992:	693b      	ldr	r3, [r7, #16]
90001994:	212c      	movs	r1, #44	@ 0x2c
90001996:	fb01 f303 	mul.w	r3, r1, r3
9000199a:	4413      	add	r3, r2
9000199c:	3304      	adds	r3, #4
9000199e:	681b      	ldr	r3, [r3, #0]
900019a0:	683a      	ldr	r2, [r7, #0]
900019a2:	429a      	cmp	r2, r3
900019a4:	d352      	bcc.n	90001a4c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
900019a6:	4a30      	ldr	r2, [pc, #192]	@ (90001a68 <I2C_GetTiming+0xf8>)
900019a8:	693b      	ldr	r3, [r7, #16]
900019aa:	212c      	movs	r1, #44	@ 0x2c
900019ac:	fb01 f303 	mul.w	r3, r1, r3
900019b0:	4413      	add	r3, r2
900019b2:	3308      	adds	r3, #8
900019b4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
900019b6:	683a      	ldr	r2, [r7, #0]
900019b8:	429a      	cmp	r2, r3
900019ba:	d847      	bhi.n	90001a4c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
900019bc:	6939      	ldr	r1, [r7, #16]
900019be:	6878      	ldr	r0, [r7, #4]
900019c0:	f000 f856 	bl	90001a70 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
900019c4:	6939      	ldr	r1, [r7, #16]
900019c6:	6878      	ldr	r0, [r7, #4]
900019c8:	f000 f940 	bl	90001c4c <I2C_Compute_SCLL_SCLH>
900019cc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
900019ce:	68fb      	ldr	r3, [r7, #12]
900019d0:	2b7f      	cmp	r3, #127	@ 0x7f
900019d2:	d842      	bhi.n	90001a5a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900019d4:	4925      	ldr	r1, [pc, #148]	@ (90001a6c <I2C_GetTiming+0xfc>)
900019d6:	68fa      	ldr	r2, [r7, #12]
900019d8:	4613      	mov	r3, r2
900019da:	009b      	lsls	r3, r3, #2
900019dc:	4413      	add	r3, r2
900019de:	009b      	lsls	r3, r3, #2
900019e0:	440b      	add	r3, r1
900019e2:	681b      	ldr	r3, [r3, #0]
900019e4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900019e6:	4821      	ldr	r0, [pc, #132]	@ (90001a6c <I2C_GetTiming+0xfc>)
900019e8:	68fa      	ldr	r2, [r7, #12]
900019ea:	4613      	mov	r3, r2
900019ec:	009b      	lsls	r3, r3, #2
900019ee:	4413      	add	r3, r2
900019f0:	009b      	lsls	r3, r3, #2
900019f2:	4403      	add	r3, r0
900019f4:	3304      	adds	r3, #4
900019f6:	681b      	ldr	r3, [r3, #0]
900019f8:	051b      	lsls	r3, r3, #20
900019fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900019fe:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001a00:	481a      	ldr	r0, [pc, #104]	@ (90001a6c <I2C_GetTiming+0xfc>)
90001a02:	68fa      	ldr	r2, [r7, #12]
90001a04:	4613      	mov	r3, r2
90001a06:	009b      	lsls	r3, r3, #2
90001a08:	4413      	add	r3, r2
90001a0a:	009b      	lsls	r3, r3, #2
90001a0c:	4403      	add	r3, r0
90001a0e:	3308      	adds	r3, #8
90001a10:	681b      	ldr	r3, [r3, #0]
90001a12:	041b      	lsls	r3, r3, #16
90001a14:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001a18:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001a1a:	4814      	ldr	r0, [pc, #80]	@ (90001a6c <I2C_GetTiming+0xfc>)
90001a1c:	68fa      	ldr	r2, [r7, #12]
90001a1e:	4613      	mov	r3, r2
90001a20:	009b      	lsls	r3, r3, #2
90001a22:	4413      	add	r3, r2
90001a24:	009b      	lsls	r3, r3, #2
90001a26:	4403      	add	r3, r0
90001a28:	330c      	adds	r3, #12
90001a2a:	681b      	ldr	r3, [r3, #0]
90001a2c:	021b      	lsls	r3, r3, #8
90001a2e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001a30:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001a32:	480e      	ldr	r0, [pc, #56]	@ (90001a6c <I2C_GetTiming+0xfc>)
90001a34:	68fa      	ldr	r2, [r7, #12]
90001a36:	4613      	mov	r3, r2
90001a38:	009b      	lsls	r3, r3, #2
90001a3a:	4413      	add	r3, r2
90001a3c:	009b      	lsls	r3, r3, #2
90001a3e:	4403      	add	r3, r0
90001a40:	3310      	adds	r3, #16
90001a42:	681b      	ldr	r3, [r3, #0]
90001a44:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001a46:	430b      	orrs	r3, r1
90001a48:	617b      	str	r3, [r7, #20]
        }
        break;
90001a4a:	e006      	b.n	90001a5a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001a4c:	693b      	ldr	r3, [r7, #16]
90001a4e:	3301      	adds	r3, #1
90001a50:	613b      	str	r3, [r7, #16]
90001a52:	693b      	ldr	r3, [r7, #16]
90001a54:	2b02      	cmp	r3, #2
90001a56:	d99b      	bls.n	90001990 <I2C_GetTiming+0x20>
90001a58:	e000      	b.n	90001a5c <I2C_GetTiming+0xec>
        break;
90001a5a:	bf00      	nop
      }
    }
  }

  return ret;
90001a5c:	697b      	ldr	r3, [r7, #20]
}
90001a5e:	4618      	mov	r0, r3
90001a60:	3718      	adds	r7, #24
90001a62:	46bd      	mov	sp, r7
90001a64:	bd80      	pop	{r7, pc}
90001a66:	bf00      	nop
90001a68:	9000d6a0 	.word	0x9000d6a0
90001a6c:	20000640 	.word	0x20000640

90001a70 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001a70:	b480      	push	{r7}
90001a72:	b08f      	sub	sp, #60	@ 0x3c
90001a74:	af00      	add	r7, sp, #0
90001a76:	6078      	str	r0, [r7, #4]
90001a78:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001a7a:	2310      	movs	r3, #16
90001a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001a7e:	687b      	ldr	r3, [r7, #4]
90001a80:	085a      	lsrs	r2, r3, #1
90001a82:	4b6e      	ldr	r3, [pc, #440]	@ (90001c3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001a84:	4413      	add	r3, r2
90001a86:	687a      	ldr	r2, [r7, #4]
90001a88:	fbb3 f3f2 	udiv	r3, r3, r2
90001a8c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001a8e:	2332      	movs	r3, #50	@ 0x32
90001a90:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001a92:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001a96:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001a98:	4a69      	ldr	r2, [pc, #420]	@ (90001c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a9a:	683b      	ldr	r3, [r7, #0]
90001a9c:	212c      	movs	r1, #44	@ 0x2c
90001a9e:	fb01 f303 	mul.w	r3, r1, r3
90001aa2:	4413      	add	r3, r2
90001aa4:	3324      	adds	r3, #36	@ 0x24
90001aa6:	681b      	ldr	r3, [r3, #0]
90001aa8:	4618      	mov	r0, r3
90001aaa:	4a65      	ldr	r2, [pc, #404]	@ (90001c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001aac:	683b      	ldr	r3, [r7, #0]
90001aae:	212c      	movs	r1, #44	@ 0x2c
90001ab0:	fb01 f303 	mul.w	r3, r1, r3
90001ab4:	4413      	add	r3, r2
90001ab6:	330c      	adds	r3, #12
90001ab8:	681b      	ldr	r3, [r3, #0]
90001aba:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001abc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001abe:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001ac0:	495f      	ldr	r1, [pc, #380]	@ (90001c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ac2:	683b      	ldr	r3, [r7, #0]
90001ac4:	202c      	movs	r0, #44	@ 0x2c
90001ac6:	fb00 f303 	mul.w	r3, r0, r3
90001aca:	440b      	add	r3, r1
90001acc:	3328      	adds	r3, #40	@ 0x28
90001ace:	681b      	ldr	r3, [r3, #0]
90001ad0:	3303      	adds	r3, #3
90001ad2:	69f9      	ldr	r1, [r7, #28]
90001ad4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001ad8:	1ad3      	subs	r3, r2, r3
90001ada:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001adc:	4a58      	ldr	r2, [pc, #352]	@ (90001c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ade:	683b      	ldr	r3, [r7, #0]
90001ae0:	212c      	movs	r1, #44	@ 0x2c
90001ae2:	fb01 f303 	mul.w	r3, r1, r3
90001ae6:	4413      	add	r3, r2
90001ae8:	3310      	adds	r3, #16
90001aea:	681b      	ldr	r3, [r3, #0]
90001aec:	4618      	mov	r0, r3
90001aee:	4a54      	ldr	r2, [pc, #336]	@ (90001c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001af0:	683b      	ldr	r3, [r7, #0]
90001af2:	212c      	movs	r1, #44	@ 0x2c
90001af4:	fb01 f303 	mul.w	r3, r1, r3
90001af8:	4413      	add	r3, r2
90001afa:	3320      	adds	r3, #32
90001afc:	681b      	ldr	r3, [r3, #0]
90001afe:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001b00:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001b02:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001b04:	494e      	ldr	r1, [pc, #312]	@ (90001c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b06:	683b      	ldr	r3, [r7, #0]
90001b08:	202c      	movs	r0, #44	@ 0x2c
90001b0a:	fb00 f303 	mul.w	r3, r0, r3
90001b0e:	440b      	add	r3, r1
90001b10:	3328      	adds	r3, #40	@ 0x28
90001b12:	681b      	ldr	r3, [r3, #0]
90001b14:	3304      	adds	r3, #4
90001b16:	69f9      	ldr	r1, [r7, #28]
90001b18:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001b1c:	1ad3      	subs	r3, r2, r3
90001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001b20:	4a47      	ldr	r2, [pc, #284]	@ (90001c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b22:	683b      	ldr	r3, [r7, #0]
90001b24:	212c      	movs	r1, #44	@ 0x2c
90001b26:	fb01 f303 	mul.w	r3, r1, r3
90001b2a:	4413      	add	r3, r2
90001b2c:	3320      	adds	r3, #32
90001b2e:	681b      	ldr	r3, [r3, #0]
90001b30:	4618      	mov	r0, r3
90001b32:	4a43      	ldr	r2, [pc, #268]	@ (90001c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b34:	683b      	ldr	r3, [r7, #0]
90001b36:	212c      	movs	r1, #44	@ 0x2c
90001b38:	fb01 f303 	mul.w	r3, r1, r3
90001b3c:	4413      	add	r3, r2
90001b3e:	3314      	adds	r3, #20
90001b40:	681b      	ldr	r3, [r3, #0]
90001b42:	4403      	add	r3, r0
90001b44:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001b48:	2b00      	cmp	r3, #0
90001b4a:	dc01      	bgt.n	90001b50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001b4c:	2300      	movs	r3, #0
90001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b52:	2b00      	cmp	r3, #0
90001b54:	dc01      	bgt.n	90001b5a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001b56:	2300      	movs	r3, #0
90001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001b5a:	2300      	movs	r3, #0
90001b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
90001b5e:	e062      	b.n	90001c26 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001b60:	2300      	movs	r3, #0
90001b62:	627b      	str	r3, [r7, #36]	@ 0x24
90001b64:	e059      	b.n	90001c1a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001b68:	3301      	adds	r3, #1
90001b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001b6c:	3201      	adds	r2, #1
90001b6e:	fb03 f202 	mul.w	r2, r3, r2
90001b72:	69fb      	ldr	r3, [r7, #28]
90001b74:	fb02 f303 	mul.w	r3, r2, r3
90001b78:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001b7a:	693b      	ldr	r3, [r7, #16]
90001b7c:	68fa      	ldr	r2, [r7, #12]
90001b7e:	429a      	cmp	r2, r3
90001b80:	d348      	bcc.n	90001c14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001b82:	2300      	movs	r3, #0
90001b84:	623b      	str	r3, [r7, #32]
90001b86:	e042      	b.n	90001c0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001b8a:	3301      	adds	r3, #1
90001b8c:	6a3a      	ldr	r2, [r7, #32]
90001b8e:	fb03 f202 	mul.w	r2, r3, r2
90001b92:	69fb      	ldr	r3, [r7, #28]
90001b94:	fb02 f303 	mul.w	r3, r2, r3
90001b98:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001b9c:	68ba      	ldr	r2, [r7, #8]
90001b9e:	429a      	cmp	r2, r3
90001ba0:	d332      	bcc.n	90001c08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001ba4:	68ba      	ldr	r2, [r7, #8]
90001ba6:	429a      	cmp	r2, r3
90001ba8:	d82e      	bhi.n	90001c08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001bae:	429a      	cmp	r2, r3
90001bb0:	d02a      	beq.n	90001c08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001bb2:	4b24      	ldr	r3, [pc, #144]	@ (90001c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001bb4:	681a      	ldr	r2, [r3, #0]
90001bb6:	4924      	ldr	r1, [pc, #144]	@ (90001c48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001bb8:	4613      	mov	r3, r2
90001bba:	009b      	lsls	r3, r3, #2
90001bbc:	4413      	add	r3, r2
90001bbe:	009b      	lsls	r3, r3, #2
90001bc0:	440b      	add	r3, r1
90001bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001bc4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001bc6:	4b1f      	ldr	r3, [pc, #124]	@ (90001c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001bc8:	681a      	ldr	r2, [r3, #0]
90001bca:	491f      	ldr	r1, [pc, #124]	@ (90001c48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001bcc:	4613      	mov	r3, r2
90001bce:	009b      	lsls	r3, r3, #2
90001bd0:	4413      	add	r3, r2
90001bd2:	009b      	lsls	r3, r3, #2
90001bd4:	440b      	add	r3, r1
90001bd6:	3304      	adds	r3, #4
90001bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001bda:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001bdc:	4b19      	ldr	r3, [pc, #100]	@ (90001c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001bde:	681a      	ldr	r2, [r3, #0]
90001be0:	4919      	ldr	r1, [pc, #100]	@ (90001c48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001be2:	4613      	mov	r3, r2
90001be4:	009b      	lsls	r3, r3, #2
90001be6:	4413      	add	r3, r2
90001be8:	009b      	lsls	r3, r3, #2
90001bea:	440b      	add	r3, r1
90001bec:	3308      	adds	r3, #8
90001bee:	6a3a      	ldr	r2, [r7, #32]
90001bf0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001bf4:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001bf6:	4b13      	ldr	r3, [pc, #76]	@ (90001c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001bf8:	681b      	ldr	r3, [r3, #0]
90001bfa:	3301      	adds	r3, #1
90001bfc:	4a11      	ldr	r2, [pc, #68]	@ (90001c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001bfe:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001c00:	4b10      	ldr	r3, [pc, #64]	@ (90001c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c02:	681b      	ldr	r3, [r3, #0]
90001c04:	2b7f      	cmp	r3, #127	@ 0x7f
90001c06:	d812      	bhi.n	90001c2e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001c08:	6a3b      	ldr	r3, [r7, #32]
90001c0a:	3301      	adds	r3, #1
90001c0c:	623b      	str	r3, [r7, #32]
90001c0e:	6a3b      	ldr	r3, [r7, #32]
90001c10:	2b0f      	cmp	r3, #15
90001c12:	d9b9      	bls.n	90001b88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001c16:	3301      	adds	r3, #1
90001c18:	627b      	str	r3, [r7, #36]	@ 0x24
90001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001c1c:	2b0f      	cmp	r3, #15
90001c1e:	d9a2      	bls.n	90001b66 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c22:	3301      	adds	r3, #1
90001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
90001c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c28:	2b0f      	cmp	r3, #15
90001c2a:	d999      	bls.n	90001b60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001c2c:	e000      	b.n	90001c30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001c2e:	bf00      	nop
          }
        }
      }
    }
  }
}
90001c30:	373c      	adds	r7, #60	@ 0x3c
90001c32:	46bd      	mov	sp, r7
90001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
90001c38:	4770      	bx	lr
90001c3a:	bf00      	nop
90001c3c:	3b9aca00 	.word	0x3b9aca00
90001c40:	9000d6a0 	.word	0x9000d6a0
90001c44:	20001040 	.word	0x20001040
90001c48:	20000640 	.word	0x20000640

90001c4c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001c4c:	b480      	push	{r7}
90001c4e:	b093      	sub	sp, #76	@ 0x4c
90001c50:	af00      	add	r7, sp, #0
90001c52:	6078      	str	r0, [r7, #4]
90001c54:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001c56:	f04f 33ff 	mov.w	r3, #4294967295
90001c5a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001c5c:	687b      	ldr	r3, [r7, #4]
90001c5e:	085a      	lsrs	r2, r3, #1
90001c60:	4b7a      	ldr	r3, [pc, #488]	@ (90001e4c <I2C_Compute_SCLL_SCLH+0x200>)
90001c62:	4413      	add	r3, r2
90001c64:	687a      	ldr	r2, [r7, #4]
90001c66:	fbb3 f3f2 	udiv	r3, r3, r2
90001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001c6c:	4a78      	ldr	r2, [pc, #480]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001c6e:	683b      	ldr	r3, [r7, #0]
90001c70:	212c      	movs	r1, #44	@ 0x2c
90001c72:	fb01 f303 	mul.w	r3, r1, r3
90001c76:	4413      	add	r3, r2
90001c78:	681b      	ldr	r3, [r3, #0]
90001c7a:	085a      	lsrs	r2, r3, #1
90001c7c:	4b73      	ldr	r3, [pc, #460]	@ (90001e4c <I2C_Compute_SCLL_SCLH+0x200>)
90001c7e:	4413      	add	r3, r2
90001c80:	4973      	ldr	r1, [pc, #460]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001c82:	683a      	ldr	r2, [r7, #0]
90001c84:	202c      	movs	r0, #44	@ 0x2c
90001c86:	fb00 f202 	mul.w	r2, r0, r2
90001c8a:	440a      	add	r2, r1
90001c8c:	6812      	ldr	r2, [r2, #0]
90001c8e:	fbb3 f3f2 	udiv	r3, r3, r2
90001c92:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001c94:	2332      	movs	r3, #50	@ 0x32
90001c96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001c98:	4a6d      	ldr	r2, [pc, #436]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001c9a:	683b      	ldr	r3, [r7, #0]
90001c9c:	212c      	movs	r1, #44	@ 0x2c
90001c9e:	fb01 f303 	mul.w	r3, r1, r3
90001ca2:	4413      	add	r3, r2
90001ca4:	3328      	adds	r3, #40	@ 0x28
90001ca6:	681a      	ldr	r2, [r3, #0]
90001ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001caa:	fb02 f303 	mul.w	r3, r2, r3
90001cae:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001cb0:	4a67      	ldr	r2, [pc, #412]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001cb2:	683b      	ldr	r3, [r7, #0]
90001cb4:	212c      	movs	r1, #44	@ 0x2c
90001cb6:	fb01 f303 	mul.w	r3, r1, r3
90001cba:	4413      	add	r3, r2
90001cbc:	3304      	adds	r3, #4
90001cbe:	681b      	ldr	r3, [r3, #0]
90001cc0:	4a62      	ldr	r2, [pc, #392]	@ (90001e4c <I2C_Compute_SCLL_SCLH+0x200>)
90001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
90001cc6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001cc8:	4a61      	ldr	r2, [pc, #388]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001cca:	683b      	ldr	r3, [r7, #0]
90001ccc:	212c      	movs	r1, #44	@ 0x2c
90001cce:	fb01 f303 	mul.w	r3, r1, r3
90001cd2:	4413      	add	r3, r2
90001cd4:	3308      	adds	r3, #8
90001cd6:	681b      	ldr	r3, [r3, #0]
90001cd8:	4a5c      	ldr	r2, [pc, #368]	@ (90001e4c <I2C_Compute_SCLL_SCLH+0x200>)
90001cda:	fbb2 f3f3 	udiv	r3, r2, r3
90001cde:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001ce2:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001ce4:	2300      	movs	r3, #0
90001ce6:	637b      	str	r3, [r7, #52]	@ 0x34
90001ce8:	e0a3      	b.n	90001e32 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001cea:	495a      	ldr	r1, [pc, #360]	@ (90001e54 <I2C_Compute_SCLL_SCLH+0x208>)
90001cec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001cee:	4613      	mov	r3, r2
90001cf0:	009b      	lsls	r3, r3, #2
90001cf2:	4413      	add	r3, r2
90001cf4:	009b      	lsls	r3, r3, #2
90001cf6:	440b      	add	r3, r1
90001cf8:	681b      	ldr	r3, [r3, #0]
90001cfa:	1c5a      	adds	r2, r3, #1
90001cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001cfe:	fb02 f303 	mul.w	r3, r2, r3
90001d02:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001d04:	2300      	movs	r3, #0
90001d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001d08:	e08c      	b.n	90001e24 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001d0c:	6a3b      	ldr	r3, [r7, #32]
90001d0e:	441a      	add	r2, r3
90001d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001d12:	3301      	adds	r3, #1
90001d14:	6979      	ldr	r1, [r7, #20]
90001d16:	fb03 f101 	mul.w	r1, r3, r1
90001d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d1c:	005b      	lsls	r3, r3, #1
90001d1e:	440b      	add	r3, r1
90001d20:	4413      	add	r3, r2
90001d22:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001d24:	4a4a      	ldr	r2, [pc, #296]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001d26:	683b      	ldr	r3, [r7, #0]
90001d28:	212c      	movs	r1, #44	@ 0x2c
90001d2a:	fb01 f303 	mul.w	r3, r1, r3
90001d2e:	4413      	add	r3, r2
90001d30:	3318      	adds	r3, #24
90001d32:	681b      	ldr	r3, [r3, #0]
90001d34:	693a      	ldr	r2, [r7, #16]
90001d36:	429a      	cmp	r2, r3
90001d38:	d971      	bls.n	90001e1e <I2C_Compute_SCLL_SCLH+0x1d2>
90001d3a:	693a      	ldr	r2, [r7, #16]
90001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001d3e:	1ad2      	subs	r2, r2, r3
90001d40:	6a3b      	ldr	r3, [r7, #32]
90001d42:	1ad3      	subs	r3, r2, r3
90001d44:	089b      	lsrs	r3, r3, #2
90001d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001d48:	429a      	cmp	r2, r3
90001d4a:	d268      	bcs.n	90001e1e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001d4c:	2300      	movs	r3, #0
90001d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
90001d50:	e062      	b.n	90001e18 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001d54:	6a3b      	ldr	r3, [r7, #32]
90001d56:	441a      	add	r2, r3
90001d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001d5a:	3301      	adds	r3, #1
90001d5c:	6979      	ldr	r1, [r7, #20]
90001d5e:	fb03 f101 	mul.w	r1, r3, r1
90001d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d64:	005b      	lsls	r3, r3, #1
90001d66:	440b      	add	r3, r1
90001d68:	4413      	add	r3, r2
90001d6a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001d6c:	693a      	ldr	r2, [r7, #16]
90001d6e:	68fb      	ldr	r3, [r7, #12]
90001d70:	441a      	add	r2, r3
90001d72:	4937      	ldr	r1, [pc, #220]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001d74:	683b      	ldr	r3, [r7, #0]
90001d76:	202c      	movs	r0, #44	@ 0x2c
90001d78:	fb00 f303 	mul.w	r3, r0, r3
90001d7c:	440b      	add	r3, r1
90001d7e:	3320      	adds	r3, #32
90001d80:	681b      	ldr	r3, [r3, #0]
90001d82:	441a      	add	r2, r3
90001d84:	4932      	ldr	r1, [pc, #200]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001d86:	683b      	ldr	r3, [r7, #0]
90001d88:	202c      	movs	r0, #44	@ 0x2c
90001d8a:	fb00 f303 	mul.w	r3, r0, r3
90001d8e:	440b      	add	r3, r1
90001d90:	3324      	adds	r3, #36	@ 0x24
90001d92:	681b      	ldr	r3, [r3, #0]
90001d94:	4413      	add	r3, r2
90001d96:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001d98:	68ba      	ldr	r2, [r7, #8]
90001d9a:	69bb      	ldr	r3, [r7, #24]
90001d9c:	429a      	cmp	r2, r3
90001d9e:	d338      	bcc.n	90001e12 <I2C_Compute_SCLL_SCLH+0x1c6>
90001da0:	68ba      	ldr	r2, [r7, #8]
90001da2:	69fb      	ldr	r3, [r7, #28]
90001da4:	429a      	cmp	r2, r3
90001da6:	d834      	bhi.n	90001e12 <I2C_Compute_SCLL_SCLH+0x1c6>
90001da8:	4a29      	ldr	r2, [pc, #164]	@ (90001e50 <I2C_Compute_SCLL_SCLH+0x204>)
90001daa:	683b      	ldr	r3, [r7, #0]
90001dac:	212c      	movs	r1, #44	@ 0x2c
90001dae:	fb01 f303 	mul.w	r3, r1, r3
90001db2:	4413      	add	r3, r2
90001db4:	331c      	adds	r3, #28
90001db6:	681b      	ldr	r3, [r3, #0]
90001db8:	68fa      	ldr	r2, [r7, #12]
90001dba:	429a      	cmp	r2, r3
90001dbc:	d329      	bcc.n	90001e12 <I2C_Compute_SCLL_SCLH+0x1c6>
90001dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001dc0:	68fb      	ldr	r3, [r7, #12]
90001dc2:	429a      	cmp	r2, r3
90001dc4:	d225      	bcs.n	90001e12 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001dc6:	68ba      	ldr	r2, [r7, #8]
90001dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001dca:	1ad3      	subs	r3, r2, r3
90001dcc:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001dd0:	2b00      	cmp	r3, #0
90001dd2:	da02      	bge.n	90001dda <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001dd6:	425b      	negs	r3, r3
90001dd8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001ddc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001dde:	429a      	cmp	r2, r3
90001de0:	d917      	bls.n	90001e12 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001de4:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001de6:	491b      	ldr	r1, [pc, #108]	@ (90001e54 <I2C_Compute_SCLL_SCLH+0x208>)
90001de8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001dea:	4613      	mov	r3, r2
90001dec:	009b      	lsls	r3, r3, #2
90001dee:	4413      	add	r3, r2
90001df0:	009b      	lsls	r3, r3, #2
90001df2:	440b      	add	r3, r1
90001df4:	3310      	adds	r3, #16
90001df6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001df8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001dfa:	4916      	ldr	r1, [pc, #88]	@ (90001e54 <I2C_Compute_SCLL_SCLH+0x208>)
90001dfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001dfe:	4613      	mov	r3, r2
90001e00:	009b      	lsls	r3, r3, #2
90001e02:	4413      	add	r3, r2
90001e04:	009b      	lsls	r3, r3, #2
90001e06:	440b      	add	r3, r1
90001e08:	330c      	adds	r3, #12
90001e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001e0c:	601a      	str	r2, [r3, #0]
              ret = count;
90001e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001e10:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001e14:	3301      	adds	r3, #1
90001e16:	63bb      	str	r3, [r7, #56]	@ 0x38
90001e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001e1a:	2bff      	cmp	r3, #255	@ 0xff
90001e1c:	d999      	bls.n	90001d52 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001e20:	3301      	adds	r3, #1
90001e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001e26:	2bff      	cmp	r3, #255	@ 0xff
90001e28:	f67f af6f 	bls.w	90001d0a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001e2e:	3301      	adds	r3, #1
90001e30:	637b      	str	r3, [r7, #52]	@ 0x34
90001e32:	4b09      	ldr	r3, [pc, #36]	@ (90001e58 <I2C_Compute_SCLL_SCLH+0x20c>)
90001e34:	681b      	ldr	r3, [r3, #0]
90001e36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001e38:	429a      	cmp	r2, r3
90001e3a:	f4ff af56 	bcc.w	90001cea <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001e40:	4618      	mov	r0, r3
90001e42:	374c      	adds	r7, #76	@ 0x4c
90001e44:	46bd      	mov	sp, r7
90001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e4a:	4770      	bx	lr
90001e4c:	3b9aca00 	.word	0x3b9aca00
90001e50:	9000d6a0 	.word	0x9000d6a0
90001e54:	20000640 	.word	0x20000640
90001e58:	20001040 	.word	0x20001040

90001e5c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001e5c:	b580      	push	{r7, lr}
90001e5e:	b08a      	sub	sp, #40	@ 0x28
90001e60:	af00      	add	r7, sp, #0
90001e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001e64:	4b31      	ldr	r3, [pc, #196]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e6a:	4a30      	ldr	r2, [pc, #192]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001e6c:	f043 0308 	orr.w	r3, r3, #8
90001e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001e74:	4b2d      	ldr	r3, [pc, #180]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e7a:	f003 0308 	and.w	r3, r3, #8
90001e7e:	613b      	str	r3, [r7, #16]
90001e80:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001e82:	4b2a      	ldr	r3, [pc, #168]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e88:	4a28      	ldr	r2, [pc, #160]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001e8a:	f043 0308 	orr.w	r3, r3, #8
90001e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001e92:	4b26      	ldr	r3, [pc, #152]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e98:	f003 0308 	and.w	r3, r3, #8
90001e9c:	60fb      	str	r3, [r7, #12]
90001e9e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001ea4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001ea6:	2312      	movs	r3, #18
90001ea8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001eaa:	2300      	movs	r3, #0
90001eac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001eae:	2302      	movs	r3, #2
90001eb0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001eb2:	2304      	movs	r3, #4
90001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001eb6:	f107 0314 	add.w	r3, r7, #20
90001eba:	4619      	mov	r1, r3
90001ebc:	481c      	ldr	r0, [pc, #112]	@ (90001f30 <I2C4_MspInit+0xd4>)
90001ebe:	f001 fe71 	bl	90003ba4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001ec6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001ec8:	2312      	movs	r3, #18
90001eca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001ecc:	2300      	movs	r3, #0
90001ece:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001ed0:	2302      	movs	r3, #2
90001ed2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001ed4:	2304      	movs	r3, #4
90001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001ed8:	f107 0314 	add.w	r3, r7, #20
90001edc:	4619      	mov	r1, r3
90001ede:	4814      	ldr	r0, [pc, #80]	@ (90001f30 <I2C4_MspInit+0xd4>)
90001ee0:	f001 fe60 	bl	90003ba4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001ee4:	4b11      	ldr	r3, [pc, #68]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001eea:	4a10      	ldr	r2, [pc, #64]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001ef0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001efe:	60bb      	str	r3, [r7, #8]
90001f00:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001f02:	4b0a      	ldr	r3, [pc, #40]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001f08:	4a08      	ldr	r2, [pc, #32]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001f0e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001f12:	4b06      	ldr	r3, [pc, #24]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001f18:	4a04      	ldr	r2, [pc, #16]	@ (90001f2c <I2C4_MspInit+0xd0>)
90001f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001f1e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001f22:	bf00      	nop
90001f24:	3728      	adds	r7, #40	@ 0x28
90001f26:	46bd      	mov	sp, r7
90001f28:	bd80      	pop	{r7, pc}
90001f2a:	bf00      	nop
90001f2c:	58024400 	.word	0x58024400
90001f30:	58020c00 	.word	0x58020c00

90001f34 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001f34:	b580      	push	{r7, lr}
90001f36:	b088      	sub	sp, #32
90001f38:	af04      	add	r7, sp, #16
90001f3a:	607b      	str	r3, [r7, #4]
90001f3c:	4603      	mov	r3, r0
90001f3e:	81fb      	strh	r3, [r7, #14]
90001f40:	460b      	mov	r3, r1
90001f42:	81bb      	strh	r3, [r7, #12]
90001f44:	4613      	mov	r3, r2
90001f46:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001f48:	8978      	ldrh	r0, [r7, #10]
90001f4a:	89ba      	ldrh	r2, [r7, #12]
90001f4c:	89f9      	ldrh	r1, [r7, #14]
90001f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001f52:	9302      	str	r3, [sp, #8]
90001f54:	8b3b      	ldrh	r3, [r7, #24]
90001f56:	9301      	str	r3, [sp, #4]
90001f58:	687b      	ldr	r3, [r7, #4]
90001f5a:	9300      	str	r3, [sp, #0]
90001f5c:	4603      	mov	r3, r0
90001f5e:	4807      	ldr	r0, [pc, #28]	@ (90001f7c <I2C4_ReadReg+0x48>)
90001f60:	f003 fe4e 	bl	90005c00 <HAL_I2C_Mem_Read>
90001f64:	4603      	mov	r3, r0
90001f66:	2b00      	cmp	r3, #0
90001f68:	d101      	bne.n	90001f6e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001f6a:	2300      	movs	r3, #0
90001f6c:	e001      	b.n	90001f72 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001f6e:	f06f 0307 	mvn.w	r3, #7
}
90001f72:	4618      	mov	r0, r3
90001f74:	3710      	adds	r7, #16
90001f76:	46bd      	mov	sp, r7
90001f78:	bd80      	pop	{r7, pc}
90001f7a:	bf00      	nop
90001f7c:	20001044 	.word	0x20001044

90001f80 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001f80:	b580      	push	{r7, lr}
90001f82:	b084      	sub	sp, #16
90001f84:	af02      	add	r7, sp, #8
90001f86:	6078      	str	r0, [r7, #4]
90001f88:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001f8a:	f44f 7388 	mov.w	r3, #272	@ 0x110
90001f8e:	9300      	str	r3, [sp, #0]
90001f90:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90001f94:	2200      	movs	r2, #0
90001f96:	6839      	ldr	r1, [r7, #0]
90001f98:	6878      	ldr	r0, [r7, #4]
90001f9a:	f000 f805 	bl	90001fa8 <BSP_LCD_InitEx>
90001f9e:	4603      	mov	r3, r0
}
90001fa0:	4618      	mov	r0, r3
90001fa2:	3708      	adds	r7, #8
90001fa4:	46bd      	mov	sp, r7
90001fa6:	bd80      	pop	{r7, pc}

90001fa8 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001fa8:	b580      	push	{r7, lr}
90001faa:	b09e      	sub	sp, #120	@ 0x78
90001fac:	af00      	add	r7, sp, #0
90001fae:	60f8      	str	r0, [r7, #12]
90001fb0:	60b9      	str	r1, [r7, #8]
90001fb2:	607a      	str	r2, [r7, #4]
90001fb4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001fb6:	2300      	movs	r3, #0
90001fb8:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001fba:	2300      	movs	r3, #0
90001fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001fbe:	68bb      	ldr	r3, [r7, #8]
90001fc0:	2b01      	cmp	r3, #1
90001fc2:	d808      	bhi.n	90001fd6 <BSP_LCD_InitEx+0x2e>
90001fc4:	68fb      	ldr	r3, [r7, #12]
90001fc6:	2b00      	cmp	r3, #0
90001fc8:	d105      	bne.n	90001fd6 <BSP_LCD_InitEx+0x2e>
90001fca:	687b      	ldr	r3, [r7, #4]
90001fcc:	2b02      	cmp	r3, #2
90001fce:	d006      	beq.n	90001fde <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001fd0:	687b      	ldr	r3, [r7, #4]
90001fd2:	2b00      	cmp	r3, #0
90001fd4:	d003      	beq.n	90001fde <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001fd6:	f06f 0301 	mvn.w	r3, #1
90001fda:	677b      	str	r3, [r7, #116]	@ 0x74
90001fdc:	e0a8      	b.n	90002130 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001fde:	687b      	ldr	r3, [r7, #4]
90001fe0:	2b02      	cmp	r3, #2
90001fe2:	d109      	bne.n	90001ff8 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001fe4:	2302      	movs	r3, #2
90001fe6:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001fe8:	4a54      	ldr	r2, [pc, #336]	@ (9000213c <BSP_LCD_InitEx+0x194>)
90001fea:	68fb      	ldr	r3, [r7, #12]
90001fec:	015b      	lsls	r3, r3, #5
90001fee:	4413      	add	r3, r2
90001ff0:	3310      	adds	r3, #16
90001ff2:	2202      	movs	r2, #2
90001ff4:	601a      	str	r2, [r3, #0]
90001ff6:	e008      	b.n	9000200a <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001ff8:	2300      	movs	r3, #0
90001ffa:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001ffc:	4a4f      	ldr	r2, [pc, #316]	@ (9000213c <BSP_LCD_InitEx+0x194>)
90001ffe:	68fb      	ldr	r3, [r7, #12]
90002000:	015b      	lsls	r3, r3, #5
90002002:	4413      	add	r3, r2
90002004:	3310      	adds	r3, #16
90002006:	2204      	movs	r2, #4
90002008:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
9000200a:	4a4c      	ldr	r2, [pc, #304]	@ (9000213c <BSP_LCD_InitEx+0x194>)
9000200c:	68fb      	ldr	r3, [r7, #12]
9000200e:	015b      	lsls	r3, r3, #5
90002010:	4413      	add	r3, r2
90002012:	330c      	adds	r3, #12
90002014:	687a      	ldr	r2, [r7, #4]
90002016:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90002018:	4a48      	ldr	r2, [pc, #288]	@ (9000213c <BSP_LCD_InitEx+0x194>)
9000201a:	68fb      	ldr	r3, [r7, #12]
9000201c:	015b      	lsls	r3, r3, #5
9000201e:	4413      	add	r3, r2
90002020:	683a      	ldr	r2, [r7, #0]
90002022:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90002024:	4a45      	ldr	r2, [pc, #276]	@ (9000213c <BSP_LCD_InitEx+0x194>)
90002026:	68fb      	ldr	r3, [r7, #12]
90002028:	015b      	lsls	r3, r3, #5
9000202a:	4413      	add	r3, r2
9000202c:	3304      	adds	r3, #4
9000202e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90002032:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90002034:	4b42      	ldr	r3, [pc, #264]	@ (90002140 <BSP_LCD_InitEx+0x198>)
90002036:	4a43      	ldr	r2, [pc, #268]	@ (90002144 <BSP_LCD_InitEx+0x19c>)
90002038:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
9000203a:	4b43      	ldr	r3, [pc, #268]	@ (90002148 <BSP_LCD_InitEx+0x1a0>)
9000203c:	4a43      	ldr	r2, [pc, #268]	@ (9000214c <BSP_LCD_InitEx+0x1a4>)
9000203e:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90002040:	483f      	ldr	r0, [pc, #252]	@ (90002140 <BSP_LCD_InitEx+0x198>)
90002042:	f000 fcf9 	bl	90002a38 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90002046:	4840      	ldr	r0, [pc, #256]	@ (90002148 <BSP_LCD_InitEx+0x1a0>)
90002048:	f000 fdc2 	bl	90002bd0 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
9000204c:	4b40      	ldr	r3, [pc, #256]	@ (90002150 <BSP_LCD_InitEx+0x1a8>)
9000204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90002050:	4b40      	ldr	r3, [pc, #256]	@ (90002154 <BSP_LCD_InitEx+0x1ac>)
90002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90002054:	2370      	movs	r3, #112	@ 0x70
90002056:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90002058:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
9000205c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90002060:	4611      	mov	r1, r2
90002062:	4618      	mov	r0, r3
90002064:	f7ff fa16 	bl	90001494 <FT5336_RegisterBusIO>
90002068:	4603      	mov	r3, r0
9000206a:	2b00      	cmp	r3, #0
9000206c:	da03      	bge.n	90002076 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000206e:	f06f 0304 	mvn.w	r3, #4
90002072:	677b      	str	r3, [r7, #116]	@ 0x74
90002074:	e02b      	b.n	900020ce <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90002076:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
9000207a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
9000207e:	4611      	mov	r1, r2
90002080:	4618      	mov	r0, r3
90002082:	f7ff fa49 	bl	90001518 <FT5336_ReadID>
90002086:	4603      	mov	r3, r0
90002088:	2b00      	cmp	r3, #0
9000208a:	da03      	bge.n	90002094 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000208c:	f06f 0304 	mvn.w	r3, #4
90002090:	677b      	str	r3, [r7, #116]	@ 0x74
90002092:	e01c      	b.n	900020ce <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90002094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90002096:	2b51      	cmp	r3, #81	@ 0x51
90002098:	d003      	beq.n	900020a2 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
9000209a:	f06f 0306 	mvn.w	r3, #6
9000209e:	677b      	str	r3, [r7, #116]	@ 0x74
900020a0:	e015      	b.n	900020ce <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
900020a2:	4827      	ldr	r0, [pc, #156]	@ (90002140 <BSP_LCD_InitEx+0x198>)
900020a4:	f7fe ff04 	bl	90000eb0 <MX_LTDC_ClockConfig>
900020a8:	4603      	mov	r3, r0
900020aa:	2b00      	cmp	r3, #0
900020ac:	d003      	beq.n	900020b6 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900020ae:	f06f 0303 	mvn.w	r3, #3
900020b2:	677b      	str	r3, [r7, #116]	@ 0x74
900020b4:	e00b      	b.n	900020ce <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
900020b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
900020ba:	6839      	ldr	r1, [r7, #0]
900020bc:	4820      	ldr	r0, [pc, #128]	@ (90002140 <BSP_LCD_InitEx+0x198>)
900020be:	f000 f84d 	bl	9000215c <MX_LTDC_Init>
900020c2:	4603      	mov	r3, r0
900020c4:	2b00      	cmp	r3, #0
900020c6:	d002      	beq.n	900020ce <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900020c8:	f06f 0303 	mvn.w	r3, #3
900020cc:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
900020ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
900020d0:	2b00      	cmp	r3, #0
900020d2:	d12d      	bne.n	90002130 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900020d4:	2000      	movs	r0, #0
900020d6:	f000 fe0d 	bl	90002cf4 <BSP_SDRAM_Init>
900020da:	4603      	mov	r3, r0
900020dc:	2b00      	cmp	r3, #0
900020de:	d002      	beq.n	900020e6 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
900020e0:	f06f 0303 	mvn.w	r3, #3
900020e4:	e025      	b.n	90002132 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
900020e6:	2300      	movs	r3, #0
900020e8:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
900020ea:	683b      	ldr	r3, [r7, #0]
900020ec:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
900020ee:	2300      	movs	r3, #0
900020f0:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
900020f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
900020f6:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
900020f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
900020fa:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
900020fc:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90002100:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90002102:	f107 0314 	add.w	r3, r7, #20
90002106:	461a      	mov	r2, r3
90002108:	2100      	movs	r1, #0
9000210a:	480d      	ldr	r0, [pc, #52]	@ (90002140 <BSP_LCD_InitEx+0x198>)
9000210c:	f000 f872 	bl	900021f4 <MX_LTDC_ConfigLayer>
90002110:	4603      	mov	r3, r0
90002112:	2b00      	cmp	r3, #0
90002114:	d002      	beq.n	9000211c <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90002116:	f06f 0303 	mvn.w	r3, #3
9000211a:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
9000211c:	480e      	ldr	r0, [pc, #56]	@ (90002158 <BSP_LCD_InitEx+0x1b0>)
9000211e:	f000 fdbf 	bl	90002ca0 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90002122:	4a06      	ldr	r2, [pc, #24]	@ (9000213c <BSP_LCD_InitEx+0x194>)
90002124:	68fb      	ldr	r3, [r7, #12]
90002126:	015b      	lsls	r3, r3, #5
90002128:	4413      	add	r3, r2
9000212a:	3318      	adds	r3, #24
9000212c:	2201      	movs	r2, #1
9000212e:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90002130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90002132:	4618      	mov	r0, r3
90002134:	3778      	adds	r7, #120	@ 0x78
90002136:	46bd      	mov	sp, r7
90002138:	bd80      	pop	{r7, pc}
9000213a:	bf00      	nop
9000213c:	200011f4 	.word	0x200011f4
90002140:	2000114c 	.word	0x2000114c
90002144:	50001000 	.word	0x50001000
90002148:	200010e4 	.word	0x200010e4
9000214c:	52001000 	.word	0x52001000
90002150:	9000181d 	.word	0x9000181d
90002154:	90001915 	.word	0x90001915
90002158:	20001098 	.word	0x20001098

9000215c <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
9000215c:	b580      	push	{r7, lr}
9000215e:	b084      	sub	sp, #16
90002160:	af00      	add	r7, sp, #0
90002162:	60f8      	str	r0, [r7, #12]
90002164:	60b9      	str	r1, [r7, #8]
90002166:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90002168:	68fb      	ldr	r3, [r7, #12]
9000216a:	4a21      	ldr	r2, [pc, #132]	@ (900021f0 <MX_LTDC_Init+0x94>)
9000216c:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
9000216e:	68fb      	ldr	r3, [r7, #12]
90002170:	2200      	movs	r2, #0
90002172:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90002174:	68fb      	ldr	r3, [r7, #12]
90002176:	2200      	movs	r2, #0
90002178:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
9000217a:	68fb      	ldr	r3, [r7, #12]
9000217c:	2200      	movs	r2, #0
9000217e:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90002180:	68fb      	ldr	r3, [r7, #12]
90002182:	2200      	movs	r2, #0
90002184:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90002186:	68fb      	ldr	r3, [r7, #12]
90002188:	2228      	movs	r2, #40	@ 0x28
9000218a:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
9000218c:	68fb      	ldr	r3, [r7, #12]
9000218e:	222a      	movs	r2, #42	@ 0x2a
90002190:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90002192:	68bb      	ldr	r3, [r7, #8]
90002194:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002198:	68fb      	ldr	r3, [r7, #12]
9000219a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
9000219c:	68bb      	ldr	r3, [r7, #8]
9000219e:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
900021a2:	68fb      	ldr	r3, [r7, #12]
900021a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
900021a6:	68fb      	ldr	r3, [r7, #12]
900021a8:	2209      	movs	r2, #9
900021aa:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
900021ac:	68fb      	ldr	r3, [r7, #12]
900021ae:	220b      	movs	r2, #11
900021b0:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
900021b2:	687b      	ldr	r3, [r7, #4]
900021b4:	f103 020b 	add.w	r2, r3, #11
900021b8:	68fb      	ldr	r3, [r7, #12]
900021ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
900021bc:	687b      	ldr	r3, [r7, #4]
900021be:	f103 020d 	add.w	r2, r3, #13
900021c2:	68fb      	ldr	r3, [r7, #12]
900021c4:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
900021c6:	68fb      	ldr	r3, [r7, #12]
900021c8:	22ff      	movs	r2, #255	@ 0xff
900021ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
900021ce:	68fb      	ldr	r3, [r7, #12]
900021d0:	22ff      	movs	r2, #255	@ 0xff
900021d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
900021d6:	68fb      	ldr	r3, [r7, #12]
900021d8:	22ff      	movs	r2, #255	@ 0xff
900021da:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
900021de:	68f8      	ldr	r0, [r7, #12]
900021e0:	f004 f947 	bl	90006472 <HAL_LTDC_Init>
900021e4:	4603      	mov	r3, r0
}
900021e6:	4618      	mov	r0, r3
900021e8:	3710      	adds	r7, #16
900021ea:	46bd      	mov	sp, r7
900021ec:	bd80      	pop	{r7, pc}
900021ee:	bf00      	nop
900021f0:	50001000 	.word	0x50001000

900021f4 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
900021f4:	b580      	push	{r7, lr}
900021f6:	b092      	sub	sp, #72	@ 0x48
900021f8:	af00      	add	r7, sp, #0
900021fa:	60f8      	str	r0, [r7, #12]
900021fc:	60b9      	str	r1, [r7, #8]
900021fe:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90002200:	687b      	ldr	r3, [r7, #4]
90002202:	681b      	ldr	r3, [r3, #0]
90002204:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90002206:	687b      	ldr	r3, [r7, #4]
90002208:	685b      	ldr	r3, [r3, #4]
9000220a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
9000220c:	687b      	ldr	r3, [r7, #4]
9000220e:	689b      	ldr	r3, [r3, #8]
90002210:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90002212:	687b      	ldr	r3, [r7, #4]
90002214:	68db      	ldr	r3, [r3, #12]
90002216:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90002218:	687b      	ldr	r3, [r7, #4]
9000221a:	691b      	ldr	r3, [r3, #16]
9000221c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
9000221e:	23ff      	movs	r3, #255	@ 0xff
90002220:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
90002222:	2300      	movs	r3, #0
90002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90002226:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
9000222a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
9000222c:	2307      	movs	r3, #7
9000222e:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90002230:	687b      	ldr	r3, [r7, #4]
90002232:	695b      	ldr	r3, [r3, #20]
90002234:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90002236:	687b      	ldr	r3, [r7, #4]
90002238:	685a      	ldr	r2, [r3, #4]
9000223a:	687b      	ldr	r3, [r7, #4]
9000223c:	681b      	ldr	r3, [r3, #0]
9000223e:	1ad3      	subs	r3, r2, r3
90002240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90002242:	687b      	ldr	r3, [r7, #4]
90002244:	68da      	ldr	r2, [r3, #12]
90002246:	687b      	ldr	r3, [r7, #4]
90002248:	689b      	ldr	r3, [r3, #8]
9000224a:	1ad3      	subs	r3, r2, r3
9000224c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
9000224e:	2300      	movs	r3, #0
90002250:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90002254:	2300      	movs	r3, #0
90002256:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
9000225a:	2300      	movs	r3, #0
9000225c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90002260:	f107 0314 	add.w	r3, r7, #20
90002264:	68ba      	ldr	r2, [r7, #8]
90002266:	4619      	mov	r1, r3
90002268:	68f8      	ldr	r0, [r7, #12]
9000226a:	f004 f9a9 	bl	900065c0 <HAL_LTDC_ConfigLayer>
9000226e:	4603      	mov	r3, r0
}
90002270:	4618      	mov	r0, r3
90002272:	3748      	adds	r7, #72	@ 0x48
90002274:	46bd      	mov	sp, r7
90002276:	bd80      	pop	{r7, pc}

90002278 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90002278:	b480      	push	{r7}
9000227a:	b085      	sub	sp, #20
9000227c:	af00      	add	r7, sp, #0
9000227e:	6078      	str	r0, [r7, #4]
90002280:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002282:	2300      	movs	r3, #0
90002284:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002286:	687b      	ldr	r3, [r7, #4]
90002288:	2b00      	cmp	r3, #0
9000228a:	d003      	beq.n	90002294 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000228c:	f06f 0301 	mvn.w	r3, #1
90002290:	60fb      	str	r3, [r7, #12]
90002292:	e007      	b.n	900022a4 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002294:	4a07      	ldr	r2, [pc, #28]	@ (900022b4 <BSP_LCD_GetPixelFormat+0x3c>)
90002296:	687b      	ldr	r3, [r7, #4]
90002298:	015b      	lsls	r3, r3, #5
9000229a:	4413      	add	r3, r2
9000229c:	330c      	adds	r3, #12
9000229e:	681a      	ldr	r2, [r3, #0]
900022a0:	683b      	ldr	r3, [r7, #0]
900022a2:	601a      	str	r2, [r3, #0]
  }

  return ret;
900022a4:	68fb      	ldr	r3, [r7, #12]
}
900022a6:	4618      	mov	r0, r3
900022a8:	3714      	adds	r7, #20
900022aa:	46bd      	mov	sp, r7
900022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900022b0:	4770      	bx	lr
900022b2:	bf00      	nop
900022b4:	200011f4 	.word	0x200011f4

900022b8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
900022b8:	b480      	push	{r7}
900022ba:	b085      	sub	sp, #20
900022bc:	af00      	add	r7, sp, #0
900022be:	6078      	str	r0, [r7, #4]
900022c0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900022c2:	2300      	movs	r3, #0
900022c4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900022c6:	687b      	ldr	r3, [r7, #4]
900022c8:	2b00      	cmp	r3, #0
900022ca:	d003      	beq.n	900022d4 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900022cc:	f06f 0301 	mvn.w	r3, #1
900022d0:	60fb      	str	r3, [r7, #12]
900022d2:	e006      	b.n	900022e2 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
900022d4:	4a06      	ldr	r2, [pc, #24]	@ (900022f0 <BSP_LCD_SetActiveLayer+0x38>)
900022d6:	687b      	ldr	r3, [r7, #4]
900022d8:	015b      	lsls	r3, r3, #5
900022da:	4413      	add	r3, r2
900022dc:	3308      	adds	r3, #8
900022de:	683a      	ldr	r2, [r7, #0]
900022e0:	601a      	str	r2, [r3, #0]
  }

  return ret;
900022e2:	68fb      	ldr	r3, [r7, #12]
}
900022e4:	4618      	mov	r0, r3
900022e6:	3714      	adds	r7, #20
900022e8:	46bd      	mov	sp, r7
900022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
900022ee:	4770      	bx	lr
900022f0:	200011f4 	.word	0x200011f4

900022f4 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
900022f4:	b480      	push	{r7}
900022f6:	b085      	sub	sp, #20
900022f8:	af00      	add	r7, sp, #0
900022fa:	6078      	str	r0, [r7, #4]
900022fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900022fe:	2300      	movs	r3, #0
90002300:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002302:	687b      	ldr	r3, [r7, #4]
90002304:	2b00      	cmp	r3, #0
90002306:	d003      	beq.n	90002310 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002308:	f06f 0301 	mvn.w	r3, #1
9000230c:	60fb      	str	r3, [r7, #12]
9000230e:	e006      	b.n	9000231e <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90002310:	4a06      	ldr	r2, [pc, #24]	@ (9000232c <BSP_LCD_GetXSize+0x38>)
90002312:	687b      	ldr	r3, [r7, #4]
90002314:	015b      	lsls	r3, r3, #5
90002316:	4413      	add	r3, r2
90002318:	681a      	ldr	r2, [r3, #0]
9000231a:	683b      	ldr	r3, [r7, #0]
9000231c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000231e:	68fb      	ldr	r3, [r7, #12]
}
90002320:	4618      	mov	r0, r3
90002322:	3714      	adds	r7, #20
90002324:	46bd      	mov	sp, r7
90002326:	f85d 7b04 	ldr.w	r7, [sp], #4
9000232a:	4770      	bx	lr
9000232c:	200011f4 	.word	0x200011f4

90002330 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90002330:	b480      	push	{r7}
90002332:	b085      	sub	sp, #20
90002334:	af00      	add	r7, sp, #0
90002336:	6078      	str	r0, [r7, #4]
90002338:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000233a:	2300      	movs	r3, #0
9000233c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000233e:	687b      	ldr	r3, [r7, #4]
90002340:	2b00      	cmp	r3, #0
90002342:	d003      	beq.n	9000234c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002344:	f06f 0301 	mvn.w	r3, #1
90002348:	60fb      	str	r3, [r7, #12]
9000234a:	e007      	b.n	9000235c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
9000234c:	4a07      	ldr	r2, [pc, #28]	@ (9000236c <BSP_LCD_GetYSize+0x3c>)
9000234e:	687b      	ldr	r3, [r7, #4]
90002350:	015b      	lsls	r3, r3, #5
90002352:	4413      	add	r3, r2
90002354:	3304      	adds	r3, #4
90002356:	681a      	ldr	r2, [r3, #0]
90002358:	683b      	ldr	r3, [r7, #0]
9000235a:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000235c:	68fb      	ldr	r3, [r7, #12]
}
9000235e:	4618      	mov	r0, r3
90002360:	3714      	adds	r7, #20
90002362:	46bd      	mov	sp, r7
90002364:	f85d 7b04 	ldr.w	r7, [sp], #4
90002368:	4770      	bx	lr
9000236a:	bf00      	nop
9000236c:	200011f4 	.word	0x200011f4

90002370 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
90002370:	b580      	push	{r7, lr}
90002372:	b08e      	sub	sp, #56	@ 0x38
90002374:	af02      	add	r7, sp, #8
90002376:	60f8      	str	r0, [r7, #12]
90002378:	60b9      	str	r1, [r7, #8]
9000237a:	607a      	str	r2, [r7, #4]
9000237c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000237e:	2300      	movs	r3, #0
90002380:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
90002382:	683b      	ldr	r3, [r7, #0]
90002384:	330a      	adds	r3, #10
90002386:	781b      	ldrb	r3, [r3, #0]
90002388:	461a      	mov	r2, r3
9000238a:	683b      	ldr	r3, [r7, #0]
9000238c:	330b      	adds	r3, #11
9000238e:	781b      	ldrb	r3, [r3, #0]
90002390:	021b      	lsls	r3, r3, #8
90002392:	441a      	add	r2, r3
90002394:	683b      	ldr	r3, [r7, #0]
90002396:	330c      	adds	r3, #12
90002398:	781b      	ldrb	r3, [r3, #0]
9000239a:	041b      	lsls	r3, r3, #16
9000239c:	441a      	add	r2, r3
9000239e:	683b      	ldr	r3, [r7, #0]
900023a0:	330d      	adds	r3, #13
900023a2:	781b      	ldrb	r3, [r3, #0]
900023a4:	061b      	lsls	r3, r3, #24
900023a6:	4413      	add	r3, r2
900023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
900023aa:	683b      	ldr	r3, [r7, #0]
900023ac:	3312      	adds	r3, #18
900023ae:	781b      	ldrb	r3, [r3, #0]
900023b0:	461a      	mov	r2, r3
900023b2:	683b      	ldr	r3, [r7, #0]
900023b4:	3313      	adds	r3, #19
900023b6:	781b      	ldrb	r3, [r3, #0]
900023b8:	021b      	lsls	r3, r3, #8
900023ba:	441a      	add	r2, r3
900023bc:	683b      	ldr	r3, [r7, #0]
900023be:	3314      	adds	r3, #20
900023c0:	781b      	ldrb	r3, [r3, #0]
900023c2:	041b      	lsls	r3, r3, #16
900023c4:	441a      	add	r2, r3
900023c6:	683b      	ldr	r3, [r7, #0]
900023c8:	3315      	adds	r3, #21
900023ca:	781b      	ldrb	r3, [r3, #0]
900023cc:	061b      	lsls	r3, r3, #24
900023ce:	4413      	add	r3, r2
900023d0:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
900023d2:	683b      	ldr	r3, [r7, #0]
900023d4:	3316      	adds	r3, #22
900023d6:	781b      	ldrb	r3, [r3, #0]
900023d8:	461a      	mov	r2, r3
900023da:	683b      	ldr	r3, [r7, #0]
900023dc:	3317      	adds	r3, #23
900023de:	781b      	ldrb	r3, [r3, #0]
900023e0:	021b      	lsls	r3, r3, #8
900023e2:	441a      	add	r2, r3
900023e4:	683b      	ldr	r3, [r7, #0]
900023e6:	3318      	adds	r3, #24
900023e8:	781b      	ldrb	r3, [r3, #0]
900023ea:	041b      	lsls	r3, r3, #16
900023ec:	441a      	add	r2, r3
900023ee:	683b      	ldr	r3, [r7, #0]
900023f0:	3319      	adds	r3, #25
900023f2:	781b      	ldrb	r3, [r3, #0]
900023f4:	061b      	lsls	r3, r3, #24
900023f6:	4413      	add	r3, r2
900023f8:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
900023fa:	683b      	ldr	r3, [r7, #0]
900023fc:	331c      	adds	r3, #28
900023fe:	781b      	ldrb	r3, [r3, #0]
90002400:	461a      	mov	r2, r3
90002402:	683b      	ldr	r3, [r7, #0]
90002404:	331d      	adds	r3, #29
90002406:	781b      	ldrb	r3, [r3, #0]
90002408:	021b      	lsls	r3, r3, #8
9000240a:	4413      	add	r3, r2
9000240c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
9000240e:	4a37      	ldr	r2, [pc, #220]	@ (900024ec <BSP_LCD_DrawBitmap+0x17c>)
90002410:	68fb      	ldr	r3, [r7, #12]
90002412:	015b      	lsls	r3, r3, #5
90002414:	4413      	add	r3, r2
90002416:	3308      	adds	r3, #8
90002418:	681b      	ldr	r3, [r3, #0]
9000241a:	4a35      	ldr	r2, [pc, #212]	@ (900024f0 <BSP_LCD_DrawBitmap+0x180>)
9000241c:	2134      	movs	r1, #52	@ 0x34
9000241e:	fb01 f303 	mul.w	r3, r1, r3
90002422:	4413      	add	r3, r2
90002424:	335c      	adds	r3, #92	@ 0x5c
90002426:	681a      	ldr	r2, [r3, #0]
90002428:	4930      	ldr	r1, [pc, #192]	@ (900024ec <BSP_LCD_DrawBitmap+0x17c>)
9000242a:	68fb      	ldr	r3, [r7, #12]
9000242c:	015b      	lsls	r3, r3, #5
9000242e:	440b      	add	r3, r1
90002430:	681b      	ldr	r3, [r3, #0]
90002432:	6879      	ldr	r1, [r7, #4]
90002434:	fb03 f101 	mul.w	r1, r3, r1
90002438:	68bb      	ldr	r3, [r7, #8]
9000243a:	440b      	add	r3, r1
9000243c:	482b      	ldr	r0, [pc, #172]	@ (900024ec <BSP_LCD_DrawBitmap+0x17c>)
9000243e:	68f9      	ldr	r1, [r7, #12]
90002440:	0149      	lsls	r1, r1, #5
90002442:	4401      	add	r1, r0
90002444:	3110      	adds	r1, #16
90002446:	6809      	ldr	r1, [r1, #0]
90002448:	fb01 f303 	mul.w	r3, r1, r3
9000244c:	4413      	add	r3, r2
9000244e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90002450:	693b      	ldr	r3, [r7, #16]
90002452:	3b20      	subs	r3, #32
90002454:	2b07      	cmp	r3, #7
90002456:	d802      	bhi.n	9000245e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90002458:	2300      	movs	r3, #0
9000245a:	627b      	str	r3, [r7, #36]	@ 0x24
9000245c:	e008      	b.n	90002470 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
9000245e:	693b      	ldr	r3, [r7, #16]
90002460:	3b10      	subs	r3, #16
90002462:	2b07      	cmp	r3, #7
90002464:	d802      	bhi.n	9000246c <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
90002466:	2302      	movs	r3, #2
90002468:	627b      	str	r3, [r7, #36]	@ 0x24
9000246a:	e001      	b.n	90002470 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
9000246c:	2301      	movs	r3, #1
9000246e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002470:	697b      	ldr	r3, [r7, #20]
90002472:	3b01      	subs	r3, #1
90002474:	69ba      	ldr	r2, [r7, #24]
90002476:	fb02 f303 	mul.w	r3, r2, r3
9000247a:	693a      	ldr	r2, [r7, #16]
9000247c:	08d2      	lsrs	r2, r2, #3
9000247e:	fb03 f202 	mul.w	r2, r3, r2
90002482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002484:	4413      	add	r3, r2
90002486:	683a      	ldr	r2, [r7, #0]
90002488:	4413      	add	r3, r2
9000248a:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
9000248c:	2300      	movs	r3, #0
9000248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002490:	e023      	b.n	900024da <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
90002492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002496:	9300      	str	r3, [sp, #0]
90002498:	69bb      	ldr	r3, [r7, #24]
9000249a:	6a39      	ldr	r1, [r7, #32]
9000249c:	68f8      	ldr	r0, [r7, #12]
9000249e:	f000 fa77 	bl	90002990 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
900024a2:	4a12      	ldr	r2, [pc, #72]	@ (900024ec <BSP_LCD_DrawBitmap+0x17c>)
900024a4:	68fb      	ldr	r3, [r7, #12]
900024a6:	015b      	lsls	r3, r3, #5
900024a8:	4413      	add	r3, r2
900024aa:	681b      	ldr	r3, [r3, #0]
900024ac:	490f      	ldr	r1, [pc, #60]	@ (900024ec <BSP_LCD_DrawBitmap+0x17c>)
900024ae:	68fa      	ldr	r2, [r7, #12]
900024b0:	0152      	lsls	r2, r2, #5
900024b2:	440a      	add	r2, r1
900024b4:	3210      	adds	r2, #16
900024b6:	6812      	ldr	r2, [r2, #0]
900024b8:	fb02 f303 	mul.w	r3, r2, r3
900024bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900024be:	4413      	add	r3, r2
900024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
900024c2:	693b      	ldr	r3, [r7, #16]
900024c4:	08db      	lsrs	r3, r3, #3
900024c6:	69ba      	ldr	r2, [r7, #24]
900024c8:	fb02 f303 	mul.w	r3, r2, r3
900024cc:	425b      	negs	r3, r3
900024ce:	6a3a      	ldr	r2, [r7, #32]
900024d0:	4413      	add	r3, r2
900024d2:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
900024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900024d6:	3301      	adds	r3, #1
900024d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
900024da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900024dc:	697b      	ldr	r3, [r7, #20]
900024de:	429a      	cmp	r2, r3
900024e0:	d3d7      	bcc.n	90002492 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
900024e2:	69fb      	ldr	r3, [r7, #28]
}
900024e4:	4618      	mov	r0, r3
900024e6:	3730      	adds	r7, #48	@ 0x30
900024e8:	46bd      	mov	sp, r7
900024ea:	bd80      	pop	{r7, pc}
900024ec:	200011f4 	.word	0x200011f4
900024f0:	2000114c 	.word	0x2000114c

900024f4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
900024f4:	b580      	push	{r7, lr}
900024f6:	b088      	sub	sp, #32
900024f8:	af00      	add	r7, sp, #0
900024fa:	60f8      	str	r0, [r7, #12]
900024fc:	60b9      	str	r1, [r7, #8]
900024fe:	607a      	str	r2, [r7, #4]
90002500:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
90002502:	683b      	ldr	r3, [r7, #0]
90002504:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90002506:	2300      	movs	r3, #0
90002508:	61fb      	str	r3, [r7, #28]
9000250a:	e032      	b.n	90002572 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
9000250c:	2300      	movs	r3, #0
9000250e:	617b      	str	r3, [r7, #20]
90002510:	e028      	b.n	90002564 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
90002512:	69bb      	ldr	r3, [r7, #24]
90002514:	781b      	ldrb	r3, [r3, #0]
90002516:	461a      	mov	r2, r3
90002518:	69bb      	ldr	r3, [r7, #24]
9000251a:	3301      	adds	r3, #1
9000251c:	781b      	ldrb	r3, [r3, #0]
9000251e:	021b      	lsls	r3, r3, #8
90002520:	431a      	orrs	r2, r3
90002522:	69bb      	ldr	r3, [r7, #24]
90002524:	3302      	adds	r3, #2
90002526:	781b      	ldrb	r3, [r3, #0]
90002528:	041b      	lsls	r3, r3, #16
9000252a:	431a      	orrs	r2, r3
9000252c:	69bb      	ldr	r3, [r7, #24]
9000252e:	3303      	adds	r3, #3
90002530:	781b      	ldrb	r3, [r3, #0]
90002532:	061b      	lsls	r3, r3, #24
90002534:	4313      	orrs	r3, r2
90002536:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90002538:	68ba      	ldr	r2, [r7, #8]
9000253a:	697b      	ldr	r3, [r7, #20]
9000253c:	18d1      	adds	r1, r2, r3
9000253e:	687a      	ldr	r2, [r7, #4]
90002540:	69fb      	ldr	r3, [r7, #28]
90002542:	441a      	add	r2, r3
90002544:	693b      	ldr	r3, [r7, #16]
90002546:	68f8      	ldr	r0, [r7, #12]
90002548:	f000 f95e 	bl	90002808 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
9000254c:	4a0d      	ldr	r2, [pc, #52]	@ (90002584 <BSP_LCD_FillRGBRect+0x90>)
9000254e:	68fb      	ldr	r3, [r7, #12]
90002550:	015b      	lsls	r3, r3, #5
90002552:	4413      	add	r3, r2
90002554:	3310      	adds	r3, #16
90002556:	681b      	ldr	r3, [r3, #0]
90002558:	69ba      	ldr	r2, [r7, #24]
9000255a:	4413      	add	r3, r2
9000255c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
9000255e:	697b      	ldr	r3, [r7, #20]
90002560:	3301      	adds	r3, #1
90002562:	617b      	str	r3, [r7, #20]
90002564:	697a      	ldr	r2, [r7, #20]
90002566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002568:	429a      	cmp	r2, r3
9000256a:	d3d2      	bcc.n	90002512 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
9000256c:	69fb      	ldr	r3, [r7, #28]
9000256e:	3301      	adds	r3, #1
90002570:	61fb      	str	r3, [r7, #28]
90002572:	69fa      	ldr	r2, [r7, #28]
90002574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002576:	429a      	cmp	r2, r3
90002578:	d3c8      	bcc.n	9000250c <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
9000257a:	2300      	movs	r3, #0
}
9000257c:	4618      	mov	r0, r3
9000257e:	3720      	adds	r7, #32
90002580:	46bd      	mov	sp, r7
90002582:	bd80      	pop	{r7, pc}
90002584:	200011f4 	.word	0x200011f4

90002588 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002588:	b580      	push	{r7, lr}
9000258a:	b088      	sub	sp, #32
9000258c:	af02      	add	r7, sp, #8
9000258e:	60f8      	str	r0, [r7, #12]
90002590:	60b9      	str	r1, [r7, #8]
90002592:	607a      	str	r2, [r7, #4]
90002594:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002596:	4a21      	ldr	r2, [pc, #132]	@ (9000261c <BSP_LCD_DrawHLine+0x94>)
90002598:	68fb      	ldr	r3, [r7, #12]
9000259a:	015b      	lsls	r3, r3, #5
9000259c:	4413      	add	r3, r2
9000259e:	3308      	adds	r3, #8
900025a0:	681b      	ldr	r3, [r3, #0]
900025a2:	4a1f      	ldr	r2, [pc, #124]	@ (90002620 <BSP_LCD_DrawHLine+0x98>)
900025a4:	2134      	movs	r1, #52	@ 0x34
900025a6:	fb01 f303 	mul.w	r3, r1, r3
900025aa:	4413      	add	r3, r2
900025ac:	335c      	adds	r3, #92	@ 0x5c
900025ae:	681a      	ldr	r2, [r3, #0]
900025b0:	491a      	ldr	r1, [pc, #104]	@ (9000261c <BSP_LCD_DrawHLine+0x94>)
900025b2:	68fb      	ldr	r3, [r7, #12]
900025b4:	015b      	lsls	r3, r3, #5
900025b6:	440b      	add	r3, r1
900025b8:	3310      	adds	r3, #16
900025ba:	681b      	ldr	r3, [r3, #0]
900025bc:	4817      	ldr	r0, [pc, #92]	@ (9000261c <BSP_LCD_DrawHLine+0x94>)
900025be:	68f9      	ldr	r1, [r7, #12]
900025c0:	0149      	lsls	r1, r1, #5
900025c2:	4401      	add	r1, r0
900025c4:	6809      	ldr	r1, [r1, #0]
900025c6:	6878      	ldr	r0, [r7, #4]
900025c8:	fb01 f000 	mul.w	r0, r1, r0
900025cc:	68b9      	ldr	r1, [r7, #8]
900025ce:	4401      	add	r1, r0
900025d0:	fb01 f303 	mul.w	r3, r1, r3
900025d4:	4413      	add	r3, r2
900025d6:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
900025d8:	68ba      	ldr	r2, [r7, #8]
900025da:	683b      	ldr	r3, [r7, #0]
900025dc:	441a      	add	r2, r3
900025de:	490f      	ldr	r1, [pc, #60]	@ (9000261c <BSP_LCD_DrawHLine+0x94>)
900025e0:	68fb      	ldr	r3, [r7, #12]
900025e2:	015b      	lsls	r3, r3, #5
900025e4:	440b      	add	r3, r1
900025e6:	681b      	ldr	r3, [r3, #0]
900025e8:	429a      	cmp	r2, r3
900025ea:	d907      	bls.n	900025fc <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
900025ec:	4a0b      	ldr	r2, [pc, #44]	@ (9000261c <BSP_LCD_DrawHLine+0x94>)
900025ee:	68fb      	ldr	r3, [r7, #12]
900025f0:	015b      	lsls	r3, r3, #5
900025f2:	4413      	add	r3, r2
900025f4:	681a      	ldr	r2, [r3, #0]
900025f6:	68bb      	ldr	r3, [r7, #8]
900025f8:	1ad3      	subs	r3, r2, r3
900025fa:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
900025fc:	6979      	ldr	r1, [r7, #20]
900025fe:	6a3b      	ldr	r3, [r7, #32]
90002600:	9301      	str	r3, [sp, #4]
90002602:	2300      	movs	r3, #0
90002604:	9300      	str	r3, [sp, #0]
90002606:	2301      	movs	r3, #1
90002608:	683a      	ldr	r2, [r7, #0]
9000260a:	68f8      	ldr	r0, [r7, #12]
9000260c:	f000 f956 	bl	900028bc <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002610:	2300      	movs	r3, #0
}
90002612:	4618      	mov	r0, r3
90002614:	3718      	adds	r7, #24
90002616:	46bd      	mov	sp, r7
90002618:	bd80      	pop	{r7, pc}
9000261a:	bf00      	nop
9000261c:	200011f4 	.word	0x200011f4
90002620:	2000114c 	.word	0x2000114c

90002624 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002624:	b580      	push	{r7, lr}
90002626:	b088      	sub	sp, #32
90002628:	af02      	add	r7, sp, #8
9000262a:	60f8      	str	r0, [r7, #12]
9000262c:	60b9      	str	r1, [r7, #8]
9000262e:	607a      	str	r2, [r7, #4]
90002630:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002632:	4a24      	ldr	r2, [pc, #144]	@ (900026c4 <BSP_LCD_DrawVLine+0xa0>)
90002634:	68fb      	ldr	r3, [r7, #12]
90002636:	015b      	lsls	r3, r3, #5
90002638:	4413      	add	r3, r2
9000263a:	3308      	adds	r3, #8
9000263c:	681b      	ldr	r3, [r3, #0]
9000263e:	4a22      	ldr	r2, [pc, #136]	@ (900026c8 <BSP_LCD_DrawVLine+0xa4>)
90002640:	2134      	movs	r1, #52	@ 0x34
90002642:	fb01 f303 	mul.w	r3, r1, r3
90002646:	4413      	add	r3, r2
90002648:	335c      	adds	r3, #92	@ 0x5c
9000264a:	681a      	ldr	r2, [r3, #0]
9000264c:	491d      	ldr	r1, [pc, #116]	@ (900026c4 <BSP_LCD_DrawVLine+0xa0>)
9000264e:	68fb      	ldr	r3, [r7, #12]
90002650:	015b      	lsls	r3, r3, #5
90002652:	440b      	add	r3, r1
90002654:	3310      	adds	r3, #16
90002656:	681b      	ldr	r3, [r3, #0]
90002658:	481a      	ldr	r0, [pc, #104]	@ (900026c4 <BSP_LCD_DrawVLine+0xa0>)
9000265a:	68f9      	ldr	r1, [r7, #12]
9000265c:	0149      	lsls	r1, r1, #5
9000265e:	4401      	add	r1, r0
90002660:	6809      	ldr	r1, [r1, #0]
90002662:	6878      	ldr	r0, [r7, #4]
90002664:	fb01 f000 	mul.w	r0, r1, r0
90002668:	68b9      	ldr	r1, [r7, #8]
9000266a:	4401      	add	r1, r0
9000266c:	fb01 f303 	mul.w	r3, r1, r3
90002670:	4413      	add	r3, r2
90002672:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
90002674:	687a      	ldr	r2, [r7, #4]
90002676:	683b      	ldr	r3, [r7, #0]
90002678:	441a      	add	r2, r3
9000267a:	4912      	ldr	r1, [pc, #72]	@ (900026c4 <BSP_LCD_DrawVLine+0xa0>)
9000267c:	68fb      	ldr	r3, [r7, #12]
9000267e:	015b      	lsls	r3, r3, #5
90002680:	440b      	add	r3, r1
90002682:	3304      	adds	r3, #4
90002684:	681b      	ldr	r3, [r3, #0]
90002686:	429a      	cmp	r2, r3
90002688:	d908      	bls.n	9000269c <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
9000268a:	4a0e      	ldr	r2, [pc, #56]	@ (900026c4 <BSP_LCD_DrawVLine+0xa0>)
9000268c:	68fb      	ldr	r3, [r7, #12]
9000268e:	015b      	lsls	r3, r3, #5
90002690:	4413      	add	r3, r2
90002692:	3304      	adds	r3, #4
90002694:	681a      	ldr	r2, [r3, #0]
90002696:	687b      	ldr	r3, [r7, #4]
90002698:	1ad3      	subs	r3, r2, r3
9000269a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
9000269c:	6979      	ldr	r1, [r7, #20]
9000269e:	4a09      	ldr	r2, [pc, #36]	@ (900026c4 <BSP_LCD_DrawVLine+0xa0>)
900026a0:	68fb      	ldr	r3, [r7, #12]
900026a2:	015b      	lsls	r3, r3, #5
900026a4:	4413      	add	r3, r2
900026a6:	681b      	ldr	r3, [r3, #0]
900026a8:	3b01      	subs	r3, #1
900026aa:	6a3a      	ldr	r2, [r7, #32]
900026ac:	9201      	str	r2, [sp, #4]
900026ae:	9300      	str	r3, [sp, #0]
900026b0:	683b      	ldr	r3, [r7, #0]
900026b2:	2201      	movs	r2, #1
900026b4:	68f8      	ldr	r0, [r7, #12]
900026b6:	f000 f901 	bl	900028bc <LL_FillBuffer>

  return BSP_ERROR_NONE;
900026ba:	2300      	movs	r3, #0
}
900026bc:	4618      	mov	r0, r3
900026be:	3718      	adds	r7, #24
900026c0:	46bd      	mov	sp, r7
900026c2:	bd80      	pop	{r7, pc}
900026c4:	200011f4 	.word	0x200011f4
900026c8:	2000114c 	.word	0x2000114c

900026cc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
900026cc:	b580      	push	{r7, lr}
900026ce:	b088      	sub	sp, #32
900026d0:	af02      	add	r7, sp, #8
900026d2:	60f8      	str	r0, [r7, #12]
900026d4:	60b9      	str	r1, [r7, #8]
900026d6:	607a      	str	r2, [r7, #4]
900026d8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900026da:	4a1b      	ldr	r2, [pc, #108]	@ (90002748 <BSP_LCD_FillRect+0x7c>)
900026dc:	68fb      	ldr	r3, [r7, #12]
900026de:	015b      	lsls	r3, r3, #5
900026e0:	4413      	add	r3, r2
900026e2:	3308      	adds	r3, #8
900026e4:	681b      	ldr	r3, [r3, #0]
900026e6:	4a19      	ldr	r2, [pc, #100]	@ (9000274c <BSP_LCD_FillRect+0x80>)
900026e8:	2134      	movs	r1, #52	@ 0x34
900026ea:	fb01 f303 	mul.w	r3, r1, r3
900026ee:	4413      	add	r3, r2
900026f0:	335c      	adds	r3, #92	@ 0x5c
900026f2:	681a      	ldr	r2, [r3, #0]
900026f4:	4914      	ldr	r1, [pc, #80]	@ (90002748 <BSP_LCD_FillRect+0x7c>)
900026f6:	68fb      	ldr	r3, [r7, #12]
900026f8:	015b      	lsls	r3, r3, #5
900026fa:	440b      	add	r3, r1
900026fc:	3310      	adds	r3, #16
900026fe:	681b      	ldr	r3, [r3, #0]
90002700:	4811      	ldr	r0, [pc, #68]	@ (90002748 <BSP_LCD_FillRect+0x7c>)
90002702:	68f9      	ldr	r1, [r7, #12]
90002704:	0149      	lsls	r1, r1, #5
90002706:	4401      	add	r1, r0
90002708:	6809      	ldr	r1, [r1, #0]
9000270a:	6878      	ldr	r0, [r7, #4]
9000270c:	fb01 f000 	mul.w	r0, r1, r0
90002710:	68b9      	ldr	r1, [r7, #8]
90002712:	4401      	add	r1, r0
90002714:	fb01 f303 	mul.w	r3, r1, r3
90002718:	4413      	add	r3, r2
9000271a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
9000271c:	6979      	ldr	r1, [r7, #20]
9000271e:	4a0a      	ldr	r2, [pc, #40]	@ (90002748 <BSP_LCD_FillRect+0x7c>)
90002720:	68fb      	ldr	r3, [r7, #12]
90002722:	015b      	lsls	r3, r3, #5
90002724:	4413      	add	r3, r2
90002726:	681a      	ldr	r2, [r3, #0]
90002728:	683b      	ldr	r3, [r7, #0]
9000272a:	1ad3      	subs	r3, r2, r3
9000272c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000272e:	9201      	str	r2, [sp, #4]
90002730:	9300      	str	r3, [sp, #0]
90002732:	6a3b      	ldr	r3, [r7, #32]
90002734:	683a      	ldr	r2, [r7, #0]
90002736:	68f8      	ldr	r0, [r7, #12]
90002738:	f000 f8c0 	bl	900028bc <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000273c:	2300      	movs	r3, #0
}
9000273e:	4618      	mov	r0, r3
90002740:	3718      	adds	r7, #24
90002742:	46bd      	mov	sp, r7
90002744:	bd80      	pop	{r7, pc}
90002746:	bf00      	nop
90002748:	200011f4 	.word	0x200011f4
9000274c:	2000114c 	.word	0x2000114c

90002750 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002750:	b480      	push	{r7}
90002752:	b085      	sub	sp, #20
90002754:	af00      	add	r7, sp, #0
90002756:	60f8      	str	r0, [r7, #12]
90002758:	60b9      	str	r1, [r7, #8]
9000275a:	607a      	str	r2, [r7, #4]
9000275c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000275e:	4a28      	ldr	r2, [pc, #160]	@ (90002800 <BSP_LCD_ReadPixel+0xb0>)
90002760:	68fb      	ldr	r3, [r7, #12]
90002762:	015b      	lsls	r3, r3, #5
90002764:	4413      	add	r3, r2
90002766:	3308      	adds	r3, #8
90002768:	681b      	ldr	r3, [r3, #0]
9000276a:	4a26      	ldr	r2, [pc, #152]	@ (90002804 <BSP_LCD_ReadPixel+0xb4>)
9000276c:	2134      	movs	r1, #52	@ 0x34
9000276e:	fb01 f303 	mul.w	r3, r1, r3
90002772:	4413      	add	r3, r2
90002774:	3348      	adds	r3, #72	@ 0x48
90002776:	681b      	ldr	r3, [r3, #0]
90002778:	2b00      	cmp	r3, #0
9000277a:	d11c      	bne.n	900027b6 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
9000277c:	4a20      	ldr	r2, [pc, #128]	@ (90002800 <BSP_LCD_ReadPixel+0xb0>)
9000277e:	68fb      	ldr	r3, [r7, #12]
90002780:	015b      	lsls	r3, r3, #5
90002782:	4413      	add	r3, r2
90002784:	3308      	adds	r3, #8
90002786:	681b      	ldr	r3, [r3, #0]
90002788:	4a1e      	ldr	r2, [pc, #120]	@ (90002804 <BSP_LCD_ReadPixel+0xb4>)
9000278a:	2134      	movs	r1, #52	@ 0x34
9000278c:	fb01 f303 	mul.w	r3, r1, r3
90002790:	4413      	add	r3, r2
90002792:	335c      	adds	r3, #92	@ 0x5c
90002794:	681a      	ldr	r2, [r3, #0]
90002796:	491a      	ldr	r1, [pc, #104]	@ (90002800 <BSP_LCD_ReadPixel+0xb0>)
90002798:	68fb      	ldr	r3, [r7, #12]
9000279a:	015b      	lsls	r3, r3, #5
9000279c:	440b      	add	r3, r1
9000279e:	681b      	ldr	r3, [r3, #0]
900027a0:	6879      	ldr	r1, [r7, #4]
900027a2:	fb03 f101 	mul.w	r1, r3, r1
900027a6:	68bb      	ldr	r3, [r7, #8]
900027a8:	440b      	add	r3, r1
900027aa:	009b      	lsls	r3, r3, #2
900027ac:	4413      	add	r3, r2
900027ae:	681a      	ldr	r2, [r3, #0]
900027b0:	683b      	ldr	r3, [r7, #0]
900027b2:	601a      	str	r2, [r3, #0]
900027b4:	e01d      	b.n	900027f2 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900027b6:	4a12      	ldr	r2, [pc, #72]	@ (90002800 <BSP_LCD_ReadPixel+0xb0>)
900027b8:	68fb      	ldr	r3, [r7, #12]
900027ba:	015b      	lsls	r3, r3, #5
900027bc:	4413      	add	r3, r2
900027be:	3308      	adds	r3, #8
900027c0:	681b      	ldr	r3, [r3, #0]
900027c2:	4a10      	ldr	r2, [pc, #64]	@ (90002804 <BSP_LCD_ReadPixel+0xb4>)
900027c4:	2134      	movs	r1, #52	@ 0x34
900027c6:	fb01 f303 	mul.w	r3, r1, r3
900027ca:	4413      	add	r3, r2
900027cc:	335c      	adds	r3, #92	@ 0x5c
900027ce:	681a      	ldr	r2, [r3, #0]
900027d0:	490b      	ldr	r1, [pc, #44]	@ (90002800 <BSP_LCD_ReadPixel+0xb0>)
900027d2:	68fb      	ldr	r3, [r7, #12]
900027d4:	015b      	lsls	r3, r3, #5
900027d6:	440b      	add	r3, r1
900027d8:	681b      	ldr	r3, [r3, #0]
900027da:	6879      	ldr	r1, [r7, #4]
900027dc:	fb03 f101 	mul.w	r1, r3, r1
900027e0:	68bb      	ldr	r3, [r7, #8]
900027e2:	440b      	add	r3, r1
900027e4:	005b      	lsls	r3, r3, #1
900027e6:	4413      	add	r3, r2
900027e8:	881b      	ldrh	r3, [r3, #0]
900027ea:	b29b      	uxth	r3, r3
900027ec:	461a      	mov	r2, r3
900027ee:	683b      	ldr	r3, [r7, #0]
900027f0:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
900027f2:	2300      	movs	r3, #0
}
900027f4:	4618      	mov	r0, r3
900027f6:	3714      	adds	r7, #20
900027f8:	46bd      	mov	sp, r7
900027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
900027fe:	4770      	bx	lr
90002800:	200011f4 	.word	0x200011f4
90002804:	2000114c 	.word	0x2000114c

90002808 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002808:	b480      	push	{r7}
9000280a:	b085      	sub	sp, #20
9000280c:	af00      	add	r7, sp, #0
9000280e:	60f8      	str	r0, [r7, #12]
90002810:	60b9      	str	r1, [r7, #8]
90002812:	607a      	str	r2, [r7, #4]
90002814:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002816:	4a27      	ldr	r2, [pc, #156]	@ (900028b4 <BSP_LCD_WritePixel+0xac>)
90002818:	68fb      	ldr	r3, [r7, #12]
9000281a:	015b      	lsls	r3, r3, #5
9000281c:	4413      	add	r3, r2
9000281e:	3308      	adds	r3, #8
90002820:	681b      	ldr	r3, [r3, #0]
90002822:	4a25      	ldr	r2, [pc, #148]	@ (900028b8 <BSP_LCD_WritePixel+0xb0>)
90002824:	2134      	movs	r1, #52	@ 0x34
90002826:	fb01 f303 	mul.w	r3, r1, r3
9000282a:	4413      	add	r3, r2
9000282c:	3348      	adds	r3, #72	@ 0x48
9000282e:	681b      	ldr	r3, [r3, #0]
90002830:	2b00      	cmp	r3, #0
90002832:	d11c      	bne.n	9000286e <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90002834:	4a1f      	ldr	r2, [pc, #124]	@ (900028b4 <BSP_LCD_WritePixel+0xac>)
90002836:	68fb      	ldr	r3, [r7, #12]
90002838:	015b      	lsls	r3, r3, #5
9000283a:	4413      	add	r3, r2
9000283c:	3308      	adds	r3, #8
9000283e:	681b      	ldr	r3, [r3, #0]
90002840:	4a1d      	ldr	r2, [pc, #116]	@ (900028b8 <BSP_LCD_WritePixel+0xb0>)
90002842:	2134      	movs	r1, #52	@ 0x34
90002844:	fb01 f303 	mul.w	r3, r1, r3
90002848:	4413      	add	r3, r2
9000284a:	335c      	adds	r3, #92	@ 0x5c
9000284c:	681a      	ldr	r2, [r3, #0]
9000284e:	4919      	ldr	r1, [pc, #100]	@ (900028b4 <BSP_LCD_WritePixel+0xac>)
90002850:	68fb      	ldr	r3, [r7, #12]
90002852:	015b      	lsls	r3, r3, #5
90002854:	440b      	add	r3, r1
90002856:	681b      	ldr	r3, [r3, #0]
90002858:	6879      	ldr	r1, [r7, #4]
9000285a:	fb03 f101 	mul.w	r1, r3, r1
9000285e:	68bb      	ldr	r3, [r7, #8]
90002860:	440b      	add	r3, r1
90002862:	009b      	lsls	r3, r3, #2
90002864:	4413      	add	r3, r2
90002866:	461a      	mov	r2, r3
90002868:	683b      	ldr	r3, [r7, #0]
9000286a:	6013      	str	r3, [r2, #0]
9000286c:	e01b      	b.n	900028a6 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
9000286e:	4a11      	ldr	r2, [pc, #68]	@ (900028b4 <BSP_LCD_WritePixel+0xac>)
90002870:	68fb      	ldr	r3, [r7, #12]
90002872:	015b      	lsls	r3, r3, #5
90002874:	4413      	add	r3, r2
90002876:	3308      	adds	r3, #8
90002878:	681b      	ldr	r3, [r3, #0]
9000287a:	4a0f      	ldr	r2, [pc, #60]	@ (900028b8 <BSP_LCD_WritePixel+0xb0>)
9000287c:	2134      	movs	r1, #52	@ 0x34
9000287e:	fb01 f303 	mul.w	r3, r1, r3
90002882:	4413      	add	r3, r2
90002884:	335c      	adds	r3, #92	@ 0x5c
90002886:	681a      	ldr	r2, [r3, #0]
90002888:	490a      	ldr	r1, [pc, #40]	@ (900028b4 <BSP_LCD_WritePixel+0xac>)
9000288a:	68fb      	ldr	r3, [r7, #12]
9000288c:	015b      	lsls	r3, r3, #5
9000288e:	440b      	add	r3, r1
90002890:	681b      	ldr	r3, [r3, #0]
90002892:	6879      	ldr	r1, [r7, #4]
90002894:	fb03 f101 	mul.w	r1, r3, r1
90002898:	68bb      	ldr	r3, [r7, #8]
9000289a:	440b      	add	r3, r1
9000289c:	005b      	lsls	r3, r3, #1
9000289e:	4413      	add	r3, r2
900028a0:	683a      	ldr	r2, [r7, #0]
900028a2:	b292      	uxth	r2, r2
900028a4:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
900028a6:	2300      	movs	r3, #0
}
900028a8:	4618      	mov	r0, r3
900028aa:	3714      	adds	r7, #20
900028ac:	46bd      	mov	sp, r7
900028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900028b2:	4770      	bx	lr
900028b4:	200011f4 	.word	0x200011f4
900028b8:	2000114c 	.word	0x2000114c

900028bc <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
900028bc:	b580      	push	{r7, lr}
900028be:	b088      	sub	sp, #32
900028c0:	af02      	add	r7, sp, #8
900028c2:	60f8      	str	r0, [r7, #12]
900028c4:	60b9      	str	r1, [r7, #8]
900028c6:	607a      	str	r2, [r7, #4]
900028c8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
900028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900028cc:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
900028ce:	4a2d      	ldr	r2, [pc, #180]	@ (90002984 <LL_FillBuffer+0xc8>)
900028d0:	68fb      	ldr	r3, [r7, #12]
900028d2:	015b      	lsls	r3, r3, #5
900028d4:	4413      	add	r3, r2
900028d6:	330c      	adds	r3, #12
900028d8:	681b      	ldr	r3, [r3, #0]
900028da:	2b02      	cmp	r3, #2
900028dc:	d129      	bne.n	90002932 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
900028de:	2302      	movs	r3, #2
900028e0:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
900028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900028e4:	0adb      	lsrs	r3, r3, #11
900028e6:	f003 021f 	and.w	r2, r3, #31
900028ea:	4613      	mov	r3, r2
900028ec:	011b      	lsls	r3, r3, #4
900028ee:	4413      	add	r3, r2
900028f0:	015a      	lsls	r2, r3, #5
900028f2:	1ad3      	subs	r3, r2, r3
900028f4:	3317      	adds	r3, #23
900028f6:	099b      	lsrs	r3, r3, #6
900028f8:	0419      	lsls	r1, r3, #16
900028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900028fc:	095b      	lsrs	r3, r3, #5
900028fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90002902:	4613      	mov	r3, r2
90002904:	01db      	lsls	r3, r3, #7
90002906:	4413      	add	r3, r2
90002908:	005b      	lsls	r3, r3, #1
9000290a:	4413      	add	r3, r2
9000290c:	3321      	adds	r3, #33	@ 0x21
9000290e:	099b      	lsrs	r3, r3, #6
90002910:	021b      	lsls	r3, r3, #8
90002912:	4319      	orrs	r1, r3
90002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002916:	f003 021f 	and.w	r2, r3, #31
9000291a:	4613      	mov	r3, r2
9000291c:	011b      	lsls	r3, r3, #4
9000291e:	4413      	add	r3, r2
90002920:	015a      	lsls	r2, r3, #5
90002922:	1ad3      	subs	r3, r2, r3
90002924:	3317      	adds	r3, #23
90002926:	099b      	lsrs	r3, r3, #6
90002928:	430b      	orrs	r3, r1
9000292a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
9000292e:	613b      	str	r3, [r7, #16]
    break;
90002930:	e002      	b.n	90002938 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002932:	2300      	movs	r3, #0
90002934:	617b      	str	r3, [r7, #20]
    break;
90002936:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002938:	4b13      	ldr	r3, [pc, #76]	@ (90002988 <LL_FillBuffer+0xcc>)
9000293a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
9000293e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002940:	4a11      	ldr	r2, [pc, #68]	@ (90002988 <LL_FillBuffer+0xcc>)
90002942:	697b      	ldr	r3, [r7, #20]
90002944:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90002946:	4a10      	ldr	r2, [pc, #64]	@ (90002988 <LL_FillBuffer+0xcc>)
90002948:	6a3b      	ldr	r3, [r7, #32]
9000294a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
9000294c:	4b0e      	ldr	r3, [pc, #56]	@ (90002988 <LL_FillBuffer+0xcc>)
9000294e:	4a0f      	ldr	r2, [pc, #60]	@ (9000298c <LL_FillBuffer+0xd0>)
90002950:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002952:	480d      	ldr	r0, [pc, #52]	@ (90002988 <LL_FillBuffer+0xcc>)
90002954:	f000 fe50 	bl	900035f8 <HAL_DMA2D_Init>
90002958:	4603      	mov	r3, r0
9000295a:	2b00      	cmp	r3, #0
9000295c:	d10e      	bne.n	9000297c <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
9000295e:	68ba      	ldr	r2, [r7, #8]
90002960:	683b      	ldr	r3, [r7, #0]
90002962:	9300      	str	r3, [sp, #0]
90002964:	687b      	ldr	r3, [r7, #4]
90002966:	6939      	ldr	r1, [r7, #16]
90002968:	4807      	ldr	r0, [pc, #28]	@ (90002988 <LL_FillBuffer+0xcc>)
9000296a:	f000 feb3 	bl	900036d4 <HAL_DMA2D_Start>
9000296e:	4603      	mov	r3, r0
90002970:	2b00      	cmp	r3, #0
90002972:	d103      	bne.n	9000297c <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002974:	2132      	movs	r1, #50	@ 0x32
90002976:	4804      	ldr	r0, [pc, #16]	@ (90002988 <LL_FillBuffer+0xcc>)
90002978:	f000 fed7 	bl	9000372a <HAL_DMA2D_PollForTransfer>
    }
  }
}
9000297c:	bf00      	nop
9000297e:	3718      	adds	r7, #24
90002980:	46bd      	mov	sp, r7
90002982:	bd80      	pop	{r7, pc}
90002984:	200011f4 	.word	0x200011f4
90002988:	200010e4 	.word	0x200010e4
9000298c:	52001000 	.word	0x52001000

90002990 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002990:	b580      	push	{r7, lr}
90002992:	b088      	sub	sp, #32
90002994:	af02      	add	r7, sp, #8
90002996:	60f8      	str	r0, [r7, #12]
90002998:	60b9      	str	r1, [r7, #8]
9000299a:	607a      	str	r2, [r7, #4]
9000299c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
9000299e:	4a23      	ldr	r2, [pc, #140]	@ (90002a2c <LL_ConvertLineToRGB+0x9c>)
900029a0:	68fb      	ldr	r3, [r7, #12]
900029a2:	015b      	lsls	r3, r3, #5
900029a4:	4413      	add	r3, r2
900029a6:	330c      	adds	r3, #12
900029a8:	681b      	ldr	r3, [r3, #0]
900029aa:	2b02      	cmp	r3, #2
900029ac:	d102      	bne.n	900029b4 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
900029ae:	2302      	movs	r3, #2
900029b0:	617b      	str	r3, [r7, #20]
    break;
900029b2:	e002      	b.n	900029ba <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
900029b4:	2300      	movs	r3, #0
900029b6:	617b      	str	r3, [r7, #20]
    break;
900029b8:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
900029ba:	4b1d      	ldr	r3, [pc, #116]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
900029c0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900029c2:	4a1b      	ldr	r2, [pc, #108]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029c4:	697b      	ldr	r3, [r7, #20]
900029c6:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
900029c8:	4b19      	ldr	r3, [pc, #100]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029ca:	2200      	movs	r2, #0
900029cc:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
900029ce:	4b18      	ldr	r3, [pc, #96]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029d0:	2200      	movs	r2, #0
900029d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
900029d4:	4b16      	ldr	r3, [pc, #88]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029d6:	22ff      	movs	r2, #255	@ 0xff
900029d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
900029da:	4a15      	ldr	r2, [pc, #84]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029dc:	6a3b      	ldr	r3, [r7, #32]
900029de:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
900029e0:	4b13      	ldr	r3, [pc, #76]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029e2:	2200      	movs	r2, #0
900029e4:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
900029e6:	4b12      	ldr	r3, [pc, #72]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029e8:	4a12      	ldr	r2, [pc, #72]	@ (90002a34 <LL_ConvertLineToRGB+0xa4>)
900029ea:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900029ec:	4810      	ldr	r0, [pc, #64]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029ee:	f000 fe03 	bl	900035f8 <HAL_DMA2D_Init>
900029f2:	4603      	mov	r3, r0
900029f4:	2b00      	cmp	r3, #0
900029f6:	d115      	bne.n	90002a24 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
900029f8:	2101      	movs	r1, #1
900029fa:	480d      	ldr	r0, [pc, #52]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
900029fc:	f000 ff7e 	bl	900038fc <HAL_DMA2D_ConfigLayer>
90002a00:	4603      	mov	r3, r0
90002a02:	2b00      	cmp	r3, #0
90002a04:	d10e      	bne.n	90002a24 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002a06:	68b9      	ldr	r1, [r7, #8]
90002a08:	687a      	ldr	r2, [r7, #4]
90002a0a:	2301      	movs	r3, #1
90002a0c:	9300      	str	r3, [sp, #0]
90002a0e:	683b      	ldr	r3, [r7, #0]
90002a10:	4807      	ldr	r0, [pc, #28]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
90002a12:	f000 fe5f 	bl	900036d4 <HAL_DMA2D_Start>
90002a16:	4603      	mov	r3, r0
90002a18:	2b00      	cmp	r3, #0
90002a1a:	d103      	bne.n	90002a24 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002a1c:	2132      	movs	r1, #50	@ 0x32
90002a1e:	4804      	ldr	r0, [pc, #16]	@ (90002a30 <LL_ConvertLineToRGB+0xa0>)
90002a20:	f000 fe83 	bl	9000372a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002a24:	bf00      	nop
90002a26:	3718      	adds	r7, #24
90002a28:	46bd      	mov	sp, r7
90002a2a:	bd80      	pop	{r7, pc}
90002a2c:	200011f4 	.word	0x200011f4
90002a30:	200010e4 	.word	0x200010e4
90002a34:	52001000 	.word	0x52001000

90002a38 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002a38:	b580      	push	{r7, lr}
90002a3a:	b08e      	sub	sp, #56	@ 0x38
90002a3c:	af00      	add	r7, sp, #0
90002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002a40:	687b      	ldr	r3, [r7, #4]
90002a42:	681b      	ldr	r3, [r3, #0]
90002a44:	4a5b      	ldr	r2, [pc, #364]	@ (90002bb4 <LTDC_MspInit+0x17c>)
90002a46:	4293      	cmp	r3, r2
90002a48:	f040 80b0 	bne.w	90002bac <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002a4c:	4b5a      	ldr	r3, [pc, #360]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002a52:	4a59      	ldr	r2, [pc, #356]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a54:	f043 0308 	orr.w	r3, r3, #8
90002a58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002a5c:	4b56      	ldr	r3, [pc, #344]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002a62:	f003 0308 	and.w	r3, r3, #8
90002a66:	623b      	str	r3, [r7, #32]
90002a68:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002a6a:	4b53      	ldr	r3, [pc, #332]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a70:	4a51      	ldr	r2, [pc, #324]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002a76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a7a:	4b4f      	ldr	r3, [pc, #316]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002a84:	61fb      	str	r3, [r7, #28]
90002a86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002a88:	4b4b      	ldr	r3, [pc, #300]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a8e:	4a4a      	ldr	r2, [pc, #296]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a98:	4b47      	ldr	r3, [pc, #284]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002aa2:	61bb      	str	r3, [r7, #24]
90002aa4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002aa6:	4b44      	ldr	r3, [pc, #272]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aac:	4a42      	ldr	r2, [pc, #264]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002aae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ab6:	4b40      	ldr	r3, [pc, #256]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002ac0:	617b      	str	r3, [r7, #20]
90002ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002ac4:	4b3c      	ldr	r3, [pc, #240]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aca:	4a3b      	ldr	r2, [pc, #236]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ad4:	4b38      	ldr	r3, [pc, #224]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002ade:	613b      	str	r3, [r7, #16]
90002ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002ae2:	4b35      	ldr	r3, [pc, #212]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ae8:	4a33      	ldr	r2, [pc, #204]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002aea:	f043 0308 	orr.w	r3, r3, #8
90002aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002af2:	4b31      	ldr	r3, [pc, #196]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002af8:	f003 0308 	and.w	r3, r3, #8
90002afc:	60fb      	str	r3, [r7, #12]
90002afe:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002b00:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002b04:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002b06:	2302      	movs	r3, #2
90002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002b0a:	2300      	movs	r3, #0
90002b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002b0e:	2302      	movs	r3, #2
90002b10:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002b12:	230e      	movs	r3, #14
90002b14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b1a:	4619      	mov	r1, r3
90002b1c:	4827      	ldr	r0, [pc, #156]	@ (90002bbc <LTDC_MspInit+0x184>)
90002b1e:	f001 f841 	bl	90003ba4 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002b26:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002b28:	230e      	movs	r3, #14
90002b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b30:	4619      	mov	r1, r3
90002b32:	4823      	ldr	r0, [pc, #140]	@ (90002bc0 <LTDC_MspInit+0x188>)
90002b34:	f001 f836 	bl	90003ba4 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002b38:	23ff      	movs	r3, #255	@ 0xff
90002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002b3c:	230e      	movs	r3, #14
90002b3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b44:	4619      	mov	r1, r3
90002b46:	481f      	ldr	r0, [pc, #124]	@ (90002bc4 <LTDC_MspInit+0x18c>)
90002b48:	f001 f82c 	bl	90003ba4 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002b4c:	f240 2302 	movw	r3, #514	@ 0x202
90002b50:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002b52:	2302      	movs	r3, #2
90002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002b56:	2300      	movs	r3, #0
90002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002b5a:	2302      	movs	r3, #2
90002b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002b5e:	230e      	movs	r3, #14
90002b60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b66:	4619      	mov	r1, r3
90002b68:	4817      	ldr	r0, [pc, #92]	@ (90002bc8 <LTDC_MspInit+0x190>)
90002b6a:	f001 f81b 	bl	90003ba4 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002b6e:	2380      	movs	r3, #128	@ 0x80
90002b70:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002b72:	2301      	movs	r3, #1
90002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b7a:	4619      	mov	r1, r3
90002b7c:	4813      	ldr	r0, [pc, #76]	@ (90002bcc <LTDC_MspInit+0x194>)
90002b7e:	f001 f811 	bl	90003ba4 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002b82:	2201      	movs	r2, #1
90002b84:	2180      	movs	r1, #128	@ 0x80
90002b86:	4811      	ldr	r0, [pc, #68]	@ (90002bcc <LTDC_MspInit+0x194>)
90002b88:	f001 f9d4 	bl	90003f34 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002b8c:	4b0a      	ldr	r3, [pc, #40]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002b92:	4a09      	ldr	r2, [pc, #36]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002b94:	f043 0308 	orr.w	r3, r3, #8
90002b98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002b9c:	4b06      	ldr	r3, [pc, #24]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002ba2:	4a05      	ldr	r2, [pc, #20]	@ (90002bb8 <LTDC_MspInit+0x180>)
90002ba4:	f023 0308 	bic.w	r3, r3, #8
90002ba8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002bac:	bf00      	nop
90002bae:	3738      	adds	r7, #56	@ 0x38
90002bb0:	46bd      	mov	sp, r7
90002bb2:	bd80      	pop	{r7, pc}
90002bb4:	50001000 	.word	0x50001000
90002bb8:	58024400 	.word	0x58024400
90002bbc:	58022000 	.word	0x58022000
90002bc0:	58022400 	.word	0x58022400
90002bc4:	58022800 	.word	0x58022800
90002bc8:	58021c00 	.word	0x58021c00
90002bcc:	58020c00 	.word	0x58020c00

90002bd0 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002bd0:	b480      	push	{r7}
90002bd2:	b085      	sub	sp, #20
90002bd4:	af00      	add	r7, sp, #0
90002bd6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002bd8:	687b      	ldr	r3, [r7, #4]
90002bda:	681b      	ldr	r3, [r3, #0]
90002bdc:	4a11      	ldr	r2, [pc, #68]	@ (90002c24 <DMA2D_MspInit+0x54>)
90002bde:	4293      	cmp	r3, r2
90002be0:	d11a      	bne.n	90002c18 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002be2:	4b11      	ldr	r3, [pc, #68]	@ (90002c28 <DMA2D_MspInit+0x58>)
90002be4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002be8:	4a0f      	ldr	r2, [pc, #60]	@ (90002c28 <DMA2D_MspInit+0x58>)
90002bea:	f043 0310 	orr.w	r3, r3, #16
90002bee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (90002c28 <DMA2D_MspInit+0x58>)
90002bf4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002bf8:	f003 0310 	and.w	r3, r3, #16
90002bfc:	60fb      	str	r3, [r7, #12]
90002bfe:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002c00:	4b09      	ldr	r3, [pc, #36]	@ (90002c28 <DMA2D_MspInit+0x58>)
90002c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002c04:	4a08      	ldr	r2, [pc, #32]	@ (90002c28 <DMA2D_MspInit+0x58>)
90002c06:	f043 0310 	orr.w	r3, r3, #16
90002c0a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002c0c:	4b06      	ldr	r3, [pc, #24]	@ (90002c28 <DMA2D_MspInit+0x58>)
90002c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002c10:	4a05      	ldr	r2, [pc, #20]	@ (90002c28 <DMA2D_MspInit+0x58>)
90002c12:	f023 0310 	bic.w	r3, r3, #16
90002c16:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002c18:	bf00      	nop
90002c1a:	3714      	adds	r7, #20
90002c1c:	46bd      	mov	sp, r7
90002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002c22:	4770      	bx	lr
90002c24:	52001000 	.word	0x52001000
90002c28:	58024400 	.word	0x58024400

90002c2c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002c2c:	b580      	push	{r7, lr}
90002c2e:	b08a      	sub	sp, #40	@ 0x28
90002c30:	af00      	add	r7, sp, #0
90002c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002c34:	4b18      	ldr	r3, [pc, #96]	@ (90002c98 <TIMx_PWM_MspInit+0x6c>)
90002c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c3a:	4a17      	ldr	r2, [pc, #92]	@ (90002c98 <TIMx_PWM_MspInit+0x6c>)
90002c3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002c44:	4b14      	ldr	r3, [pc, #80]	@ (90002c98 <TIMx_PWM_MspInit+0x6c>)
90002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002c4e:	613b      	str	r3, [r7, #16]
90002c50:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002c52:	4b11      	ldr	r3, [pc, #68]	@ (90002c98 <TIMx_PWM_MspInit+0x6c>)
90002c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002c58:	4a0f      	ldr	r2, [pc, #60]	@ (90002c98 <TIMx_PWM_MspInit+0x6c>)
90002c5a:	f043 0302 	orr.w	r3, r3, #2
90002c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002c62:	4b0d      	ldr	r3, [pc, #52]	@ (90002c98 <TIMx_PWM_MspInit+0x6c>)
90002c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002c68:	f003 0302 	and.w	r3, r3, #2
90002c6c:	60fb      	str	r3, [r7, #12]
90002c6e:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002c70:	2302      	movs	r3, #2
90002c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002c74:	2300      	movs	r3, #0
90002c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002c78:	2301      	movs	r3, #1
90002c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002c7c:	2303      	movs	r3, #3
90002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002c80:	2301      	movs	r3, #1
90002c82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002c84:	f107 0314 	add.w	r3, r7, #20
90002c88:	4619      	mov	r1, r3
90002c8a:	4804      	ldr	r0, [pc, #16]	@ (90002c9c <TIMx_PWM_MspInit+0x70>)
90002c8c:	f000 ff8a 	bl	90003ba4 <HAL_GPIO_Init>
}
90002c90:	bf00      	nop
90002c92:	3728      	adds	r7, #40	@ 0x28
90002c94:	46bd      	mov	sp, r7
90002c96:	bd80      	pop	{r7, pc}
90002c98:	58024400 	.word	0x58024400
90002c9c:	58022800 	.word	0x58022800

90002ca0 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002ca0:	b580      	push	{r7, lr}
90002ca2:	b082      	sub	sp, #8
90002ca4:	af00      	add	r7, sp, #0
90002ca6:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002ca8:	687b      	ldr	r3, [r7, #4]
90002caa:	4a11      	ldr	r2, [pc, #68]	@ (90002cf0 <TIMx_PWM_Init+0x50>)
90002cac:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002cae:	6878      	ldr	r0, [r7, #4]
90002cb0:	f006 fe82 	bl	900099b8 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002cb4:	6878      	ldr	r0, [r7, #4]
90002cb6:	f7ff ffb9 	bl	90002c2c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002cba:	687b      	ldr	r3, [r7, #4]
90002cbc:	2204      	movs	r2, #4
90002cbe:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002cc0:	687b      	ldr	r3, [r7, #4]
90002cc2:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002cc6:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002cc8:	687b      	ldr	r3, [r7, #4]
90002cca:	2200      	movs	r2, #0
90002ccc:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002cce:	687b      	ldr	r3, [r7, #4]
90002cd0:	2200      	movs	r2, #0
90002cd2:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002cd4:	687b      	ldr	r3, [r7, #4]
90002cd6:	2200      	movs	r2, #0
90002cd8:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002cda:	687b      	ldr	r3, [r7, #4]
90002cdc:	2200      	movs	r2, #0
90002cde:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002ce0:	6878      	ldr	r0, [r7, #4]
90002ce2:	f006 fe12 	bl	9000990a <HAL_TIM_PWM_Init>
}
90002ce6:	bf00      	nop
90002ce8:	3708      	adds	r7, #8
90002cea:	46bd      	mov	sp, r7
90002cec:	bd80      	pop	{r7, pc}
90002cee:	bf00      	nop
90002cf0:	40010400 	.word	0x40010400

90002cf4 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002cf4:	b580      	push	{r7, lr}
90002cf6:	b084      	sub	sp, #16
90002cf8:	af00      	add	r7, sp, #0
90002cfa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002cfc:	2300      	movs	r3, #0
90002cfe:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002d00:	687b      	ldr	r3, [r7, #4]
90002d02:	2b00      	cmp	r3, #0
90002d04:	d003      	beq.n	90002d0e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002d06:	f06f 0301 	mvn.w	r3, #1
90002d0a:	60fb      	str	r3, [r7, #12]
90002d0c:	e044      	b.n	90002d98 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002d0e:	687b      	ldr	r3, [r7, #4]
90002d10:	2234      	movs	r2, #52	@ 0x34
90002d12:	fb02 f303 	mul.w	r3, r2, r3
90002d16:	4a23      	ldr	r2, [pc, #140]	@ (90002da4 <BSP_SDRAM_Init+0xb0>)
90002d18:	4413      	add	r3, r2
90002d1a:	4618      	mov	r0, r3
90002d1c:	f000 f892 	bl	90002e44 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002d20:	687b      	ldr	r3, [r7, #4]
90002d22:	2234      	movs	r2, #52	@ 0x34
90002d24:	fb02 f303 	mul.w	r3, r2, r3
90002d28:	4a1e      	ldr	r2, [pc, #120]	@ (90002da4 <BSP_SDRAM_Init+0xb0>)
90002d2a:	4413      	add	r3, r2
90002d2c:	2210      	movs	r2, #16
90002d2e:	2104      	movs	r1, #4
90002d30:	4618      	mov	r0, r3
90002d32:	f000 f83b 	bl	90002dac <MX_SDRAM_BANK2_Init>
90002d36:	4603      	mov	r3, r0
90002d38:	2b00      	cmp	r3, #0
90002d3a:	d003      	beq.n	90002d44 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002d3c:	f04f 33ff 	mov.w	r3, #4294967295
90002d40:	60fb      	str	r3, [r7, #12]
90002d42:	e029      	b.n	90002d98 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002d44:	4b18      	ldr	r3, [pc, #96]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d46:	2208      	movs	r2, #8
90002d48:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002d4a:	4b17      	ldr	r3, [pc, #92]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d4c:	2203      	movs	r2, #3
90002d4e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002d50:	4b15      	ldr	r3, [pc, #84]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d52:	f240 6203 	movw	r2, #1539	@ 0x603
90002d56:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002d58:	4b13      	ldr	r3, [pc, #76]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d5a:	2200      	movs	r2, #0
90002d5c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002d5e:	4b12      	ldr	r3, [pc, #72]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d60:	2200      	movs	r2, #0
90002d62:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002d64:	4b10      	ldr	r3, [pc, #64]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d66:	2230      	movs	r2, #48	@ 0x30
90002d68:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002d6a:	4b0f      	ldr	r3, [pc, #60]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d6c:	2200      	movs	r2, #0
90002d6e:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002d70:	4b0d      	ldr	r3, [pc, #52]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002d76:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002d78:	687b      	ldr	r3, [r7, #4]
90002d7a:	2234      	movs	r2, #52	@ 0x34
90002d7c:	fb02 f303 	mul.w	r3, r2, r3
90002d80:	4a08      	ldr	r2, [pc, #32]	@ (90002da4 <BSP_SDRAM_Init+0xb0>)
90002d82:	4413      	add	r3, r2
90002d84:	4908      	ldr	r1, [pc, #32]	@ (90002da8 <BSP_SDRAM_Init+0xb4>)
90002d86:	4618      	mov	r0, r3
90002d88:	f7fe fc3d 	bl	90001606 <MT48LC4M32B2_Init>
90002d8c:	4603      	mov	r3, r0
90002d8e:	2b00      	cmp	r3, #0
90002d90:	d002      	beq.n	90002d98 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002d92:	f06f 0304 	mvn.w	r3, #4
90002d96:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002d98:	68fb      	ldr	r3, [r7, #12]
}
90002d9a:	4618      	mov	r0, r3
90002d9c:	3710      	adds	r7, #16
90002d9e:	46bd      	mov	sp, r7
90002da0:	bd80      	pop	{r7, pc}
90002da2:	bf00      	nop
90002da4:	20001214 	.word	0x20001214
90002da8:	20001248 	.word	0x20001248

90002dac <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002dac:	b580      	push	{r7, lr}
90002dae:	b08c      	sub	sp, #48	@ 0x30
90002db0:	af00      	add	r7, sp, #0
90002db2:	60f8      	str	r0, [r7, #12]
90002db4:	60b9      	str	r1, [r7, #8]
90002db6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002db8:	4b20      	ldr	r3, [pc, #128]	@ (90002e3c <MX_SDRAM_BANK2_Init+0x90>)
90002dba:	4a21      	ldr	r2, [pc, #132]	@ (90002e40 <MX_SDRAM_BANK2_Init+0x94>)
90002dbc:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002dbe:	68fb      	ldr	r3, [r7, #12]
90002dc0:	2201      	movs	r2, #1
90002dc2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002dc4:	68fb      	ldr	r3, [r7, #12]
90002dc6:	2200      	movs	r2, #0
90002dc8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002dca:	68fb      	ldr	r3, [r7, #12]
90002dcc:	68ba      	ldr	r2, [r7, #8]
90002dce:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002dd0:	68fb      	ldr	r3, [r7, #12]
90002dd2:	687a      	ldr	r2, [r7, #4]
90002dd4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002dd6:	4b19      	ldr	r3, [pc, #100]	@ (90002e3c <MX_SDRAM_BANK2_Init+0x90>)
90002dd8:	2240      	movs	r2, #64	@ 0x40
90002dda:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002ddc:	68fb      	ldr	r3, [r7, #12]
90002dde:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002de2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002de4:	68fb      	ldr	r3, [r7, #12]
90002de6:	2200      	movs	r2, #0
90002de8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002dea:	68fb      	ldr	r3, [r7, #12]
90002dec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002df0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002df2:	68fb      	ldr	r3, [r7, #12]
90002df4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002df8:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002dfa:	68fb      	ldr	r3, [r7, #12]
90002dfc:	2200      	movs	r2, #0
90002dfe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002e00:	2302      	movs	r3, #2
90002e02:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002e04:	2307      	movs	r3, #7
90002e06:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002e08:	2304      	movs	r3, #4
90002e0a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002e0c:	2307      	movs	r3, #7
90002e0e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002e10:	2302      	movs	r3, #2
90002e12:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002e14:	2302      	movs	r3, #2
90002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002e18:	2302      	movs	r3, #2
90002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002e1c:	f107 0314 	add.w	r3, r7, #20
90002e20:	4619      	mov	r1, r3
90002e22:	68f8      	ldr	r0, [r7, #12]
90002e24:	f006 fcce 	bl	900097c4 <HAL_SDRAM_Init>
90002e28:	4603      	mov	r3, r0
90002e2a:	2b00      	cmp	r3, #0
90002e2c:	d001      	beq.n	90002e32 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002e2e:	2301      	movs	r3, #1
90002e30:	e000      	b.n	90002e34 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002e32:	2300      	movs	r3, #0
}
90002e34:	4618      	mov	r0, r3
90002e36:	3730      	adds	r7, #48	@ 0x30
90002e38:	46bd      	mov	sp, r7
90002e3a:	bd80      	pop	{r7, pc}
90002e3c:	20001214 	.word	0x20001214
90002e40:	52004140 	.word	0x52004140

90002e44 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002e44:	b580      	push	{r7, lr}
90002e46:	b08e      	sub	sp, #56	@ 0x38
90002e48:	af00      	add	r7, sp, #0
90002e4a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002e4c:	4b73      	ldr	r3, [pc, #460]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e52:	4a72      	ldr	r2, [pc, #456]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002e58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002e5c:	4b6f      	ldr	r3, [pc, #444]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002e66:	623b      	str	r3, [r7, #32]
90002e68:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002e6a:	4b6c      	ldr	r3, [pc, #432]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e70:	4a6a      	ldr	r2, [pc, #424]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e72:	f043 0301 	orr.w	r3, r3, #1
90002e76:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002e7a:	4b68      	ldr	r3, [pc, #416]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e80:	f003 0301 	and.w	r3, r3, #1
90002e84:	61fb      	str	r3, [r7, #28]
90002e86:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002e88:	4b64      	ldr	r3, [pc, #400]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e8e:	4a63      	ldr	r2, [pc, #396]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e90:	f043 0308 	orr.w	r3, r3, #8
90002e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e98:	4b60      	ldr	r3, [pc, #384]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e9e:	f003 0308 	and.w	r3, r3, #8
90002ea2:	61bb      	str	r3, [r7, #24]
90002ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002ea6:	4b5d      	ldr	r3, [pc, #372]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002eac:	4a5b      	ldr	r2, [pc, #364]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002eae:	f043 0310 	orr.w	r3, r3, #16
90002eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002eb6:	4b59      	ldr	r3, [pc, #356]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ebc:	f003 0310 	and.w	r3, r3, #16
90002ec0:	617b      	str	r3, [r7, #20]
90002ec2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002ec4:	4b55      	ldr	r3, [pc, #340]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002eca:	4a54      	ldr	r2, [pc, #336]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002ecc:	f043 0320 	orr.w	r3, r3, #32
90002ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ed4:	4b51      	ldr	r3, [pc, #324]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002eda:	f003 0320 	and.w	r3, r3, #32
90002ede:	613b      	str	r3, [r7, #16]
90002ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002ee2:	4b4e      	ldr	r3, [pc, #312]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ee8:	4a4c      	ldr	r2, [pc, #304]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ef2:	4b4a      	ldr	r3, [pc, #296]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002efc:	60fb      	str	r3, [r7, #12]
90002efe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002f00:	4b46      	ldr	r3, [pc, #280]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f06:	4a45      	ldr	r2, [pc, #276]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f10:	4b42      	ldr	r3, [pc, #264]	@ (9000301c <SDRAM_MspInit+0x1d8>)
90002f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002f1a:	60bb      	str	r3, [r7, #8]
90002f1c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002f1e:	2302      	movs	r3, #2
90002f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002f22:	2301      	movs	r3, #1
90002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002f26:	2303      	movs	r3, #3
90002f28:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002f2a:	230c      	movs	r3, #12
90002f2c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002f2e:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002f32:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f38:	4619      	mov	r1, r3
90002f3a:	4839      	ldr	r0, [pc, #228]	@ (90003020 <SDRAM_MspInit+0x1dc>)
90002f3c:	f000 fe32 	bl	90003ba4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002f40:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002f44:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f4a:	4619      	mov	r1, r3
90002f4c:	4835      	ldr	r0, [pc, #212]	@ (90003024 <SDRAM_MspInit+0x1e0>)
90002f4e:	f000 fe29 	bl	90003ba4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002f52:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002f56:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f5c:	4619      	mov	r1, r3
90002f5e:	4832      	ldr	r0, [pc, #200]	@ (90003028 <SDRAM_MspInit+0x1e4>)
90002f60:	f000 fe20 	bl	90003ba4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002f64:	f248 1333 	movw	r3, #33075	@ 0x8133
90002f68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f6e:	4619      	mov	r1, r3
90002f70:	482e      	ldr	r0, [pc, #184]	@ (9000302c <SDRAM_MspInit+0x1e8>)
90002f72:	f000 fe17 	bl	90003ba4 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002f76:	23e0      	movs	r3, #224	@ 0xe0
90002f78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f7e:	4619      	mov	r1, r3
90002f80:	482b      	ldr	r0, [pc, #172]	@ (90003030 <SDRAM_MspInit+0x1ec>)
90002f82:	f000 fe0f 	bl	90003ba4 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002f86:	4b2b      	ldr	r3, [pc, #172]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002f88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90002f8c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002f8e:	4b29      	ldr	r3, [pc, #164]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90002f94:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002f96:	4b27      	ldr	r3, [pc, #156]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002f98:	2280      	movs	r2, #128	@ 0x80
90002f9a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002f9c:	4b25      	ldr	r3, [pc, #148]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002f9e:	2200      	movs	r2, #0
90002fa0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002fa2:	4b24      	ldr	r3, [pc, #144]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fa4:	f240 2202 	movw	r2, #514	@ 0x202
90002fa8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002faa:	4b22      	ldr	r3, [pc, #136]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fac:	f640 0208 	movw	r2, #2056	@ 0x808
90002fb0:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002fb2:	4b20      	ldr	r3, [pc, #128]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fb4:	2220      	movs	r2, #32
90002fb6:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002fb8:	4b1e      	ldr	r3, [pc, #120]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fba:	2280      	movs	r2, #128	@ 0x80
90002fbc:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002fbe:	4b1d      	ldr	r3, [pc, #116]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90002fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002fc6:	4b1b      	ldr	r3, [pc, #108]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fc8:	2200      	movs	r2, #0
90002fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002fcc:	4b19      	ldr	r3, [pc, #100]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fce:	2200      	movs	r2, #0
90002fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002fd2:	4b18      	ldr	r3, [pc, #96]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fd4:	2280      	movs	r2, #128	@ 0x80
90002fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002fd8:	4b16      	ldr	r3, [pc, #88]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fda:	2200      	movs	r2, #0
90002fdc:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002fde:	4b15      	ldr	r3, [pc, #84]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fe0:	2200      	movs	r2, #0
90002fe2:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002fe4:	4b13      	ldr	r3, [pc, #76]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fe6:	4a14      	ldr	r2, [pc, #80]	@ (90003038 <SDRAM_MspInit+0x1f4>)
90002fe8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002fea:	4b14      	ldr	r3, [pc, #80]	@ (9000303c <SDRAM_MspInit+0x1f8>)
90002fec:	4a11      	ldr	r2, [pc, #68]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002fee:	631a      	str	r2, [r3, #48]	@ 0x30
90002ff0:	4b10      	ldr	r3, [pc, #64]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002ff2:	4a12      	ldr	r2, [pc, #72]	@ (9000303c <SDRAM_MspInit+0x1f8>)
90002ff4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002ff6:	480f      	ldr	r0, [pc, #60]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002ff8:	f003 fce2 	bl	900069c0 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002ffc:	480d      	ldr	r0, [pc, #52]	@ (90003034 <SDRAM_MspInit+0x1f0>)
90002ffe:	f003 fc93 	bl	90006928 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90003002:	2200      	movs	r2, #0
90003004:	210f      	movs	r1, #15
90003006:	207a      	movs	r0, #122	@ 0x7a
90003008:	f000 fa49 	bl	9000349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
9000300c:	207a      	movs	r0, #122	@ 0x7a
9000300e:	f000 fa60 	bl	900034d2 <HAL_NVIC_EnableIRQ>
}
90003012:	bf00      	nop
90003014:	3738      	adds	r7, #56	@ 0x38
90003016:	46bd      	mov	sp, r7
90003018:	bd80      	pop	{r7, pc}
9000301a:	bf00      	nop
9000301c:	58024400 	.word	0x58024400
90003020:	58020c00 	.word	0x58020c00
90003024:	58021000 	.word	0x58021000
90003028:	58021400 	.word	0x58021400
9000302c:	58021800 	.word	0x58021800
90003030:	58021c00 	.word	0x58021c00
90003034:	20001268 	.word	0x20001268
90003038:	52000040 	.word	0x52000040
9000303c:	20001214 	.word	0x20001214

90003040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90003040:	b480      	push	{r7}
90003042:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90003044:	4b29      	ldr	r3, [pc, #164]	@ (900030ec <SystemInit+0xac>)
90003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000304a:	4a28      	ldr	r2, [pc, #160]	@ (900030ec <SystemInit+0xac>)
9000304c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90003050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90003054:	4b26      	ldr	r3, [pc, #152]	@ (900030f0 <SystemInit+0xb0>)
90003056:	681b      	ldr	r3, [r3, #0]
90003058:	4a25      	ldr	r2, [pc, #148]	@ (900030f0 <SystemInit+0xb0>)
9000305a:	f043 0301 	orr.w	r3, r3, #1
9000305e:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90003060:	4b23      	ldr	r3, [pc, #140]	@ (900030f0 <SystemInit+0xb0>)
90003062:	2200      	movs	r2, #0
90003064:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90003066:	4b22      	ldr	r3, [pc, #136]	@ (900030f0 <SystemInit+0xb0>)
90003068:	681a      	ldr	r2, [r3, #0]
9000306a:	4921      	ldr	r1, [pc, #132]	@ (900030f0 <SystemInit+0xb0>)
9000306c:	4b21      	ldr	r3, [pc, #132]	@ (900030f4 <SystemInit+0xb4>)
9000306e:	4013      	ands	r3, r2
90003070:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90003072:	4b1f      	ldr	r3, [pc, #124]	@ (900030f0 <SystemInit+0xb0>)
90003074:	2200      	movs	r2, #0
90003076:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003078:	4b1d      	ldr	r3, [pc, #116]	@ (900030f0 <SystemInit+0xb0>)
9000307a:	2200      	movs	r2, #0
9000307c:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
9000307e:	4b1c      	ldr	r3, [pc, #112]	@ (900030f0 <SystemInit+0xb0>)
90003080:	2200      	movs	r2, #0
90003082:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90003084:	4b1a      	ldr	r3, [pc, #104]	@ (900030f0 <SystemInit+0xb0>)
90003086:	2200      	movs	r2, #0
90003088:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
9000308a:	4b19      	ldr	r3, [pc, #100]	@ (900030f0 <SystemInit+0xb0>)
9000308c:	2200      	movs	r2, #0
9000308e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90003090:	4b17      	ldr	r3, [pc, #92]	@ (900030f0 <SystemInit+0xb0>)
90003092:	2200      	movs	r2, #0
90003094:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90003096:	4b16      	ldr	r3, [pc, #88]	@ (900030f0 <SystemInit+0xb0>)
90003098:	2200      	movs	r2, #0
9000309a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
9000309c:	4b14      	ldr	r3, [pc, #80]	@ (900030f0 <SystemInit+0xb0>)
9000309e:	2200      	movs	r2, #0
900030a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
900030a2:	4b13      	ldr	r3, [pc, #76]	@ (900030f0 <SystemInit+0xb0>)
900030a4:	2200      	movs	r2, #0
900030a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
900030a8:	4b11      	ldr	r3, [pc, #68]	@ (900030f0 <SystemInit+0xb0>)
900030aa:	2200      	movs	r2, #0
900030ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
900030ae:	4b10      	ldr	r3, [pc, #64]	@ (900030f0 <SystemInit+0xb0>)
900030b0:	2200      	movs	r2, #0
900030b2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
900030b4:	4b0e      	ldr	r3, [pc, #56]	@ (900030f0 <SystemInit+0xb0>)
900030b6:	681b      	ldr	r3, [r3, #0]
900030b8:	4a0d      	ldr	r2, [pc, #52]	@ (900030f0 <SystemInit+0xb0>)
900030ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
900030be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
900030c0:	4b0b      	ldr	r3, [pc, #44]	@ (900030f0 <SystemInit+0xb0>)
900030c2:	2200      	movs	r2, #0
900030c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900030c6:	4b0c      	ldr	r3, [pc, #48]	@ (900030f8 <SystemInit+0xb8>)
900030c8:	681a      	ldr	r2, [r3, #0]
900030ca:	4b0c      	ldr	r3, [pc, #48]	@ (900030fc <SystemInit+0xbc>)
900030cc:	4013      	ands	r3, r2
900030ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900030d2:	d202      	bcs.n	900030da <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
900030d4:	4b0a      	ldr	r3, [pc, #40]	@ (90003100 <SystemInit+0xc0>)
900030d6:	2201      	movs	r2, #1
900030d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
900030da:	4b04      	ldr	r3, [pc, #16]	@ (900030ec <SystemInit+0xac>)
900030dc:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
900030e0:	609a      	str	r2, [r3, #8]
#endif  


}
900030e2:	bf00      	nop
900030e4:	46bd      	mov	sp, r7
900030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900030ea:	4770      	bx	lr
900030ec:	e000ed00 	.word	0xe000ed00
900030f0:	58024400 	.word	0x58024400
900030f4:	eaf6ed7f 	.word	0xeaf6ed7f
900030f8:	5c001000 	.word	0x5c001000
900030fc:	ffff0000 	.word	0xffff0000
90003100:	51008108 	.word	0x51008108

90003104 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90003104:	b480      	push	{r7}
90003106:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90003108:	4b09      	ldr	r3, [pc, #36]	@ (90003130 <ExitRun0Mode+0x2c>)
9000310a:	68db      	ldr	r3, [r3, #12]
9000310c:	4a08      	ldr	r2, [pc, #32]	@ (90003130 <ExitRun0Mode+0x2c>)
9000310e:	f043 0302 	orr.w	r3, r3, #2
90003112:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90003114:	bf00      	nop
90003116:	4b06      	ldr	r3, [pc, #24]	@ (90003130 <ExitRun0Mode+0x2c>)
90003118:	685b      	ldr	r3, [r3, #4]
9000311a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000311e:	2b00      	cmp	r3, #0
90003120:	d0f9      	beq.n	90003116 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
90003122:	bf00      	nop
90003124:	bf00      	nop
90003126:	46bd      	mov	sp, r7
90003128:	f85d 7b04 	ldr.w	r7, [sp], #4
9000312c:	4770      	bx	lr
9000312e:	bf00      	nop
90003130:	58024800 	.word	0x58024800

90003134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90003134:	b580      	push	{r7, lr}
90003136:	b082      	sub	sp, #8
90003138:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000313a:	2003      	movs	r0, #3
9000313c:	f000 f9a4 	bl	90003488 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90003140:	f004 fb3e 	bl	900077c0 <HAL_RCC_GetSysClockFreq>
90003144:	4602      	mov	r2, r0
90003146:	4b15      	ldr	r3, [pc, #84]	@ (9000319c <HAL_Init+0x68>)
90003148:	699b      	ldr	r3, [r3, #24]
9000314a:	0a1b      	lsrs	r3, r3, #8
9000314c:	f003 030f 	and.w	r3, r3, #15
90003150:	4913      	ldr	r1, [pc, #76]	@ (900031a0 <HAL_Init+0x6c>)
90003152:	5ccb      	ldrb	r3, [r1, r3]
90003154:	f003 031f 	and.w	r3, r3, #31
90003158:	fa22 f303 	lsr.w	r3, r2, r3
9000315c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000315e:	4b0f      	ldr	r3, [pc, #60]	@ (9000319c <HAL_Init+0x68>)
90003160:	699b      	ldr	r3, [r3, #24]
90003162:	f003 030f 	and.w	r3, r3, #15
90003166:	4a0e      	ldr	r2, [pc, #56]	@ (900031a0 <HAL_Init+0x6c>)
90003168:	5cd3      	ldrb	r3, [r2, r3]
9000316a:	f003 031f 	and.w	r3, r3, #31
9000316e:	687a      	ldr	r2, [r7, #4]
90003170:	fa22 f303 	lsr.w	r3, r2, r3
90003174:	4a0b      	ldr	r2, [pc, #44]	@ (900031a4 <HAL_Init+0x70>)
90003176:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003178:	4a0b      	ldr	r2, [pc, #44]	@ (900031a8 <HAL_Init+0x74>)
9000317a:	687b      	ldr	r3, [r7, #4]
9000317c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000317e:	200f      	movs	r0, #15
90003180:	f000 f81c 	bl	900031bc <HAL_InitTick>
90003184:	4603      	mov	r3, r0
90003186:	2b00      	cmp	r3, #0
90003188:	d001      	beq.n	9000318e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
9000318a:	2301      	movs	r3, #1
9000318c:	e002      	b.n	90003194 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
9000318e:	f000 f80d 	bl	900031ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90003192:	2300      	movs	r3, #0
}
90003194:	4618      	mov	r0, r3
90003196:	3708      	adds	r7, #8
90003198:	46bd      	mov	sp, r7
9000319a:	bd80      	pop	{r7, pc}
9000319c:	58024400 	.word	0x58024400
900031a0:	9000d750 	.word	0x9000d750
900031a4:	20000004 	.word	0x20000004
900031a8:	20000000 	.word	0x20000000

900031ac <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
900031ac:	b480      	push	{r7}
900031ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
900031b0:	bf00      	nop
900031b2:	46bd      	mov	sp, r7
900031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900031b8:	4770      	bx	lr
	...

900031bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900031bc:	b580      	push	{r7, lr}
900031be:	b082      	sub	sp, #8
900031c0:	af00      	add	r7, sp, #0
900031c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
900031c4:	4b15      	ldr	r3, [pc, #84]	@ (9000321c <HAL_InitTick+0x60>)
900031c6:	781b      	ldrb	r3, [r3, #0]
900031c8:	2b00      	cmp	r3, #0
900031ca:	d101      	bne.n	900031d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
900031cc:	2301      	movs	r3, #1
900031ce:	e021      	b.n	90003214 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
900031d0:	4b13      	ldr	r3, [pc, #76]	@ (90003220 <HAL_InitTick+0x64>)
900031d2:	681a      	ldr	r2, [r3, #0]
900031d4:	4b11      	ldr	r3, [pc, #68]	@ (9000321c <HAL_InitTick+0x60>)
900031d6:	781b      	ldrb	r3, [r3, #0]
900031d8:	4619      	mov	r1, r3
900031da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
900031de:	fbb3 f3f1 	udiv	r3, r3, r1
900031e2:	fbb2 f3f3 	udiv	r3, r2, r3
900031e6:	4618      	mov	r0, r3
900031e8:	f000 f981 	bl	900034ee <HAL_SYSTICK_Config>
900031ec:	4603      	mov	r3, r0
900031ee:	2b00      	cmp	r3, #0
900031f0:	d001      	beq.n	900031f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
900031f2:	2301      	movs	r3, #1
900031f4:	e00e      	b.n	90003214 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900031f6:	687b      	ldr	r3, [r7, #4]
900031f8:	2b0f      	cmp	r3, #15
900031fa:	d80a      	bhi.n	90003212 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
900031fc:	2200      	movs	r2, #0
900031fe:	6879      	ldr	r1, [r7, #4]
90003200:	f04f 30ff 	mov.w	r0, #4294967295
90003204:	f000 f94b 	bl	9000349e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003208:	4a06      	ldr	r2, [pc, #24]	@ (90003224 <HAL_InitTick+0x68>)
9000320a:	687b      	ldr	r3, [r7, #4]
9000320c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000320e:	2300      	movs	r3, #0
90003210:	e000      	b.n	90003214 <HAL_InitTick+0x58>
    return HAL_ERROR;
90003212:	2301      	movs	r3, #1
}
90003214:	4618      	mov	r0, r3
90003216:	3708      	adds	r7, #8
90003218:	46bd      	mov	sp, r7
9000321a:	bd80      	pop	{r7, pc}
9000321c:	2000000c 	.word	0x2000000c
90003220:	20000000 	.word	0x20000000
90003224:	20000008 	.word	0x20000008

90003228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003228:	b480      	push	{r7}
9000322a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
9000322c:	4b06      	ldr	r3, [pc, #24]	@ (90003248 <HAL_IncTick+0x20>)
9000322e:	781b      	ldrb	r3, [r3, #0]
90003230:	461a      	mov	r2, r3
90003232:	4b06      	ldr	r3, [pc, #24]	@ (9000324c <HAL_IncTick+0x24>)
90003234:	681b      	ldr	r3, [r3, #0]
90003236:	4413      	add	r3, r2
90003238:	4a04      	ldr	r2, [pc, #16]	@ (9000324c <HAL_IncTick+0x24>)
9000323a:	6013      	str	r3, [r2, #0]
}
9000323c:	bf00      	nop
9000323e:	46bd      	mov	sp, r7
90003240:	f85d 7b04 	ldr.w	r7, [sp], #4
90003244:	4770      	bx	lr
90003246:	bf00      	nop
90003248:	2000000c 	.word	0x2000000c
9000324c:	200012d4 	.word	0x200012d4

90003250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90003250:	b480      	push	{r7}
90003252:	af00      	add	r7, sp, #0
  return uwTick;
90003254:	4b03      	ldr	r3, [pc, #12]	@ (90003264 <HAL_GetTick+0x14>)
90003256:	681b      	ldr	r3, [r3, #0]
}
90003258:	4618      	mov	r0, r3
9000325a:	46bd      	mov	sp, r7
9000325c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003260:	4770      	bx	lr
90003262:	bf00      	nop
90003264:	200012d4 	.word	0x200012d4

90003268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90003268:	b580      	push	{r7, lr}
9000326a:	b084      	sub	sp, #16
9000326c:	af00      	add	r7, sp, #0
9000326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90003270:	f7ff ffee 	bl	90003250 <HAL_GetTick>
90003274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90003276:	687b      	ldr	r3, [r7, #4]
90003278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
9000327a:	68fb      	ldr	r3, [r7, #12]
9000327c:	f1b3 3fff 	cmp.w	r3, #4294967295
90003280:	d005      	beq.n	9000328e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90003282:	4b0a      	ldr	r3, [pc, #40]	@ (900032ac <HAL_Delay+0x44>)
90003284:	781b      	ldrb	r3, [r3, #0]
90003286:	461a      	mov	r2, r3
90003288:	68fb      	ldr	r3, [r7, #12]
9000328a:	4413      	add	r3, r2
9000328c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
9000328e:	bf00      	nop
90003290:	f7ff ffde 	bl	90003250 <HAL_GetTick>
90003294:	4602      	mov	r2, r0
90003296:	68bb      	ldr	r3, [r7, #8]
90003298:	1ad3      	subs	r3, r2, r3
9000329a:	68fa      	ldr	r2, [r7, #12]
9000329c:	429a      	cmp	r2, r3
9000329e:	d8f7      	bhi.n	90003290 <HAL_Delay+0x28>
  {
  }
}
900032a0:	bf00      	nop
900032a2:	bf00      	nop
900032a4:	3710      	adds	r7, #16
900032a6:	46bd      	mov	sp, r7
900032a8:	bd80      	pop	{r7, pc}
900032aa:	bf00      	nop
900032ac:	2000000c 	.word	0x2000000c

900032b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
900032b0:	b480      	push	{r7}
900032b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
900032b4:	4b03      	ldr	r3, [pc, #12]	@ (900032c4 <HAL_GetREVID+0x14>)
900032b6:	681b      	ldr	r3, [r3, #0]
900032b8:	0c1b      	lsrs	r3, r3, #16
}
900032ba:	4618      	mov	r0, r3
900032bc:	46bd      	mov	sp, r7
900032be:	f85d 7b04 	ldr.w	r7, [sp], #4
900032c2:	4770      	bx	lr
900032c4:	5c001000 	.word	0x5c001000

900032c8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
900032c8:	b480      	push	{r7}
900032ca:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
900032cc:	4b05      	ldr	r3, [pc, #20]	@ (900032e4 <HAL_EnableCompensationCell+0x1c>)
900032ce:	6a1b      	ldr	r3, [r3, #32]
900032d0:	4a04      	ldr	r2, [pc, #16]	@ (900032e4 <HAL_EnableCompensationCell+0x1c>)
900032d2:	f043 0301 	orr.w	r3, r3, #1
900032d6:	6213      	str	r3, [r2, #32]
}
900032d8:	bf00      	nop
900032da:	46bd      	mov	sp, r7
900032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900032e0:	4770      	bx	lr
900032e2:	bf00      	nop
900032e4:	58000400 	.word	0x58000400

900032e8 <__NVIC_SetPriorityGrouping>:
{
900032e8:	b480      	push	{r7}
900032ea:	b085      	sub	sp, #20
900032ec:	af00      	add	r7, sp, #0
900032ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900032f0:	687b      	ldr	r3, [r7, #4]
900032f2:	f003 0307 	and.w	r3, r3, #7
900032f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900032f8:	4b0b      	ldr	r3, [pc, #44]	@ (90003328 <__NVIC_SetPriorityGrouping+0x40>)
900032fa:	68db      	ldr	r3, [r3, #12]
900032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900032fe:	68ba      	ldr	r2, [r7, #8]
90003300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90003304:	4013      	ands	r3, r2
90003306:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003308:	68fb      	ldr	r3, [r7, #12]
9000330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000330c:	68bb      	ldr	r3, [r7, #8]
9000330e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003310:	4b06      	ldr	r3, [pc, #24]	@ (9000332c <__NVIC_SetPriorityGrouping+0x44>)
90003312:	4313      	orrs	r3, r2
90003314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90003316:	4a04      	ldr	r2, [pc, #16]	@ (90003328 <__NVIC_SetPriorityGrouping+0x40>)
90003318:	68bb      	ldr	r3, [r7, #8]
9000331a:	60d3      	str	r3, [r2, #12]
}
9000331c:	bf00      	nop
9000331e:	3714      	adds	r7, #20
90003320:	46bd      	mov	sp, r7
90003322:	f85d 7b04 	ldr.w	r7, [sp], #4
90003326:	4770      	bx	lr
90003328:	e000ed00 	.word	0xe000ed00
9000332c:	05fa0000 	.word	0x05fa0000

90003330 <__NVIC_GetPriorityGrouping>:
{
90003330:	b480      	push	{r7}
90003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003334:	4b04      	ldr	r3, [pc, #16]	@ (90003348 <__NVIC_GetPriorityGrouping+0x18>)
90003336:	68db      	ldr	r3, [r3, #12]
90003338:	0a1b      	lsrs	r3, r3, #8
9000333a:	f003 0307 	and.w	r3, r3, #7
}
9000333e:	4618      	mov	r0, r3
90003340:	46bd      	mov	sp, r7
90003342:	f85d 7b04 	ldr.w	r7, [sp], #4
90003346:	4770      	bx	lr
90003348:	e000ed00 	.word	0xe000ed00

9000334c <__NVIC_EnableIRQ>:
{
9000334c:	b480      	push	{r7}
9000334e:	b083      	sub	sp, #12
90003350:	af00      	add	r7, sp, #0
90003352:	4603      	mov	r3, r0
90003354:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000335a:	2b00      	cmp	r3, #0
9000335c:	db0b      	blt.n	90003376 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000335e:	88fb      	ldrh	r3, [r7, #6]
90003360:	f003 021f 	and.w	r2, r3, #31
90003364:	4907      	ldr	r1, [pc, #28]	@ (90003384 <__NVIC_EnableIRQ+0x38>)
90003366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000336a:	095b      	lsrs	r3, r3, #5
9000336c:	2001      	movs	r0, #1
9000336e:	fa00 f202 	lsl.w	r2, r0, r2
90003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90003376:	bf00      	nop
90003378:	370c      	adds	r7, #12
9000337a:	46bd      	mov	sp, r7
9000337c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003380:	4770      	bx	lr
90003382:	bf00      	nop
90003384:	e000e100 	.word	0xe000e100

90003388 <__NVIC_SetPriority>:
{
90003388:	b480      	push	{r7}
9000338a:	b083      	sub	sp, #12
9000338c:	af00      	add	r7, sp, #0
9000338e:	4603      	mov	r3, r0
90003390:	6039      	str	r1, [r7, #0]
90003392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003398:	2b00      	cmp	r3, #0
9000339a:	db0a      	blt.n	900033b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000339c:	683b      	ldr	r3, [r7, #0]
9000339e:	b2da      	uxtb	r2, r3
900033a0:	490c      	ldr	r1, [pc, #48]	@ (900033d4 <__NVIC_SetPriority+0x4c>)
900033a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900033a6:	0112      	lsls	r2, r2, #4
900033a8:	b2d2      	uxtb	r2, r2
900033aa:	440b      	add	r3, r1
900033ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
900033b0:	e00a      	b.n	900033c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900033b2:	683b      	ldr	r3, [r7, #0]
900033b4:	b2da      	uxtb	r2, r3
900033b6:	4908      	ldr	r1, [pc, #32]	@ (900033d8 <__NVIC_SetPriority+0x50>)
900033b8:	88fb      	ldrh	r3, [r7, #6]
900033ba:	f003 030f 	and.w	r3, r3, #15
900033be:	3b04      	subs	r3, #4
900033c0:	0112      	lsls	r2, r2, #4
900033c2:	b2d2      	uxtb	r2, r2
900033c4:	440b      	add	r3, r1
900033c6:	761a      	strb	r2, [r3, #24]
}
900033c8:	bf00      	nop
900033ca:	370c      	adds	r7, #12
900033cc:	46bd      	mov	sp, r7
900033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
900033d2:	4770      	bx	lr
900033d4:	e000e100 	.word	0xe000e100
900033d8:	e000ed00 	.word	0xe000ed00

900033dc <NVIC_EncodePriority>:
{
900033dc:	b480      	push	{r7}
900033de:	b089      	sub	sp, #36	@ 0x24
900033e0:	af00      	add	r7, sp, #0
900033e2:	60f8      	str	r0, [r7, #12]
900033e4:	60b9      	str	r1, [r7, #8]
900033e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900033e8:	68fb      	ldr	r3, [r7, #12]
900033ea:	f003 0307 	and.w	r3, r3, #7
900033ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900033f0:	69fb      	ldr	r3, [r7, #28]
900033f2:	f1c3 0307 	rsb	r3, r3, #7
900033f6:	2b04      	cmp	r3, #4
900033f8:	bf28      	it	cs
900033fa:	2304      	movcs	r3, #4
900033fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900033fe:	69fb      	ldr	r3, [r7, #28]
90003400:	3304      	adds	r3, #4
90003402:	2b06      	cmp	r3, #6
90003404:	d902      	bls.n	9000340c <NVIC_EncodePriority+0x30>
90003406:	69fb      	ldr	r3, [r7, #28]
90003408:	3b03      	subs	r3, #3
9000340a:	e000      	b.n	9000340e <NVIC_EncodePriority+0x32>
9000340c:	2300      	movs	r3, #0
9000340e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003410:	f04f 32ff 	mov.w	r2, #4294967295
90003414:	69bb      	ldr	r3, [r7, #24]
90003416:	fa02 f303 	lsl.w	r3, r2, r3
9000341a:	43da      	mvns	r2, r3
9000341c:	68bb      	ldr	r3, [r7, #8]
9000341e:	401a      	ands	r2, r3
90003420:	697b      	ldr	r3, [r7, #20]
90003422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003424:	f04f 31ff 	mov.w	r1, #4294967295
90003428:	697b      	ldr	r3, [r7, #20]
9000342a:	fa01 f303 	lsl.w	r3, r1, r3
9000342e:	43d9      	mvns	r1, r3
90003430:	687b      	ldr	r3, [r7, #4]
90003432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003434:	4313      	orrs	r3, r2
}
90003436:	4618      	mov	r0, r3
90003438:	3724      	adds	r7, #36	@ 0x24
9000343a:	46bd      	mov	sp, r7
9000343c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003440:	4770      	bx	lr
	...

90003444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003444:	b580      	push	{r7, lr}
90003446:	b082      	sub	sp, #8
90003448:	af00      	add	r7, sp, #0
9000344a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
9000344c:	687b      	ldr	r3, [r7, #4]
9000344e:	3b01      	subs	r3, #1
90003450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003454:	d301      	bcc.n	9000345a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003456:	2301      	movs	r3, #1
90003458:	e00f      	b.n	9000347a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000345a:	4a0a      	ldr	r2, [pc, #40]	@ (90003484 <SysTick_Config+0x40>)
9000345c:	687b      	ldr	r3, [r7, #4]
9000345e:	3b01      	subs	r3, #1
90003460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90003462:	210f      	movs	r1, #15
90003464:	f04f 30ff 	mov.w	r0, #4294967295
90003468:	f7ff ff8e 	bl	90003388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
9000346c:	4b05      	ldr	r3, [pc, #20]	@ (90003484 <SysTick_Config+0x40>)
9000346e:	2200      	movs	r2, #0
90003470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90003472:	4b04      	ldr	r3, [pc, #16]	@ (90003484 <SysTick_Config+0x40>)
90003474:	2207      	movs	r2, #7
90003476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003478:	2300      	movs	r3, #0
}
9000347a:	4618      	mov	r0, r3
9000347c:	3708      	adds	r7, #8
9000347e:	46bd      	mov	sp, r7
90003480:	bd80      	pop	{r7, pc}
90003482:	bf00      	nop
90003484:	e000e010 	.word	0xe000e010

90003488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003488:	b580      	push	{r7, lr}
9000348a:	b082      	sub	sp, #8
9000348c:	af00      	add	r7, sp, #0
9000348e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003490:	6878      	ldr	r0, [r7, #4]
90003492:	f7ff ff29 	bl	900032e8 <__NVIC_SetPriorityGrouping>
}
90003496:	bf00      	nop
90003498:	3708      	adds	r7, #8
9000349a:	46bd      	mov	sp, r7
9000349c:	bd80      	pop	{r7, pc}

9000349e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000349e:	b580      	push	{r7, lr}
900034a0:	b086      	sub	sp, #24
900034a2:	af00      	add	r7, sp, #0
900034a4:	4603      	mov	r3, r0
900034a6:	60b9      	str	r1, [r7, #8]
900034a8:	607a      	str	r2, [r7, #4]
900034aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
900034ac:	f7ff ff40 	bl	90003330 <__NVIC_GetPriorityGrouping>
900034b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
900034b2:	687a      	ldr	r2, [r7, #4]
900034b4:	68b9      	ldr	r1, [r7, #8]
900034b6:	6978      	ldr	r0, [r7, #20]
900034b8:	f7ff ff90 	bl	900033dc <NVIC_EncodePriority>
900034bc:	4602      	mov	r2, r0
900034be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
900034c2:	4611      	mov	r1, r2
900034c4:	4618      	mov	r0, r3
900034c6:	f7ff ff5f 	bl	90003388 <__NVIC_SetPriority>
}
900034ca:	bf00      	nop
900034cc:	3718      	adds	r7, #24
900034ce:	46bd      	mov	sp, r7
900034d0:	bd80      	pop	{r7, pc}

900034d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900034d2:	b580      	push	{r7, lr}
900034d4:	b082      	sub	sp, #8
900034d6:	af00      	add	r7, sp, #0
900034d8:	4603      	mov	r3, r0
900034da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900034dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034e0:	4618      	mov	r0, r3
900034e2:	f7ff ff33 	bl	9000334c <__NVIC_EnableIRQ>
}
900034e6:	bf00      	nop
900034e8:	3708      	adds	r7, #8
900034ea:	46bd      	mov	sp, r7
900034ec:	bd80      	pop	{r7, pc}

900034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
900034ee:	b580      	push	{r7, lr}
900034f0:	b082      	sub	sp, #8
900034f2:	af00      	add	r7, sp, #0
900034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
900034f6:	6878      	ldr	r0, [r7, #4]
900034f8:	f7ff ffa4 	bl	90003444 <SysTick_Config>
900034fc:	4603      	mov	r3, r0
}
900034fe:	4618      	mov	r0, r3
90003500:	3708      	adds	r7, #8
90003502:	46bd      	mov	sp, r7
90003504:	bd80      	pop	{r7, pc}
	...

90003508 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003508:	b480      	push	{r7}
9000350a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
9000350c:	f3bf 8f5f 	dmb	sy
}
90003510:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003512:	4b07      	ldr	r3, [pc, #28]	@ (90003530 <HAL_MPU_Disable+0x28>)
90003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003516:	4a06      	ldr	r2, [pc, #24]	@ (90003530 <HAL_MPU_Disable+0x28>)
90003518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000351c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
9000351e:	4b05      	ldr	r3, [pc, #20]	@ (90003534 <HAL_MPU_Disable+0x2c>)
90003520:	2200      	movs	r2, #0
90003522:	605a      	str	r2, [r3, #4]
}
90003524:	bf00      	nop
90003526:	46bd      	mov	sp, r7
90003528:	f85d 7b04 	ldr.w	r7, [sp], #4
9000352c:	4770      	bx	lr
9000352e:	bf00      	nop
90003530:	e000ed00 	.word	0xe000ed00
90003534:	e000ed90 	.word	0xe000ed90

90003538 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003538:	b480      	push	{r7}
9000353a:	b083      	sub	sp, #12
9000353c:	af00      	add	r7, sp, #0
9000353e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003540:	4a0b      	ldr	r2, [pc, #44]	@ (90003570 <HAL_MPU_Enable+0x38>)
90003542:	687b      	ldr	r3, [r7, #4]
90003544:	f043 0301 	orr.w	r3, r3, #1
90003548:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000354a:	4b0a      	ldr	r3, [pc, #40]	@ (90003574 <HAL_MPU_Enable+0x3c>)
9000354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000354e:	4a09      	ldr	r2, [pc, #36]	@ (90003574 <HAL_MPU_Enable+0x3c>)
90003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90003554:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003556:	f3bf 8f4f 	dsb	sy
}
9000355a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000355c:	f3bf 8f6f 	isb	sy
}
90003560:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90003562:	bf00      	nop
90003564:	370c      	adds	r7, #12
90003566:	46bd      	mov	sp, r7
90003568:	f85d 7b04 	ldr.w	r7, [sp], #4
9000356c:	4770      	bx	lr
9000356e:	bf00      	nop
90003570:	e000ed90 	.word	0xe000ed90
90003574:	e000ed00 	.word	0xe000ed00

90003578 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003578:	b480      	push	{r7}
9000357a:	b083      	sub	sp, #12
9000357c:	af00      	add	r7, sp, #0
9000357e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003580:	687b      	ldr	r3, [r7, #4]
90003582:	785a      	ldrb	r2, [r3, #1]
90003584:	4b1b      	ldr	r3, [pc, #108]	@ (900035f4 <HAL_MPU_ConfigRegion+0x7c>)
90003586:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003588:	4b1a      	ldr	r3, [pc, #104]	@ (900035f4 <HAL_MPU_ConfigRegion+0x7c>)
9000358a:	691b      	ldr	r3, [r3, #16]
9000358c:	4a19      	ldr	r2, [pc, #100]	@ (900035f4 <HAL_MPU_ConfigRegion+0x7c>)
9000358e:	f023 0301 	bic.w	r3, r3, #1
90003592:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003594:	4a17      	ldr	r2, [pc, #92]	@ (900035f4 <HAL_MPU_ConfigRegion+0x7c>)
90003596:	687b      	ldr	r3, [r7, #4]
90003598:	685b      	ldr	r3, [r3, #4]
9000359a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000359c:	687b      	ldr	r3, [r7, #4]
9000359e:	7b1b      	ldrb	r3, [r3, #12]
900035a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900035a2:	687b      	ldr	r3, [r7, #4]
900035a4:	7adb      	ldrb	r3, [r3, #11]
900035a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900035a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900035aa:	687b      	ldr	r3, [r7, #4]
900035ac:	7a9b      	ldrb	r3, [r3, #10]
900035ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900035b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900035b2:	687b      	ldr	r3, [r7, #4]
900035b4:	7b5b      	ldrb	r3, [r3, #13]
900035b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900035b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900035ba:	687b      	ldr	r3, [r7, #4]
900035bc:	7b9b      	ldrb	r3, [r3, #14]
900035be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900035c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900035c2:	687b      	ldr	r3, [r7, #4]
900035c4:	7bdb      	ldrb	r3, [r3, #15]
900035c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900035c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900035ca:	687b      	ldr	r3, [r7, #4]
900035cc:	7a5b      	ldrb	r3, [r3, #9]
900035ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900035d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900035d2:	687b      	ldr	r3, [r7, #4]
900035d4:	7a1b      	ldrb	r3, [r3, #8]
900035d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900035d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
900035da:	687a      	ldr	r2, [r7, #4]
900035dc:	7812      	ldrb	r2, [r2, #0]
900035de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900035e0:	4a04      	ldr	r2, [pc, #16]	@ (900035f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900035e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900035e4:	6113      	str	r3, [r2, #16]
}
900035e6:	bf00      	nop
900035e8:	370c      	adds	r7, #12
900035ea:	46bd      	mov	sp, r7
900035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
900035f0:	4770      	bx	lr
900035f2:	bf00      	nop
900035f4:	e000ed90 	.word	0xe000ed90

900035f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900035f8:	b580      	push	{r7, lr}
900035fa:	b082      	sub	sp, #8
900035fc:	af00      	add	r7, sp, #0
900035fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003600:	687b      	ldr	r3, [r7, #4]
90003602:	2b00      	cmp	r3, #0
90003604:	d101      	bne.n	9000360a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90003606:	2301      	movs	r3, #1
90003608:	e04f      	b.n	900036aa <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
9000360a:	687b      	ldr	r3, [r7, #4]
9000360c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90003610:	b2db      	uxtb	r3, r3
90003612:	2b00      	cmp	r3, #0
90003614:	d106      	bne.n	90003624 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90003616:	687b      	ldr	r3, [r7, #4]
90003618:	2200      	movs	r2, #0
9000361a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
9000361e:	6878      	ldr	r0, [r7, #4]
90003620:	f000 f84e 	bl	900036c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003624:	687b      	ldr	r3, [r7, #4]
90003626:	2202      	movs	r2, #2
90003628:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000362c:	687b      	ldr	r3, [r7, #4]
9000362e:	681b      	ldr	r3, [r3, #0]
90003630:	681a      	ldr	r2, [r3, #0]
90003632:	4b20      	ldr	r3, [pc, #128]	@ (900036b4 <HAL_DMA2D_Init+0xbc>)
90003634:	4013      	ands	r3, r2
90003636:	687a      	ldr	r2, [r7, #4]
90003638:	6851      	ldr	r1, [r2, #4]
9000363a:	687a      	ldr	r2, [r7, #4]
9000363c:	69d2      	ldr	r2, [r2, #28]
9000363e:	4311      	orrs	r1, r2
90003640:	687a      	ldr	r2, [r7, #4]
90003642:	6812      	ldr	r2, [r2, #0]
90003644:	430b      	orrs	r3, r1
90003646:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003648:	687b      	ldr	r3, [r7, #4]
9000364a:	681b      	ldr	r3, [r3, #0]
9000364c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000364e:	4b1a      	ldr	r3, [pc, #104]	@ (900036b8 <HAL_DMA2D_Init+0xc0>)
90003650:	4013      	ands	r3, r2
90003652:	687a      	ldr	r2, [r7, #4]
90003654:	6891      	ldr	r1, [r2, #8]
90003656:	687a      	ldr	r2, [r7, #4]
90003658:	6992      	ldr	r2, [r2, #24]
9000365a:	4311      	orrs	r1, r2
9000365c:	687a      	ldr	r2, [r7, #4]
9000365e:	6812      	ldr	r2, [r2, #0]
90003660:	430b      	orrs	r3, r1
90003662:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003664:	687b      	ldr	r3, [r7, #4]
90003666:	681b      	ldr	r3, [r3, #0]
90003668:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000366a:	4b14      	ldr	r3, [pc, #80]	@ (900036bc <HAL_DMA2D_Init+0xc4>)
9000366c:	4013      	ands	r3, r2
9000366e:	687a      	ldr	r2, [r7, #4]
90003670:	68d1      	ldr	r1, [r2, #12]
90003672:	687a      	ldr	r2, [r7, #4]
90003674:	6812      	ldr	r2, [r2, #0]
90003676:	430b      	orrs	r3, r1
90003678:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000367a:	687b      	ldr	r3, [r7, #4]
9000367c:	681b      	ldr	r3, [r3, #0]
9000367e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003680:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003684:	687b      	ldr	r3, [r7, #4]
90003686:	691b      	ldr	r3, [r3, #16]
90003688:	051a      	lsls	r2, r3, #20
9000368a:	687b      	ldr	r3, [r7, #4]
9000368c:	695b      	ldr	r3, [r3, #20]
9000368e:	055b      	lsls	r3, r3, #21
90003690:	431a      	orrs	r2, r3
90003692:	687b      	ldr	r3, [r7, #4]
90003694:	681b      	ldr	r3, [r3, #0]
90003696:	430a      	orrs	r2, r1
90003698:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000369a:	687b      	ldr	r3, [r7, #4]
9000369c:	2200      	movs	r2, #0
9000369e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
900036a0:	687b      	ldr	r3, [r7, #4]
900036a2:	2201      	movs	r2, #1
900036a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
900036a8:	2300      	movs	r3, #0
}
900036aa:	4618      	mov	r0, r3
900036ac:	3708      	adds	r7, #8
900036ae:	46bd      	mov	sp, r7
900036b0:	bd80      	pop	{r7, pc}
900036b2:	bf00      	nop
900036b4:	fff8ffbf 	.word	0xfff8ffbf
900036b8:	fffffef8 	.word	0xfffffef8
900036bc:	ffff0000 	.word	0xffff0000

900036c0 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
900036c0:	b480      	push	{r7}
900036c2:	b083      	sub	sp, #12
900036c4:	af00      	add	r7, sp, #0
900036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
900036c8:	bf00      	nop
900036ca:	370c      	adds	r7, #12
900036cc:	46bd      	mov	sp, r7
900036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
900036d2:	4770      	bx	lr

900036d4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
900036d4:	b580      	push	{r7, lr}
900036d6:	b086      	sub	sp, #24
900036d8:	af02      	add	r7, sp, #8
900036da:	60f8      	str	r0, [r7, #12]
900036dc:	60b9      	str	r1, [r7, #8]
900036de:	607a      	str	r2, [r7, #4]
900036e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
900036e2:	68fb      	ldr	r3, [r7, #12]
900036e4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900036e8:	2b01      	cmp	r3, #1
900036ea:	d101      	bne.n	900036f0 <HAL_DMA2D_Start+0x1c>
900036ec:	2302      	movs	r3, #2
900036ee:	e018      	b.n	90003722 <HAL_DMA2D_Start+0x4e>
900036f0:	68fb      	ldr	r3, [r7, #12]
900036f2:	2201      	movs	r2, #1
900036f4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900036f8:	68fb      	ldr	r3, [r7, #12]
900036fa:	2202      	movs	r2, #2
900036fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003700:	69bb      	ldr	r3, [r7, #24]
90003702:	9300      	str	r3, [sp, #0]
90003704:	683b      	ldr	r3, [r7, #0]
90003706:	687a      	ldr	r2, [r7, #4]
90003708:	68b9      	ldr	r1, [r7, #8]
9000370a:	68f8      	ldr	r0, [r7, #12]
9000370c:	f000 f9a4 	bl	90003a58 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003710:	68fb      	ldr	r3, [r7, #12]
90003712:	681b      	ldr	r3, [r3, #0]
90003714:	681a      	ldr	r2, [r3, #0]
90003716:	68fb      	ldr	r3, [r7, #12]
90003718:	681b      	ldr	r3, [r3, #0]
9000371a:	f042 0201 	orr.w	r2, r2, #1
9000371e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003720:	2300      	movs	r3, #0
}
90003722:	4618      	mov	r0, r3
90003724:	3710      	adds	r7, #16
90003726:	46bd      	mov	sp, r7
90003728:	bd80      	pop	{r7, pc}

9000372a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
9000372a:	b580      	push	{r7, lr}
9000372c:	b086      	sub	sp, #24
9000372e:	af00      	add	r7, sp, #0
90003730:	6078      	str	r0, [r7, #4]
90003732:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
90003734:	2300      	movs	r3, #0
90003736:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003738:	687b      	ldr	r3, [r7, #4]
9000373a:	681b      	ldr	r3, [r3, #0]
9000373c:	681b      	ldr	r3, [r3, #0]
9000373e:	f003 0301 	and.w	r3, r3, #1
90003742:	2b00      	cmp	r3, #0
90003744:	d056      	beq.n	900037f4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003746:	f7ff fd83 	bl	90003250 <HAL_GetTick>
9000374a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000374c:	e04b      	b.n	900037e6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000374e:	687b      	ldr	r3, [r7, #4]
90003750:	681b      	ldr	r3, [r3, #0]
90003752:	685b      	ldr	r3, [r3, #4]
90003754:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003756:	68fb      	ldr	r3, [r7, #12]
90003758:	f003 0321 	and.w	r3, r3, #33	@ 0x21
9000375c:	2b00      	cmp	r3, #0
9000375e:	d023      	beq.n	900037a8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003760:	68fb      	ldr	r3, [r7, #12]
90003762:	f003 0320 	and.w	r3, r3, #32
90003766:	2b00      	cmp	r3, #0
90003768:	d005      	beq.n	90003776 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000376a:	687b      	ldr	r3, [r7, #4]
9000376c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000376e:	f043 0202 	orr.w	r2, r3, #2
90003772:	687b      	ldr	r3, [r7, #4]
90003774:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003776:	68fb      	ldr	r3, [r7, #12]
90003778:	f003 0301 	and.w	r3, r3, #1
9000377c:	2b00      	cmp	r3, #0
9000377e:	d005      	beq.n	9000378c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003780:	687b      	ldr	r3, [r7, #4]
90003782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003784:	f043 0201 	orr.w	r2, r3, #1
90003788:	687b      	ldr	r3, [r7, #4]
9000378a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
9000378c:	687b      	ldr	r3, [r7, #4]
9000378e:	681b      	ldr	r3, [r3, #0]
90003790:	2221      	movs	r2, #33	@ 0x21
90003792:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003794:	687b      	ldr	r3, [r7, #4]
90003796:	2204      	movs	r2, #4
90003798:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
9000379c:	687b      	ldr	r3, [r7, #4]
9000379e:	2200      	movs	r2, #0
900037a0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
900037a4:	2301      	movs	r3, #1
900037a6:	e0a5      	b.n	900038f4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900037a8:	683b      	ldr	r3, [r7, #0]
900037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
900037ae:	d01a      	beq.n	900037e6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900037b0:	f7ff fd4e 	bl	90003250 <HAL_GetTick>
900037b4:	4602      	mov	r2, r0
900037b6:	697b      	ldr	r3, [r7, #20]
900037b8:	1ad3      	subs	r3, r2, r3
900037ba:	683a      	ldr	r2, [r7, #0]
900037bc:	429a      	cmp	r2, r3
900037be:	d302      	bcc.n	900037c6 <HAL_DMA2D_PollForTransfer+0x9c>
900037c0:	683b      	ldr	r3, [r7, #0]
900037c2:	2b00      	cmp	r3, #0
900037c4:	d10f      	bne.n	900037e6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900037c6:	687b      	ldr	r3, [r7, #4]
900037c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900037ca:	f043 0220 	orr.w	r2, r3, #32
900037ce:	687b      	ldr	r3, [r7, #4]
900037d0:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
900037d2:	687b      	ldr	r3, [r7, #4]
900037d4:	2203      	movs	r2, #3
900037d6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
900037da:	687b      	ldr	r3, [r7, #4]
900037dc:	2200      	movs	r2, #0
900037de:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
900037e2:	2303      	movs	r3, #3
900037e4:	e086      	b.n	900038f4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900037e6:	687b      	ldr	r3, [r7, #4]
900037e8:	681b      	ldr	r3, [r3, #0]
900037ea:	685b      	ldr	r3, [r3, #4]
900037ec:	f003 0302 	and.w	r3, r3, #2
900037f0:	2b00      	cmp	r3, #0
900037f2:	d0ac      	beq.n	9000374e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
900037f4:	687b      	ldr	r3, [r7, #4]
900037f6:	681b      	ldr	r3, [r3, #0]
900037f8:	69db      	ldr	r3, [r3, #28]
900037fa:	f003 0320 	and.w	r3, r3, #32
900037fe:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003800:	687b      	ldr	r3, [r7, #4]
90003802:	681b      	ldr	r3, [r3, #0]
90003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003806:	f003 0320 	and.w	r3, r3, #32
9000380a:	693a      	ldr	r2, [r7, #16]
9000380c:	4313      	orrs	r3, r2
9000380e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003810:	693b      	ldr	r3, [r7, #16]
90003812:	2b00      	cmp	r3, #0
90003814:	d061      	beq.n	900038da <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003816:	f7ff fd1b 	bl	90003250 <HAL_GetTick>
9000381a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
9000381c:	e056      	b.n	900038cc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000381e:	687b      	ldr	r3, [r7, #4]
90003820:	681b      	ldr	r3, [r3, #0]
90003822:	685b      	ldr	r3, [r3, #4]
90003824:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003826:	68fb      	ldr	r3, [r7, #12]
90003828:	f003 0329 	and.w	r3, r3, #41	@ 0x29
9000382c:	2b00      	cmp	r3, #0
9000382e:	d02e      	beq.n	9000388e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003830:	68fb      	ldr	r3, [r7, #12]
90003832:	f003 0308 	and.w	r3, r3, #8
90003836:	2b00      	cmp	r3, #0
90003838:	d005      	beq.n	90003846 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
9000383a:	687b      	ldr	r3, [r7, #4]
9000383c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000383e:	f043 0204 	orr.w	r2, r3, #4
90003842:	687b      	ldr	r3, [r7, #4]
90003844:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003846:	68fb      	ldr	r3, [r7, #12]
90003848:	f003 0320 	and.w	r3, r3, #32
9000384c:	2b00      	cmp	r3, #0
9000384e:	d005      	beq.n	9000385c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003850:	687b      	ldr	r3, [r7, #4]
90003852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003854:	f043 0202 	orr.w	r2, r3, #2
90003858:	687b      	ldr	r3, [r7, #4]
9000385a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000385c:	68fb      	ldr	r3, [r7, #12]
9000385e:	f003 0301 	and.w	r3, r3, #1
90003862:	2b00      	cmp	r3, #0
90003864:	d005      	beq.n	90003872 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003866:	687b      	ldr	r3, [r7, #4]
90003868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000386a:	f043 0201 	orr.w	r2, r3, #1
9000386e:	687b      	ldr	r3, [r7, #4]
90003870:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003872:	687b      	ldr	r3, [r7, #4]
90003874:	681b      	ldr	r3, [r3, #0]
90003876:	2229      	movs	r2, #41	@ 0x29
90003878:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000387a:	687b      	ldr	r3, [r7, #4]
9000387c:	2204      	movs	r2, #4
9000387e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003882:	687b      	ldr	r3, [r7, #4]
90003884:	2200      	movs	r2, #0
90003886:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
9000388a:	2301      	movs	r3, #1
9000388c:	e032      	b.n	900038f4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000388e:	683b      	ldr	r3, [r7, #0]
90003890:	f1b3 3fff 	cmp.w	r3, #4294967295
90003894:	d01a      	beq.n	900038cc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003896:	f7ff fcdb 	bl	90003250 <HAL_GetTick>
9000389a:	4602      	mov	r2, r0
9000389c:	697b      	ldr	r3, [r7, #20]
9000389e:	1ad3      	subs	r3, r2, r3
900038a0:	683a      	ldr	r2, [r7, #0]
900038a2:	429a      	cmp	r2, r3
900038a4:	d302      	bcc.n	900038ac <HAL_DMA2D_PollForTransfer+0x182>
900038a6:	683b      	ldr	r3, [r7, #0]
900038a8:	2b00      	cmp	r3, #0
900038aa:	d10f      	bne.n	900038cc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900038ac:	687b      	ldr	r3, [r7, #4]
900038ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900038b0:	f043 0220 	orr.w	r2, r3, #32
900038b4:	687b      	ldr	r3, [r7, #4]
900038b6:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
900038b8:	687b      	ldr	r3, [r7, #4]
900038ba:	2203      	movs	r2, #3
900038bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
900038c0:	687b      	ldr	r3, [r7, #4]
900038c2:	2200      	movs	r2, #0
900038c4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
900038c8:	2303      	movs	r3, #3
900038ca:	e013      	b.n	900038f4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900038cc:	687b      	ldr	r3, [r7, #4]
900038ce:	681b      	ldr	r3, [r3, #0]
900038d0:	685b      	ldr	r3, [r3, #4]
900038d2:	f003 0310 	and.w	r3, r3, #16
900038d6:	2b00      	cmp	r3, #0
900038d8:	d0a1      	beq.n	9000381e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
900038da:	687b      	ldr	r3, [r7, #4]
900038dc:	681b      	ldr	r3, [r3, #0]
900038de:	2212      	movs	r2, #18
900038e0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
900038e2:	687b      	ldr	r3, [r7, #4]
900038e4:	2201      	movs	r2, #1
900038e6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900038ea:	687b      	ldr	r3, [r7, #4]
900038ec:	2200      	movs	r2, #0
900038ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900038f2:	2300      	movs	r3, #0
}
900038f4:	4618      	mov	r0, r3
900038f6:	3718      	adds	r7, #24
900038f8:	46bd      	mov	sp, r7
900038fa:	bd80      	pop	{r7, pc}

900038fc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
900038fc:	b480      	push	{r7}
900038fe:	b087      	sub	sp, #28
90003900:	af00      	add	r7, sp, #0
90003902:	6078      	str	r0, [r7, #4]
90003904:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003906:	687b      	ldr	r3, [r7, #4]
90003908:	685b      	ldr	r3, [r3, #4]
9000390a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
9000390e:	683b      	ldr	r3, [r7, #0]
90003910:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003912:	687b      	ldr	r3, [r7, #4]
90003914:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003918:	2b01      	cmp	r3, #1
9000391a:	d101      	bne.n	90003920 <HAL_DMA2D_ConfigLayer+0x24>
9000391c:	2302      	movs	r3, #2
9000391e:	e092      	b.n	90003a46 <HAL_DMA2D_ConfigLayer+0x14a>
90003920:	687b      	ldr	r3, [r7, #4]
90003922:	2201      	movs	r2, #1
90003924:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003928:	687b      	ldr	r3, [r7, #4]
9000392a:	2202      	movs	r2, #2
9000392c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003930:	683a      	ldr	r2, [r7, #0]
90003932:	4613      	mov	r3, r2
90003934:	00db      	lsls	r3, r3, #3
90003936:	1a9b      	subs	r3, r3, r2
90003938:	009b      	lsls	r3, r3, #2
9000393a:	3328      	adds	r3, #40	@ 0x28
9000393c:	687a      	ldr	r2, [r7, #4]
9000393e:	4413      	add	r3, r2
90003940:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003942:	68fb      	ldr	r3, [r7, #12]
90003944:	685a      	ldr	r2, [r3, #4]
90003946:	68fb      	ldr	r3, [r7, #12]
90003948:	689b      	ldr	r3, [r3, #8]
9000394a:	041b      	lsls	r3, r3, #16
9000394c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
9000394e:	68fb      	ldr	r3, [r7, #12]
90003950:	691b      	ldr	r3, [r3, #16]
90003952:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003954:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003956:	68fb      	ldr	r3, [r7, #12]
90003958:	695b      	ldr	r3, [r3, #20]
9000395a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000395c:	4313      	orrs	r3, r2
9000395e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003960:	4b3c      	ldr	r3, [pc, #240]	@ (90003a54 <HAL_DMA2D_ConfigLayer+0x158>)
90003962:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003964:	68fb      	ldr	r3, [r7, #12]
90003966:	685b      	ldr	r3, [r3, #4]
90003968:	2b0a      	cmp	r3, #10
9000396a:	d003      	beq.n	90003974 <HAL_DMA2D_ConfigLayer+0x78>
9000396c:	68fb      	ldr	r3, [r7, #12]
9000396e:	685b      	ldr	r3, [r3, #4]
90003970:	2b09      	cmp	r3, #9
90003972:	d107      	bne.n	90003984 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003974:	68fb      	ldr	r3, [r7, #12]
90003976:	68db      	ldr	r3, [r3, #12]
90003978:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
9000397c:	693a      	ldr	r2, [r7, #16]
9000397e:	4313      	orrs	r3, r2
90003980:	613b      	str	r3, [r7, #16]
90003982:	e005      	b.n	90003990 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003984:	68fb      	ldr	r3, [r7, #12]
90003986:	68db      	ldr	r3, [r3, #12]
90003988:	061b      	lsls	r3, r3, #24
9000398a:	693a      	ldr	r2, [r7, #16]
9000398c:	4313      	orrs	r3, r2
9000398e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003990:	683b      	ldr	r3, [r7, #0]
90003992:	2b00      	cmp	r3, #0
90003994:	d120      	bne.n	900039d8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003996:	687b      	ldr	r3, [r7, #4]
90003998:	681b      	ldr	r3, [r3, #0]
9000399a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000399c:	697b      	ldr	r3, [r7, #20]
9000399e:	43db      	mvns	r3, r3
900039a0:	ea02 0103 	and.w	r1, r2, r3
900039a4:	687b      	ldr	r3, [r7, #4]
900039a6:	681b      	ldr	r3, [r3, #0]
900039a8:	693a      	ldr	r2, [r7, #16]
900039aa:	430a      	orrs	r2, r1
900039ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900039ae:	687b      	ldr	r3, [r7, #4]
900039b0:	681b      	ldr	r3, [r3, #0]
900039b2:	68fa      	ldr	r2, [r7, #12]
900039b4:	6812      	ldr	r2, [r2, #0]
900039b6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900039b8:	68fb      	ldr	r3, [r7, #12]
900039ba:	685b      	ldr	r3, [r3, #4]
900039bc:	2b0a      	cmp	r3, #10
900039be:	d003      	beq.n	900039c8 <HAL_DMA2D_ConfigLayer+0xcc>
900039c0:	68fb      	ldr	r3, [r7, #12]
900039c2:	685b      	ldr	r3, [r3, #4]
900039c4:	2b09      	cmp	r3, #9
900039c6:	d135      	bne.n	90003a34 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
900039c8:	68fb      	ldr	r3, [r7, #12]
900039ca:	68da      	ldr	r2, [r3, #12]
900039cc:	687b      	ldr	r3, [r7, #4]
900039ce:	681b      	ldr	r3, [r3, #0]
900039d0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
900039d4:	629a      	str	r2, [r3, #40]	@ 0x28
900039d6:	e02d      	b.n	90003a34 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
900039d8:	68fb      	ldr	r3, [r7, #12]
900039da:	685b      	ldr	r3, [r3, #4]
900039dc:	2b0b      	cmp	r3, #11
900039de:	d109      	bne.n	900039f4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
900039e0:	68fb      	ldr	r3, [r7, #12]
900039e2:	699b      	ldr	r3, [r3, #24]
900039e4:	049b      	lsls	r3, r3, #18
900039e6:	693a      	ldr	r2, [r7, #16]
900039e8:	4313      	orrs	r3, r2
900039ea:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
900039ec:	697b      	ldr	r3, [r7, #20]
900039ee:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
900039f2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900039f4:	687b      	ldr	r3, [r7, #4]
900039f6:	681b      	ldr	r3, [r3, #0]
900039f8:	69da      	ldr	r2, [r3, #28]
900039fa:	697b      	ldr	r3, [r7, #20]
900039fc:	43db      	mvns	r3, r3
900039fe:	ea02 0103 	and.w	r1, r2, r3
90003a02:	687b      	ldr	r3, [r7, #4]
90003a04:	681b      	ldr	r3, [r3, #0]
90003a06:	693a      	ldr	r2, [r7, #16]
90003a08:	430a      	orrs	r2, r1
90003a0a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003a0c:	687b      	ldr	r3, [r7, #4]
90003a0e:	681b      	ldr	r3, [r3, #0]
90003a10:	68fa      	ldr	r2, [r7, #12]
90003a12:	6812      	ldr	r2, [r2, #0]
90003a14:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003a16:	68fb      	ldr	r3, [r7, #12]
90003a18:	685b      	ldr	r3, [r3, #4]
90003a1a:	2b0a      	cmp	r3, #10
90003a1c:	d003      	beq.n	90003a26 <HAL_DMA2D_ConfigLayer+0x12a>
90003a1e:	68fb      	ldr	r3, [r7, #12]
90003a20:	685b      	ldr	r3, [r3, #4]
90003a22:	2b09      	cmp	r3, #9
90003a24:	d106      	bne.n	90003a34 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003a26:	68fb      	ldr	r3, [r7, #12]
90003a28:	68da      	ldr	r2, [r3, #12]
90003a2a:	687b      	ldr	r3, [r7, #4]
90003a2c:	681b      	ldr	r3, [r3, #0]
90003a2e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003a32:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003a34:	687b      	ldr	r3, [r7, #4]
90003a36:	2201      	movs	r2, #1
90003a38:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003a3c:	687b      	ldr	r3, [r7, #4]
90003a3e:	2200      	movs	r2, #0
90003a40:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003a44:	2300      	movs	r3, #0
}
90003a46:	4618      	mov	r0, r3
90003a48:	371c      	adds	r7, #28
90003a4a:	46bd      	mov	sp, r7
90003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a50:	4770      	bx	lr
90003a52:	bf00      	nop
90003a54:	ff33000f 	.word	0xff33000f

90003a58 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003a58:	b480      	push	{r7}
90003a5a:	b08b      	sub	sp, #44	@ 0x2c
90003a5c:	af00      	add	r7, sp, #0
90003a5e:	60f8      	str	r0, [r7, #12]
90003a60:	60b9      	str	r1, [r7, #8]
90003a62:	607a      	str	r2, [r7, #4]
90003a64:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003a66:	68fb      	ldr	r3, [r7, #12]
90003a68:	681b      	ldr	r3, [r3, #0]
90003a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003a6c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003a70:	683b      	ldr	r3, [r7, #0]
90003a72:	041a      	lsls	r2, r3, #16
90003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003a76:	431a      	orrs	r2, r3
90003a78:	68fb      	ldr	r3, [r7, #12]
90003a7a:	681b      	ldr	r3, [r3, #0]
90003a7c:	430a      	orrs	r2, r1
90003a7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003a80:	68fb      	ldr	r3, [r7, #12]
90003a82:	681b      	ldr	r3, [r3, #0]
90003a84:	687a      	ldr	r2, [r7, #4]
90003a86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003a88:	68fb      	ldr	r3, [r7, #12]
90003a8a:	685b      	ldr	r3, [r3, #4]
90003a8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003a90:	d174      	bne.n	90003b7c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003a92:	68bb      	ldr	r3, [r7, #8]
90003a94:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003a98:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003a9a:	68bb      	ldr	r3, [r7, #8]
90003a9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003aa0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003aa2:	68bb      	ldr	r3, [r7, #8]
90003aa4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003aa8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003aaa:	68bb      	ldr	r3, [r7, #8]
90003aac:	b2db      	uxtb	r3, r3
90003aae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003ab0:	68fb      	ldr	r3, [r7, #12]
90003ab2:	689b      	ldr	r3, [r3, #8]
90003ab4:	2b00      	cmp	r3, #0
90003ab6:	d108      	bne.n	90003aca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003ab8:	69ba      	ldr	r2, [r7, #24]
90003aba:	69fb      	ldr	r3, [r7, #28]
90003abc:	431a      	orrs	r2, r3
90003abe:	6a3b      	ldr	r3, [r7, #32]
90003ac0:	4313      	orrs	r3, r2
90003ac2:	697a      	ldr	r2, [r7, #20]
90003ac4:	4313      	orrs	r3, r2
90003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
90003ac8:	e053      	b.n	90003b72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003aca:	68fb      	ldr	r3, [r7, #12]
90003acc:	689b      	ldr	r3, [r3, #8]
90003ace:	2b01      	cmp	r3, #1
90003ad0:	d106      	bne.n	90003ae0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003ad2:	69ba      	ldr	r2, [r7, #24]
90003ad4:	69fb      	ldr	r3, [r7, #28]
90003ad6:	4313      	orrs	r3, r2
90003ad8:	697a      	ldr	r2, [r7, #20]
90003ada:	4313      	orrs	r3, r2
90003adc:	627b      	str	r3, [r7, #36]	@ 0x24
90003ade:	e048      	b.n	90003b72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003ae0:	68fb      	ldr	r3, [r7, #12]
90003ae2:	689b      	ldr	r3, [r3, #8]
90003ae4:	2b02      	cmp	r3, #2
90003ae6:	d111      	bne.n	90003b0c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003ae8:	69fb      	ldr	r3, [r7, #28]
90003aea:	0cdb      	lsrs	r3, r3, #19
90003aec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003aee:	69bb      	ldr	r3, [r7, #24]
90003af0:	0a9b      	lsrs	r3, r3, #10
90003af2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003af4:	697b      	ldr	r3, [r7, #20]
90003af6:	08db      	lsrs	r3, r3, #3
90003af8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003afa:	69bb      	ldr	r3, [r7, #24]
90003afc:	015a      	lsls	r2, r3, #5
90003afe:	69fb      	ldr	r3, [r7, #28]
90003b00:	02db      	lsls	r3, r3, #11
90003b02:	4313      	orrs	r3, r2
90003b04:	697a      	ldr	r2, [r7, #20]
90003b06:	4313      	orrs	r3, r2
90003b08:	627b      	str	r3, [r7, #36]	@ 0x24
90003b0a:	e032      	b.n	90003b72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003b0c:	68fb      	ldr	r3, [r7, #12]
90003b0e:	689b      	ldr	r3, [r3, #8]
90003b10:	2b03      	cmp	r3, #3
90003b12:	d117      	bne.n	90003b44 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003b14:	6a3b      	ldr	r3, [r7, #32]
90003b16:	0fdb      	lsrs	r3, r3, #31
90003b18:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003b1a:	69fb      	ldr	r3, [r7, #28]
90003b1c:	0cdb      	lsrs	r3, r3, #19
90003b1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003b20:	69bb      	ldr	r3, [r7, #24]
90003b22:	0adb      	lsrs	r3, r3, #11
90003b24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003b26:	697b      	ldr	r3, [r7, #20]
90003b28:	08db      	lsrs	r3, r3, #3
90003b2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003b2c:	69bb      	ldr	r3, [r7, #24]
90003b2e:	015a      	lsls	r2, r3, #5
90003b30:	69fb      	ldr	r3, [r7, #28]
90003b32:	029b      	lsls	r3, r3, #10
90003b34:	431a      	orrs	r2, r3
90003b36:	6a3b      	ldr	r3, [r7, #32]
90003b38:	03db      	lsls	r3, r3, #15
90003b3a:	4313      	orrs	r3, r2
90003b3c:	697a      	ldr	r2, [r7, #20]
90003b3e:	4313      	orrs	r3, r2
90003b40:	627b      	str	r3, [r7, #36]	@ 0x24
90003b42:	e016      	b.n	90003b72 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003b44:	6a3b      	ldr	r3, [r7, #32]
90003b46:	0f1b      	lsrs	r3, r3, #28
90003b48:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003b4a:	69fb      	ldr	r3, [r7, #28]
90003b4c:	0d1b      	lsrs	r3, r3, #20
90003b4e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003b50:	69bb      	ldr	r3, [r7, #24]
90003b52:	0b1b      	lsrs	r3, r3, #12
90003b54:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003b56:	697b      	ldr	r3, [r7, #20]
90003b58:	091b      	lsrs	r3, r3, #4
90003b5a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003b5c:	69bb      	ldr	r3, [r7, #24]
90003b5e:	011a      	lsls	r2, r3, #4
90003b60:	69fb      	ldr	r3, [r7, #28]
90003b62:	021b      	lsls	r3, r3, #8
90003b64:	431a      	orrs	r2, r3
90003b66:	6a3b      	ldr	r3, [r7, #32]
90003b68:	031b      	lsls	r3, r3, #12
90003b6a:	4313      	orrs	r3, r2
90003b6c:	697a      	ldr	r2, [r7, #20]
90003b6e:	4313      	orrs	r3, r2
90003b70:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003b72:	68fb      	ldr	r3, [r7, #12]
90003b74:	681b      	ldr	r3, [r3, #0]
90003b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003b78:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003b7a:	e00d      	b.n	90003b98 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003b7c:	68fb      	ldr	r3, [r7, #12]
90003b7e:	685b      	ldr	r3, [r3, #4]
90003b80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003b84:	d104      	bne.n	90003b90 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003b86:	68fb      	ldr	r3, [r7, #12]
90003b88:	681b      	ldr	r3, [r3, #0]
90003b8a:	68ba      	ldr	r2, [r7, #8]
90003b8c:	615a      	str	r2, [r3, #20]
}
90003b8e:	e003      	b.n	90003b98 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003b90:	68fb      	ldr	r3, [r7, #12]
90003b92:	681b      	ldr	r3, [r3, #0]
90003b94:	68ba      	ldr	r2, [r7, #8]
90003b96:	60da      	str	r2, [r3, #12]
}
90003b98:	bf00      	nop
90003b9a:	372c      	adds	r7, #44	@ 0x2c
90003b9c:	46bd      	mov	sp, r7
90003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ba2:	4770      	bx	lr

90003ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003ba4:	b480      	push	{r7}
90003ba6:	b089      	sub	sp, #36	@ 0x24
90003ba8:	af00      	add	r7, sp, #0
90003baa:	6078      	str	r0, [r7, #4]
90003bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003bae:	2300      	movs	r3, #0
90003bb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003bb2:	4b89      	ldr	r3, [pc, #548]	@ (90003dd8 <HAL_GPIO_Init+0x234>)
90003bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003bb6:	e194      	b.n	90003ee2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003bb8:	683b      	ldr	r3, [r7, #0]
90003bba:	681a      	ldr	r2, [r3, #0]
90003bbc:	2101      	movs	r1, #1
90003bbe:	69fb      	ldr	r3, [r7, #28]
90003bc0:	fa01 f303 	lsl.w	r3, r1, r3
90003bc4:	4013      	ands	r3, r2
90003bc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003bc8:	693b      	ldr	r3, [r7, #16]
90003bca:	2b00      	cmp	r3, #0
90003bcc:	f000 8186 	beq.w	90003edc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003bd0:	683b      	ldr	r3, [r7, #0]
90003bd2:	685b      	ldr	r3, [r3, #4]
90003bd4:	f003 0303 	and.w	r3, r3, #3
90003bd8:	2b01      	cmp	r3, #1
90003bda:	d005      	beq.n	90003be8 <HAL_GPIO_Init+0x44>
90003bdc:	683b      	ldr	r3, [r7, #0]
90003bde:	685b      	ldr	r3, [r3, #4]
90003be0:	f003 0303 	and.w	r3, r3, #3
90003be4:	2b02      	cmp	r3, #2
90003be6:	d130      	bne.n	90003c4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003be8:	687b      	ldr	r3, [r7, #4]
90003bea:	689b      	ldr	r3, [r3, #8]
90003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003bee:	69fb      	ldr	r3, [r7, #28]
90003bf0:	005b      	lsls	r3, r3, #1
90003bf2:	2203      	movs	r2, #3
90003bf4:	fa02 f303 	lsl.w	r3, r2, r3
90003bf8:	43db      	mvns	r3, r3
90003bfa:	69ba      	ldr	r2, [r7, #24]
90003bfc:	4013      	ands	r3, r2
90003bfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003c00:	683b      	ldr	r3, [r7, #0]
90003c02:	68da      	ldr	r2, [r3, #12]
90003c04:	69fb      	ldr	r3, [r7, #28]
90003c06:	005b      	lsls	r3, r3, #1
90003c08:	fa02 f303 	lsl.w	r3, r2, r3
90003c0c:	69ba      	ldr	r2, [r7, #24]
90003c0e:	4313      	orrs	r3, r2
90003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003c12:	687b      	ldr	r3, [r7, #4]
90003c14:	69ba      	ldr	r2, [r7, #24]
90003c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003c18:	687b      	ldr	r3, [r7, #4]
90003c1a:	685b      	ldr	r3, [r3, #4]
90003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003c1e:	2201      	movs	r2, #1
90003c20:	69fb      	ldr	r3, [r7, #28]
90003c22:	fa02 f303 	lsl.w	r3, r2, r3
90003c26:	43db      	mvns	r3, r3
90003c28:	69ba      	ldr	r2, [r7, #24]
90003c2a:	4013      	ands	r3, r2
90003c2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003c2e:	683b      	ldr	r3, [r7, #0]
90003c30:	685b      	ldr	r3, [r3, #4]
90003c32:	091b      	lsrs	r3, r3, #4
90003c34:	f003 0201 	and.w	r2, r3, #1
90003c38:	69fb      	ldr	r3, [r7, #28]
90003c3a:	fa02 f303 	lsl.w	r3, r2, r3
90003c3e:	69ba      	ldr	r2, [r7, #24]
90003c40:	4313      	orrs	r3, r2
90003c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003c44:	687b      	ldr	r3, [r7, #4]
90003c46:	69ba      	ldr	r2, [r7, #24]
90003c48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003c4a:	683b      	ldr	r3, [r7, #0]
90003c4c:	685b      	ldr	r3, [r3, #4]
90003c4e:	f003 0303 	and.w	r3, r3, #3
90003c52:	2b03      	cmp	r3, #3
90003c54:	d017      	beq.n	90003c86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003c56:	687b      	ldr	r3, [r7, #4]
90003c58:	68db      	ldr	r3, [r3, #12]
90003c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003c5c:	69fb      	ldr	r3, [r7, #28]
90003c5e:	005b      	lsls	r3, r3, #1
90003c60:	2203      	movs	r2, #3
90003c62:	fa02 f303 	lsl.w	r3, r2, r3
90003c66:	43db      	mvns	r3, r3
90003c68:	69ba      	ldr	r2, [r7, #24]
90003c6a:	4013      	ands	r3, r2
90003c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003c6e:	683b      	ldr	r3, [r7, #0]
90003c70:	689a      	ldr	r2, [r3, #8]
90003c72:	69fb      	ldr	r3, [r7, #28]
90003c74:	005b      	lsls	r3, r3, #1
90003c76:	fa02 f303 	lsl.w	r3, r2, r3
90003c7a:	69ba      	ldr	r2, [r7, #24]
90003c7c:	4313      	orrs	r3, r2
90003c7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003c80:	687b      	ldr	r3, [r7, #4]
90003c82:	69ba      	ldr	r2, [r7, #24]
90003c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003c86:	683b      	ldr	r3, [r7, #0]
90003c88:	685b      	ldr	r3, [r3, #4]
90003c8a:	f003 0303 	and.w	r3, r3, #3
90003c8e:	2b02      	cmp	r3, #2
90003c90:	d123      	bne.n	90003cda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003c92:	69fb      	ldr	r3, [r7, #28]
90003c94:	08da      	lsrs	r2, r3, #3
90003c96:	687b      	ldr	r3, [r7, #4]
90003c98:	3208      	adds	r2, #8
90003c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003ca0:	69fb      	ldr	r3, [r7, #28]
90003ca2:	f003 0307 	and.w	r3, r3, #7
90003ca6:	009b      	lsls	r3, r3, #2
90003ca8:	220f      	movs	r2, #15
90003caa:	fa02 f303 	lsl.w	r3, r2, r3
90003cae:	43db      	mvns	r3, r3
90003cb0:	69ba      	ldr	r2, [r7, #24]
90003cb2:	4013      	ands	r3, r2
90003cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003cb6:	683b      	ldr	r3, [r7, #0]
90003cb8:	691a      	ldr	r2, [r3, #16]
90003cba:	69fb      	ldr	r3, [r7, #28]
90003cbc:	f003 0307 	and.w	r3, r3, #7
90003cc0:	009b      	lsls	r3, r3, #2
90003cc2:	fa02 f303 	lsl.w	r3, r2, r3
90003cc6:	69ba      	ldr	r2, [r7, #24]
90003cc8:	4313      	orrs	r3, r2
90003cca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003ccc:	69fb      	ldr	r3, [r7, #28]
90003cce:	08da      	lsrs	r2, r3, #3
90003cd0:	687b      	ldr	r3, [r7, #4]
90003cd2:	3208      	adds	r2, #8
90003cd4:	69b9      	ldr	r1, [r7, #24]
90003cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003cda:	687b      	ldr	r3, [r7, #4]
90003cdc:	681b      	ldr	r3, [r3, #0]
90003cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003ce0:	69fb      	ldr	r3, [r7, #28]
90003ce2:	005b      	lsls	r3, r3, #1
90003ce4:	2203      	movs	r2, #3
90003ce6:	fa02 f303 	lsl.w	r3, r2, r3
90003cea:	43db      	mvns	r3, r3
90003cec:	69ba      	ldr	r2, [r7, #24]
90003cee:	4013      	ands	r3, r2
90003cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003cf2:	683b      	ldr	r3, [r7, #0]
90003cf4:	685b      	ldr	r3, [r3, #4]
90003cf6:	f003 0203 	and.w	r2, r3, #3
90003cfa:	69fb      	ldr	r3, [r7, #28]
90003cfc:	005b      	lsls	r3, r3, #1
90003cfe:	fa02 f303 	lsl.w	r3, r2, r3
90003d02:	69ba      	ldr	r2, [r7, #24]
90003d04:	4313      	orrs	r3, r2
90003d06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003d08:	687b      	ldr	r3, [r7, #4]
90003d0a:	69ba      	ldr	r2, [r7, #24]
90003d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003d0e:	683b      	ldr	r3, [r7, #0]
90003d10:	685b      	ldr	r3, [r3, #4]
90003d12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003d16:	2b00      	cmp	r3, #0
90003d18:	f000 80e0 	beq.w	90003edc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003d1c:	4b2f      	ldr	r3, [pc, #188]	@ (90003ddc <HAL_GPIO_Init+0x238>)
90003d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003d22:	4a2e      	ldr	r2, [pc, #184]	@ (90003ddc <HAL_GPIO_Init+0x238>)
90003d24:	f043 0302 	orr.w	r3, r3, #2
90003d28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003d2c:	4b2b      	ldr	r3, [pc, #172]	@ (90003ddc <HAL_GPIO_Init+0x238>)
90003d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003d32:	f003 0302 	and.w	r3, r3, #2
90003d36:	60fb      	str	r3, [r7, #12]
90003d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003d3a:	4a29      	ldr	r2, [pc, #164]	@ (90003de0 <HAL_GPIO_Init+0x23c>)
90003d3c:	69fb      	ldr	r3, [r7, #28]
90003d3e:	089b      	lsrs	r3, r3, #2
90003d40:	3302      	adds	r3, #2
90003d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003d48:	69fb      	ldr	r3, [r7, #28]
90003d4a:	f003 0303 	and.w	r3, r3, #3
90003d4e:	009b      	lsls	r3, r3, #2
90003d50:	220f      	movs	r2, #15
90003d52:	fa02 f303 	lsl.w	r3, r2, r3
90003d56:	43db      	mvns	r3, r3
90003d58:	69ba      	ldr	r2, [r7, #24]
90003d5a:	4013      	ands	r3, r2
90003d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003d5e:	687b      	ldr	r3, [r7, #4]
90003d60:	4a20      	ldr	r2, [pc, #128]	@ (90003de4 <HAL_GPIO_Init+0x240>)
90003d62:	4293      	cmp	r3, r2
90003d64:	d052      	beq.n	90003e0c <HAL_GPIO_Init+0x268>
90003d66:	687b      	ldr	r3, [r7, #4]
90003d68:	4a1f      	ldr	r2, [pc, #124]	@ (90003de8 <HAL_GPIO_Init+0x244>)
90003d6a:	4293      	cmp	r3, r2
90003d6c:	d031      	beq.n	90003dd2 <HAL_GPIO_Init+0x22e>
90003d6e:	687b      	ldr	r3, [r7, #4]
90003d70:	4a1e      	ldr	r2, [pc, #120]	@ (90003dec <HAL_GPIO_Init+0x248>)
90003d72:	4293      	cmp	r3, r2
90003d74:	d02b      	beq.n	90003dce <HAL_GPIO_Init+0x22a>
90003d76:	687b      	ldr	r3, [r7, #4]
90003d78:	4a1d      	ldr	r2, [pc, #116]	@ (90003df0 <HAL_GPIO_Init+0x24c>)
90003d7a:	4293      	cmp	r3, r2
90003d7c:	d025      	beq.n	90003dca <HAL_GPIO_Init+0x226>
90003d7e:	687b      	ldr	r3, [r7, #4]
90003d80:	4a1c      	ldr	r2, [pc, #112]	@ (90003df4 <HAL_GPIO_Init+0x250>)
90003d82:	4293      	cmp	r3, r2
90003d84:	d01f      	beq.n	90003dc6 <HAL_GPIO_Init+0x222>
90003d86:	687b      	ldr	r3, [r7, #4]
90003d88:	4a1b      	ldr	r2, [pc, #108]	@ (90003df8 <HAL_GPIO_Init+0x254>)
90003d8a:	4293      	cmp	r3, r2
90003d8c:	d019      	beq.n	90003dc2 <HAL_GPIO_Init+0x21e>
90003d8e:	687b      	ldr	r3, [r7, #4]
90003d90:	4a1a      	ldr	r2, [pc, #104]	@ (90003dfc <HAL_GPIO_Init+0x258>)
90003d92:	4293      	cmp	r3, r2
90003d94:	d013      	beq.n	90003dbe <HAL_GPIO_Init+0x21a>
90003d96:	687b      	ldr	r3, [r7, #4]
90003d98:	4a19      	ldr	r2, [pc, #100]	@ (90003e00 <HAL_GPIO_Init+0x25c>)
90003d9a:	4293      	cmp	r3, r2
90003d9c:	d00d      	beq.n	90003dba <HAL_GPIO_Init+0x216>
90003d9e:	687b      	ldr	r3, [r7, #4]
90003da0:	4a18      	ldr	r2, [pc, #96]	@ (90003e04 <HAL_GPIO_Init+0x260>)
90003da2:	4293      	cmp	r3, r2
90003da4:	d007      	beq.n	90003db6 <HAL_GPIO_Init+0x212>
90003da6:	687b      	ldr	r3, [r7, #4]
90003da8:	4a17      	ldr	r2, [pc, #92]	@ (90003e08 <HAL_GPIO_Init+0x264>)
90003daa:	4293      	cmp	r3, r2
90003dac:	d101      	bne.n	90003db2 <HAL_GPIO_Init+0x20e>
90003dae:	2309      	movs	r3, #9
90003db0:	e02d      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003db2:	230a      	movs	r3, #10
90003db4:	e02b      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003db6:	2308      	movs	r3, #8
90003db8:	e029      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003dba:	2307      	movs	r3, #7
90003dbc:	e027      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003dbe:	2306      	movs	r3, #6
90003dc0:	e025      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003dc2:	2305      	movs	r3, #5
90003dc4:	e023      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003dc6:	2304      	movs	r3, #4
90003dc8:	e021      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003dca:	2303      	movs	r3, #3
90003dcc:	e01f      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003dce:	2302      	movs	r3, #2
90003dd0:	e01d      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003dd2:	2301      	movs	r3, #1
90003dd4:	e01b      	b.n	90003e0e <HAL_GPIO_Init+0x26a>
90003dd6:	bf00      	nop
90003dd8:	58000080 	.word	0x58000080
90003ddc:	58024400 	.word	0x58024400
90003de0:	58000400 	.word	0x58000400
90003de4:	58020000 	.word	0x58020000
90003de8:	58020400 	.word	0x58020400
90003dec:	58020800 	.word	0x58020800
90003df0:	58020c00 	.word	0x58020c00
90003df4:	58021000 	.word	0x58021000
90003df8:	58021400 	.word	0x58021400
90003dfc:	58021800 	.word	0x58021800
90003e00:	58021c00 	.word	0x58021c00
90003e04:	58022000 	.word	0x58022000
90003e08:	58022400 	.word	0x58022400
90003e0c:	2300      	movs	r3, #0
90003e0e:	69fa      	ldr	r2, [r7, #28]
90003e10:	f002 0203 	and.w	r2, r2, #3
90003e14:	0092      	lsls	r2, r2, #2
90003e16:	4093      	lsls	r3, r2
90003e18:	69ba      	ldr	r2, [r7, #24]
90003e1a:	4313      	orrs	r3, r2
90003e1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003e1e:	4938      	ldr	r1, [pc, #224]	@ (90003f00 <HAL_GPIO_Init+0x35c>)
90003e20:	69fb      	ldr	r3, [r7, #28]
90003e22:	089b      	lsrs	r3, r3, #2
90003e24:	3302      	adds	r3, #2
90003e26:	69ba      	ldr	r2, [r7, #24]
90003e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003e30:	681b      	ldr	r3, [r3, #0]
90003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e34:	693b      	ldr	r3, [r7, #16]
90003e36:	43db      	mvns	r3, r3
90003e38:	69ba      	ldr	r2, [r7, #24]
90003e3a:	4013      	ands	r3, r2
90003e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003e3e:	683b      	ldr	r3, [r7, #0]
90003e40:	685b      	ldr	r3, [r3, #4]
90003e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003e46:	2b00      	cmp	r3, #0
90003e48:	d003      	beq.n	90003e52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003e4a:	69ba      	ldr	r2, [r7, #24]
90003e4c:	693b      	ldr	r3, [r7, #16]
90003e4e:	4313      	orrs	r3, r2
90003e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003e52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003e56:	69bb      	ldr	r3, [r7, #24]
90003e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003e5e:	685b      	ldr	r3, [r3, #4]
90003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e62:	693b      	ldr	r3, [r7, #16]
90003e64:	43db      	mvns	r3, r3
90003e66:	69ba      	ldr	r2, [r7, #24]
90003e68:	4013      	ands	r3, r2
90003e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003e6c:	683b      	ldr	r3, [r7, #0]
90003e6e:	685b      	ldr	r3, [r3, #4]
90003e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003e74:	2b00      	cmp	r3, #0
90003e76:	d003      	beq.n	90003e80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003e78:	69ba      	ldr	r2, [r7, #24]
90003e7a:	693b      	ldr	r3, [r7, #16]
90003e7c:	4313      	orrs	r3, r2
90003e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003e80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003e84:	69bb      	ldr	r3, [r7, #24]
90003e86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003e88:	697b      	ldr	r3, [r7, #20]
90003e8a:	685b      	ldr	r3, [r3, #4]
90003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e8e:	693b      	ldr	r3, [r7, #16]
90003e90:	43db      	mvns	r3, r3
90003e92:	69ba      	ldr	r2, [r7, #24]
90003e94:	4013      	ands	r3, r2
90003e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003e98:	683b      	ldr	r3, [r7, #0]
90003e9a:	685b      	ldr	r3, [r3, #4]
90003e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003ea0:	2b00      	cmp	r3, #0
90003ea2:	d003      	beq.n	90003eac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003ea4:	69ba      	ldr	r2, [r7, #24]
90003ea6:	693b      	ldr	r3, [r7, #16]
90003ea8:	4313      	orrs	r3, r2
90003eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003eac:	697b      	ldr	r3, [r7, #20]
90003eae:	69ba      	ldr	r2, [r7, #24]
90003eb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003eb2:	697b      	ldr	r3, [r7, #20]
90003eb4:	681b      	ldr	r3, [r3, #0]
90003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003eb8:	693b      	ldr	r3, [r7, #16]
90003eba:	43db      	mvns	r3, r3
90003ebc:	69ba      	ldr	r2, [r7, #24]
90003ebe:	4013      	ands	r3, r2
90003ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003ec2:	683b      	ldr	r3, [r7, #0]
90003ec4:	685b      	ldr	r3, [r3, #4]
90003ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003eca:	2b00      	cmp	r3, #0
90003ecc:	d003      	beq.n	90003ed6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003ece:	69ba      	ldr	r2, [r7, #24]
90003ed0:	693b      	ldr	r3, [r7, #16]
90003ed2:	4313      	orrs	r3, r2
90003ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003ed6:	697b      	ldr	r3, [r7, #20]
90003ed8:	69ba      	ldr	r2, [r7, #24]
90003eda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003edc:	69fb      	ldr	r3, [r7, #28]
90003ede:	3301      	adds	r3, #1
90003ee0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003ee2:	683b      	ldr	r3, [r7, #0]
90003ee4:	681a      	ldr	r2, [r3, #0]
90003ee6:	69fb      	ldr	r3, [r7, #28]
90003ee8:	fa22 f303 	lsr.w	r3, r2, r3
90003eec:	2b00      	cmp	r3, #0
90003eee:	f47f ae63 	bne.w	90003bb8 <HAL_GPIO_Init+0x14>
  }
}
90003ef2:	bf00      	nop
90003ef4:	bf00      	nop
90003ef6:	3724      	adds	r7, #36	@ 0x24
90003ef8:	46bd      	mov	sp, r7
90003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
90003efe:	4770      	bx	lr
90003f00:	58000400 	.word	0x58000400

90003f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90003f04:	b480      	push	{r7}
90003f06:	b085      	sub	sp, #20
90003f08:	af00      	add	r7, sp, #0
90003f0a:	6078      	str	r0, [r7, #4]
90003f0c:	460b      	mov	r3, r1
90003f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90003f10:	687b      	ldr	r3, [r7, #4]
90003f12:	691a      	ldr	r2, [r3, #16]
90003f14:	887b      	ldrh	r3, [r7, #2]
90003f16:	4013      	ands	r3, r2
90003f18:	2b00      	cmp	r3, #0
90003f1a:	d002      	beq.n	90003f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90003f1c:	2301      	movs	r3, #1
90003f1e:	73fb      	strb	r3, [r7, #15]
90003f20:	e001      	b.n	90003f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90003f22:	2300      	movs	r3, #0
90003f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90003f26:	7bfb      	ldrb	r3, [r7, #15]
}
90003f28:	4618      	mov	r0, r3
90003f2a:	3714      	adds	r7, #20
90003f2c:	46bd      	mov	sp, r7
90003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f32:	4770      	bx	lr

90003f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003f34:	b480      	push	{r7}
90003f36:	b083      	sub	sp, #12
90003f38:	af00      	add	r7, sp, #0
90003f3a:	6078      	str	r0, [r7, #4]
90003f3c:	460b      	mov	r3, r1
90003f3e:	807b      	strh	r3, [r7, #2]
90003f40:	4613      	mov	r3, r2
90003f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003f44:	787b      	ldrb	r3, [r7, #1]
90003f46:	2b00      	cmp	r3, #0
90003f48:	d003      	beq.n	90003f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003f4a:	887a      	ldrh	r2, [r7, #2]
90003f4c:	687b      	ldr	r3, [r7, #4]
90003f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003f50:	e003      	b.n	90003f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003f52:	887b      	ldrh	r3, [r7, #2]
90003f54:	041a      	lsls	r2, r3, #16
90003f56:	687b      	ldr	r3, [r7, #4]
90003f58:	619a      	str	r2, [r3, #24]
}
90003f5a:	bf00      	nop
90003f5c:	370c      	adds	r7, #12
90003f5e:	46bd      	mov	sp, r7
90003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f64:	4770      	bx	lr

90003f66 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003f66:	b580      	push	{r7, lr}
90003f68:	b086      	sub	sp, #24
90003f6a:	af00      	add	r7, sp, #0
90003f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003f6e:	687b      	ldr	r3, [r7, #4]
90003f70:	681b      	ldr	r3, [r3, #0]
90003f72:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003f74:	693b      	ldr	r3, [r7, #16]
90003f76:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003f78:	687b      	ldr	r3, [r7, #4]
90003f7a:	681b      	ldr	r3, [r3, #0]
90003f7c:	4618      	mov	r0, r3
90003f7e:	f007 f9a5 	bl	9000b2cc <USB_GetMode>
90003f82:	4603      	mov	r3, r0
90003f84:	2b01      	cmp	r3, #1
90003f86:	f040 80fb 	bne.w	90004180 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90003f8a:	687b      	ldr	r3, [r7, #4]
90003f8c:	681b      	ldr	r3, [r3, #0]
90003f8e:	4618      	mov	r0, r3
90003f90:	f007 f968 	bl	9000b264 <USB_ReadInterrupts>
90003f94:	4603      	mov	r3, r0
90003f96:	2b00      	cmp	r3, #0
90003f98:	f000 80f1 	beq.w	9000417e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003f9c:	687b      	ldr	r3, [r7, #4]
90003f9e:	681b      	ldr	r3, [r3, #0]
90003fa0:	4618      	mov	r0, r3
90003fa2:	f007 f95f 	bl	9000b264 <USB_ReadInterrupts>
90003fa6:	4603      	mov	r3, r0
90003fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003fac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90003fb0:	d104      	bne.n	90003fbc <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003fb2:	687b      	ldr	r3, [r7, #4]
90003fb4:	681b      	ldr	r3, [r3, #0]
90003fb6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90003fba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003fbc:	687b      	ldr	r3, [r7, #4]
90003fbe:	681b      	ldr	r3, [r3, #0]
90003fc0:	4618      	mov	r0, r3
90003fc2:	f007 f94f 	bl	9000b264 <USB_ReadInterrupts>
90003fc6:	4603      	mov	r3, r0
90003fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003fcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90003fd0:	d104      	bne.n	90003fdc <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003fd2:	687b      	ldr	r3, [r7, #4]
90003fd4:	681b      	ldr	r3, [r3, #0]
90003fd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90003fda:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90003fdc:	687b      	ldr	r3, [r7, #4]
90003fde:	681b      	ldr	r3, [r3, #0]
90003fe0:	4618      	mov	r0, r3
90003fe2:	f007 f93f 	bl	9000b264 <USB_ReadInterrupts>
90003fe6:	4603      	mov	r3, r0
90003fe8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90003fec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90003ff0:	d104      	bne.n	90003ffc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003ff2:	687b      	ldr	r3, [r7, #4]
90003ff4:	681b      	ldr	r3, [r3, #0]
90003ff6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90003ffa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003ffc:	687b      	ldr	r3, [r7, #4]
90003ffe:	681b      	ldr	r3, [r3, #0]
90004000:	4618      	mov	r0, r3
90004002:	f007 f92f 	bl	9000b264 <USB_ReadInterrupts>
90004006:	4603      	mov	r3, r0
90004008:	f003 0302 	and.w	r3, r3, #2
9000400c:	2b02      	cmp	r3, #2
9000400e:	d103      	bne.n	90004018 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90004010:	687b      	ldr	r3, [r7, #4]
90004012:	681b      	ldr	r3, [r3, #0]
90004014:	2202      	movs	r2, #2
90004016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90004018:	687b      	ldr	r3, [r7, #4]
9000401a:	681b      	ldr	r3, [r3, #0]
9000401c:	4618      	mov	r0, r3
9000401e:	f007 f921 	bl	9000b264 <USB_ReadInterrupts>
90004022:	4603      	mov	r3, r0
90004024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90004028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000402c:	d120      	bne.n	90004070 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
9000402e:	687b      	ldr	r3, [r7, #4]
90004030:	681b      	ldr	r3, [r3, #0]
90004032:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90004036:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90004038:	68fb      	ldr	r3, [r7, #12]
9000403a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000403e:	681b      	ldr	r3, [r3, #0]
90004040:	f003 0301 	and.w	r3, r3, #1
90004044:	2b00      	cmp	r3, #0
90004046:	d113      	bne.n	90004070 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90004048:	2110      	movs	r1, #16
9000404a:	6938      	ldr	r0, [r7, #16]
9000404c:	f007 f852 	bl	9000b0f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90004050:	6938      	ldr	r0, [r7, #16]
90004052:	f007 f881 	bl	9000b158 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90004056:	687b      	ldr	r3, [r7, #4]
90004058:	7a5b      	ldrb	r3, [r3, #9]
9000405a:	2b02      	cmp	r3, #2
9000405c:	d105      	bne.n	9000406a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000405e:	687b      	ldr	r3, [r7, #4]
90004060:	681b      	ldr	r3, [r3, #0]
90004062:	2101      	movs	r1, #1
90004064:	4618      	mov	r0, r3
90004066:	f007 f93f 	bl	9000b2e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
9000406a:	6878      	ldr	r0, [r7, #4]
9000406c:	f7fd f868 	bl	90001140 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90004070:	687b      	ldr	r3, [r7, #4]
90004072:	681b      	ldr	r3, [r3, #0]
90004074:	4618      	mov	r0, r3
90004076:	f007 f8f5 	bl	9000b264 <USB_ReadInterrupts>
9000407a:	4603      	mov	r3, r0
9000407c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90004080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90004084:	d102      	bne.n	9000408c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90004086:	6878      	ldr	r0, [r7, #4]
90004088:	f001 fca1 	bl	900059ce <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
9000408c:	687b      	ldr	r3, [r7, #4]
9000408e:	681b      	ldr	r3, [r3, #0]
90004090:	4618      	mov	r0, r3
90004092:	f007 f8e7 	bl	9000b264 <USB_ReadInterrupts>
90004096:	4603      	mov	r3, r0
90004098:	f003 0308 	and.w	r3, r3, #8
9000409c:	2b08      	cmp	r3, #8
9000409e:	d106      	bne.n	900040ae <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
900040a0:	6878      	ldr	r0, [r7, #4]
900040a2:	f7fd f831 	bl	90001108 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
900040a6:	687b      	ldr	r3, [r7, #4]
900040a8:	681b      	ldr	r3, [r3, #0]
900040aa:	2208      	movs	r2, #8
900040ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
900040ae:	687b      	ldr	r3, [r7, #4]
900040b0:	681b      	ldr	r3, [r3, #0]
900040b2:	4618      	mov	r0, r3
900040b4:	f007 f8d6 	bl	9000b264 <USB_ReadInterrupts>
900040b8:	4603      	mov	r3, r0
900040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900040be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
900040c2:	d139      	bne.n	90004138 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
900040c4:	687b      	ldr	r3, [r7, #4]
900040c6:	681b      	ldr	r3, [r3, #0]
900040c8:	4618      	mov	r0, r3
900040ca:	f007 f94a 	bl	9000b362 <USB_HC_ReadInterrupt>
900040ce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900040d0:	2300      	movs	r3, #0
900040d2:	617b      	str	r3, [r7, #20]
900040d4:	e025      	b.n	90004122 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
900040d6:	697b      	ldr	r3, [r7, #20]
900040d8:	f003 030f 	and.w	r3, r3, #15
900040dc:	68ba      	ldr	r2, [r7, #8]
900040de:	fa22 f303 	lsr.w	r3, r2, r3
900040e2:	f003 0301 	and.w	r3, r3, #1
900040e6:	2b00      	cmp	r3, #0
900040e8:	d018      	beq.n	9000411c <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900040ea:	697b      	ldr	r3, [r7, #20]
900040ec:	015a      	lsls	r2, r3, #5
900040ee:	68fb      	ldr	r3, [r7, #12]
900040f0:	4413      	add	r3, r2
900040f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900040f6:	681b      	ldr	r3, [r3, #0]
900040f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
900040fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90004100:	d106      	bne.n	90004110 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90004102:	697b      	ldr	r3, [r7, #20]
90004104:	b2db      	uxtb	r3, r3
90004106:	4619      	mov	r1, r3
90004108:	6878      	ldr	r0, [r7, #4]
9000410a:	f000 f859 	bl	900041c0 <HCD_HC_IN_IRQHandler>
9000410e:	e005      	b.n	9000411c <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90004110:	697b      	ldr	r3, [r7, #20]
90004112:	b2db      	uxtb	r3, r3
90004114:	4619      	mov	r1, r3
90004116:	6878      	ldr	r0, [r7, #4]
90004118:	f000 febb 	bl	90004e92 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000411c:	697b      	ldr	r3, [r7, #20]
9000411e:	3301      	adds	r3, #1
90004120:	617b      	str	r3, [r7, #20]
90004122:	687b      	ldr	r3, [r7, #4]
90004124:	795b      	ldrb	r3, [r3, #5]
90004126:	461a      	mov	r2, r3
90004128:	697b      	ldr	r3, [r7, #20]
9000412a:	4293      	cmp	r3, r2
9000412c:	d3d3      	bcc.n	900040d6 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
9000412e:	687b      	ldr	r3, [r7, #4]
90004130:	681b      	ldr	r3, [r3, #0]
90004132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90004136:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90004138:	687b      	ldr	r3, [r7, #4]
9000413a:	681b      	ldr	r3, [r3, #0]
9000413c:	4618      	mov	r0, r3
9000413e:	f007 f891 	bl	9000b264 <USB_ReadInterrupts>
90004142:	4603      	mov	r3, r0
90004144:	f003 0310 	and.w	r3, r3, #16
90004148:	2b10      	cmp	r3, #16
9000414a:	d101      	bne.n	90004150 <HAL_HCD_IRQHandler+0x1ea>
9000414c:	2301      	movs	r3, #1
9000414e:	e000      	b.n	90004152 <HAL_HCD_IRQHandler+0x1ec>
90004150:	2300      	movs	r3, #0
90004152:	2b00      	cmp	r3, #0
90004154:	d014      	beq.n	90004180 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004156:	687b      	ldr	r3, [r7, #4]
90004158:	681b      	ldr	r3, [r3, #0]
9000415a:	699a      	ldr	r2, [r3, #24]
9000415c:	687b      	ldr	r3, [r7, #4]
9000415e:	681b      	ldr	r3, [r3, #0]
90004160:	f022 0210 	bic.w	r2, r2, #16
90004164:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90004166:	6878      	ldr	r0, [r7, #4]
90004168:	f001 fb52 	bl	90005810 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
9000416c:	687b      	ldr	r3, [r7, #4]
9000416e:	681b      	ldr	r3, [r3, #0]
90004170:	699a      	ldr	r2, [r3, #24]
90004172:	687b      	ldr	r3, [r7, #4]
90004174:	681b      	ldr	r3, [r3, #0]
90004176:	f042 0210 	orr.w	r2, r2, #16
9000417a:	619a      	str	r2, [r3, #24]
9000417c:	e000      	b.n	90004180 <HAL_HCD_IRQHandler+0x21a>
      return;
9000417e:	bf00      	nop
    }
  }
}
90004180:	3718      	adds	r7, #24
90004182:	46bd      	mov	sp, r7
90004184:	bd80      	pop	{r7, pc}

90004186 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
90004186:	b580      	push	{r7, lr}
90004188:	b082      	sub	sp, #8
9000418a:	af00      	add	r7, sp, #0
9000418c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
9000418e:	687b      	ldr	r3, [r7, #4]
90004190:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004194:	2b01      	cmp	r3, #1
90004196:	d101      	bne.n	9000419c <HAL_HCD_Stop+0x16>
90004198:	2302      	movs	r3, #2
9000419a:	e00d      	b.n	900041b8 <HAL_HCD_Stop+0x32>
9000419c:	687b      	ldr	r3, [r7, #4]
9000419e:	2201      	movs	r2, #1
900041a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
900041a4:	687b      	ldr	r3, [r7, #4]
900041a6:	681b      	ldr	r3, [r3, #0]
900041a8:	4618      	mov	r0, r3
900041aa:	f007 fa0b 	bl	9000b5c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
900041ae:	687b      	ldr	r3, [r7, #4]
900041b0:	2200      	movs	r2, #0
900041b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
900041b6:	2300      	movs	r3, #0
}
900041b8:	4618      	mov	r0, r3
900041ba:	3708      	adds	r7, #8
900041bc:	46bd      	mov	sp, r7
900041be:	bd80      	pop	{r7, pc}

900041c0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
900041c0:	b580      	push	{r7, lr}
900041c2:	b086      	sub	sp, #24
900041c4:	af00      	add	r7, sp, #0
900041c6:	6078      	str	r0, [r7, #4]
900041c8:	460b      	mov	r3, r1
900041ca:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900041cc:	687b      	ldr	r3, [r7, #4]
900041ce:	681b      	ldr	r3, [r3, #0]
900041d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900041d2:	697b      	ldr	r3, [r7, #20]
900041d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
900041d6:	687b      	ldr	r3, [r7, #4]
900041d8:	681b      	ldr	r3, [r3, #0]
900041da:	78fa      	ldrb	r2, [r7, #3]
900041dc:	4611      	mov	r1, r2
900041de:	4618      	mov	r0, r3
900041e0:	f007 f853 	bl	9000b28a <USB_ReadChInterrupts>
900041e4:	4603      	mov	r3, r0
900041e6:	f003 0304 	and.w	r3, r3, #4
900041ea:	2b04      	cmp	r3, #4
900041ec:	d11a      	bne.n	90004224 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
900041ee:	78fb      	ldrb	r3, [r7, #3]
900041f0:	015a      	lsls	r2, r3, #5
900041f2:	693b      	ldr	r3, [r7, #16]
900041f4:	4413      	add	r3, r2
900041f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900041fa:	461a      	mov	r2, r3
900041fc:	2304      	movs	r3, #4
900041fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004200:	78fa      	ldrb	r2, [r7, #3]
90004202:	6879      	ldr	r1, [r7, #4]
90004204:	4613      	mov	r3, r2
90004206:	011b      	lsls	r3, r3, #4
90004208:	1a9b      	subs	r3, r3, r2
9000420a:	009b      	lsls	r3, r3, #2
9000420c:	440b      	add	r3, r1
9000420e:	334d      	adds	r3, #77	@ 0x4d
90004210:	2207      	movs	r2, #7
90004212:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004214:	687b      	ldr	r3, [r7, #4]
90004216:	681b      	ldr	r3, [r3, #0]
90004218:	78fa      	ldrb	r2, [r7, #3]
9000421a:	4611      	mov	r1, r2
9000421c:	4618      	mov	r0, r3
9000421e:	f007 f8b1 	bl	9000b384 <USB_HC_Halt>
90004222:	e09e      	b.n	90004362 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
90004224:	687b      	ldr	r3, [r7, #4]
90004226:	681b      	ldr	r3, [r3, #0]
90004228:	78fa      	ldrb	r2, [r7, #3]
9000422a:	4611      	mov	r1, r2
9000422c:	4618      	mov	r0, r3
9000422e:	f007 f82c 	bl	9000b28a <USB_ReadChInterrupts>
90004232:	4603      	mov	r3, r0
90004234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90004238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000423c:	d11b      	bne.n	90004276 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
9000423e:	78fb      	ldrb	r3, [r7, #3]
90004240:	015a      	lsls	r2, r3, #5
90004242:	693b      	ldr	r3, [r7, #16]
90004244:	4413      	add	r3, r2
90004246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000424a:	461a      	mov	r2, r3
9000424c:	f44f 7380 	mov.w	r3, #256	@ 0x100
90004250:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
90004252:	78fa      	ldrb	r2, [r7, #3]
90004254:	6879      	ldr	r1, [r7, #4]
90004256:	4613      	mov	r3, r2
90004258:	011b      	lsls	r3, r3, #4
9000425a:	1a9b      	subs	r3, r3, r2
9000425c:	009b      	lsls	r3, r3, #2
9000425e:	440b      	add	r3, r1
90004260:	334d      	adds	r3, #77	@ 0x4d
90004262:	2208      	movs	r2, #8
90004264:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004266:	687b      	ldr	r3, [r7, #4]
90004268:	681b      	ldr	r3, [r3, #0]
9000426a:	78fa      	ldrb	r2, [r7, #3]
9000426c:	4611      	mov	r1, r2
9000426e:	4618      	mov	r0, r3
90004270:	f007 f888 	bl	9000b384 <USB_HC_Halt>
90004274:	e075      	b.n	90004362 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90004276:	687b      	ldr	r3, [r7, #4]
90004278:	681b      	ldr	r3, [r3, #0]
9000427a:	78fa      	ldrb	r2, [r7, #3]
9000427c:	4611      	mov	r1, r2
9000427e:	4618      	mov	r0, r3
90004280:	f007 f803 	bl	9000b28a <USB_ReadChInterrupts>
90004284:	4603      	mov	r3, r0
90004286:	f003 0308 	and.w	r3, r3, #8
9000428a:	2b08      	cmp	r3, #8
9000428c:	d11a      	bne.n	900042c4 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000428e:	78fb      	ldrb	r3, [r7, #3]
90004290:	015a      	lsls	r2, r3, #5
90004292:	693b      	ldr	r3, [r7, #16]
90004294:	4413      	add	r3, r2
90004296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000429a:	461a      	mov	r2, r3
9000429c:	2308      	movs	r3, #8
9000429e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900042a0:	78fa      	ldrb	r2, [r7, #3]
900042a2:	6879      	ldr	r1, [r7, #4]
900042a4:	4613      	mov	r3, r2
900042a6:	011b      	lsls	r3, r3, #4
900042a8:	1a9b      	subs	r3, r3, r2
900042aa:	009b      	lsls	r3, r3, #2
900042ac:	440b      	add	r3, r1
900042ae:	334d      	adds	r3, #77	@ 0x4d
900042b0:	2206      	movs	r2, #6
900042b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042b4:	687b      	ldr	r3, [r7, #4]
900042b6:	681b      	ldr	r3, [r3, #0]
900042b8:	78fa      	ldrb	r2, [r7, #3]
900042ba:	4611      	mov	r1, r2
900042bc:	4618      	mov	r0, r3
900042be:	f007 f861 	bl	9000b384 <USB_HC_Halt>
900042c2:	e04e      	b.n	90004362 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900042c4:	687b      	ldr	r3, [r7, #4]
900042c6:	681b      	ldr	r3, [r3, #0]
900042c8:	78fa      	ldrb	r2, [r7, #3]
900042ca:	4611      	mov	r1, r2
900042cc:	4618      	mov	r0, r3
900042ce:	f006 ffdc 	bl	9000b28a <USB_ReadChInterrupts>
900042d2:	4603      	mov	r3, r0
900042d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900042d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900042dc:	d11b      	bne.n	90004316 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900042de:	78fb      	ldrb	r3, [r7, #3]
900042e0:	015a      	lsls	r2, r3, #5
900042e2:	693b      	ldr	r3, [r7, #16]
900042e4:	4413      	add	r3, r2
900042e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042ea:	461a      	mov	r2, r3
900042ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900042f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
900042f2:	78fa      	ldrb	r2, [r7, #3]
900042f4:	6879      	ldr	r1, [r7, #4]
900042f6:	4613      	mov	r3, r2
900042f8:	011b      	lsls	r3, r3, #4
900042fa:	1a9b      	subs	r3, r3, r2
900042fc:	009b      	lsls	r3, r3, #2
900042fe:	440b      	add	r3, r1
90004300:	334d      	adds	r3, #77	@ 0x4d
90004302:	2209      	movs	r2, #9
90004304:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004306:	687b      	ldr	r3, [r7, #4]
90004308:	681b      	ldr	r3, [r3, #0]
9000430a:	78fa      	ldrb	r2, [r7, #3]
9000430c:	4611      	mov	r1, r2
9000430e:	4618      	mov	r0, r3
90004310:	f007 f838 	bl	9000b384 <USB_HC_Halt>
90004314:	e025      	b.n	90004362 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90004316:	687b      	ldr	r3, [r7, #4]
90004318:	681b      	ldr	r3, [r3, #0]
9000431a:	78fa      	ldrb	r2, [r7, #3]
9000431c:	4611      	mov	r1, r2
9000431e:	4618      	mov	r0, r3
90004320:	f006 ffb3 	bl	9000b28a <USB_ReadChInterrupts>
90004324:	4603      	mov	r3, r0
90004326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000432a:	2b80      	cmp	r3, #128	@ 0x80
9000432c:	d119      	bne.n	90004362 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000432e:	78fb      	ldrb	r3, [r7, #3]
90004330:	015a      	lsls	r2, r3, #5
90004332:	693b      	ldr	r3, [r7, #16]
90004334:	4413      	add	r3, r2
90004336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000433a:	461a      	mov	r2, r3
9000433c:	2380      	movs	r3, #128	@ 0x80
9000433e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004340:	78fa      	ldrb	r2, [r7, #3]
90004342:	6879      	ldr	r1, [r7, #4]
90004344:	4613      	mov	r3, r2
90004346:	011b      	lsls	r3, r3, #4
90004348:	1a9b      	subs	r3, r3, r2
9000434a:	009b      	lsls	r3, r3, #2
9000434c:	440b      	add	r3, r1
9000434e:	334d      	adds	r3, #77	@ 0x4d
90004350:	2207      	movs	r2, #7
90004352:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004354:	687b      	ldr	r3, [r7, #4]
90004356:	681b      	ldr	r3, [r3, #0]
90004358:	78fa      	ldrb	r2, [r7, #3]
9000435a:	4611      	mov	r1, r2
9000435c:	4618      	mov	r0, r3
9000435e:	f007 f811 	bl	9000b384 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004362:	687b      	ldr	r3, [r7, #4]
90004364:	681b      	ldr	r3, [r3, #0]
90004366:	78fa      	ldrb	r2, [r7, #3]
90004368:	4611      	mov	r1, r2
9000436a:	4618      	mov	r0, r3
9000436c:	f006 ff8d 	bl	9000b28a <USB_ReadChInterrupts>
90004370:	4603      	mov	r3, r0
90004372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000437a:	d112      	bne.n	900043a2 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000437c:	687b      	ldr	r3, [r7, #4]
9000437e:	681b      	ldr	r3, [r3, #0]
90004380:	78fa      	ldrb	r2, [r7, #3]
90004382:	4611      	mov	r1, r2
90004384:	4618      	mov	r0, r3
90004386:	f006 fffd 	bl	9000b384 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
9000438a:	78fb      	ldrb	r3, [r7, #3]
9000438c:	015a      	lsls	r2, r3, #5
9000438e:	693b      	ldr	r3, [r7, #16]
90004390:	4413      	add	r3, r2
90004392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004396:	461a      	mov	r2, r3
90004398:	f44f 7300 	mov.w	r3, #512	@ 0x200
9000439c:	6093      	str	r3, [r2, #8]
9000439e:	f000 bd75 	b.w	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900043a2:	687b      	ldr	r3, [r7, #4]
900043a4:	681b      	ldr	r3, [r3, #0]
900043a6:	78fa      	ldrb	r2, [r7, #3]
900043a8:	4611      	mov	r1, r2
900043aa:	4618      	mov	r0, r3
900043ac:	f006 ff6d 	bl	9000b28a <USB_ReadChInterrupts>
900043b0:	4603      	mov	r3, r0
900043b2:	f003 0301 	and.w	r3, r3, #1
900043b6:	2b01      	cmp	r3, #1
900043b8:	f040 8128 	bne.w	9000460c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900043bc:	78fb      	ldrb	r3, [r7, #3]
900043be:	015a      	lsls	r2, r3, #5
900043c0:	693b      	ldr	r3, [r7, #16]
900043c2:	4413      	add	r3, r2
900043c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043c8:	461a      	mov	r2, r3
900043ca:	2320      	movs	r3, #32
900043cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
900043ce:	78fa      	ldrb	r2, [r7, #3]
900043d0:	6879      	ldr	r1, [r7, #4]
900043d2:	4613      	mov	r3, r2
900043d4:	011b      	lsls	r3, r3, #4
900043d6:	1a9b      	subs	r3, r3, r2
900043d8:	009b      	lsls	r3, r3, #2
900043da:	440b      	add	r3, r1
900043dc:	331b      	adds	r3, #27
900043de:	781b      	ldrb	r3, [r3, #0]
900043e0:	2b01      	cmp	r3, #1
900043e2:	d119      	bne.n	90004418 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900043e4:	78fa      	ldrb	r2, [r7, #3]
900043e6:	6879      	ldr	r1, [r7, #4]
900043e8:	4613      	mov	r3, r2
900043ea:	011b      	lsls	r3, r3, #4
900043ec:	1a9b      	subs	r3, r3, r2
900043ee:	009b      	lsls	r3, r3, #2
900043f0:	440b      	add	r3, r1
900043f2:	331b      	adds	r3, #27
900043f4:	2200      	movs	r2, #0
900043f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900043f8:	78fb      	ldrb	r3, [r7, #3]
900043fa:	015a      	lsls	r2, r3, #5
900043fc:	693b      	ldr	r3, [r7, #16]
900043fe:	4413      	add	r3, r2
90004400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004404:	685b      	ldr	r3, [r3, #4]
90004406:	78fa      	ldrb	r2, [r7, #3]
90004408:	0151      	lsls	r1, r2, #5
9000440a:	693a      	ldr	r2, [r7, #16]
9000440c:	440a      	add	r2, r1
9000440e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004416:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
90004418:	687b      	ldr	r3, [r7, #4]
9000441a:	799b      	ldrb	r3, [r3, #6]
9000441c:	2b00      	cmp	r3, #0
9000441e:	d01b      	beq.n	90004458 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90004420:	78fa      	ldrb	r2, [r7, #3]
90004422:	6879      	ldr	r1, [r7, #4]
90004424:	4613      	mov	r3, r2
90004426:	011b      	lsls	r3, r3, #4
90004428:	1a9b      	subs	r3, r3, r2
9000442a:	009b      	lsls	r3, r3, #2
9000442c:	440b      	add	r3, r1
9000442e:	3330      	adds	r3, #48	@ 0x30
90004430:	6819      	ldr	r1, [r3, #0]
90004432:	78fb      	ldrb	r3, [r7, #3]
90004434:	015a      	lsls	r2, r3, #5
90004436:	693b      	ldr	r3, [r7, #16]
90004438:	4413      	add	r3, r2
9000443a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000443e:	691b      	ldr	r3, [r3, #16]
90004440:	f3c3 0312 	ubfx	r3, r3, #0, #19
90004444:	78fa      	ldrb	r2, [r7, #3]
90004446:	1ac9      	subs	r1, r1, r3
90004448:	6878      	ldr	r0, [r7, #4]
9000444a:	4613      	mov	r3, r2
9000444c:	011b      	lsls	r3, r3, #4
9000444e:	1a9b      	subs	r3, r3, r2
90004450:	009b      	lsls	r3, r3, #2
90004452:	4403      	add	r3, r0
90004454:	3338      	adds	r3, #56	@ 0x38
90004456:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004458:	78fa      	ldrb	r2, [r7, #3]
9000445a:	6879      	ldr	r1, [r7, #4]
9000445c:	4613      	mov	r3, r2
9000445e:	011b      	lsls	r3, r3, #4
90004460:	1a9b      	subs	r3, r3, r2
90004462:	009b      	lsls	r3, r3, #2
90004464:	440b      	add	r3, r1
90004466:	334d      	adds	r3, #77	@ 0x4d
90004468:	2201      	movs	r2, #1
9000446a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
9000446c:	78fa      	ldrb	r2, [r7, #3]
9000446e:	6879      	ldr	r1, [r7, #4]
90004470:	4613      	mov	r3, r2
90004472:	011b      	lsls	r3, r3, #4
90004474:	1a9b      	subs	r3, r3, r2
90004476:	009b      	lsls	r3, r3, #2
90004478:	440b      	add	r3, r1
9000447a:	3344      	adds	r3, #68	@ 0x44
9000447c:	2200      	movs	r2, #0
9000447e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004480:	78fb      	ldrb	r3, [r7, #3]
90004482:	015a      	lsls	r2, r3, #5
90004484:	693b      	ldr	r3, [r7, #16]
90004486:	4413      	add	r3, r2
90004488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000448c:	461a      	mov	r2, r3
9000448e:	2301      	movs	r3, #1
90004490:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004492:	78fa      	ldrb	r2, [r7, #3]
90004494:	6879      	ldr	r1, [r7, #4]
90004496:	4613      	mov	r3, r2
90004498:	011b      	lsls	r3, r3, #4
9000449a:	1a9b      	subs	r3, r3, r2
9000449c:	009b      	lsls	r3, r3, #2
9000449e:	440b      	add	r3, r1
900044a0:	3326      	adds	r3, #38	@ 0x26
900044a2:	781b      	ldrb	r3, [r3, #0]
900044a4:	2b00      	cmp	r3, #0
900044a6:	d00a      	beq.n	900044be <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900044a8:	78fa      	ldrb	r2, [r7, #3]
900044aa:	6879      	ldr	r1, [r7, #4]
900044ac:	4613      	mov	r3, r2
900044ae:	011b      	lsls	r3, r3, #4
900044b0:	1a9b      	subs	r3, r3, r2
900044b2:	009b      	lsls	r3, r3, #2
900044b4:	440b      	add	r3, r1
900044b6:	3326      	adds	r3, #38	@ 0x26
900044b8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900044ba:	2b02      	cmp	r3, #2
900044bc:	d110      	bne.n	900044e0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900044be:	687b      	ldr	r3, [r7, #4]
900044c0:	681b      	ldr	r3, [r3, #0]
900044c2:	78fa      	ldrb	r2, [r7, #3]
900044c4:	4611      	mov	r1, r2
900044c6:	4618      	mov	r0, r3
900044c8:	f006 ff5c 	bl	9000b384 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900044cc:	78fb      	ldrb	r3, [r7, #3]
900044ce:	015a      	lsls	r2, r3, #5
900044d0:	693b      	ldr	r3, [r7, #16]
900044d2:	4413      	add	r3, r2
900044d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044d8:	461a      	mov	r2, r3
900044da:	2310      	movs	r3, #16
900044dc:	6093      	str	r3, [r2, #8]
900044de:	e03d      	b.n	9000455c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900044e0:	78fa      	ldrb	r2, [r7, #3]
900044e2:	6879      	ldr	r1, [r7, #4]
900044e4:	4613      	mov	r3, r2
900044e6:	011b      	lsls	r3, r3, #4
900044e8:	1a9b      	subs	r3, r3, r2
900044ea:	009b      	lsls	r3, r3, #2
900044ec:	440b      	add	r3, r1
900044ee:	3326      	adds	r3, #38	@ 0x26
900044f0:	781b      	ldrb	r3, [r3, #0]
900044f2:	2b03      	cmp	r3, #3
900044f4:	d00a      	beq.n	9000450c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
900044f6:	78fa      	ldrb	r2, [r7, #3]
900044f8:	6879      	ldr	r1, [r7, #4]
900044fa:	4613      	mov	r3, r2
900044fc:	011b      	lsls	r3, r3, #4
900044fe:	1a9b      	subs	r3, r3, r2
90004500:	009b      	lsls	r3, r3, #2
90004502:	440b      	add	r3, r1
90004504:	3326      	adds	r3, #38	@ 0x26
90004506:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004508:	2b01      	cmp	r3, #1
9000450a:	d127      	bne.n	9000455c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
9000450c:	78fb      	ldrb	r3, [r7, #3]
9000450e:	015a      	lsls	r2, r3, #5
90004510:	693b      	ldr	r3, [r7, #16]
90004512:	4413      	add	r3, r2
90004514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004518:	681b      	ldr	r3, [r3, #0]
9000451a:	78fa      	ldrb	r2, [r7, #3]
9000451c:	0151      	lsls	r1, r2, #5
9000451e:	693a      	ldr	r2, [r7, #16]
90004520:	440a      	add	r2, r1
90004522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004526:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
9000452a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000452c:	78fa      	ldrb	r2, [r7, #3]
9000452e:	6879      	ldr	r1, [r7, #4]
90004530:	4613      	mov	r3, r2
90004532:	011b      	lsls	r3, r3, #4
90004534:	1a9b      	subs	r3, r3, r2
90004536:	009b      	lsls	r3, r3, #2
90004538:	440b      	add	r3, r1
9000453a:	334c      	adds	r3, #76	@ 0x4c
9000453c:	2201      	movs	r2, #1
9000453e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004540:	78fa      	ldrb	r2, [r7, #3]
90004542:	6879      	ldr	r1, [r7, #4]
90004544:	4613      	mov	r3, r2
90004546:	011b      	lsls	r3, r3, #4
90004548:	1a9b      	subs	r3, r3, r2
9000454a:	009b      	lsls	r3, r3, #2
9000454c:	440b      	add	r3, r1
9000454e:	334c      	adds	r3, #76	@ 0x4c
90004550:	781a      	ldrb	r2, [r3, #0]
90004552:	78fb      	ldrb	r3, [r7, #3]
90004554:	4619      	mov	r1, r3
90004556:	6878      	ldr	r0, [r7, #4]
90004558:	f7fc fe1c 	bl	90001194 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
9000455c:	687b      	ldr	r3, [r7, #4]
9000455e:	799b      	ldrb	r3, [r3, #6]
90004560:	2b01      	cmp	r3, #1
90004562:	d13b      	bne.n	900045dc <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
90004564:	78fa      	ldrb	r2, [r7, #3]
90004566:	6879      	ldr	r1, [r7, #4]
90004568:	4613      	mov	r3, r2
9000456a:	011b      	lsls	r3, r3, #4
9000456c:	1a9b      	subs	r3, r3, r2
9000456e:	009b      	lsls	r3, r3, #2
90004570:	440b      	add	r3, r1
90004572:	3338      	adds	r3, #56	@ 0x38
90004574:	6819      	ldr	r1, [r3, #0]
90004576:	78fa      	ldrb	r2, [r7, #3]
90004578:	6878      	ldr	r0, [r7, #4]
9000457a:	4613      	mov	r3, r2
9000457c:	011b      	lsls	r3, r3, #4
9000457e:	1a9b      	subs	r3, r3, r2
90004580:	009b      	lsls	r3, r3, #2
90004582:	4403      	add	r3, r0
90004584:	3328      	adds	r3, #40	@ 0x28
90004586:	881b      	ldrh	r3, [r3, #0]
90004588:	440b      	add	r3, r1
9000458a:	1e59      	subs	r1, r3, #1
9000458c:	78fa      	ldrb	r2, [r7, #3]
9000458e:	6878      	ldr	r0, [r7, #4]
90004590:	4613      	mov	r3, r2
90004592:	011b      	lsls	r3, r3, #4
90004594:	1a9b      	subs	r3, r3, r2
90004596:	009b      	lsls	r3, r3, #2
90004598:	4403      	add	r3, r0
9000459a:	3328      	adds	r3, #40	@ 0x28
9000459c:	881b      	ldrh	r3, [r3, #0]
9000459e:	fbb1 f3f3 	udiv	r3, r1, r3
900045a2:	f003 0301 	and.w	r3, r3, #1
900045a6:	2b00      	cmp	r3, #0
900045a8:	f000 8470 	beq.w	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
900045ac:	78fa      	ldrb	r2, [r7, #3]
900045ae:	6879      	ldr	r1, [r7, #4]
900045b0:	4613      	mov	r3, r2
900045b2:	011b      	lsls	r3, r3, #4
900045b4:	1a9b      	subs	r3, r3, r2
900045b6:	009b      	lsls	r3, r3, #2
900045b8:	440b      	add	r3, r1
900045ba:	333c      	adds	r3, #60	@ 0x3c
900045bc:	781b      	ldrb	r3, [r3, #0]
900045be:	78fa      	ldrb	r2, [r7, #3]
900045c0:	f083 0301 	eor.w	r3, r3, #1
900045c4:	b2d8      	uxtb	r0, r3
900045c6:	6879      	ldr	r1, [r7, #4]
900045c8:	4613      	mov	r3, r2
900045ca:	011b      	lsls	r3, r3, #4
900045cc:	1a9b      	subs	r3, r3, r2
900045ce:	009b      	lsls	r3, r3, #2
900045d0:	440b      	add	r3, r1
900045d2:	333c      	adds	r3, #60	@ 0x3c
900045d4:	4602      	mov	r2, r0
900045d6:	701a      	strb	r2, [r3, #0]
900045d8:	f000 bc58 	b.w	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
900045dc:	78fa      	ldrb	r2, [r7, #3]
900045de:	6879      	ldr	r1, [r7, #4]
900045e0:	4613      	mov	r3, r2
900045e2:	011b      	lsls	r3, r3, #4
900045e4:	1a9b      	subs	r3, r3, r2
900045e6:	009b      	lsls	r3, r3, #2
900045e8:	440b      	add	r3, r1
900045ea:	333c      	adds	r3, #60	@ 0x3c
900045ec:	781b      	ldrb	r3, [r3, #0]
900045ee:	78fa      	ldrb	r2, [r7, #3]
900045f0:	f083 0301 	eor.w	r3, r3, #1
900045f4:	b2d8      	uxtb	r0, r3
900045f6:	6879      	ldr	r1, [r7, #4]
900045f8:	4613      	mov	r3, r2
900045fa:	011b      	lsls	r3, r3, #4
900045fc:	1a9b      	subs	r3, r3, r2
900045fe:	009b      	lsls	r3, r3, #2
90004600:	440b      	add	r3, r1
90004602:	333c      	adds	r3, #60	@ 0x3c
90004604:	4602      	mov	r2, r0
90004606:	701a      	strb	r2, [r3, #0]
90004608:	f000 bc40 	b.w	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
9000460c:	687b      	ldr	r3, [r7, #4]
9000460e:	681b      	ldr	r3, [r3, #0]
90004610:	78fa      	ldrb	r2, [r7, #3]
90004612:	4611      	mov	r1, r2
90004614:	4618      	mov	r0, r3
90004616:	f006 fe38 	bl	9000b28a <USB_ReadChInterrupts>
9000461a:	4603      	mov	r3, r0
9000461c:	f003 0320 	and.w	r3, r3, #32
90004620:	2b20      	cmp	r3, #32
90004622:	d131      	bne.n	90004688 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004624:	78fb      	ldrb	r3, [r7, #3]
90004626:	015a      	lsls	r2, r3, #5
90004628:	693b      	ldr	r3, [r7, #16]
9000462a:	4413      	add	r3, r2
9000462c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004630:	461a      	mov	r2, r3
90004632:	2320      	movs	r3, #32
90004634:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
90004636:	78fa      	ldrb	r2, [r7, #3]
90004638:	6879      	ldr	r1, [r7, #4]
9000463a:	4613      	mov	r3, r2
9000463c:	011b      	lsls	r3, r3, #4
9000463e:	1a9b      	subs	r3, r3, r2
90004640:	009b      	lsls	r3, r3, #2
90004642:	440b      	add	r3, r1
90004644:	331a      	adds	r3, #26
90004646:	781b      	ldrb	r3, [r3, #0]
90004648:	2b01      	cmp	r3, #1
9000464a:	f040 841f 	bne.w	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
9000464e:	78fa      	ldrb	r2, [r7, #3]
90004650:	6879      	ldr	r1, [r7, #4]
90004652:	4613      	mov	r3, r2
90004654:	011b      	lsls	r3, r3, #4
90004656:	1a9b      	subs	r3, r3, r2
90004658:	009b      	lsls	r3, r3, #2
9000465a:	440b      	add	r3, r1
9000465c:	331b      	adds	r3, #27
9000465e:	2201      	movs	r2, #1
90004660:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004662:	78fa      	ldrb	r2, [r7, #3]
90004664:	6879      	ldr	r1, [r7, #4]
90004666:	4613      	mov	r3, r2
90004668:	011b      	lsls	r3, r3, #4
9000466a:	1a9b      	subs	r3, r3, r2
9000466c:	009b      	lsls	r3, r3, #2
9000466e:	440b      	add	r3, r1
90004670:	334d      	adds	r3, #77	@ 0x4d
90004672:	2203      	movs	r2, #3
90004674:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004676:	687b      	ldr	r3, [r7, #4]
90004678:	681b      	ldr	r3, [r3, #0]
9000467a:	78fa      	ldrb	r2, [r7, #3]
9000467c:	4611      	mov	r1, r2
9000467e:	4618      	mov	r0, r3
90004680:	f006 fe80 	bl	9000b384 <USB_HC_Halt>
90004684:	f000 bc02 	b.w	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90004688:	687b      	ldr	r3, [r7, #4]
9000468a:	681b      	ldr	r3, [r3, #0]
9000468c:	78fa      	ldrb	r2, [r7, #3]
9000468e:	4611      	mov	r1, r2
90004690:	4618      	mov	r0, r3
90004692:	f006 fdfa 	bl	9000b28a <USB_ReadChInterrupts>
90004696:	4603      	mov	r3, r0
90004698:	f003 0302 	and.w	r3, r3, #2
9000469c:	2b02      	cmp	r3, #2
9000469e:	f040 8305 	bne.w	90004cac <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900046a2:	78fb      	ldrb	r3, [r7, #3]
900046a4:	015a      	lsls	r2, r3, #5
900046a6:	693b      	ldr	r3, [r7, #16]
900046a8:	4413      	add	r3, r2
900046aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046ae:	461a      	mov	r2, r3
900046b0:	2302      	movs	r3, #2
900046b2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900046b4:	78fa      	ldrb	r2, [r7, #3]
900046b6:	6879      	ldr	r1, [r7, #4]
900046b8:	4613      	mov	r3, r2
900046ba:	011b      	lsls	r3, r3, #4
900046bc:	1a9b      	subs	r3, r3, r2
900046be:	009b      	lsls	r3, r3, #2
900046c0:	440b      	add	r3, r1
900046c2:	334d      	adds	r3, #77	@ 0x4d
900046c4:	781b      	ldrb	r3, [r3, #0]
900046c6:	2b01      	cmp	r3, #1
900046c8:	d114      	bne.n	900046f4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900046ca:	78fa      	ldrb	r2, [r7, #3]
900046cc:	6879      	ldr	r1, [r7, #4]
900046ce:	4613      	mov	r3, r2
900046d0:	011b      	lsls	r3, r3, #4
900046d2:	1a9b      	subs	r3, r3, r2
900046d4:	009b      	lsls	r3, r3, #2
900046d6:	440b      	add	r3, r1
900046d8:	334d      	adds	r3, #77	@ 0x4d
900046da:	2202      	movs	r2, #2
900046dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900046de:	78fa      	ldrb	r2, [r7, #3]
900046e0:	6879      	ldr	r1, [r7, #4]
900046e2:	4613      	mov	r3, r2
900046e4:	011b      	lsls	r3, r3, #4
900046e6:	1a9b      	subs	r3, r3, r2
900046e8:	009b      	lsls	r3, r3, #2
900046ea:	440b      	add	r3, r1
900046ec:	334c      	adds	r3, #76	@ 0x4c
900046ee:	2201      	movs	r2, #1
900046f0:	701a      	strb	r2, [r3, #0]
900046f2:	e2cc      	b.n	90004c8e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
900046f4:	78fa      	ldrb	r2, [r7, #3]
900046f6:	6879      	ldr	r1, [r7, #4]
900046f8:	4613      	mov	r3, r2
900046fa:	011b      	lsls	r3, r3, #4
900046fc:	1a9b      	subs	r3, r3, r2
900046fe:	009b      	lsls	r3, r3, #2
90004700:	440b      	add	r3, r1
90004702:	334d      	adds	r3, #77	@ 0x4d
90004704:	781b      	ldrb	r3, [r3, #0]
90004706:	2b06      	cmp	r3, #6
90004708:	d114      	bne.n	90004734 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000470a:	78fa      	ldrb	r2, [r7, #3]
9000470c:	6879      	ldr	r1, [r7, #4]
9000470e:	4613      	mov	r3, r2
90004710:	011b      	lsls	r3, r3, #4
90004712:	1a9b      	subs	r3, r3, r2
90004714:	009b      	lsls	r3, r3, #2
90004716:	440b      	add	r3, r1
90004718:	334d      	adds	r3, #77	@ 0x4d
9000471a:	2202      	movs	r2, #2
9000471c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
9000471e:	78fa      	ldrb	r2, [r7, #3]
90004720:	6879      	ldr	r1, [r7, #4]
90004722:	4613      	mov	r3, r2
90004724:	011b      	lsls	r3, r3, #4
90004726:	1a9b      	subs	r3, r3, r2
90004728:	009b      	lsls	r3, r3, #2
9000472a:	440b      	add	r3, r1
9000472c:	334c      	adds	r3, #76	@ 0x4c
9000472e:	2205      	movs	r2, #5
90004730:	701a      	strb	r2, [r3, #0]
90004732:	e2ac      	b.n	90004c8e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004734:	78fa      	ldrb	r2, [r7, #3]
90004736:	6879      	ldr	r1, [r7, #4]
90004738:	4613      	mov	r3, r2
9000473a:	011b      	lsls	r3, r3, #4
9000473c:	1a9b      	subs	r3, r3, r2
9000473e:	009b      	lsls	r3, r3, #2
90004740:	440b      	add	r3, r1
90004742:	334d      	adds	r3, #77	@ 0x4d
90004744:	781b      	ldrb	r3, [r3, #0]
90004746:	2b07      	cmp	r3, #7
90004748:	d00b      	beq.n	90004762 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000474a:	78fa      	ldrb	r2, [r7, #3]
9000474c:	6879      	ldr	r1, [r7, #4]
9000474e:	4613      	mov	r3, r2
90004750:	011b      	lsls	r3, r3, #4
90004752:	1a9b      	subs	r3, r3, r2
90004754:	009b      	lsls	r3, r3, #2
90004756:	440b      	add	r3, r1
90004758:	334d      	adds	r3, #77	@ 0x4d
9000475a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000475c:	2b09      	cmp	r3, #9
9000475e:	f040 80a6 	bne.w	900048ae <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004762:	78fa      	ldrb	r2, [r7, #3]
90004764:	6879      	ldr	r1, [r7, #4]
90004766:	4613      	mov	r3, r2
90004768:	011b      	lsls	r3, r3, #4
9000476a:	1a9b      	subs	r3, r3, r2
9000476c:	009b      	lsls	r3, r3, #2
9000476e:	440b      	add	r3, r1
90004770:	334d      	adds	r3, #77	@ 0x4d
90004772:	2202      	movs	r2, #2
90004774:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004776:	78fa      	ldrb	r2, [r7, #3]
90004778:	6879      	ldr	r1, [r7, #4]
9000477a:	4613      	mov	r3, r2
9000477c:	011b      	lsls	r3, r3, #4
9000477e:	1a9b      	subs	r3, r3, r2
90004780:	009b      	lsls	r3, r3, #2
90004782:	440b      	add	r3, r1
90004784:	3344      	adds	r3, #68	@ 0x44
90004786:	681b      	ldr	r3, [r3, #0]
90004788:	1c59      	adds	r1, r3, #1
9000478a:	6878      	ldr	r0, [r7, #4]
9000478c:	4613      	mov	r3, r2
9000478e:	011b      	lsls	r3, r3, #4
90004790:	1a9b      	subs	r3, r3, r2
90004792:	009b      	lsls	r3, r3, #2
90004794:	4403      	add	r3, r0
90004796:	3344      	adds	r3, #68	@ 0x44
90004798:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000479a:	78fa      	ldrb	r2, [r7, #3]
9000479c:	6879      	ldr	r1, [r7, #4]
9000479e:	4613      	mov	r3, r2
900047a0:	011b      	lsls	r3, r3, #4
900047a2:	1a9b      	subs	r3, r3, r2
900047a4:	009b      	lsls	r3, r3, #2
900047a6:	440b      	add	r3, r1
900047a8:	3344      	adds	r3, #68	@ 0x44
900047aa:	681b      	ldr	r3, [r3, #0]
900047ac:	2b02      	cmp	r3, #2
900047ae:	d943      	bls.n	90004838 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900047b0:	78fa      	ldrb	r2, [r7, #3]
900047b2:	6879      	ldr	r1, [r7, #4]
900047b4:	4613      	mov	r3, r2
900047b6:	011b      	lsls	r3, r3, #4
900047b8:	1a9b      	subs	r3, r3, r2
900047ba:	009b      	lsls	r3, r3, #2
900047bc:	440b      	add	r3, r1
900047be:	3344      	adds	r3, #68	@ 0x44
900047c0:	2200      	movs	r2, #0
900047c2:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
900047c4:	78fa      	ldrb	r2, [r7, #3]
900047c6:	6879      	ldr	r1, [r7, #4]
900047c8:	4613      	mov	r3, r2
900047ca:	011b      	lsls	r3, r3, #4
900047cc:	1a9b      	subs	r3, r3, r2
900047ce:	009b      	lsls	r3, r3, #2
900047d0:	440b      	add	r3, r1
900047d2:	331a      	adds	r3, #26
900047d4:	781b      	ldrb	r3, [r3, #0]
900047d6:	2b01      	cmp	r3, #1
900047d8:	d123      	bne.n	90004822 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
900047da:	78fa      	ldrb	r2, [r7, #3]
900047dc:	6879      	ldr	r1, [r7, #4]
900047de:	4613      	mov	r3, r2
900047e0:	011b      	lsls	r3, r3, #4
900047e2:	1a9b      	subs	r3, r3, r2
900047e4:	009b      	lsls	r3, r3, #2
900047e6:	440b      	add	r3, r1
900047e8:	331b      	adds	r3, #27
900047ea:	2200      	movs	r2, #0
900047ec:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
900047ee:	78fa      	ldrb	r2, [r7, #3]
900047f0:	6879      	ldr	r1, [r7, #4]
900047f2:	4613      	mov	r3, r2
900047f4:	011b      	lsls	r3, r3, #4
900047f6:	1a9b      	subs	r3, r3, r2
900047f8:	009b      	lsls	r3, r3, #2
900047fa:	440b      	add	r3, r1
900047fc:	331c      	adds	r3, #28
900047fe:	2200      	movs	r2, #0
90004800:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004802:	78fb      	ldrb	r3, [r7, #3]
90004804:	015a      	lsls	r2, r3, #5
90004806:	693b      	ldr	r3, [r7, #16]
90004808:	4413      	add	r3, r2
9000480a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000480e:	685b      	ldr	r3, [r3, #4]
90004810:	78fa      	ldrb	r2, [r7, #3]
90004812:	0151      	lsls	r1, r2, #5
90004814:	693a      	ldr	r2, [r7, #16]
90004816:	440a      	add	r2, r1
90004818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000481c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004820:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
90004822:	78fa      	ldrb	r2, [r7, #3]
90004824:	6879      	ldr	r1, [r7, #4]
90004826:	4613      	mov	r3, r2
90004828:	011b      	lsls	r3, r3, #4
9000482a:	1a9b      	subs	r3, r3, r2
9000482c:	009b      	lsls	r3, r3, #2
9000482e:	440b      	add	r3, r1
90004830:	334c      	adds	r3, #76	@ 0x4c
90004832:	2204      	movs	r2, #4
90004834:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004836:	e229      	b.n	90004c8c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004838:	78fa      	ldrb	r2, [r7, #3]
9000483a:	6879      	ldr	r1, [r7, #4]
9000483c:	4613      	mov	r3, r2
9000483e:	011b      	lsls	r3, r3, #4
90004840:	1a9b      	subs	r3, r3, r2
90004842:	009b      	lsls	r3, r3, #2
90004844:	440b      	add	r3, r1
90004846:	334c      	adds	r3, #76	@ 0x4c
90004848:	2202      	movs	r2, #2
9000484a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000484c:	78fa      	ldrb	r2, [r7, #3]
9000484e:	6879      	ldr	r1, [r7, #4]
90004850:	4613      	mov	r3, r2
90004852:	011b      	lsls	r3, r3, #4
90004854:	1a9b      	subs	r3, r3, r2
90004856:	009b      	lsls	r3, r3, #2
90004858:	440b      	add	r3, r1
9000485a:	3326      	adds	r3, #38	@ 0x26
9000485c:	781b      	ldrb	r3, [r3, #0]
9000485e:	2b00      	cmp	r3, #0
90004860:	d00b      	beq.n	9000487a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004862:	78fa      	ldrb	r2, [r7, #3]
90004864:	6879      	ldr	r1, [r7, #4]
90004866:	4613      	mov	r3, r2
90004868:	011b      	lsls	r3, r3, #4
9000486a:	1a9b      	subs	r3, r3, r2
9000486c:	009b      	lsls	r3, r3, #2
9000486e:	440b      	add	r3, r1
90004870:	3326      	adds	r3, #38	@ 0x26
90004872:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004874:	2b02      	cmp	r3, #2
90004876:	f040 8209 	bne.w	90004c8c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
9000487a:	78fb      	ldrb	r3, [r7, #3]
9000487c:	015a      	lsls	r2, r3, #5
9000487e:	693b      	ldr	r3, [r7, #16]
90004880:	4413      	add	r3, r2
90004882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004886:	681b      	ldr	r3, [r3, #0]
90004888:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000488a:	68fb      	ldr	r3, [r7, #12]
9000488c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004890:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004892:	68fb      	ldr	r3, [r7, #12]
90004894:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004898:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
9000489a:	78fb      	ldrb	r3, [r7, #3]
9000489c:	015a      	lsls	r2, r3, #5
9000489e:	693b      	ldr	r3, [r7, #16]
900048a0:	4413      	add	r3, r2
900048a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900048a6:	461a      	mov	r2, r3
900048a8:	68fb      	ldr	r3, [r7, #12]
900048aa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900048ac:	e1ee      	b.n	90004c8c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900048ae:	78fa      	ldrb	r2, [r7, #3]
900048b0:	6879      	ldr	r1, [r7, #4]
900048b2:	4613      	mov	r3, r2
900048b4:	011b      	lsls	r3, r3, #4
900048b6:	1a9b      	subs	r3, r3, r2
900048b8:	009b      	lsls	r3, r3, #2
900048ba:	440b      	add	r3, r1
900048bc:	334d      	adds	r3, #77	@ 0x4d
900048be:	781b      	ldrb	r3, [r3, #0]
900048c0:	2b05      	cmp	r3, #5
900048c2:	f040 80c8 	bne.w	90004a56 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900048c6:	78fa      	ldrb	r2, [r7, #3]
900048c8:	6879      	ldr	r1, [r7, #4]
900048ca:	4613      	mov	r3, r2
900048cc:	011b      	lsls	r3, r3, #4
900048ce:	1a9b      	subs	r3, r3, r2
900048d0:	009b      	lsls	r3, r3, #2
900048d2:	440b      	add	r3, r1
900048d4:	334d      	adds	r3, #77	@ 0x4d
900048d6:	2202      	movs	r2, #2
900048d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900048da:	78fa      	ldrb	r2, [r7, #3]
900048dc:	6879      	ldr	r1, [r7, #4]
900048de:	4613      	mov	r3, r2
900048e0:	011b      	lsls	r3, r3, #4
900048e2:	1a9b      	subs	r3, r3, r2
900048e4:	009b      	lsls	r3, r3, #2
900048e6:	440b      	add	r3, r1
900048e8:	331b      	adds	r3, #27
900048ea:	781b      	ldrb	r3, [r3, #0]
900048ec:	2b01      	cmp	r3, #1
900048ee:	f040 81ce 	bne.w	90004c8e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
900048f2:	78fa      	ldrb	r2, [r7, #3]
900048f4:	6879      	ldr	r1, [r7, #4]
900048f6:	4613      	mov	r3, r2
900048f8:	011b      	lsls	r3, r3, #4
900048fa:	1a9b      	subs	r3, r3, r2
900048fc:	009b      	lsls	r3, r3, #2
900048fe:	440b      	add	r3, r1
90004900:	3326      	adds	r3, #38	@ 0x26
90004902:	781b      	ldrb	r3, [r3, #0]
90004904:	2b03      	cmp	r3, #3
90004906:	d16b      	bne.n	900049e0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90004908:	78fa      	ldrb	r2, [r7, #3]
9000490a:	6879      	ldr	r1, [r7, #4]
9000490c:	4613      	mov	r3, r2
9000490e:	011b      	lsls	r3, r3, #4
90004910:	1a9b      	subs	r3, r3, r2
90004912:	009b      	lsls	r3, r3, #2
90004914:	440b      	add	r3, r1
90004916:	3348      	adds	r3, #72	@ 0x48
90004918:	681b      	ldr	r3, [r3, #0]
9000491a:	1c59      	adds	r1, r3, #1
9000491c:	6878      	ldr	r0, [r7, #4]
9000491e:	4613      	mov	r3, r2
90004920:	011b      	lsls	r3, r3, #4
90004922:	1a9b      	subs	r3, r3, r2
90004924:	009b      	lsls	r3, r3, #2
90004926:	4403      	add	r3, r0
90004928:	3348      	adds	r3, #72	@ 0x48
9000492a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
9000492c:	78fa      	ldrb	r2, [r7, #3]
9000492e:	6879      	ldr	r1, [r7, #4]
90004930:	4613      	mov	r3, r2
90004932:	011b      	lsls	r3, r3, #4
90004934:	1a9b      	subs	r3, r3, r2
90004936:	009b      	lsls	r3, r3, #2
90004938:	440b      	add	r3, r1
9000493a:	3348      	adds	r3, #72	@ 0x48
9000493c:	681b      	ldr	r3, [r3, #0]
9000493e:	2b02      	cmp	r3, #2
90004940:	d943      	bls.n	900049ca <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
90004942:	78fa      	ldrb	r2, [r7, #3]
90004944:	6879      	ldr	r1, [r7, #4]
90004946:	4613      	mov	r3, r2
90004948:	011b      	lsls	r3, r3, #4
9000494a:	1a9b      	subs	r3, r3, r2
9000494c:	009b      	lsls	r3, r3, #2
9000494e:	440b      	add	r3, r1
90004950:	3348      	adds	r3, #72	@ 0x48
90004952:	2200      	movs	r2, #0
90004954:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
90004956:	78fa      	ldrb	r2, [r7, #3]
90004958:	6879      	ldr	r1, [r7, #4]
9000495a:	4613      	mov	r3, r2
9000495c:	011b      	lsls	r3, r3, #4
9000495e:	1a9b      	subs	r3, r3, r2
90004960:	009b      	lsls	r3, r3, #2
90004962:	440b      	add	r3, r1
90004964:	331b      	adds	r3, #27
90004966:	2200      	movs	r2, #0
90004968:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
9000496a:	78fa      	ldrb	r2, [r7, #3]
9000496c:	6879      	ldr	r1, [r7, #4]
9000496e:	4613      	mov	r3, r2
90004970:	011b      	lsls	r3, r3, #4
90004972:	1a9b      	subs	r3, r3, r2
90004974:	009b      	lsls	r3, r3, #2
90004976:	440b      	add	r3, r1
90004978:	3344      	adds	r3, #68	@ 0x44
9000497a:	681b      	ldr	r3, [r3, #0]
9000497c:	2b02      	cmp	r3, #2
9000497e:	d809      	bhi.n	90004994 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90004980:	78fa      	ldrb	r2, [r7, #3]
90004982:	6879      	ldr	r1, [r7, #4]
90004984:	4613      	mov	r3, r2
90004986:	011b      	lsls	r3, r3, #4
90004988:	1a9b      	subs	r3, r3, r2
9000498a:	009b      	lsls	r3, r3, #2
9000498c:	440b      	add	r3, r1
9000498e:	331c      	adds	r3, #28
90004990:	2201      	movs	r2, #1
90004992:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004994:	78fb      	ldrb	r3, [r7, #3]
90004996:	015a      	lsls	r2, r3, #5
90004998:	693b      	ldr	r3, [r7, #16]
9000499a:	4413      	add	r3, r2
9000499c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049a0:	685b      	ldr	r3, [r3, #4]
900049a2:	78fa      	ldrb	r2, [r7, #3]
900049a4:	0151      	lsls	r1, r2, #5
900049a6:	693a      	ldr	r2, [r7, #16]
900049a8:	440a      	add	r2, r1
900049aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900049ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900049b2:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
900049b4:	78fa      	ldrb	r2, [r7, #3]
900049b6:	6879      	ldr	r1, [r7, #4]
900049b8:	4613      	mov	r3, r2
900049ba:	011b      	lsls	r3, r3, #4
900049bc:	1a9b      	subs	r3, r3, r2
900049be:	009b      	lsls	r3, r3, #2
900049c0:	440b      	add	r3, r1
900049c2:	334c      	adds	r3, #76	@ 0x4c
900049c4:	2204      	movs	r2, #4
900049c6:	701a      	strb	r2, [r3, #0]
900049c8:	e014      	b.n	900049f4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
900049ca:	78fa      	ldrb	r2, [r7, #3]
900049cc:	6879      	ldr	r1, [r7, #4]
900049ce:	4613      	mov	r3, r2
900049d0:	011b      	lsls	r3, r3, #4
900049d2:	1a9b      	subs	r3, r3, r2
900049d4:	009b      	lsls	r3, r3, #2
900049d6:	440b      	add	r3, r1
900049d8:	334c      	adds	r3, #76	@ 0x4c
900049da:	2202      	movs	r2, #2
900049dc:	701a      	strb	r2, [r3, #0]
900049de:	e009      	b.n	900049f4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
900049e0:	78fa      	ldrb	r2, [r7, #3]
900049e2:	6879      	ldr	r1, [r7, #4]
900049e4:	4613      	mov	r3, r2
900049e6:	011b      	lsls	r3, r3, #4
900049e8:	1a9b      	subs	r3, r3, r2
900049ea:	009b      	lsls	r3, r3, #2
900049ec:	440b      	add	r3, r1
900049ee:	334c      	adds	r3, #76	@ 0x4c
900049f0:	2202      	movs	r2, #2
900049f2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900049f4:	78fa      	ldrb	r2, [r7, #3]
900049f6:	6879      	ldr	r1, [r7, #4]
900049f8:	4613      	mov	r3, r2
900049fa:	011b      	lsls	r3, r3, #4
900049fc:	1a9b      	subs	r3, r3, r2
900049fe:	009b      	lsls	r3, r3, #2
90004a00:	440b      	add	r3, r1
90004a02:	3326      	adds	r3, #38	@ 0x26
90004a04:	781b      	ldrb	r3, [r3, #0]
90004a06:	2b00      	cmp	r3, #0
90004a08:	d00b      	beq.n	90004a22 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004a0a:	78fa      	ldrb	r2, [r7, #3]
90004a0c:	6879      	ldr	r1, [r7, #4]
90004a0e:	4613      	mov	r3, r2
90004a10:	011b      	lsls	r3, r3, #4
90004a12:	1a9b      	subs	r3, r3, r2
90004a14:	009b      	lsls	r3, r3, #2
90004a16:	440b      	add	r3, r1
90004a18:	3326      	adds	r3, #38	@ 0x26
90004a1a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a1c:	2b02      	cmp	r3, #2
90004a1e:	f040 8136 	bne.w	90004c8e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004a22:	78fb      	ldrb	r3, [r7, #3]
90004a24:	015a      	lsls	r2, r3, #5
90004a26:	693b      	ldr	r3, [r7, #16]
90004a28:	4413      	add	r3, r2
90004a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a2e:	681b      	ldr	r3, [r3, #0]
90004a30:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004a32:	68fb      	ldr	r3, [r7, #12]
90004a34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004a38:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004a3a:	68fb      	ldr	r3, [r7, #12]
90004a3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004a40:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004a42:	78fb      	ldrb	r3, [r7, #3]
90004a44:	015a      	lsls	r2, r3, #5
90004a46:	693b      	ldr	r3, [r7, #16]
90004a48:	4413      	add	r3, r2
90004a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a4e:	461a      	mov	r2, r3
90004a50:	68fb      	ldr	r3, [r7, #12]
90004a52:	6013      	str	r3, [r2, #0]
90004a54:	e11b      	b.n	90004c8e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004a56:	78fa      	ldrb	r2, [r7, #3]
90004a58:	6879      	ldr	r1, [r7, #4]
90004a5a:	4613      	mov	r3, r2
90004a5c:	011b      	lsls	r3, r3, #4
90004a5e:	1a9b      	subs	r3, r3, r2
90004a60:	009b      	lsls	r3, r3, #2
90004a62:	440b      	add	r3, r1
90004a64:	334d      	adds	r3, #77	@ 0x4d
90004a66:	781b      	ldrb	r3, [r3, #0]
90004a68:	2b03      	cmp	r3, #3
90004a6a:	f040 8081 	bne.w	90004b70 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a6e:	78fa      	ldrb	r2, [r7, #3]
90004a70:	6879      	ldr	r1, [r7, #4]
90004a72:	4613      	mov	r3, r2
90004a74:	011b      	lsls	r3, r3, #4
90004a76:	1a9b      	subs	r3, r3, r2
90004a78:	009b      	lsls	r3, r3, #2
90004a7a:	440b      	add	r3, r1
90004a7c:	334d      	adds	r3, #77	@ 0x4d
90004a7e:	2202      	movs	r2, #2
90004a80:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004a82:	78fa      	ldrb	r2, [r7, #3]
90004a84:	6879      	ldr	r1, [r7, #4]
90004a86:	4613      	mov	r3, r2
90004a88:	011b      	lsls	r3, r3, #4
90004a8a:	1a9b      	subs	r3, r3, r2
90004a8c:	009b      	lsls	r3, r3, #2
90004a8e:	440b      	add	r3, r1
90004a90:	331b      	adds	r3, #27
90004a92:	781b      	ldrb	r3, [r3, #0]
90004a94:	2b01      	cmp	r3, #1
90004a96:	f040 80fa 	bne.w	90004c8e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a9a:	78fa      	ldrb	r2, [r7, #3]
90004a9c:	6879      	ldr	r1, [r7, #4]
90004a9e:	4613      	mov	r3, r2
90004aa0:	011b      	lsls	r3, r3, #4
90004aa2:	1a9b      	subs	r3, r3, r2
90004aa4:	009b      	lsls	r3, r3, #2
90004aa6:	440b      	add	r3, r1
90004aa8:	334c      	adds	r3, #76	@ 0x4c
90004aaa:	2202      	movs	r2, #2
90004aac:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004aae:	78fb      	ldrb	r3, [r7, #3]
90004ab0:	015a      	lsls	r2, r3, #5
90004ab2:	693b      	ldr	r3, [r7, #16]
90004ab4:	4413      	add	r3, r2
90004ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004aba:	685b      	ldr	r3, [r3, #4]
90004abc:	78fa      	ldrb	r2, [r7, #3]
90004abe:	0151      	lsls	r1, r2, #5
90004ac0:	693a      	ldr	r2, [r7, #16]
90004ac2:	440a      	add	r2, r1
90004ac4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004acc:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004ace:	78fb      	ldrb	r3, [r7, #3]
90004ad0:	015a      	lsls	r2, r3, #5
90004ad2:	693b      	ldr	r3, [r7, #16]
90004ad4:	4413      	add	r3, r2
90004ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ada:	68db      	ldr	r3, [r3, #12]
90004adc:	78fa      	ldrb	r2, [r7, #3]
90004ade:	0151      	lsls	r1, r2, #5
90004ae0:	693a      	ldr	r2, [r7, #16]
90004ae2:	440a      	add	r2, r1
90004ae4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004aec:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004aee:	78fb      	ldrb	r3, [r7, #3]
90004af0:	015a      	lsls	r2, r3, #5
90004af2:	693b      	ldr	r3, [r7, #16]
90004af4:	4413      	add	r3, r2
90004af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004afa:	68db      	ldr	r3, [r3, #12]
90004afc:	78fa      	ldrb	r2, [r7, #3]
90004afe:	0151      	lsls	r1, r2, #5
90004b00:	693a      	ldr	r2, [r7, #16]
90004b02:	440a      	add	r2, r1
90004b04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004b08:	f023 0320 	bic.w	r3, r3, #32
90004b0c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b0e:	78fa      	ldrb	r2, [r7, #3]
90004b10:	6879      	ldr	r1, [r7, #4]
90004b12:	4613      	mov	r3, r2
90004b14:	011b      	lsls	r3, r3, #4
90004b16:	1a9b      	subs	r3, r3, r2
90004b18:	009b      	lsls	r3, r3, #2
90004b1a:	440b      	add	r3, r1
90004b1c:	3326      	adds	r3, #38	@ 0x26
90004b1e:	781b      	ldrb	r3, [r3, #0]
90004b20:	2b00      	cmp	r3, #0
90004b22:	d00b      	beq.n	90004b3c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004b24:	78fa      	ldrb	r2, [r7, #3]
90004b26:	6879      	ldr	r1, [r7, #4]
90004b28:	4613      	mov	r3, r2
90004b2a:	011b      	lsls	r3, r3, #4
90004b2c:	1a9b      	subs	r3, r3, r2
90004b2e:	009b      	lsls	r3, r3, #2
90004b30:	440b      	add	r3, r1
90004b32:	3326      	adds	r3, #38	@ 0x26
90004b34:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b36:	2b02      	cmp	r3, #2
90004b38:	f040 80a9 	bne.w	90004c8e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004b3c:	78fb      	ldrb	r3, [r7, #3]
90004b3e:	015a      	lsls	r2, r3, #5
90004b40:	693b      	ldr	r3, [r7, #16]
90004b42:	4413      	add	r3, r2
90004b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b48:	681b      	ldr	r3, [r3, #0]
90004b4a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004b4c:	68fb      	ldr	r3, [r7, #12]
90004b4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004b52:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004b54:	68fb      	ldr	r3, [r7, #12]
90004b56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004b5a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004b5c:	78fb      	ldrb	r3, [r7, #3]
90004b5e:	015a      	lsls	r2, r3, #5
90004b60:	693b      	ldr	r3, [r7, #16]
90004b62:	4413      	add	r3, r2
90004b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b68:	461a      	mov	r2, r3
90004b6a:	68fb      	ldr	r3, [r7, #12]
90004b6c:	6013      	str	r3, [r2, #0]
90004b6e:	e08e      	b.n	90004c8e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004b70:	78fa      	ldrb	r2, [r7, #3]
90004b72:	6879      	ldr	r1, [r7, #4]
90004b74:	4613      	mov	r3, r2
90004b76:	011b      	lsls	r3, r3, #4
90004b78:	1a9b      	subs	r3, r3, r2
90004b7a:	009b      	lsls	r3, r3, #2
90004b7c:	440b      	add	r3, r1
90004b7e:	334d      	adds	r3, #77	@ 0x4d
90004b80:	781b      	ldrb	r3, [r3, #0]
90004b82:	2b04      	cmp	r3, #4
90004b84:	d143      	bne.n	90004c0e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004b86:	78fa      	ldrb	r2, [r7, #3]
90004b88:	6879      	ldr	r1, [r7, #4]
90004b8a:	4613      	mov	r3, r2
90004b8c:	011b      	lsls	r3, r3, #4
90004b8e:	1a9b      	subs	r3, r3, r2
90004b90:	009b      	lsls	r3, r3, #2
90004b92:	440b      	add	r3, r1
90004b94:	334d      	adds	r3, #77	@ 0x4d
90004b96:	2202      	movs	r2, #2
90004b98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b9a:	78fa      	ldrb	r2, [r7, #3]
90004b9c:	6879      	ldr	r1, [r7, #4]
90004b9e:	4613      	mov	r3, r2
90004ba0:	011b      	lsls	r3, r3, #4
90004ba2:	1a9b      	subs	r3, r3, r2
90004ba4:	009b      	lsls	r3, r3, #2
90004ba6:	440b      	add	r3, r1
90004ba8:	334c      	adds	r3, #76	@ 0x4c
90004baa:	2202      	movs	r2, #2
90004bac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bae:	78fa      	ldrb	r2, [r7, #3]
90004bb0:	6879      	ldr	r1, [r7, #4]
90004bb2:	4613      	mov	r3, r2
90004bb4:	011b      	lsls	r3, r3, #4
90004bb6:	1a9b      	subs	r3, r3, r2
90004bb8:	009b      	lsls	r3, r3, #2
90004bba:	440b      	add	r3, r1
90004bbc:	3326      	adds	r3, #38	@ 0x26
90004bbe:	781b      	ldrb	r3, [r3, #0]
90004bc0:	2b00      	cmp	r3, #0
90004bc2:	d00a      	beq.n	90004bda <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004bc4:	78fa      	ldrb	r2, [r7, #3]
90004bc6:	6879      	ldr	r1, [r7, #4]
90004bc8:	4613      	mov	r3, r2
90004bca:	011b      	lsls	r3, r3, #4
90004bcc:	1a9b      	subs	r3, r3, r2
90004bce:	009b      	lsls	r3, r3, #2
90004bd0:	440b      	add	r3, r1
90004bd2:	3326      	adds	r3, #38	@ 0x26
90004bd4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bd6:	2b02      	cmp	r3, #2
90004bd8:	d159      	bne.n	90004c8e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004bda:	78fb      	ldrb	r3, [r7, #3]
90004bdc:	015a      	lsls	r2, r3, #5
90004bde:	693b      	ldr	r3, [r7, #16]
90004be0:	4413      	add	r3, r2
90004be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004be6:	681b      	ldr	r3, [r3, #0]
90004be8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004bea:	68fb      	ldr	r3, [r7, #12]
90004bec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004bf0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004bf2:	68fb      	ldr	r3, [r7, #12]
90004bf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004bf8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004bfa:	78fb      	ldrb	r3, [r7, #3]
90004bfc:	015a      	lsls	r2, r3, #5
90004bfe:	693b      	ldr	r3, [r7, #16]
90004c00:	4413      	add	r3, r2
90004c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c06:	461a      	mov	r2, r3
90004c08:	68fb      	ldr	r3, [r7, #12]
90004c0a:	6013      	str	r3, [r2, #0]
90004c0c:	e03f      	b.n	90004c8e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004c0e:	78fa      	ldrb	r2, [r7, #3]
90004c10:	6879      	ldr	r1, [r7, #4]
90004c12:	4613      	mov	r3, r2
90004c14:	011b      	lsls	r3, r3, #4
90004c16:	1a9b      	subs	r3, r3, r2
90004c18:	009b      	lsls	r3, r3, #2
90004c1a:	440b      	add	r3, r1
90004c1c:	334d      	adds	r3, #77	@ 0x4d
90004c1e:	781b      	ldrb	r3, [r3, #0]
90004c20:	2b08      	cmp	r3, #8
90004c22:	d126      	bne.n	90004c72 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004c24:	78fa      	ldrb	r2, [r7, #3]
90004c26:	6879      	ldr	r1, [r7, #4]
90004c28:	4613      	mov	r3, r2
90004c2a:	011b      	lsls	r3, r3, #4
90004c2c:	1a9b      	subs	r3, r3, r2
90004c2e:	009b      	lsls	r3, r3, #2
90004c30:	440b      	add	r3, r1
90004c32:	334d      	adds	r3, #77	@ 0x4d
90004c34:	2202      	movs	r2, #2
90004c36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004c38:	78fa      	ldrb	r2, [r7, #3]
90004c3a:	6879      	ldr	r1, [r7, #4]
90004c3c:	4613      	mov	r3, r2
90004c3e:	011b      	lsls	r3, r3, #4
90004c40:	1a9b      	subs	r3, r3, r2
90004c42:	009b      	lsls	r3, r3, #2
90004c44:	440b      	add	r3, r1
90004c46:	3344      	adds	r3, #68	@ 0x44
90004c48:	681b      	ldr	r3, [r3, #0]
90004c4a:	1c59      	adds	r1, r3, #1
90004c4c:	6878      	ldr	r0, [r7, #4]
90004c4e:	4613      	mov	r3, r2
90004c50:	011b      	lsls	r3, r3, #4
90004c52:	1a9b      	subs	r3, r3, r2
90004c54:	009b      	lsls	r3, r3, #2
90004c56:	4403      	add	r3, r0
90004c58:	3344      	adds	r3, #68	@ 0x44
90004c5a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004c5c:	78fa      	ldrb	r2, [r7, #3]
90004c5e:	6879      	ldr	r1, [r7, #4]
90004c60:	4613      	mov	r3, r2
90004c62:	011b      	lsls	r3, r3, #4
90004c64:	1a9b      	subs	r3, r3, r2
90004c66:	009b      	lsls	r3, r3, #2
90004c68:	440b      	add	r3, r1
90004c6a:	334c      	adds	r3, #76	@ 0x4c
90004c6c:	2204      	movs	r2, #4
90004c6e:	701a      	strb	r2, [r3, #0]
90004c70:	e00d      	b.n	90004c8e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004c72:	78fa      	ldrb	r2, [r7, #3]
90004c74:	6879      	ldr	r1, [r7, #4]
90004c76:	4613      	mov	r3, r2
90004c78:	011b      	lsls	r3, r3, #4
90004c7a:	1a9b      	subs	r3, r3, r2
90004c7c:	009b      	lsls	r3, r3, #2
90004c7e:	440b      	add	r3, r1
90004c80:	334d      	adds	r3, #77	@ 0x4d
90004c82:	781b      	ldrb	r3, [r3, #0]
90004c84:	2b02      	cmp	r3, #2
90004c86:	f000 8100 	beq.w	90004e8a <HCD_HC_IN_IRQHandler+0xcca>
90004c8a:	e000      	b.n	90004c8e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004c8c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004c8e:	78fa      	ldrb	r2, [r7, #3]
90004c90:	6879      	ldr	r1, [r7, #4]
90004c92:	4613      	mov	r3, r2
90004c94:	011b      	lsls	r3, r3, #4
90004c96:	1a9b      	subs	r3, r3, r2
90004c98:	009b      	lsls	r3, r3, #2
90004c9a:	440b      	add	r3, r1
90004c9c:	334c      	adds	r3, #76	@ 0x4c
90004c9e:	781a      	ldrb	r2, [r3, #0]
90004ca0:	78fb      	ldrb	r3, [r7, #3]
90004ca2:	4619      	mov	r1, r3
90004ca4:	6878      	ldr	r0, [r7, #4]
90004ca6:	f7fc fa75 	bl	90001194 <HAL_HCD_HC_NotifyURBChange_Callback>
90004caa:	e0ef      	b.n	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004cac:	687b      	ldr	r3, [r7, #4]
90004cae:	681b      	ldr	r3, [r3, #0]
90004cb0:	78fa      	ldrb	r2, [r7, #3]
90004cb2:	4611      	mov	r1, r2
90004cb4:	4618      	mov	r0, r3
90004cb6:	f006 fae8 	bl	9000b28a <USB_ReadChInterrupts>
90004cba:	4603      	mov	r3, r0
90004cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004cc0:	2b40      	cmp	r3, #64	@ 0x40
90004cc2:	d12f      	bne.n	90004d24 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004cc4:	78fb      	ldrb	r3, [r7, #3]
90004cc6:	015a      	lsls	r2, r3, #5
90004cc8:	693b      	ldr	r3, [r7, #16]
90004cca:	4413      	add	r3, r2
90004ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cd0:	461a      	mov	r2, r3
90004cd2:	2340      	movs	r3, #64	@ 0x40
90004cd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004cd6:	78fa      	ldrb	r2, [r7, #3]
90004cd8:	6879      	ldr	r1, [r7, #4]
90004cda:	4613      	mov	r3, r2
90004cdc:	011b      	lsls	r3, r3, #4
90004cde:	1a9b      	subs	r3, r3, r2
90004ce0:	009b      	lsls	r3, r3, #2
90004ce2:	440b      	add	r3, r1
90004ce4:	334d      	adds	r3, #77	@ 0x4d
90004ce6:	2205      	movs	r2, #5
90004ce8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004cea:	78fa      	ldrb	r2, [r7, #3]
90004cec:	6879      	ldr	r1, [r7, #4]
90004cee:	4613      	mov	r3, r2
90004cf0:	011b      	lsls	r3, r3, #4
90004cf2:	1a9b      	subs	r3, r3, r2
90004cf4:	009b      	lsls	r3, r3, #2
90004cf6:	440b      	add	r3, r1
90004cf8:	331a      	adds	r3, #26
90004cfa:	781b      	ldrb	r3, [r3, #0]
90004cfc:	2b00      	cmp	r3, #0
90004cfe:	d109      	bne.n	90004d14 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004d00:	78fa      	ldrb	r2, [r7, #3]
90004d02:	6879      	ldr	r1, [r7, #4]
90004d04:	4613      	mov	r3, r2
90004d06:	011b      	lsls	r3, r3, #4
90004d08:	1a9b      	subs	r3, r3, r2
90004d0a:	009b      	lsls	r3, r3, #2
90004d0c:	440b      	add	r3, r1
90004d0e:	3344      	adds	r3, #68	@ 0x44
90004d10:	2200      	movs	r2, #0
90004d12:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d14:	687b      	ldr	r3, [r7, #4]
90004d16:	681b      	ldr	r3, [r3, #0]
90004d18:	78fa      	ldrb	r2, [r7, #3]
90004d1a:	4611      	mov	r1, r2
90004d1c:	4618      	mov	r0, r3
90004d1e:	f006 fb31 	bl	9000b384 <USB_HC_Halt>
90004d22:	e0b3      	b.n	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004d24:	687b      	ldr	r3, [r7, #4]
90004d26:	681b      	ldr	r3, [r3, #0]
90004d28:	78fa      	ldrb	r2, [r7, #3]
90004d2a:	4611      	mov	r1, r2
90004d2c:	4618      	mov	r0, r3
90004d2e:	f006 faac 	bl	9000b28a <USB_ReadChInterrupts>
90004d32:	4603      	mov	r3, r0
90004d34:	f003 0310 	and.w	r3, r3, #16
90004d38:	2b10      	cmp	r3, #16
90004d3a:	f040 80a7 	bne.w	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004d3e:	78fa      	ldrb	r2, [r7, #3]
90004d40:	6879      	ldr	r1, [r7, #4]
90004d42:	4613      	mov	r3, r2
90004d44:	011b      	lsls	r3, r3, #4
90004d46:	1a9b      	subs	r3, r3, r2
90004d48:	009b      	lsls	r3, r3, #2
90004d4a:	440b      	add	r3, r1
90004d4c:	3326      	adds	r3, #38	@ 0x26
90004d4e:	781b      	ldrb	r3, [r3, #0]
90004d50:	2b03      	cmp	r3, #3
90004d52:	d11b      	bne.n	90004d8c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004d54:	78fa      	ldrb	r2, [r7, #3]
90004d56:	6879      	ldr	r1, [r7, #4]
90004d58:	4613      	mov	r3, r2
90004d5a:	011b      	lsls	r3, r3, #4
90004d5c:	1a9b      	subs	r3, r3, r2
90004d5e:	009b      	lsls	r3, r3, #2
90004d60:	440b      	add	r3, r1
90004d62:	3344      	adds	r3, #68	@ 0x44
90004d64:	2200      	movs	r2, #0
90004d66:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004d68:	78fa      	ldrb	r2, [r7, #3]
90004d6a:	6879      	ldr	r1, [r7, #4]
90004d6c:	4613      	mov	r3, r2
90004d6e:	011b      	lsls	r3, r3, #4
90004d70:	1a9b      	subs	r3, r3, r2
90004d72:	009b      	lsls	r3, r3, #2
90004d74:	440b      	add	r3, r1
90004d76:	334d      	adds	r3, #77	@ 0x4d
90004d78:	2204      	movs	r2, #4
90004d7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d7c:	687b      	ldr	r3, [r7, #4]
90004d7e:	681b      	ldr	r3, [r3, #0]
90004d80:	78fa      	ldrb	r2, [r7, #3]
90004d82:	4611      	mov	r1, r2
90004d84:	4618      	mov	r0, r3
90004d86:	f006 fafd 	bl	9000b384 <USB_HC_Halt>
90004d8a:	e03f      	b.n	90004e0c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004d8c:	78fa      	ldrb	r2, [r7, #3]
90004d8e:	6879      	ldr	r1, [r7, #4]
90004d90:	4613      	mov	r3, r2
90004d92:	011b      	lsls	r3, r3, #4
90004d94:	1a9b      	subs	r3, r3, r2
90004d96:	009b      	lsls	r3, r3, #2
90004d98:	440b      	add	r3, r1
90004d9a:	3326      	adds	r3, #38	@ 0x26
90004d9c:	781b      	ldrb	r3, [r3, #0]
90004d9e:	2b00      	cmp	r3, #0
90004da0:	d00a      	beq.n	90004db8 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004da2:	78fa      	ldrb	r2, [r7, #3]
90004da4:	6879      	ldr	r1, [r7, #4]
90004da6:	4613      	mov	r3, r2
90004da8:	011b      	lsls	r3, r3, #4
90004daa:	1a9b      	subs	r3, r3, r2
90004dac:	009b      	lsls	r3, r3, #2
90004dae:	440b      	add	r3, r1
90004db0:	3326      	adds	r3, #38	@ 0x26
90004db2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004db4:	2b02      	cmp	r3, #2
90004db6:	d129      	bne.n	90004e0c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004db8:	78fa      	ldrb	r2, [r7, #3]
90004dba:	6879      	ldr	r1, [r7, #4]
90004dbc:	4613      	mov	r3, r2
90004dbe:	011b      	lsls	r3, r3, #4
90004dc0:	1a9b      	subs	r3, r3, r2
90004dc2:	009b      	lsls	r3, r3, #2
90004dc4:	440b      	add	r3, r1
90004dc6:	3344      	adds	r3, #68	@ 0x44
90004dc8:	2200      	movs	r2, #0
90004dca:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004dcc:	687b      	ldr	r3, [r7, #4]
90004dce:	799b      	ldrb	r3, [r3, #6]
90004dd0:	2b00      	cmp	r3, #0
90004dd2:	d00a      	beq.n	90004dea <HCD_HC_IN_IRQHandler+0xc2a>
90004dd4:	78fa      	ldrb	r2, [r7, #3]
90004dd6:	6879      	ldr	r1, [r7, #4]
90004dd8:	4613      	mov	r3, r2
90004dda:	011b      	lsls	r3, r3, #4
90004ddc:	1a9b      	subs	r3, r3, r2
90004dde:	009b      	lsls	r3, r3, #2
90004de0:	440b      	add	r3, r1
90004de2:	331b      	adds	r3, #27
90004de4:	781b      	ldrb	r3, [r3, #0]
90004de6:	2b01      	cmp	r3, #1
90004de8:	d110      	bne.n	90004e0c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004dea:	78fa      	ldrb	r2, [r7, #3]
90004dec:	6879      	ldr	r1, [r7, #4]
90004dee:	4613      	mov	r3, r2
90004df0:	011b      	lsls	r3, r3, #4
90004df2:	1a9b      	subs	r3, r3, r2
90004df4:	009b      	lsls	r3, r3, #2
90004df6:	440b      	add	r3, r1
90004df8:	334d      	adds	r3, #77	@ 0x4d
90004dfa:	2204      	movs	r2, #4
90004dfc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004dfe:	687b      	ldr	r3, [r7, #4]
90004e00:	681b      	ldr	r3, [r3, #0]
90004e02:	78fa      	ldrb	r2, [r7, #3]
90004e04:	4611      	mov	r1, r2
90004e06:	4618      	mov	r0, r3
90004e08:	f006 fabc 	bl	9000b384 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004e0c:	78fa      	ldrb	r2, [r7, #3]
90004e0e:	6879      	ldr	r1, [r7, #4]
90004e10:	4613      	mov	r3, r2
90004e12:	011b      	lsls	r3, r3, #4
90004e14:	1a9b      	subs	r3, r3, r2
90004e16:	009b      	lsls	r3, r3, #2
90004e18:	440b      	add	r3, r1
90004e1a:	331b      	adds	r3, #27
90004e1c:	781b      	ldrb	r3, [r3, #0]
90004e1e:	2b01      	cmp	r3, #1
90004e20:	d129      	bne.n	90004e76 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004e22:	78fa      	ldrb	r2, [r7, #3]
90004e24:	6879      	ldr	r1, [r7, #4]
90004e26:	4613      	mov	r3, r2
90004e28:	011b      	lsls	r3, r3, #4
90004e2a:	1a9b      	subs	r3, r3, r2
90004e2c:	009b      	lsls	r3, r3, #2
90004e2e:	440b      	add	r3, r1
90004e30:	331b      	adds	r3, #27
90004e32:	2200      	movs	r2, #0
90004e34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004e36:	78fb      	ldrb	r3, [r7, #3]
90004e38:	015a      	lsls	r2, r3, #5
90004e3a:	693b      	ldr	r3, [r7, #16]
90004e3c:	4413      	add	r3, r2
90004e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e42:	685b      	ldr	r3, [r3, #4]
90004e44:	78fa      	ldrb	r2, [r7, #3]
90004e46:	0151      	lsls	r1, r2, #5
90004e48:	693a      	ldr	r2, [r7, #16]
90004e4a:	440a      	add	r2, r1
90004e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004e54:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004e56:	78fb      	ldrb	r3, [r7, #3]
90004e58:	015a      	lsls	r2, r3, #5
90004e5a:	693b      	ldr	r3, [r7, #16]
90004e5c:	4413      	add	r3, r2
90004e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e62:	68db      	ldr	r3, [r3, #12]
90004e64:	78fa      	ldrb	r2, [r7, #3]
90004e66:	0151      	lsls	r1, r2, #5
90004e68:	693a      	ldr	r2, [r7, #16]
90004e6a:	440a      	add	r2, r1
90004e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004e70:	f043 0320 	orr.w	r3, r3, #32
90004e74:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004e76:	78fb      	ldrb	r3, [r7, #3]
90004e78:	015a      	lsls	r2, r3, #5
90004e7a:	693b      	ldr	r3, [r7, #16]
90004e7c:	4413      	add	r3, r2
90004e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e82:	461a      	mov	r2, r3
90004e84:	2310      	movs	r3, #16
90004e86:	6093      	str	r3, [r2, #8]
90004e88:	e000      	b.n	90004e8c <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004e8a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004e8c:	3718      	adds	r7, #24
90004e8e:	46bd      	mov	sp, r7
90004e90:	bd80      	pop	{r7, pc}

90004e92 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004e92:	b580      	push	{r7, lr}
90004e94:	b086      	sub	sp, #24
90004e96:	af00      	add	r7, sp, #0
90004e98:	6078      	str	r0, [r7, #4]
90004e9a:	460b      	mov	r3, r1
90004e9c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004e9e:	687b      	ldr	r3, [r7, #4]
90004ea0:	681b      	ldr	r3, [r3, #0]
90004ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004ea4:	697b      	ldr	r3, [r7, #20]
90004ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004ea8:	687b      	ldr	r3, [r7, #4]
90004eaa:	681b      	ldr	r3, [r3, #0]
90004eac:	78fa      	ldrb	r2, [r7, #3]
90004eae:	4611      	mov	r1, r2
90004eb0:	4618      	mov	r0, r3
90004eb2:	f006 f9ea 	bl	9000b28a <USB_ReadChInterrupts>
90004eb6:	4603      	mov	r3, r0
90004eb8:	f003 0304 	and.w	r3, r3, #4
90004ebc:	2b04      	cmp	r3, #4
90004ebe:	d11b      	bne.n	90004ef8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004ec0:	78fb      	ldrb	r3, [r7, #3]
90004ec2:	015a      	lsls	r2, r3, #5
90004ec4:	693b      	ldr	r3, [r7, #16]
90004ec6:	4413      	add	r3, r2
90004ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ecc:	461a      	mov	r2, r3
90004ece:	2304      	movs	r3, #4
90004ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004ed2:	78fa      	ldrb	r2, [r7, #3]
90004ed4:	6879      	ldr	r1, [r7, #4]
90004ed6:	4613      	mov	r3, r2
90004ed8:	011b      	lsls	r3, r3, #4
90004eda:	1a9b      	subs	r3, r3, r2
90004edc:	009b      	lsls	r3, r3, #2
90004ede:	440b      	add	r3, r1
90004ee0:	334d      	adds	r3, #77	@ 0x4d
90004ee2:	2207      	movs	r2, #7
90004ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ee6:	687b      	ldr	r3, [r7, #4]
90004ee8:	681b      	ldr	r3, [r3, #0]
90004eea:	78fa      	ldrb	r2, [r7, #3]
90004eec:	4611      	mov	r1, r2
90004eee:	4618      	mov	r0, r3
90004ef0:	f006 fa48 	bl	9000b384 <USB_HC_Halt>
90004ef4:	f000 bc89 	b.w	9000580a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004ef8:	687b      	ldr	r3, [r7, #4]
90004efa:	681b      	ldr	r3, [r3, #0]
90004efc:	78fa      	ldrb	r2, [r7, #3]
90004efe:	4611      	mov	r1, r2
90004f00:	4618      	mov	r0, r3
90004f02:	f006 f9c2 	bl	9000b28a <USB_ReadChInterrupts>
90004f06:	4603      	mov	r3, r0
90004f08:	f003 0320 	and.w	r3, r3, #32
90004f0c:	2b20      	cmp	r3, #32
90004f0e:	f040 8082 	bne.w	90005016 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004f12:	78fb      	ldrb	r3, [r7, #3]
90004f14:	015a      	lsls	r2, r3, #5
90004f16:	693b      	ldr	r3, [r7, #16]
90004f18:	4413      	add	r3, r2
90004f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f1e:	461a      	mov	r2, r3
90004f20:	2320      	movs	r3, #32
90004f22:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004f24:	78fa      	ldrb	r2, [r7, #3]
90004f26:	6879      	ldr	r1, [r7, #4]
90004f28:	4613      	mov	r3, r2
90004f2a:	011b      	lsls	r3, r3, #4
90004f2c:	1a9b      	subs	r3, r3, r2
90004f2e:	009b      	lsls	r3, r3, #2
90004f30:	440b      	add	r3, r1
90004f32:	3319      	adds	r3, #25
90004f34:	781b      	ldrb	r3, [r3, #0]
90004f36:	2b01      	cmp	r3, #1
90004f38:	d124      	bne.n	90004f84 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004f3a:	78fa      	ldrb	r2, [r7, #3]
90004f3c:	6879      	ldr	r1, [r7, #4]
90004f3e:	4613      	mov	r3, r2
90004f40:	011b      	lsls	r3, r3, #4
90004f42:	1a9b      	subs	r3, r3, r2
90004f44:	009b      	lsls	r3, r3, #2
90004f46:	440b      	add	r3, r1
90004f48:	3319      	adds	r3, #25
90004f4a:	2200      	movs	r2, #0
90004f4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004f4e:	78fa      	ldrb	r2, [r7, #3]
90004f50:	6879      	ldr	r1, [r7, #4]
90004f52:	4613      	mov	r3, r2
90004f54:	011b      	lsls	r3, r3, #4
90004f56:	1a9b      	subs	r3, r3, r2
90004f58:	009b      	lsls	r3, r3, #2
90004f5a:	440b      	add	r3, r1
90004f5c:	334c      	adds	r3, #76	@ 0x4c
90004f5e:	2202      	movs	r2, #2
90004f60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004f62:	78fa      	ldrb	r2, [r7, #3]
90004f64:	6879      	ldr	r1, [r7, #4]
90004f66:	4613      	mov	r3, r2
90004f68:	011b      	lsls	r3, r3, #4
90004f6a:	1a9b      	subs	r3, r3, r2
90004f6c:	009b      	lsls	r3, r3, #2
90004f6e:	440b      	add	r3, r1
90004f70:	334d      	adds	r3, #77	@ 0x4d
90004f72:	2203      	movs	r2, #3
90004f74:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f76:	687b      	ldr	r3, [r7, #4]
90004f78:	681b      	ldr	r3, [r3, #0]
90004f7a:	78fa      	ldrb	r2, [r7, #3]
90004f7c:	4611      	mov	r1, r2
90004f7e:	4618      	mov	r0, r3
90004f80:	f006 fa00 	bl	9000b384 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90004f84:	78fa      	ldrb	r2, [r7, #3]
90004f86:	6879      	ldr	r1, [r7, #4]
90004f88:	4613      	mov	r3, r2
90004f8a:	011b      	lsls	r3, r3, #4
90004f8c:	1a9b      	subs	r3, r3, r2
90004f8e:	009b      	lsls	r3, r3, #2
90004f90:	440b      	add	r3, r1
90004f92:	331a      	adds	r3, #26
90004f94:	781b      	ldrb	r3, [r3, #0]
90004f96:	2b01      	cmp	r3, #1
90004f98:	f040 8437 	bne.w	9000580a <HCD_HC_OUT_IRQHandler+0x978>
90004f9c:	78fa      	ldrb	r2, [r7, #3]
90004f9e:	6879      	ldr	r1, [r7, #4]
90004fa0:	4613      	mov	r3, r2
90004fa2:	011b      	lsls	r3, r3, #4
90004fa4:	1a9b      	subs	r3, r3, r2
90004fa6:	009b      	lsls	r3, r3, #2
90004fa8:	440b      	add	r3, r1
90004faa:	331b      	adds	r3, #27
90004fac:	781b      	ldrb	r3, [r3, #0]
90004fae:	2b00      	cmp	r3, #0
90004fb0:	f040 842b 	bne.w	9000580a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90004fb4:	78fa      	ldrb	r2, [r7, #3]
90004fb6:	6879      	ldr	r1, [r7, #4]
90004fb8:	4613      	mov	r3, r2
90004fba:	011b      	lsls	r3, r3, #4
90004fbc:	1a9b      	subs	r3, r3, r2
90004fbe:	009b      	lsls	r3, r3, #2
90004fc0:	440b      	add	r3, r1
90004fc2:	3326      	adds	r3, #38	@ 0x26
90004fc4:	781b      	ldrb	r3, [r3, #0]
90004fc6:	2b01      	cmp	r3, #1
90004fc8:	d009      	beq.n	90004fde <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90004fca:	78fa      	ldrb	r2, [r7, #3]
90004fcc:	6879      	ldr	r1, [r7, #4]
90004fce:	4613      	mov	r3, r2
90004fd0:	011b      	lsls	r3, r3, #4
90004fd2:	1a9b      	subs	r3, r3, r2
90004fd4:	009b      	lsls	r3, r3, #2
90004fd6:	440b      	add	r3, r1
90004fd8:	331b      	adds	r3, #27
90004fda:	2201      	movs	r2, #1
90004fdc:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90004fde:	78fa      	ldrb	r2, [r7, #3]
90004fe0:	6879      	ldr	r1, [r7, #4]
90004fe2:	4613      	mov	r3, r2
90004fe4:	011b      	lsls	r3, r3, #4
90004fe6:	1a9b      	subs	r3, r3, r2
90004fe8:	009b      	lsls	r3, r3, #2
90004fea:	440b      	add	r3, r1
90004fec:	334d      	adds	r3, #77	@ 0x4d
90004fee:	2203      	movs	r2, #3
90004ff0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ff2:	687b      	ldr	r3, [r7, #4]
90004ff4:	681b      	ldr	r3, [r3, #0]
90004ff6:	78fa      	ldrb	r2, [r7, #3]
90004ff8:	4611      	mov	r1, r2
90004ffa:	4618      	mov	r0, r3
90004ffc:	f006 f9c2 	bl	9000b384 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90005000:	78fa      	ldrb	r2, [r7, #3]
90005002:	6879      	ldr	r1, [r7, #4]
90005004:	4613      	mov	r3, r2
90005006:	011b      	lsls	r3, r3, #4
90005008:	1a9b      	subs	r3, r3, r2
9000500a:	009b      	lsls	r3, r3, #2
9000500c:	440b      	add	r3, r1
9000500e:	3344      	adds	r3, #68	@ 0x44
90005010:	2200      	movs	r2, #0
90005012:	601a      	str	r2, [r3, #0]
90005014:	e3f9      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90005016:	687b      	ldr	r3, [r7, #4]
90005018:	681b      	ldr	r3, [r3, #0]
9000501a:	78fa      	ldrb	r2, [r7, #3]
9000501c:	4611      	mov	r1, r2
9000501e:	4618      	mov	r0, r3
90005020:	f006 f933 	bl	9000b28a <USB_ReadChInterrupts>
90005024:	4603      	mov	r3, r0
90005026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000502a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000502e:	d111      	bne.n	90005054 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90005030:	78fb      	ldrb	r3, [r7, #3]
90005032:	015a      	lsls	r2, r3, #5
90005034:	693b      	ldr	r3, [r7, #16]
90005036:	4413      	add	r3, r2
90005038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000503c:	461a      	mov	r2, r3
9000503e:	f44f 7300 	mov.w	r3, #512	@ 0x200
90005042:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005044:	687b      	ldr	r3, [r7, #4]
90005046:	681b      	ldr	r3, [r3, #0]
90005048:	78fa      	ldrb	r2, [r7, #3]
9000504a:	4611      	mov	r1, r2
9000504c:	4618      	mov	r0, r3
9000504e:	f006 f999 	bl	9000b384 <USB_HC_Halt>
90005052:	e3da      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90005054:	687b      	ldr	r3, [r7, #4]
90005056:	681b      	ldr	r3, [r3, #0]
90005058:	78fa      	ldrb	r2, [r7, #3]
9000505a:	4611      	mov	r1, r2
9000505c:	4618      	mov	r0, r3
9000505e:	f006 f914 	bl	9000b28a <USB_ReadChInterrupts>
90005062:	4603      	mov	r3, r0
90005064:	f003 0301 	and.w	r3, r3, #1
90005068:	2b01      	cmp	r3, #1
9000506a:	d168      	bne.n	9000513e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
9000506c:	78fa      	ldrb	r2, [r7, #3]
9000506e:	6879      	ldr	r1, [r7, #4]
90005070:	4613      	mov	r3, r2
90005072:	011b      	lsls	r3, r3, #4
90005074:	1a9b      	subs	r3, r3, r2
90005076:	009b      	lsls	r3, r3, #2
90005078:	440b      	add	r3, r1
9000507a:	3344      	adds	r3, #68	@ 0x44
9000507c:	2200      	movs	r2, #0
9000507e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005080:	687b      	ldr	r3, [r7, #4]
90005082:	681b      	ldr	r3, [r3, #0]
90005084:	78fa      	ldrb	r2, [r7, #3]
90005086:	4611      	mov	r1, r2
90005088:	4618      	mov	r0, r3
9000508a:	f006 f8fe 	bl	9000b28a <USB_ReadChInterrupts>
9000508e:	4603      	mov	r3, r0
90005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005094:	2b40      	cmp	r3, #64	@ 0x40
90005096:	d112      	bne.n	900050be <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005098:	78fa      	ldrb	r2, [r7, #3]
9000509a:	6879      	ldr	r1, [r7, #4]
9000509c:	4613      	mov	r3, r2
9000509e:	011b      	lsls	r3, r3, #4
900050a0:	1a9b      	subs	r3, r3, r2
900050a2:	009b      	lsls	r3, r3, #2
900050a4:	440b      	add	r3, r1
900050a6:	3319      	adds	r3, #25
900050a8:	2201      	movs	r2, #1
900050aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
900050ac:	78fb      	ldrb	r3, [r7, #3]
900050ae:	015a      	lsls	r2, r3, #5
900050b0:	693b      	ldr	r3, [r7, #16]
900050b2:	4413      	add	r3, r2
900050b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050b8:	461a      	mov	r2, r3
900050ba:	2340      	movs	r3, #64	@ 0x40
900050bc:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
900050be:	78fa      	ldrb	r2, [r7, #3]
900050c0:	6879      	ldr	r1, [r7, #4]
900050c2:	4613      	mov	r3, r2
900050c4:	011b      	lsls	r3, r3, #4
900050c6:	1a9b      	subs	r3, r3, r2
900050c8:	009b      	lsls	r3, r3, #2
900050ca:	440b      	add	r3, r1
900050cc:	331b      	adds	r3, #27
900050ce:	781b      	ldrb	r3, [r3, #0]
900050d0:	2b00      	cmp	r3, #0
900050d2:	d019      	beq.n	90005108 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900050d4:	78fa      	ldrb	r2, [r7, #3]
900050d6:	6879      	ldr	r1, [r7, #4]
900050d8:	4613      	mov	r3, r2
900050da:	011b      	lsls	r3, r3, #4
900050dc:	1a9b      	subs	r3, r3, r2
900050de:	009b      	lsls	r3, r3, #2
900050e0:	440b      	add	r3, r1
900050e2:	331b      	adds	r3, #27
900050e4:	2200      	movs	r2, #0
900050e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900050e8:	78fb      	ldrb	r3, [r7, #3]
900050ea:	015a      	lsls	r2, r3, #5
900050ec:	693b      	ldr	r3, [r7, #16]
900050ee:	4413      	add	r3, r2
900050f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050f4:	685b      	ldr	r3, [r3, #4]
900050f6:	78fa      	ldrb	r2, [r7, #3]
900050f8:	0151      	lsls	r1, r2, #5
900050fa:	693a      	ldr	r2, [r7, #16]
900050fc:	440a      	add	r2, r1
900050fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005106:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90005108:	78fb      	ldrb	r3, [r7, #3]
9000510a:	015a      	lsls	r2, r3, #5
9000510c:	693b      	ldr	r3, [r7, #16]
9000510e:	4413      	add	r3, r2
90005110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005114:	461a      	mov	r2, r3
90005116:	2301      	movs	r3, #1
90005118:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
9000511a:	78fa      	ldrb	r2, [r7, #3]
9000511c:	6879      	ldr	r1, [r7, #4]
9000511e:	4613      	mov	r3, r2
90005120:	011b      	lsls	r3, r3, #4
90005122:	1a9b      	subs	r3, r3, r2
90005124:	009b      	lsls	r3, r3, #2
90005126:	440b      	add	r3, r1
90005128:	334d      	adds	r3, #77	@ 0x4d
9000512a:	2201      	movs	r2, #1
9000512c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000512e:	687b      	ldr	r3, [r7, #4]
90005130:	681b      	ldr	r3, [r3, #0]
90005132:	78fa      	ldrb	r2, [r7, #3]
90005134:	4611      	mov	r1, r2
90005136:	4618      	mov	r0, r3
90005138:	f006 f924 	bl	9000b384 <USB_HC_Halt>
9000513c:	e365      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
9000513e:	687b      	ldr	r3, [r7, #4]
90005140:	681b      	ldr	r3, [r3, #0]
90005142:	78fa      	ldrb	r2, [r7, #3]
90005144:	4611      	mov	r1, r2
90005146:	4618      	mov	r0, r3
90005148:	f006 f89f 	bl	9000b28a <USB_ReadChInterrupts>
9000514c:	4603      	mov	r3, r0
9000514e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005152:	2b40      	cmp	r3, #64	@ 0x40
90005154:	d139      	bne.n	900051ca <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
90005156:	78fa      	ldrb	r2, [r7, #3]
90005158:	6879      	ldr	r1, [r7, #4]
9000515a:	4613      	mov	r3, r2
9000515c:	011b      	lsls	r3, r3, #4
9000515e:	1a9b      	subs	r3, r3, r2
90005160:	009b      	lsls	r3, r3, #2
90005162:	440b      	add	r3, r1
90005164:	334d      	adds	r3, #77	@ 0x4d
90005166:	2205      	movs	r2, #5
90005168:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
9000516a:	78fa      	ldrb	r2, [r7, #3]
9000516c:	6879      	ldr	r1, [r7, #4]
9000516e:	4613      	mov	r3, r2
90005170:	011b      	lsls	r3, r3, #4
90005172:	1a9b      	subs	r3, r3, r2
90005174:	009b      	lsls	r3, r3, #2
90005176:	440b      	add	r3, r1
90005178:	331a      	adds	r3, #26
9000517a:	781b      	ldrb	r3, [r3, #0]
9000517c:	2b00      	cmp	r3, #0
9000517e:	d109      	bne.n	90005194 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005180:	78fa      	ldrb	r2, [r7, #3]
90005182:	6879      	ldr	r1, [r7, #4]
90005184:	4613      	mov	r3, r2
90005186:	011b      	lsls	r3, r3, #4
90005188:	1a9b      	subs	r3, r3, r2
9000518a:	009b      	lsls	r3, r3, #2
9000518c:	440b      	add	r3, r1
9000518e:	3319      	adds	r3, #25
90005190:	2201      	movs	r2, #1
90005192:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005194:	78fa      	ldrb	r2, [r7, #3]
90005196:	6879      	ldr	r1, [r7, #4]
90005198:	4613      	mov	r3, r2
9000519a:	011b      	lsls	r3, r3, #4
9000519c:	1a9b      	subs	r3, r3, r2
9000519e:	009b      	lsls	r3, r3, #2
900051a0:	440b      	add	r3, r1
900051a2:	3344      	adds	r3, #68	@ 0x44
900051a4:	2200      	movs	r2, #0
900051a6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900051a8:	687b      	ldr	r3, [r7, #4]
900051aa:	681b      	ldr	r3, [r3, #0]
900051ac:	78fa      	ldrb	r2, [r7, #3]
900051ae:	4611      	mov	r1, r2
900051b0:	4618      	mov	r0, r3
900051b2:	f006 f8e7 	bl	9000b384 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
900051b6:	78fb      	ldrb	r3, [r7, #3]
900051b8:	015a      	lsls	r2, r3, #5
900051ba:	693b      	ldr	r3, [r7, #16]
900051bc:	4413      	add	r3, r2
900051be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051c2:	461a      	mov	r2, r3
900051c4:	2340      	movs	r3, #64	@ 0x40
900051c6:	6093      	str	r3, [r2, #8]
900051c8:	e31f      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900051ca:	687b      	ldr	r3, [r7, #4]
900051cc:	681b      	ldr	r3, [r3, #0]
900051ce:	78fa      	ldrb	r2, [r7, #3]
900051d0:	4611      	mov	r1, r2
900051d2:	4618      	mov	r0, r3
900051d4:	f006 f859 	bl	9000b28a <USB_ReadChInterrupts>
900051d8:	4603      	mov	r3, r0
900051da:	f003 0308 	and.w	r3, r3, #8
900051de:	2b08      	cmp	r3, #8
900051e0:	d11a      	bne.n	90005218 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900051e2:	78fb      	ldrb	r3, [r7, #3]
900051e4:	015a      	lsls	r2, r3, #5
900051e6:	693b      	ldr	r3, [r7, #16]
900051e8:	4413      	add	r3, r2
900051ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051ee:	461a      	mov	r2, r3
900051f0:	2308      	movs	r3, #8
900051f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900051f4:	78fa      	ldrb	r2, [r7, #3]
900051f6:	6879      	ldr	r1, [r7, #4]
900051f8:	4613      	mov	r3, r2
900051fa:	011b      	lsls	r3, r3, #4
900051fc:	1a9b      	subs	r3, r3, r2
900051fe:	009b      	lsls	r3, r3, #2
90005200:	440b      	add	r3, r1
90005202:	334d      	adds	r3, #77	@ 0x4d
90005204:	2206      	movs	r2, #6
90005206:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005208:	687b      	ldr	r3, [r7, #4]
9000520a:	681b      	ldr	r3, [r3, #0]
9000520c:	78fa      	ldrb	r2, [r7, #3]
9000520e:	4611      	mov	r1, r2
90005210:	4618      	mov	r0, r3
90005212:	f006 f8b7 	bl	9000b384 <USB_HC_Halt>
90005216:	e2f8      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90005218:	687b      	ldr	r3, [r7, #4]
9000521a:	681b      	ldr	r3, [r3, #0]
9000521c:	78fa      	ldrb	r2, [r7, #3]
9000521e:	4611      	mov	r1, r2
90005220:	4618      	mov	r0, r3
90005222:	f006 f832 	bl	9000b28a <USB_ReadChInterrupts>
90005226:	4603      	mov	r3, r0
90005228:	f003 0310 	and.w	r3, r3, #16
9000522c:	2b10      	cmp	r3, #16
9000522e:	d144      	bne.n	900052ba <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005230:	78fa      	ldrb	r2, [r7, #3]
90005232:	6879      	ldr	r1, [r7, #4]
90005234:	4613      	mov	r3, r2
90005236:	011b      	lsls	r3, r3, #4
90005238:	1a9b      	subs	r3, r3, r2
9000523a:	009b      	lsls	r3, r3, #2
9000523c:	440b      	add	r3, r1
9000523e:	3344      	adds	r3, #68	@ 0x44
90005240:	2200      	movs	r2, #0
90005242:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90005244:	78fa      	ldrb	r2, [r7, #3]
90005246:	6879      	ldr	r1, [r7, #4]
90005248:	4613      	mov	r3, r2
9000524a:	011b      	lsls	r3, r3, #4
9000524c:	1a9b      	subs	r3, r3, r2
9000524e:	009b      	lsls	r3, r3, #2
90005250:	440b      	add	r3, r1
90005252:	334d      	adds	r3, #77	@ 0x4d
90005254:	2204      	movs	r2, #4
90005256:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90005258:	78fa      	ldrb	r2, [r7, #3]
9000525a:	6879      	ldr	r1, [r7, #4]
9000525c:	4613      	mov	r3, r2
9000525e:	011b      	lsls	r3, r3, #4
90005260:	1a9b      	subs	r3, r3, r2
90005262:	009b      	lsls	r3, r3, #2
90005264:	440b      	add	r3, r1
90005266:	3319      	adds	r3, #25
90005268:	781b      	ldrb	r3, [r3, #0]
9000526a:	2b00      	cmp	r3, #0
9000526c:	d114      	bne.n	90005298 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
9000526e:	78fa      	ldrb	r2, [r7, #3]
90005270:	6879      	ldr	r1, [r7, #4]
90005272:	4613      	mov	r3, r2
90005274:	011b      	lsls	r3, r3, #4
90005276:	1a9b      	subs	r3, r3, r2
90005278:	009b      	lsls	r3, r3, #2
9000527a:	440b      	add	r3, r1
9000527c:	3318      	adds	r3, #24
9000527e:	781b      	ldrb	r3, [r3, #0]
90005280:	2b00      	cmp	r3, #0
90005282:	d109      	bne.n	90005298 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
90005284:	78fa      	ldrb	r2, [r7, #3]
90005286:	6879      	ldr	r1, [r7, #4]
90005288:	4613      	mov	r3, r2
9000528a:	011b      	lsls	r3, r3, #4
9000528c:	1a9b      	subs	r3, r3, r2
9000528e:	009b      	lsls	r3, r3, #2
90005290:	440b      	add	r3, r1
90005292:	3319      	adds	r3, #25
90005294:	2201      	movs	r2, #1
90005296:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005298:	687b      	ldr	r3, [r7, #4]
9000529a:	681b      	ldr	r3, [r3, #0]
9000529c:	78fa      	ldrb	r2, [r7, #3]
9000529e:	4611      	mov	r1, r2
900052a0:	4618      	mov	r0, r3
900052a2:	f006 f86f 	bl	9000b384 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900052a6:	78fb      	ldrb	r3, [r7, #3]
900052a8:	015a      	lsls	r2, r3, #5
900052aa:	693b      	ldr	r3, [r7, #16]
900052ac:	4413      	add	r3, r2
900052ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900052b2:	461a      	mov	r2, r3
900052b4:	2310      	movs	r3, #16
900052b6:	6093      	str	r3, [r2, #8]
900052b8:	e2a7      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
900052ba:	687b      	ldr	r3, [r7, #4]
900052bc:	681b      	ldr	r3, [r3, #0]
900052be:	78fa      	ldrb	r2, [r7, #3]
900052c0:	4611      	mov	r1, r2
900052c2:	4618      	mov	r0, r3
900052c4:	f005 ffe1 	bl	9000b28a <USB_ReadChInterrupts>
900052c8:	4603      	mov	r3, r0
900052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900052ce:	2b80      	cmp	r3, #128	@ 0x80
900052d0:	f040 8083 	bne.w	900053da <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
900052d4:	687b      	ldr	r3, [r7, #4]
900052d6:	799b      	ldrb	r3, [r3, #6]
900052d8:	2b00      	cmp	r3, #0
900052da:	d111      	bne.n	90005300 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
900052dc:	78fa      	ldrb	r2, [r7, #3]
900052de:	6879      	ldr	r1, [r7, #4]
900052e0:	4613      	mov	r3, r2
900052e2:	011b      	lsls	r3, r3, #4
900052e4:	1a9b      	subs	r3, r3, r2
900052e6:	009b      	lsls	r3, r3, #2
900052e8:	440b      	add	r3, r1
900052ea:	334d      	adds	r3, #77	@ 0x4d
900052ec:	2207      	movs	r2, #7
900052ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900052f0:	687b      	ldr	r3, [r7, #4]
900052f2:	681b      	ldr	r3, [r3, #0]
900052f4:	78fa      	ldrb	r2, [r7, #3]
900052f6:	4611      	mov	r1, r2
900052f8:	4618      	mov	r0, r3
900052fa:	f006 f843 	bl	9000b384 <USB_HC_Halt>
900052fe:	e062      	b.n	900053c6 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005300:	78fa      	ldrb	r2, [r7, #3]
90005302:	6879      	ldr	r1, [r7, #4]
90005304:	4613      	mov	r3, r2
90005306:	011b      	lsls	r3, r3, #4
90005308:	1a9b      	subs	r3, r3, r2
9000530a:	009b      	lsls	r3, r3, #2
9000530c:	440b      	add	r3, r1
9000530e:	3344      	adds	r3, #68	@ 0x44
90005310:	681b      	ldr	r3, [r3, #0]
90005312:	1c59      	adds	r1, r3, #1
90005314:	6878      	ldr	r0, [r7, #4]
90005316:	4613      	mov	r3, r2
90005318:	011b      	lsls	r3, r3, #4
9000531a:	1a9b      	subs	r3, r3, r2
9000531c:	009b      	lsls	r3, r3, #2
9000531e:	4403      	add	r3, r0
90005320:	3344      	adds	r3, #68	@ 0x44
90005322:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005324:	78fa      	ldrb	r2, [r7, #3]
90005326:	6879      	ldr	r1, [r7, #4]
90005328:	4613      	mov	r3, r2
9000532a:	011b      	lsls	r3, r3, #4
9000532c:	1a9b      	subs	r3, r3, r2
9000532e:	009b      	lsls	r3, r3, #2
90005330:	440b      	add	r3, r1
90005332:	3344      	adds	r3, #68	@ 0x44
90005334:	681b      	ldr	r3, [r3, #0]
90005336:	2b02      	cmp	r3, #2
90005338:	d922      	bls.n	90005380 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
9000533a:	78fa      	ldrb	r2, [r7, #3]
9000533c:	6879      	ldr	r1, [r7, #4]
9000533e:	4613      	mov	r3, r2
90005340:	011b      	lsls	r3, r3, #4
90005342:	1a9b      	subs	r3, r3, r2
90005344:	009b      	lsls	r3, r3, #2
90005346:	440b      	add	r3, r1
90005348:	3344      	adds	r3, #68	@ 0x44
9000534a:	2200      	movs	r2, #0
9000534c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
9000534e:	78fa      	ldrb	r2, [r7, #3]
90005350:	6879      	ldr	r1, [r7, #4]
90005352:	4613      	mov	r3, r2
90005354:	011b      	lsls	r3, r3, #4
90005356:	1a9b      	subs	r3, r3, r2
90005358:	009b      	lsls	r3, r3, #2
9000535a:	440b      	add	r3, r1
9000535c:	334c      	adds	r3, #76	@ 0x4c
9000535e:	2204      	movs	r2, #4
90005360:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005362:	78fa      	ldrb	r2, [r7, #3]
90005364:	6879      	ldr	r1, [r7, #4]
90005366:	4613      	mov	r3, r2
90005368:	011b      	lsls	r3, r3, #4
9000536a:	1a9b      	subs	r3, r3, r2
9000536c:	009b      	lsls	r3, r3, #2
9000536e:	440b      	add	r3, r1
90005370:	334c      	adds	r3, #76	@ 0x4c
90005372:	781a      	ldrb	r2, [r3, #0]
90005374:	78fb      	ldrb	r3, [r7, #3]
90005376:	4619      	mov	r1, r3
90005378:	6878      	ldr	r0, [r7, #4]
9000537a:	f7fb ff0b 	bl	90001194 <HAL_HCD_HC_NotifyURBChange_Callback>
9000537e:	e022      	b.n	900053c6 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005380:	78fa      	ldrb	r2, [r7, #3]
90005382:	6879      	ldr	r1, [r7, #4]
90005384:	4613      	mov	r3, r2
90005386:	011b      	lsls	r3, r3, #4
90005388:	1a9b      	subs	r3, r3, r2
9000538a:	009b      	lsls	r3, r3, #2
9000538c:	440b      	add	r3, r1
9000538e:	334c      	adds	r3, #76	@ 0x4c
90005390:	2202      	movs	r2, #2
90005392:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005394:	78fb      	ldrb	r3, [r7, #3]
90005396:	015a      	lsls	r2, r3, #5
90005398:	693b      	ldr	r3, [r7, #16]
9000539a:	4413      	add	r3, r2
9000539c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053a0:	681b      	ldr	r3, [r3, #0]
900053a2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900053a4:	68fb      	ldr	r3, [r7, #12]
900053a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900053aa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
900053ac:	68fb      	ldr	r3, [r7, #12]
900053ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900053b2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
900053b4:	78fb      	ldrb	r3, [r7, #3]
900053b6:	015a      	lsls	r2, r3, #5
900053b8:	693b      	ldr	r3, [r7, #16]
900053ba:	4413      	add	r3, r2
900053bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053c0:	461a      	mov	r2, r3
900053c2:	68fb      	ldr	r3, [r7, #12]
900053c4:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900053c6:	78fb      	ldrb	r3, [r7, #3]
900053c8:	015a      	lsls	r2, r3, #5
900053ca:	693b      	ldr	r3, [r7, #16]
900053cc:	4413      	add	r3, r2
900053ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053d2:	461a      	mov	r2, r3
900053d4:	2380      	movs	r3, #128	@ 0x80
900053d6:	6093      	str	r3, [r2, #8]
900053d8:	e217      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900053da:	687b      	ldr	r3, [r7, #4]
900053dc:	681b      	ldr	r3, [r3, #0]
900053de:	78fa      	ldrb	r2, [r7, #3]
900053e0:	4611      	mov	r1, r2
900053e2:	4618      	mov	r0, r3
900053e4:	f005 ff51 	bl	9000b28a <USB_ReadChInterrupts>
900053e8:	4603      	mov	r3, r0
900053ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900053ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900053f2:	d11b      	bne.n	9000542c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
900053f4:	78fa      	ldrb	r2, [r7, #3]
900053f6:	6879      	ldr	r1, [r7, #4]
900053f8:	4613      	mov	r3, r2
900053fa:	011b      	lsls	r3, r3, #4
900053fc:	1a9b      	subs	r3, r3, r2
900053fe:	009b      	lsls	r3, r3, #2
90005400:	440b      	add	r3, r1
90005402:	334d      	adds	r3, #77	@ 0x4d
90005404:	2209      	movs	r2, #9
90005406:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005408:	687b      	ldr	r3, [r7, #4]
9000540a:	681b      	ldr	r3, [r3, #0]
9000540c:	78fa      	ldrb	r2, [r7, #3]
9000540e:	4611      	mov	r1, r2
90005410:	4618      	mov	r0, r3
90005412:	f005 ffb7 	bl	9000b384 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90005416:	78fb      	ldrb	r3, [r7, #3]
90005418:	015a      	lsls	r2, r3, #5
9000541a:	693b      	ldr	r3, [r7, #16]
9000541c:	4413      	add	r3, r2
9000541e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005422:	461a      	mov	r2, r3
90005424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005428:	6093      	str	r3, [r2, #8]
9000542a:	e1ee      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000542c:	687b      	ldr	r3, [r7, #4]
9000542e:	681b      	ldr	r3, [r3, #0]
90005430:	78fa      	ldrb	r2, [r7, #3]
90005432:	4611      	mov	r1, r2
90005434:	4618      	mov	r0, r3
90005436:	f005 ff28 	bl	9000b28a <USB_ReadChInterrupts>
9000543a:	4603      	mov	r3, r0
9000543c:	f003 0302 	and.w	r3, r3, #2
90005440:	2b02      	cmp	r3, #2
90005442:	f040 81df 	bne.w	90005804 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005446:	78fb      	ldrb	r3, [r7, #3]
90005448:	015a      	lsls	r2, r3, #5
9000544a:	693b      	ldr	r3, [r7, #16]
9000544c:	4413      	add	r3, r2
9000544e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005452:	461a      	mov	r2, r3
90005454:	2302      	movs	r3, #2
90005456:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005458:	78fa      	ldrb	r2, [r7, #3]
9000545a:	6879      	ldr	r1, [r7, #4]
9000545c:	4613      	mov	r3, r2
9000545e:	011b      	lsls	r3, r3, #4
90005460:	1a9b      	subs	r3, r3, r2
90005462:	009b      	lsls	r3, r3, #2
90005464:	440b      	add	r3, r1
90005466:	334d      	adds	r3, #77	@ 0x4d
90005468:	781b      	ldrb	r3, [r3, #0]
9000546a:	2b01      	cmp	r3, #1
9000546c:	f040 8093 	bne.w	90005596 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005470:	78fa      	ldrb	r2, [r7, #3]
90005472:	6879      	ldr	r1, [r7, #4]
90005474:	4613      	mov	r3, r2
90005476:	011b      	lsls	r3, r3, #4
90005478:	1a9b      	subs	r3, r3, r2
9000547a:	009b      	lsls	r3, r3, #2
9000547c:	440b      	add	r3, r1
9000547e:	334d      	adds	r3, #77	@ 0x4d
90005480:	2202      	movs	r2, #2
90005482:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90005484:	78fa      	ldrb	r2, [r7, #3]
90005486:	6879      	ldr	r1, [r7, #4]
90005488:	4613      	mov	r3, r2
9000548a:	011b      	lsls	r3, r3, #4
9000548c:	1a9b      	subs	r3, r3, r2
9000548e:	009b      	lsls	r3, r3, #2
90005490:	440b      	add	r3, r1
90005492:	334c      	adds	r3, #76	@ 0x4c
90005494:	2201      	movs	r2, #1
90005496:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005498:	78fa      	ldrb	r2, [r7, #3]
9000549a:	6879      	ldr	r1, [r7, #4]
9000549c:	4613      	mov	r3, r2
9000549e:	011b      	lsls	r3, r3, #4
900054a0:	1a9b      	subs	r3, r3, r2
900054a2:	009b      	lsls	r3, r3, #2
900054a4:	440b      	add	r3, r1
900054a6:	3326      	adds	r3, #38	@ 0x26
900054a8:	781b      	ldrb	r3, [r3, #0]
900054aa:	2b02      	cmp	r3, #2
900054ac:	d00b      	beq.n	900054c6 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
900054ae:	78fa      	ldrb	r2, [r7, #3]
900054b0:	6879      	ldr	r1, [r7, #4]
900054b2:	4613      	mov	r3, r2
900054b4:	011b      	lsls	r3, r3, #4
900054b6:	1a9b      	subs	r3, r3, r2
900054b8:	009b      	lsls	r3, r3, #2
900054ba:	440b      	add	r3, r1
900054bc:	3326      	adds	r3, #38	@ 0x26
900054be:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900054c0:	2b03      	cmp	r3, #3
900054c2:	f040 8190 	bne.w	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
900054c6:	687b      	ldr	r3, [r7, #4]
900054c8:	799b      	ldrb	r3, [r3, #6]
900054ca:	2b00      	cmp	r3, #0
900054cc:	d115      	bne.n	900054fa <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
900054ce:	78fa      	ldrb	r2, [r7, #3]
900054d0:	6879      	ldr	r1, [r7, #4]
900054d2:	4613      	mov	r3, r2
900054d4:	011b      	lsls	r3, r3, #4
900054d6:	1a9b      	subs	r3, r3, r2
900054d8:	009b      	lsls	r3, r3, #2
900054da:	440b      	add	r3, r1
900054dc:	333d      	adds	r3, #61	@ 0x3d
900054de:	781b      	ldrb	r3, [r3, #0]
900054e0:	78fa      	ldrb	r2, [r7, #3]
900054e2:	f083 0301 	eor.w	r3, r3, #1
900054e6:	b2d8      	uxtb	r0, r3
900054e8:	6879      	ldr	r1, [r7, #4]
900054ea:	4613      	mov	r3, r2
900054ec:	011b      	lsls	r3, r3, #4
900054ee:	1a9b      	subs	r3, r3, r2
900054f0:	009b      	lsls	r3, r3, #2
900054f2:	440b      	add	r3, r1
900054f4:	333d      	adds	r3, #61	@ 0x3d
900054f6:	4602      	mov	r2, r0
900054f8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
900054fa:	687b      	ldr	r3, [r7, #4]
900054fc:	799b      	ldrb	r3, [r3, #6]
900054fe:	2b01      	cmp	r3, #1
90005500:	f040 8171 	bne.w	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
90005504:	78fa      	ldrb	r2, [r7, #3]
90005506:	6879      	ldr	r1, [r7, #4]
90005508:	4613      	mov	r3, r2
9000550a:	011b      	lsls	r3, r3, #4
9000550c:	1a9b      	subs	r3, r3, r2
9000550e:	009b      	lsls	r3, r3, #2
90005510:	440b      	add	r3, r1
90005512:	3334      	adds	r3, #52	@ 0x34
90005514:	681b      	ldr	r3, [r3, #0]
90005516:	2b00      	cmp	r3, #0
90005518:	f000 8165 	beq.w	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
9000551c:	78fa      	ldrb	r2, [r7, #3]
9000551e:	6879      	ldr	r1, [r7, #4]
90005520:	4613      	mov	r3, r2
90005522:	011b      	lsls	r3, r3, #4
90005524:	1a9b      	subs	r3, r3, r2
90005526:	009b      	lsls	r3, r3, #2
90005528:	440b      	add	r3, r1
9000552a:	3334      	adds	r3, #52	@ 0x34
9000552c:	6819      	ldr	r1, [r3, #0]
9000552e:	78fa      	ldrb	r2, [r7, #3]
90005530:	6878      	ldr	r0, [r7, #4]
90005532:	4613      	mov	r3, r2
90005534:	011b      	lsls	r3, r3, #4
90005536:	1a9b      	subs	r3, r3, r2
90005538:	009b      	lsls	r3, r3, #2
9000553a:	4403      	add	r3, r0
9000553c:	3328      	adds	r3, #40	@ 0x28
9000553e:	881b      	ldrh	r3, [r3, #0]
90005540:	440b      	add	r3, r1
90005542:	1e59      	subs	r1, r3, #1
90005544:	78fa      	ldrb	r2, [r7, #3]
90005546:	6878      	ldr	r0, [r7, #4]
90005548:	4613      	mov	r3, r2
9000554a:	011b      	lsls	r3, r3, #4
9000554c:	1a9b      	subs	r3, r3, r2
9000554e:	009b      	lsls	r3, r3, #2
90005550:	4403      	add	r3, r0
90005552:	3328      	adds	r3, #40	@ 0x28
90005554:	881b      	ldrh	r3, [r3, #0]
90005556:	fbb1 f3f3 	udiv	r3, r1, r3
9000555a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
9000555c:	68bb      	ldr	r3, [r7, #8]
9000555e:	f003 0301 	and.w	r3, r3, #1
90005562:	2b00      	cmp	r3, #0
90005564:	f000 813f 	beq.w	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005568:	78fa      	ldrb	r2, [r7, #3]
9000556a:	6879      	ldr	r1, [r7, #4]
9000556c:	4613      	mov	r3, r2
9000556e:	011b      	lsls	r3, r3, #4
90005570:	1a9b      	subs	r3, r3, r2
90005572:	009b      	lsls	r3, r3, #2
90005574:	440b      	add	r3, r1
90005576:	333d      	adds	r3, #61	@ 0x3d
90005578:	781b      	ldrb	r3, [r3, #0]
9000557a:	78fa      	ldrb	r2, [r7, #3]
9000557c:	f083 0301 	eor.w	r3, r3, #1
90005580:	b2d8      	uxtb	r0, r3
90005582:	6879      	ldr	r1, [r7, #4]
90005584:	4613      	mov	r3, r2
90005586:	011b      	lsls	r3, r3, #4
90005588:	1a9b      	subs	r3, r3, r2
9000558a:	009b      	lsls	r3, r3, #2
9000558c:	440b      	add	r3, r1
9000558e:	333d      	adds	r3, #61	@ 0x3d
90005590:	4602      	mov	r2, r0
90005592:	701a      	strb	r2, [r3, #0]
90005594:	e127      	b.n	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005596:	78fa      	ldrb	r2, [r7, #3]
90005598:	6879      	ldr	r1, [r7, #4]
9000559a:	4613      	mov	r3, r2
9000559c:	011b      	lsls	r3, r3, #4
9000559e:	1a9b      	subs	r3, r3, r2
900055a0:	009b      	lsls	r3, r3, #2
900055a2:	440b      	add	r3, r1
900055a4:	334d      	adds	r3, #77	@ 0x4d
900055a6:	781b      	ldrb	r3, [r3, #0]
900055a8:	2b03      	cmp	r3, #3
900055aa:	d120      	bne.n	900055ee <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900055ac:	78fa      	ldrb	r2, [r7, #3]
900055ae:	6879      	ldr	r1, [r7, #4]
900055b0:	4613      	mov	r3, r2
900055b2:	011b      	lsls	r3, r3, #4
900055b4:	1a9b      	subs	r3, r3, r2
900055b6:	009b      	lsls	r3, r3, #2
900055b8:	440b      	add	r3, r1
900055ba:	334d      	adds	r3, #77	@ 0x4d
900055bc:	2202      	movs	r2, #2
900055be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900055c0:	78fa      	ldrb	r2, [r7, #3]
900055c2:	6879      	ldr	r1, [r7, #4]
900055c4:	4613      	mov	r3, r2
900055c6:	011b      	lsls	r3, r3, #4
900055c8:	1a9b      	subs	r3, r3, r2
900055ca:	009b      	lsls	r3, r3, #2
900055cc:	440b      	add	r3, r1
900055ce:	331b      	adds	r3, #27
900055d0:	781b      	ldrb	r3, [r3, #0]
900055d2:	2b01      	cmp	r3, #1
900055d4:	f040 8107 	bne.w	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900055d8:	78fa      	ldrb	r2, [r7, #3]
900055da:	6879      	ldr	r1, [r7, #4]
900055dc:	4613      	mov	r3, r2
900055de:	011b      	lsls	r3, r3, #4
900055e0:	1a9b      	subs	r3, r3, r2
900055e2:	009b      	lsls	r3, r3, #2
900055e4:	440b      	add	r3, r1
900055e6:	334c      	adds	r3, #76	@ 0x4c
900055e8:	2202      	movs	r2, #2
900055ea:	701a      	strb	r2, [r3, #0]
900055ec:	e0fb      	b.n	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
900055ee:	78fa      	ldrb	r2, [r7, #3]
900055f0:	6879      	ldr	r1, [r7, #4]
900055f2:	4613      	mov	r3, r2
900055f4:	011b      	lsls	r3, r3, #4
900055f6:	1a9b      	subs	r3, r3, r2
900055f8:	009b      	lsls	r3, r3, #2
900055fa:	440b      	add	r3, r1
900055fc:	334d      	adds	r3, #77	@ 0x4d
900055fe:	781b      	ldrb	r3, [r3, #0]
90005600:	2b04      	cmp	r3, #4
90005602:	d13a      	bne.n	9000567a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005604:	78fa      	ldrb	r2, [r7, #3]
90005606:	6879      	ldr	r1, [r7, #4]
90005608:	4613      	mov	r3, r2
9000560a:	011b      	lsls	r3, r3, #4
9000560c:	1a9b      	subs	r3, r3, r2
9000560e:	009b      	lsls	r3, r3, #2
90005610:	440b      	add	r3, r1
90005612:	334d      	adds	r3, #77	@ 0x4d
90005614:	2202      	movs	r2, #2
90005616:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005618:	78fa      	ldrb	r2, [r7, #3]
9000561a:	6879      	ldr	r1, [r7, #4]
9000561c:	4613      	mov	r3, r2
9000561e:	011b      	lsls	r3, r3, #4
90005620:	1a9b      	subs	r3, r3, r2
90005622:	009b      	lsls	r3, r3, #2
90005624:	440b      	add	r3, r1
90005626:	334c      	adds	r3, #76	@ 0x4c
90005628:	2202      	movs	r2, #2
9000562a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000562c:	78fa      	ldrb	r2, [r7, #3]
9000562e:	6879      	ldr	r1, [r7, #4]
90005630:	4613      	mov	r3, r2
90005632:	011b      	lsls	r3, r3, #4
90005634:	1a9b      	subs	r3, r3, r2
90005636:	009b      	lsls	r3, r3, #2
90005638:	440b      	add	r3, r1
9000563a:	331b      	adds	r3, #27
9000563c:	781b      	ldrb	r3, [r3, #0]
9000563e:	2b01      	cmp	r3, #1
90005640:	f040 80d1 	bne.w	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
90005644:	78fa      	ldrb	r2, [r7, #3]
90005646:	6879      	ldr	r1, [r7, #4]
90005648:	4613      	mov	r3, r2
9000564a:	011b      	lsls	r3, r3, #4
9000564c:	1a9b      	subs	r3, r3, r2
9000564e:	009b      	lsls	r3, r3, #2
90005650:	440b      	add	r3, r1
90005652:	331b      	adds	r3, #27
90005654:	2200      	movs	r2, #0
90005656:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005658:	78fb      	ldrb	r3, [r7, #3]
9000565a:	015a      	lsls	r2, r3, #5
9000565c:	693b      	ldr	r3, [r7, #16]
9000565e:	4413      	add	r3, r2
90005660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005664:	685b      	ldr	r3, [r3, #4]
90005666:	78fa      	ldrb	r2, [r7, #3]
90005668:	0151      	lsls	r1, r2, #5
9000566a:	693a      	ldr	r2, [r7, #16]
9000566c:	440a      	add	r2, r1
9000566e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005676:	6053      	str	r3, [r2, #4]
90005678:	e0b5      	b.n	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000567a:	78fa      	ldrb	r2, [r7, #3]
9000567c:	6879      	ldr	r1, [r7, #4]
9000567e:	4613      	mov	r3, r2
90005680:	011b      	lsls	r3, r3, #4
90005682:	1a9b      	subs	r3, r3, r2
90005684:	009b      	lsls	r3, r3, #2
90005686:	440b      	add	r3, r1
90005688:	334d      	adds	r3, #77	@ 0x4d
9000568a:	781b      	ldrb	r3, [r3, #0]
9000568c:	2b05      	cmp	r3, #5
9000568e:	d114      	bne.n	900056ba <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005690:	78fa      	ldrb	r2, [r7, #3]
90005692:	6879      	ldr	r1, [r7, #4]
90005694:	4613      	mov	r3, r2
90005696:	011b      	lsls	r3, r3, #4
90005698:	1a9b      	subs	r3, r3, r2
9000569a:	009b      	lsls	r3, r3, #2
9000569c:	440b      	add	r3, r1
9000569e:	334d      	adds	r3, #77	@ 0x4d
900056a0:	2202      	movs	r2, #2
900056a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
900056a4:	78fa      	ldrb	r2, [r7, #3]
900056a6:	6879      	ldr	r1, [r7, #4]
900056a8:	4613      	mov	r3, r2
900056aa:	011b      	lsls	r3, r3, #4
900056ac:	1a9b      	subs	r3, r3, r2
900056ae:	009b      	lsls	r3, r3, #2
900056b0:	440b      	add	r3, r1
900056b2:	334c      	adds	r3, #76	@ 0x4c
900056b4:	2202      	movs	r2, #2
900056b6:	701a      	strb	r2, [r3, #0]
900056b8:	e095      	b.n	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
900056ba:	78fa      	ldrb	r2, [r7, #3]
900056bc:	6879      	ldr	r1, [r7, #4]
900056be:	4613      	mov	r3, r2
900056c0:	011b      	lsls	r3, r3, #4
900056c2:	1a9b      	subs	r3, r3, r2
900056c4:	009b      	lsls	r3, r3, #2
900056c6:	440b      	add	r3, r1
900056c8:	334d      	adds	r3, #77	@ 0x4d
900056ca:	781b      	ldrb	r3, [r3, #0]
900056cc:	2b06      	cmp	r3, #6
900056ce:	d114      	bne.n	900056fa <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900056d0:	78fa      	ldrb	r2, [r7, #3]
900056d2:	6879      	ldr	r1, [r7, #4]
900056d4:	4613      	mov	r3, r2
900056d6:	011b      	lsls	r3, r3, #4
900056d8:	1a9b      	subs	r3, r3, r2
900056da:	009b      	lsls	r3, r3, #2
900056dc:	440b      	add	r3, r1
900056de:	334d      	adds	r3, #77	@ 0x4d
900056e0:	2202      	movs	r2, #2
900056e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
900056e4:	78fa      	ldrb	r2, [r7, #3]
900056e6:	6879      	ldr	r1, [r7, #4]
900056e8:	4613      	mov	r3, r2
900056ea:	011b      	lsls	r3, r3, #4
900056ec:	1a9b      	subs	r3, r3, r2
900056ee:	009b      	lsls	r3, r3, #2
900056f0:	440b      	add	r3, r1
900056f2:	334c      	adds	r3, #76	@ 0x4c
900056f4:	2205      	movs	r2, #5
900056f6:	701a      	strb	r2, [r3, #0]
900056f8:	e075      	b.n	900057e6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900056fa:	78fa      	ldrb	r2, [r7, #3]
900056fc:	6879      	ldr	r1, [r7, #4]
900056fe:	4613      	mov	r3, r2
90005700:	011b      	lsls	r3, r3, #4
90005702:	1a9b      	subs	r3, r3, r2
90005704:	009b      	lsls	r3, r3, #2
90005706:	440b      	add	r3, r1
90005708:	334d      	adds	r3, #77	@ 0x4d
9000570a:	781b      	ldrb	r3, [r3, #0]
9000570c:	2b07      	cmp	r3, #7
9000570e:	d00a      	beq.n	90005726 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90005710:	78fa      	ldrb	r2, [r7, #3]
90005712:	6879      	ldr	r1, [r7, #4]
90005714:	4613      	mov	r3, r2
90005716:	011b      	lsls	r3, r3, #4
90005718:	1a9b      	subs	r3, r3, r2
9000571a:	009b      	lsls	r3, r3, #2
9000571c:	440b      	add	r3, r1
9000571e:	334d      	adds	r3, #77	@ 0x4d
90005720:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005722:	2b09      	cmp	r3, #9
90005724:	d170      	bne.n	90005808 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005726:	78fa      	ldrb	r2, [r7, #3]
90005728:	6879      	ldr	r1, [r7, #4]
9000572a:	4613      	mov	r3, r2
9000572c:	011b      	lsls	r3, r3, #4
9000572e:	1a9b      	subs	r3, r3, r2
90005730:	009b      	lsls	r3, r3, #2
90005732:	440b      	add	r3, r1
90005734:	334d      	adds	r3, #77	@ 0x4d
90005736:	2202      	movs	r2, #2
90005738:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
9000573a:	78fa      	ldrb	r2, [r7, #3]
9000573c:	6879      	ldr	r1, [r7, #4]
9000573e:	4613      	mov	r3, r2
90005740:	011b      	lsls	r3, r3, #4
90005742:	1a9b      	subs	r3, r3, r2
90005744:	009b      	lsls	r3, r3, #2
90005746:	440b      	add	r3, r1
90005748:	3344      	adds	r3, #68	@ 0x44
9000574a:	681b      	ldr	r3, [r3, #0]
9000574c:	1c59      	adds	r1, r3, #1
9000574e:	6878      	ldr	r0, [r7, #4]
90005750:	4613      	mov	r3, r2
90005752:	011b      	lsls	r3, r3, #4
90005754:	1a9b      	subs	r3, r3, r2
90005756:	009b      	lsls	r3, r3, #2
90005758:	4403      	add	r3, r0
9000575a:	3344      	adds	r3, #68	@ 0x44
9000575c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000575e:	78fa      	ldrb	r2, [r7, #3]
90005760:	6879      	ldr	r1, [r7, #4]
90005762:	4613      	mov	r3, r2
90005764:	011b      	lsls	r3, r3, #4
90005766:	1a9b      	subs	r3, r3, r2
90005768:	009b      	lsls	r3, r3, #2
9000576a:	440b      	add	r3, r1
9000576c:	3344      	adds	r3, #68	@ 0x44
9000576e:	681b      	ldr	r3, [r3, #0]
90005770:	2b02      	cmp	r3, #2
90005772:	d914      	bls.n	9000579e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005774:	78fa      	ldrb	r2, [r7, #3]
90005776:	6879      	ldr	r1, [r7, #4]
90005778:	4613      	mov	r3, r2
9000577a:	011b      	lsls	r3, r3, #4
9000577c:	1a9b      	subs	r3, r3, r2
9000577e:	009b      	lsls	r3, r3, #2
90005780:	440b      	add	r3, r1
90005782:	3344      	adds	r3, #68	@ 0x44
90005784:	2200      	movs	r2, #0
90005786:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005788:	78fa      	ldrb	r2, [r7, #3]
9000578a:	6879      	ldr	r1, [r7, #4]
9000578c:	4613      	mov	r3, r2
9000578e:	011b      	lsls	r3, r3, #4
90005790:	1a9b      	subs	r3, r3, r2
90005792:	009b      	lsls	r3, r3, #2
90005794:	440b      	add	r3, r1
90005796:	334c      	adds	r3, #76	@ 0x4c
90005798:	2204      	movs	r2, #4
9000579a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000579c:	e022      	b.n	900057e4 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000579e:	78fa      	ldrb	r2, [r7, #3]
900057a0:	6879      	ldr	r1, [r7, #4]
900057a2:	4613      	mov	r3, r2
900057a4:	011b      	lsls	r3, r3, #4
900057a6:	1a9b      	subs	r3, r3, r2
900057a8:	009b      	lsls	r3, r3, #2
900057aa:	440b      	add	r3, r1
900057ac:	334c      	adds	r3, #76	@ 0x4c
900057ae:	2202      	movs	r2, #2
900057b0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
900057b2:	78fb      	ldrb	r3, [r7, #3]
900057b4:	015a      	lsls	r2, r3, #5
900057b6:	693b      	ldr	r3, [r7, #16]
900057b8:	4413      	add	r3, r2
900057ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057be:	681b      	ldr	r3, [r3, #0]
900057c0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900057c2:	68fb      	ldr	r3, [r7, #12]
900057c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900057c8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
900057ca:	68fb      	ldr	r3, [r7, #12]
900057cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900057d0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
900057d2:	78fb      	ldrb	r3, [r7, #3]
900057d4:	015a      	lsls	r2, r3, #5
900057d6:	693b      	ldr	r3, [r7, #16]
900057d8:	4413      	add	r3, r2
900057da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057de:	461a      	mov	r2, r3
900057e0:	68fb      	ldr	r3, [r7, #12]
900057e2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900057e4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900057e6:	78fa      	ldrb	r2, [r7, #3]
900057e8:	6879      	ldr	r1, [r7, #4]
900057ea:	4613      	mov	r3, r2
900057ec:	011b      	lsls	r3, r3, #4
900057ee:	1a9b      	subs	r3, r3, r2
900057f0:	009b      	lsls	r3, r3, #2
900057f2:	440b      	add	r3, r1
900057f4:	334c      	adds	r3, #76	@ 0x4c
900057f6:	781a      	ldrb	r2, [r3, #0]
900057f8:	78fb      	ldrb	r3, [r7, #3]
900057fa:	4619      	mov	r1, r3
900057fc:	6878      	ldr	r0, [r7, #4]
900057fe:	f7fb fcc9 	bl	90001194 <HAL_HCD_HC_NotifyURBChange_Callback>
90005802:	e002      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90005804:	bf00      	nop
90005806:	e000      	b.n	9000580a <HCD_HC_OUT_IRQHandler+0x978>
      return;
90005808:	bf00      	nop
  }
}
9000580a:	3718      	adds	r7, #24
9000580c:	46bd      	mov	sp, r7
9000580e:	bd80      	pop	{r7, pc}

90005810 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005810:	b580      	push	{r7, lr}
90005812:	b08a      	sub	sp, #40	@ 0x28
90005814:	af00      	add	r7, sp, #0
90005816:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005818:	687b      	ldr	r3, [r7, #4]
9000581a:	681b      	ldr	r3, [r3, #0]
9000581c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
9000581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005820:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005822:	687b      	ldr	r3, [r7, #4]
90005824:	681b      	ldr	r3, [r3, #0]
90005826:	6a1b      	ldr	r3, [r3, #32]
90005828:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
9000582a:	69fb      	ldr	r3, [r7, #28]
9000582c:	f003 030f 	and.w	r3, r3, #15
90005830:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90005832:	69fb      	ldr	r3, [r7, #28]
90005834:	0c5b      	lsrs	r3, r3, #17
90005836:	f003 030f 	and.w	r3, r3, #15
9000583a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
9000583c:	69fb      	ldr	r3, [r7, #28]
9000583e:	091b      	lsrs	r3, r3, #4
90005840:	f3c3 030a 	ubfx	r3, r3, #0, #11
90005844:	613b      	str	r3, [r7, #16]

  switch (pktsts)
90005846:	697b      	ldr	r3, [r7, #20]
90005848:	2b02      	cmp	r3, #2
9000584a:	d004      	beq.n	90005856 <HCD_RXQLVL_IRQHandler+0x46>
9000584c:	697b      	ldr	r3, [r7, #20]
9000584e:	2b05      	cmp	r3, #5
90005850:	f000 80b6 	beq.w	900059c0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
90005854:	e0b7      	b.n	900059c6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
90005856:	693b      	ldr	r3, [r7, #16]
90005858:	2b00      	cmp	r3, #0
9000585a:	f000 80b3 	beq.w	900059c4 <HCD_RXQLVL_IRQHandler+0x1b4>
9000585e:	6879      	ldr	r1, [r7, #4]
90005860:	69ba      	ldr	r2, [r7, #24]
90005862:	4613      	mov	r3, r2
90005864:	011b      	lsls	r3, r3, #4
90005866:	1a9b      	subs	r3, r3, r2
90005868:	009b      	lsls	r3, r3, #2
9000586a:	440b      	add	r3, r1
9000586c:	332c      	adds	r3, #44	@ 0x2c
9000586e:	681b      	ldr	r3, [r3, #0]
90005870:	2b00      	cmp	r3, #0
90005872:	f000 80a7 	beq.w	900059c4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
90005876:	6879      	ldr	r1, [r7, #4]
90005878:	69ba      	ldr	r2, [r7, #24]
9000587a:	4613      	mov	r3, r2
9000587c:	011b      	lsls	r3, r3, #4
9000587e:	1a9b      	subs	r3, r3, r2
90005880:	009b      	lsls	r3, r3, #2
90005882:	440b      	add	r3, r1
90005884:	3338      	adds	r3, #56	@ 0x38
90005886:	681a      	ldr	r2, [r3, #0]
90005888:	693b      	ldr	r3, [r7, #16]
9000588a:	18d1      	adds	r1, r2, r3
9000588c:	6878      	ldr	r0, [r7, #4]
9000588e:	69ba      	ldr	r2, [r7, #24]
90005890:	4613      	mov	r3, r2
90005892:	011b      	lsls	r3, r3, #4
90005894:	1a9b      	subs	r3, r3, r2
90005896:	009b      	lsls	r3, r3, #2
90005898:	4403      	add	r3, r0
9000589a:	3334      	adds	r3, #52	@ 0x34
9000589c:	681b      	ldr	r3, [r3, #0]
9000589e:	4299      	cmp	r1, r3
900058a0:	f200 8083 	bhi.w	900059aa <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
900058a4:	687b      	ldr	r3, [r7, #4]
900058a6:	6818      	ldr	r0, [r3, #0]
900058a8:	6879      	ldr	r1, [r7, #4]
900058aa:	69ba      	ldr	r2, [r7, #24]
900058ac:	4613      	mov	r3, r2
900058ae:	011b      	lsls	r3, r3, #4
900058b0:	1a9b      	subs	r3, r3, r2
900058b2:	009b      	lsls	r3, r3, #2
900058b4:	440b      	add	r3, r1
900058b6:	332c      	adds	r3, #44	@ 0x2c
900058b8:	681b      	ldr	r3, [r3, #0]
900058ba:	693a      	ldr	r2, [r7, #16]
900058bc:	b292      	uxth	r2, r2
900058be:	4619      	mov	r1, r3
900058c0:	f005 fc78 	bl	9000b1b4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
900058c4:	6879      	ldr	r1, [r7, #4]
900058c6:	69ba      	ldr	r2, [r7, #24]
900058c8:	4613      	mov	r3, r2
900058ca:	011b      	lsls	r3, r3, #4
900058cc:	1a9b      	subs	r3, r3, r2
900058ce:	009b      	lsls	r3, r3, #2
900058d0:	440b      	add	r3, r1
900058d2:	332c      	adds	r3, #44	@ 0x2c
900058d4:	681a      	ldr	r2, [r3, #0]
900058d6:	693b      	ldr	r3, [r7, #16]
900058d8:	18d1      	adds	r1, r2, r3
900058da:	6878      	ldr	r0, [r7, #4]
900058dc:	69ba      	ldr	r2, [r7, #24]
900058de:	4613      	mov	r3, r2
900058e0:	011b      	lsls	r3, r3, #4
900058e2:	1a9b      	subs	r3, r3, r2
900058e4:	009b      	lsls	r3, r3, #2
900058e6:	4403      	add	r3, r0
900058e8:	332c      	adds	r3, #44	@ 0x2c
900058ea:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
900058ec:	6879      	ldr	r1, [r7, #4]
900058ee:	69ba      	ldr	r2, [r7, #24]
900058f0:	4613      	mov	r3, r2
900058f2:	011b      	lsls	r3, r3, #4
900058f4:	1a9b      	subs	r3, r3, r2
900058f6:	009b      	lsls	r3, r3, #2
900058f8:	440b      	add	r3, r1
900058fa:	3338      	adds	r3, #56	@ 0x38
900058fc:	681a      	ldr	r2, [r3, #0]
900058fe:	693b      	ldr	r3, [r7, #16]
90005900:	18d1      	adds	r1, r2, r3
90005902:	6878      	ldr	r0, [r7, #4]
90005904:	69ba      	ldr	r2, [r7, #24]
90005906:	4613      	mov	r3, r2
90005908:	011b      	lsls	r3, r3, #4
9000590a:	1a9b      	subs	r3, r3, r2
9000590c:	009b      	lsls	r3, r3, #2
9000590e:	4403      	add	r3, r0
90005910:	3338      	adds	r3, #56	@ 0x38
90005912:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005914:	69bb      	ldr	r3, [r7, #24]
90005916:	015a      	lsls	r2, r3, #5
90005918:	6a3b      	ldr	r3, [r7, #32]
9000591a:	4413      	add	r3, r2
9000591c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005920:	691b      	ldr	r3, [r3, #16]
90005922:	0cdb      	lsrs	r3, r3, #19
90005924:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005928:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
9000592a:	6879      	ldr	r1, [r7, #4]
9000592c:	69ba      	ldr	r2, [r7, #24]
9000592e:	4613      	mov	r3, r2
90005930:	011b      	lsls	r3, r3, #4
90005932:	1a9b      	subs	r3, r3, r2
90005934:	009b      	lsls	r3, r3, #2
90005936:	440b      	add	r3, r1
90005938:	3328      	adds	r3, #40	@ 0x28
9000593a:	881b      	ldrh	r3, [r3, #0]
9000593c:	461a      	mov	r2, r3
9000593e:	693b      	ldr	r3, [r7, #16]
90005940:	4293      	cmp	r3, r2
90005942:	d13f      	bne.n	900059c4 <HCD_RXQLVL_IRQHandler+0x1b4>
90005944:	68fb      	ldr	r3, [r7, #12]
90005946:	2b00      	cmp	r3, #0
90005948:	d03c      	beq.n	900059c4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
9000594a:	69bb      	ldr	r3, [r7, #24]
9000594c:	015a      	lsls	r2, r3, #5
9000594e:	6a3b      	ldr	r3, [r7, #32]
90005950:	4413      	add	r3, r2
90005952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005956:	681b      	ldr	r3, [r3, #0]
90005958:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000595a:	68bb      	ldr	r3, [r7, #8]
9000595c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005960:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90005962:	68bb      	ldr	r3, [r7, #8]
90005964:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005968:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
9000596a:	69bb      	ldr	r3, [r7, #24]
9000596c:	015a      	lsls	r2, r3, #5
9000596e:	6a3b      	ldr	r3, [r7, #32]
90005970:	4413      	add	r3, r2
90005972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005976:	461a      	mov	r2, r3
90005978:	68bb      	ldr	r3, [r7, #8]
9000597a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
9000597c:	6879      	ldr	r1, [r7, #4]
9000597e:	69ba      	ldr	r2, [r7, #24]
90005980:	4613      	mov	r3, r2
90005982:	011b      	lsls	r3, r3, #4
90005984:	1a9b      	subs	r3, r3, r2
90005986:	009b      	lsls	r3, r3, #2
90005988:	440b      	add	r3, r1
9000598a:	333c      	adds	r3, #60	@ 0x3c
9000598c:	781b      	ldrb	r3, [r3, #0]
9000598e:	f083 0301 	eor.w	r3, r3, #1
90005992:	b2d8      	uxtb	r0, r3
90005994:	6879      	ldr	r1, [r7, #4]
90005996:	69ba      	ldr	r2, [r7, #24]
90005998:	4613      	mov	r3, r2
9000599a:	011b      	lsls	r3, r3, #4
9000599c:	1a9b      	subs	r3, r3, r2
9000599e:	009b      	lsls	r3, r3, #2
900059a0:	440b      	add	r3, r1
900059a2:	333c      	adds	r3, #60	@ 0x3c
900059a4:	4602      	mov	r2, r0
900059a6:	701a      	strb	r2, [r3, #0]
      break;
900059a8:	e00c      	b.n	900059c4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
900059aa:	6879      	ldr	r1, [r7, #4]
900059ac:	69ba      	ldr	r2, [r7, #24]
900059ae:	4613      	mov	r3, r2
900059b0:	011b      	lsls	r3, r3, #4
900059b2:	1a9b      	subs	r3, r3, r2
900059b4:	009b      	lsls	r3, r3, #2
900059b6:	440b      	add	r3, r1
900059b8:	334c      	adds	r3, #76	@ 0x4c
900059ba:	2204      	movs	r2, #4
900059bc:	701a      	strb	r2, [r3, #0]
      break;
900059be:	e001      	b.n	900059c4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
900059c0:	bf00      	nop
900059c2:	e000      	b.n	900059c6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
900059c4:	bf00      	nop
  }
}
900059c6:	bf00      	nop
900059c8:	3728      	adds	r7, #40	@ 0x28
900059ca:	46bd      	mov	sp, r7
900059cc:	bd80      	pop	{r7, pc}

900059ce <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900059ce:	b580      	push	{r7, lr}
900059d0:	b086      	sub	sp, #24
900059d2:	af00      	add	r7, sp, #0
900059d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900059d6:	687b      	ldr	r3, [r7, #4]
900059d8:	681b      	ldr	r3, [r3, #0]
900059da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900059dc:	697b      	ldr	r3, [r7, #20]
900059de:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
900059e0:	693b      	ldr	r3, [r7, #16]
900059e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900059e6:	681b      	ldr	r3, [r3, #0]
900059e8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
900059ea:	693b      	ldr	r3, [r7, #16]
900059ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900059f0:	681b      	ldr	r3, [r3, #0]
900059f2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
900059f4:	68bb      	ldr	r3, [r7, #8]
900059f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
900059fa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
900059fc:	68fb      	ldr	r3, [r7, #12]
900059fe:	f003 0302 	and.w	r3, r3, #2
90005a02:	2b02      	cmp	r3, #2
90005a04:	d10b      	bne.n	90005a1e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005a06:	68fb      	ldr	r3, [r7, #12]
90005a08:	f003 0301 	and.w	r3, r3, #1
90005a0c:	2b01      	cmp	r3, #1
90005a0e:	d102      	bne.n	90005a16 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005a10:	6878      	ldr	r0, [r7, #4]
90005a12:	f7fb fb87 	bl	90001124 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90005a16:	68bb      	ldr	r3, [r7, #8]
90005a18:	f043 0302 	orr.w	r3, r3, #2
90005a1c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005a1e:	68fb      	ldr	r3, [r7, #12]
90005a20:	f003 0308 	and.w	r3, r3, #8
90005a24:	2b08      	cmp	r3, #8
90005a26:	d132      	bne.n	90005a8e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005a28:	68bb      	ldr	r3, [r7, #8]
90005a2a:	f043 0308 	orr.w	r3, r3, #8
90005a2e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005a30:	68fb      	ldr	r3, [r7, #12]
90005a32:	f003 0304 	and.w	r3, r3, #4
90005a36:	2b04      	cmp	r3, #4
90005a38:	d126      	bne.n	90005a88 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005a3a:	687b      	ldr	r3, [r7, #4]
90005a3c:	7a5b      	ldrb	r3, [r3, #9]
90005a3e:	2b02      	cmp	r3, #2
90005a40:	d113      	bne.n	90005a6a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005a42:	68fb      	ldr	r3, [r7, #12]
90005a44:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90005a48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90005a4c:	d106      	bne.n	90005a5c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005a4e:	687b      	ldr	r3, [r7, #4]
90005a50:	681b      	ldr	r3, [r3, #0]
90005a52:	2102      	movs	r1, #2
90005a54:	4618      	mov	r0, r3
90005a56:	f005 fc47 	bl	9000b2e8 <USB_InitFSLSPClkSel>
90005a5a:	e011      	b.n	90005a80 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90005a5c:	687b      	ldr	r3, [r7, #4]
90005a5e:	681b      	ldr	r3, [r3, #0]
90005a60:	2101      	movs	r1, #1
90005a62:	4618      	mov	r0, r3
90005a64:	f005 fc40 	bl	9000b2e8 <USB_InitFSLSPClkSel>
90005a68:	e00a      	b.n	90005a80 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
90005a6a:	687b      	ldr	r3, [r7, #4]
90005a6c:	79db      	ldrb	r3, [r3, #7]
90005a6e:	2b01      	cmp	r3, #1
90005a70:	d106      	bne.n	90005a80 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90005a72:	693b      	ldr	r3, [r7, #16]
90005a74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005a78:	461a      	mov	r2, r3
90005a7a:	f64e 2360 	movw	r3, #60000	@ 0xea60
90005a7e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005a80:	6878      	ldr	r0, [r7, #4]
90005a82:	f7fb fb6b 	bl	9000115c <HAL_HCD_PortEnabled_Callback>
90005a86:	e002      	b.n	90005a8e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005a88:	6878      	ldr	r0, [r7, #4]
90005a8a:	f7fb fb75 	bl	90001178 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90005a8e:	68fb      	ldr	r3, [r7, #12]
90005a90:	f003 0320 	and.w	r3, r3, #32
90005a94:	2b20      	cmp	r3, #32
90005a96:	d103      	bne.n	90005aa0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005a98:	68bb      	ldr	r3, [r7, #8]
90005a9a:	f043 0320 	orr.w	r3, r3, #32
90005a9e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005aa0:	693b      	ldr	r3, [r7, #16]
90005aa2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005aa6:	461a      	mov	r2, r3
90005aa8:	68bb      	ldr	r3, [r7, #8]
90005aaa:	6013      	str	r3, [r2, #0]
}
90005aac:	bf00      	nop
90005aae:	3718      	adds	r7, #24
90005ab0:	46bd      	mov	sp, r7
90005ab2:	bd80      	pop	{r7, pc}

90005ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005ab4:	b580      	push	{r7, lr}
90005ab6:	b082      	sub	sp, #8
90005ab8:	af00      	add	r7, sp, #0
90005aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005abc:	687b      	ldr	r3, [r7, #4]
90005abe:	2b00      	cmp	r3, #0
90005ac0:	d101      	bne.n	90005ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005ac2:	2301      	movs	r3, #1
90005ac4:	e08b      	b.n	90005bde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005ac6:	687b      	ldr	r3, [r7, #4]
90005ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005acc:	b2db      	uxtb	r3, r3
90005ace:	2b00      	cmp	r3, #0
90005ad0:	d106      	bne.n	90005ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005ad2:	687b      	ldr	r3, [r7, #4]
90005ad4:	2200      	movs	r2, #0
90005ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005ada:	6878      	ldr	r0, [r7, #4]
90005adc:	f000 f886 	bl	90005bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005ae0:	687b      	ldr	r3, [r7, #4]
90005ae2:	2224      	movs	r2, #36	@ 0x24
90005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005ae8:	687b      	ldr	r3, [r7, #4]
90005aea:	681b      	ldr	r3, [r3, #0]
90005aec:	681a      	ldr	r2, [r3, #0]
90005aee:	687b      	ldr	r3, [r7, #4]
90005af0:	681b      	ldr	r3, [r3, #0]
90005af2:	f022 0201 	bic.w	r2, r2, #1
90005af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005af8:	687b      	ldr	r3, [r7, #4]
90005afa:	685a      	ldr	r2, [r3, #4]
90005afc:	687b      	ldr	r3, [r7, #4]
90005afe:	681b      	ldr	r3, [r3, #0]
90005b00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005b06:	687b      	ldr	r3, [r7, #4]
90005b08:	681b      	ldr	r3, [r3, #0]
90005b0a:	689a      	ldr	r2, [r3, #8]
90005b0c:	687b      	ldr	r3, [r7, #4]
90005b0e:	681b      	ldr	r3, [r3, #0]
90005b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005b16:	687b      	ldr	r3, [r7, #4]
90005b18:	68db      	ldr	r3, [r3, #12]
90005b1a:	2b01      	cmp	r3, #1
90005b1c:	d107      	bne.n	90005b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005b1e:	687b      	ldr	r3, [r7, #4]
90005b20:	689a      	ldr	r2, [r3, #8]
90005b22:	687b      	ldr	r3, [r7, #4]
90005b24:	681b      	ldr	r3, [r3, #0]
90005b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005b2a:	609a      	str	r2, [r3, #8]
90005b2c:	e006      	b.n	90005b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005b2e:	687b      	ldr	r3, [r7, #4]
90005b30:	689a      	ldr	r2, [r3, #8]
90005b32:	687b      	ldr	r3, [r7, #4]
90005b34:	681b      	ldr	r3, [r3, #0]
90005b36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005b3c:	687b      	ldr	r3, [r7, #4]
90005b3e:	68db      	ldr	r3, [r3, #12]
90005b40:	2b02      	cmp	r3, #2
90005b42:	d108      	bne.n	90005b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005b44:	687b      	ldr	r3, [r7, #4]
90005b46:	681b      	ldr	r3, [r3, #0]
90005b48:	685a      	ldr	r2, [r3, #4]
90005b4a:	687b      	ldr	r3, [r7, #4]
90005b4c:	681b      	ldr	r3, [r3, #0]
90005b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005b52:	605a      	str	r2, [r3, #4]
90005b54:	e007      	b.n	90005b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005b56:	687b      	ldr	r3, [r7, #4]
90005b58:	681b      	ldr	r3, [r3, #0]
90005b5a:	685a      	ldr	r2, [r3, #4]
90005b5c:	687b      	ldr	r3, [r7, #4]
90005b5e:	681b      	ldr	r3, [r3, #0]
90005b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005b66:	687b      	ldr	r3, [r7, #4]
90005b68:	681b      	ldr	r3, [r3, #0]
90005b6a:	6859      	ldr	r1, [r3, #4]
90005b6c:	687b      	ldr	r3, [r7, #4]
90005b6e:	681a      	ldr	r2, [r3, #0]
90005b70:	4b1d      	ldr	r3, [pc, #116]	@ (90005be8 <HAL_I2C_Init+0x134>)
90005b72:	430b      	orrs	r3, r1
90005b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005b76:	687b      	ldr	r3, [r7, #4]
90005b78:	681b      	ldr	r3, [r3, #0]
90005b7a:	68da      	ldr	r2, [r3, #12]
90005b7c:	687b      	ldr	r3, [r7, #4]
90005b7e:	681b      	ldr	r3, [r3, #0]
90005b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005b86:	687b      	ldr	r3, [r7, #4]
90005b88:	691a      	ldr	r2, [r3, #16]
90005b8a:	687b      	ldr	r3, [r7, #4]
90005b8c:	695b      	ldr	r3, [r3, #20]
90005b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005b92:	687b      	ldr	r3, [r7, #4]
90005b94:	699b      	ldr	r3, [r3, #24]
90005b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005b98:	687b      	ldr	r3, [r7, #4]
90005b9a:	681b      	ldr	r3, [r3, #0]
90005b9c:	430a      	orrs	r2, r1
90005b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005ba0:	687b      	ldr	r3, [r7, #4]
90005ba2:	69d9      	ldr	r1, [r3, #28]
90005ba4:	687b      	ldr	r3, [r7, #4]
90005ba6:	6a1a      	ldr	r2, [r3, #32]
90005ba8:	687b      	ldr	r3, [r7, #4]
90005baa:	681b      	ldr	r3, [r3, #0]
90005bac:	430a      	orrs	r2, r1
90005bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005bb0:	687b      	ldr	r3, [r7, #4]
90005bb2:	681b      	ldr	r3, [r3, #0]
90005bb4:	681a      	ldr	r2, [r3, #0]
90005bb6:	687b      	ldr	r3, [r7, #4]
90005bb8:	681b      	ldr	r3, [r3, #0]
90005bba:	f042 0201 	orr.w	r2, r2, #1
90005bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005bc0:	687b      	ldr	r3, [r7, #4]
90005bc2:	2200      	movs	r2, #0
90005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005bc6:	687b      	ldr	r3, [r7, #4]
90005bc8:	2220      	movs	r2, #32
90005bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005bce:	687b      	ldr	r3, [r7, #4]
90005bd0:	2200      	movs	r2, #0
90005bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005bd4:	687b      	ldr	r3, [r7, #4]
90005bd6:	2200      	movs	r2, #0
90005bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005bdc:	2300      	movs	r3, #0
}
90005bde:	4618      	mov	r0, r3
90005be0:	3708      	adds	r7, #8
90005be2:	46bd      	mov	sp, r7
90005be4:	bd80      	pop	{r7, pc}
90005be6:	bf00      	nop
90005be8:	02008000 	.word	0x02008000

90005bec <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005bec:	b480      	push	{r7}
90005bee:	b083      	sub	sp, #12
90005bf0:	af00      	add	r7, sp, #0
90005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005bf4:	bf00      	nop
90005bf6:	370c      	adds	r7, #12
90005bf8:	46bd      	mov	sp, r7
90005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
90005bfe:	4770      	bx	lr

90005c00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005c00:	b580      	push	{r7, lr}
90005c02:	b088      	sub	sp, #32
90005c04:	af02      	add	r7, sp, #8
90005c06:	60f8      	str	r0, [r7, #12]
90005c08:	4608      	mov	r0, r1
90005c0a:	4611      	mov	r1, r2
90005c0c:	461a      	mov	r2, r3
90005c0e:	4603      	mov	r3, r0
90005c10:	817b      	strh	r3, [r7, #10]
90005c12:	460b      	mov	r3, r1
90005c14:	813b      	strh	r3, [r7, #8]
90005c16:	4613      	mov	r3, r2
90005c18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005c1a:	68fb      	ldr	r3, [r7, #12]
90005c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005c20:	b2db      	uxtb	r3, r3
90005c22:	2b20      	cmp	r3, #32
90005c24:	f040 80fd 	bne.w	90005e22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005c28:	6a3b      	ldr	r3, [r7, #32]
90005c2a:	2b00      	cmp	r3, #0
90005c2c:	d002      	beq.n	90005c34 <HAL_I2C_Mem_Read+0x34>
90005c2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005c30:	2b00      	cmp	r3, #0
90005c32:	d105      	bne.n	90005c40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005c34:	68fb      	ldr	r3, [r7, #12]
90005c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005c3a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005c3c:	2301      	movs	r3, #1
90005c3e:	e0f1      	b.n	90005e24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005c40:	68fb      	ldr	r3, [r7, #12]
90005c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005c46:	2b01      	cmp	r3, #1
90005c48:	d101      	bne.n	90005c4e <HAL_I2C_Mem_Read+0x4e>
90005c4a:	2302      	movs	r3, #2
90005c4c:	e0ea      	b.n	90005e24 <HAL_I2C_Mem_Read+0x224>
90005c4e:	68fb      	ldr	r3, [r7, #12]
90005c50:	2201      	movs	r2, #1
90005c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005c56:	f7fd fafb 	bl	90003250 <HAL_GetTick>
90005c5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005c5c:	697b      	ldr	r3, [r7, #20]
90005c5e:	9300      	str	r3, [sp, #0]
90005c60:	2319      	movs	r3, #25
90005c62:	2201      	movs	r2, #1
90005c64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005c68:	68f8      	ldr	r0, [r7, #12]
90005c6a:	f000 f975 	bl	90005f58 <I2C_WaitOnFlagUntilTimeout>
90005c6e:	4603      	mov	r3, r0
90005c70:	2b00      	cmp	r3, #0
90005c72:	d001      	beq.n	90005c78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005c74:	2301      	movs	r3, #1
90005c76:	e0d5      	b.n	90005e24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005c78:	68fb      	ldr	r3, [r7, #12]
90005c7a:	2222      	movs	r2, #34	@ 0x22
90005c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005c80:	68fb      	ldr	r3, [r7, #12]
90005c82:	2240      	movs	r2, #64	@ 0x40
90005c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005c88:	68fb      	ldr	r3, [r7, #12]
90005c8a:	2200      	movs	r2, #0
90005c8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005c8e:	68fb      	ldr	r3, [r7, #12]
90005c90:	6a3a      	ldr	r2, [r7, #32]
90005c92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005c94:	68fb      	ldr	r3, [r7, #12]
90005c96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005c9a:	68fb      	ldr	r3, [r7, #12]
90005c9c:	2200      	movs	r2, #0
90005c9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005ca0:	88f8      	ldrh	r0, [r7, #6]
90005ca2:	893a      	ldrh	r2, [r7, #8]
90005ca4:	8979      	ldrh	r1, [r7, #10]
90005ca6:	697b      	ldr	r3, [r7, #20]
90005ca8:	9301      	str	r3, [sp, #4]
90005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005cac:	9300      	str	r3, [sp, #0]
90005cae:	4603      	mov	r3, r0
90005cb0:	68f8      	ldr	r0, [r7, #12]
90005cb2:	f000 f8d9 	bl	90005e68 <I2C_RequestMemoryRead>
90005cb6:	4603      	mov	r3, r0
90005cb8:	2b00      	cmp	r3, #0
90005cba:	d005      	beq.n	90005cc8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005cbc:	68fb      	ldr	r3, [r7, #12]
90005cbe:	2200      	movs	r2, #0
90005cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005cc4:	2301      	movs	r3, #1
90005cc6:	e0ad      	b.n	90005e24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005cc8:	68fb      	ldr	r3, [r7, #12]
90005cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ccc:	b29b      	uxth	r3, r3
90005cce:	2bff      	cmp	r3, #255	@ 0xff
90005cd0:	d90e      	bls.n	90005cf0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005cd2:	68fb      	ldr	r3, [r7, #12]
90005cd4:	22ff      	movs	r2, #255	@ 0xff
90005cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005cd8:	68fb      	ldr	r3, [r7, #12]
90005cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005cdc:	b2da      	uxtb	r2, r3
90005cde:	8979      	ldrh	r1, [r7, #10]
90005ce0:	4b52      	ldr	r3, [pc, #328]	@ (90005e2c <HAL_I2C_Mem_Read+0x22c>)
90005ce2:	9300      	str	r3, [sp, #0]
90005ce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005ce8:	68f8      	ldr	r0, [r7, #12]
90005cea:	f000 faf9 	bl	900062e0 <I2C_TransferConfig>
90005cee:	e00f      	b.n	90005d10 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005cf0:	68fb      	ldr	r3, [r7, #12]
90005cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005cf4:	b29a      	uxth	r2, r3
90005cf6:	68fb      	ldr	r3, [r7, #12]
90005cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005cfa:	68fb      	ldr	r3, [r7, #12]
90005cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005cfe:	b2da      	uxtb	r2, r3
90005d00:	8979      	ldrh	r1, [r7, #10]
90005d02:	4b4a      	ldr	r3, [pc, #296]	@ (90005e2c <HAL_I2C_Mem_Read+0x22c>)
90005d04:	9300      	str	r3, [sp, #0]
90005d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005d0a:	68f8      	ldr	r0, [r7, #12]
90005d0c:	f000 fae8 	bl	900062e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005d10:	697b      	ldr	r3, [r7, #20]
90005d12:	9300      	str	r3, [sp, #0]
90005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005d16:	2200      	movs	r2, #0
90005d18:	2104      	movs	r1, #4
90005d1a:	68f8      	ldr	r0, [r7, #12]
90005d1c:	f000 f91c 	bl	90005f58 <I2C_WaitOnFlagUntilTimeout>
90005d20:	4603      	mov	r3, r0
90005d22:	2b00      	cmp	r3, #0
90005d24:	d001      	beq.n	90005d2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005d26:	2301      	movs	r3, #1
90005d28:	e07c      	b.n	90005e24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005d2a:	68fb      	ldr	r3, [r7, #12]
90005d2c:	681b      	ldr	r3, [r3, #0]
90005d2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005d30:	68fb      	ldr	r3, [r7, #12]
90005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005d34:	b2d2      	uxtb	r2, r2
90005d36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005d38:	68fb      	ldr	r3, [r7, #12]
90005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005d3c:	1c5a      	adds	r2, r3, #1
90005d3e:	68fb      	ldr	r3, [r7, #12]
90005d40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005d42:	68fb      	ldr	r3, [r7, #12]
90005d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d46:	3b01      	subs	r3, #1
90005d48:	b29a      	uxth	r2, r3
90005d4a:	68fb      	ldr	r3, [r7, #12]
90005d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005d4e:	68fb      	ldr	r3, [r7, #12]
90005d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d52:	b29b      	uxth	r3, r3
90005d54:	3b01      	subs	r3, #1
90005d56:	b29a      	uxth	r2, r3
90005d58:	68fb      	ldr	r3, [r7, #12]
90005d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005d5c:	68fb      	ldr	r3, [r7, #12]
90005d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d60:	b29b      	uxth	r3, r3
90005d62:	2b00      	cmp	r3, #0
90005d64:	d034      	beq.n	90005dd0 <HAL_I2C_Mem_Read+0x1d0>
90005d66:	68fb      	ldr	r3, [r7, #12]
90005d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d6a:	2b00      	cmp	r3, #0
90005d6c:	d130      	bne.n	90005dd0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005d6e:	697b      	ldr	r3, [r7, #20]
90005d70:	9300      	str	r3, [sp, #0]
90005d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005d74:	2200      	movs	r2, #0
90005d76:	2180      	movs	r1, #128	@ 0x80
90005d78:	68f8      	ldr	r0, [r7, #12]
90005d7a:	f000 f8ed 	bl	90005f58 <I2C_WaitOnFlagUntilTimeout>
90005d7e:	4603      	mov	r3, r0
90005d80:	2b00      	cmp	r3, #0
90005d82:	d001      	beq.n	90005d88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005d84:	2301      	movs	r3, #1
90005d86:	e04d      	b.n	90005e24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005d88:	68fb      	ldr	r3, [r7, #12]
90005d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d8c:	b29b      	uxth	r3, r3
90005d8e:	2bff      	cmp	r3, #255	@ 0xff
90005d90:	d90e      	bls.n	90005db0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005d92:	68fb      	ldr	r3, [r7, #12]
90005d94:	22ff      	movs	r2, #255	@ 0xff
90005d96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005d98:	68fb      	ldr	r3, [r7, #12]
90005d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d9c:	b2da      	uxtb	r2, r3
90005d9e:	8979      	ldrh	r1, [r7, #10]
90005da0:	2300      	movs	r3, #0
90005da2:	9300      	str	r3, [sp, #0]
90005da4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005da8:	68f8      	ldr	r0, [r7, #12]
90005daa:	f000 fa99 	bl	900062e0 <I2C_TransferConfig>
90005dae:	e00f      	b.n	90005dd0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005db0:	68fb      	ldr	r3, [r7, #12]
90005db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005db4:	b29a      	uxth	r2, r3
90005db6:	68fb      	ldr	r3, [r7, #12]
90005db8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005dba:	68fb      	ldr	r3, [r7, #12]
90005dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005dbe:	b2da      	uxtb	r2, r3
90005dc0:	8979      	ldrh	r1, [r7, #10]
90005dc2:	2300      	movs	r3, #0
90005dc4:	9300      	str	r3, [sp, #0]
90005dc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005dca:	68f8      	ldr	r0, [r7, #12]
90005dcc:	f000 fa88 	bl	900062e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005dd0:	68fb      	ldr	r3, [r7, #12]
90005dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005dd4:	b29b      	uxth	r3, r3
90005dd6:	2b00      	cmp	r3, #0
90005dd8:	d19a      	bne.n	90005d10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005dda:	697a      	ldr	r2, [r7, #20]
90005ddc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005dde:	68f8      	ldr	r0, [r7, #12]
90005de0:	f000 f95a 	bl	90006098 <I2C_WaitOnSTOPFlagUntilTimeout>
90005de4:	4603      	mov	r3, r0
90005de6:	2b00      	cmp	r3, #0
90005de8:	d001      	beq.n	90005dee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005dea:	2301      	movs	r3, #1
90005dec:	e01a      	b.n	90005e24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005dee:	68fb      	ldr	r3, [r7, #12]
90005df0:	681b      	ldr	r3, [r3, #0]
90005df2:	2220      	movs	r2, #32
90005df4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005df6:	68fb      	ldr	r3, [r7, #12]
90005df8:	681b      	ldr	r3, [r3, #0]
90005dfa:	6859      	ldr	r1, [r3, #4]
90005dfc:	68fb      	ldr	r3, [r7, #12]
90005dfe:	681a      	ldr	r2, [r3, #0]
90005e00:	4b0b      	ldr	r3, [pc, #44]	@ (90005e30 <HAL_I2C_Mem_Read+0x230>)
90005e02:	400b      	ands	r3, r1
90005e04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005e06:	68fb      	ldr	r3, [r7, #12]
90005e08:	2220      	movs	r2, #32
90005e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005e0e:	68fb      	ldr	r3, [r7, #12]
90005e10:	2200      	movs	r2, #0
90005e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005e16:	68fb      	ldr	r3, [r7, #12]
90005e18:	2200      	movs	r2, #0
90005e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005e1e:	2300      	movs	r3, #0
90005e20:	e000      	b.n	90005e24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005e22:	2302      	movs	r3, #2
  }
}
90005e24:	4618      	mov	r0, r3
90005e26:	3718      	adds	r7, #24
90005e28:	46bd      	mov	sp, r7
90005e2a:	bd80      	pop	{r7, pc}
90005e2c:	80002400 	.word	0x80002400
90005e30:	fe00e800 	.word	0xfe00e800

90005e34 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005e34:	b480      	push	{r7}
90005e36:	b083      	sub	sp, #12
90005e38:	af00      	add	r7, sp, #0
90005e3a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005e3c:	687b      	ldr	r3, [r7, #4]
90005e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005e42:	b2db      	uxtb	r3, r3
}
90005e44:	4618      	mov	r0, r3
90005e46:	370c      	adds	r7, #12
90005e48:	46bd      	mov	sp, r7
90005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005e4e:	4770      	bx	lr

90005e50 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005e50:	b480      	push	{r7}
90005e52:	b083      	sub	sp, #12
90005e54:	af00      	add	r7, sp, #0
90005e56:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005e58:	687b      	ldr	r3, [r7, #4]
90005e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005e5c:	4618      	mov	r0, r3
90005e5e:	370c      	adds	r7, #12
90005e60:	46bd      	mov	sp, r7
90005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
90005e66:	4770      	bx	lr

90005e68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005e68:	b580      	push	{r7, lr}
90005e6a:	b086      	sub	sp, #24
90005e6c:	af02      	add	r7, sp, #8
90005e6e:	60f8      	str	r0, [r7, #12]
90005e70:	4608      	mov	r0, r1
90005e72:	4611      	mov	r1, r2
90005e74:	461a      	mov	r2, r3
90005e76:	4603      	mov	r3, r0
90005e78:	817b      	strh	r3, [r7, #10]
90005e7a:	460b      	mov	r3, r1
90005e7c:	813b      	strh	r3, [r7, #8]
90005e7e:	4613      	mov	r3, r2
90005e80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005e82:	88fb      	ldrh	r3, [r7, #6]
90005e84:	b2da      	uxtb	r2, r3
90005e86:	8979      	ldrh	r1, [r7, #10]
90005e88:	4b20      	ldr	r3, [pc, #128]	@ (90005f0c <I2C_RequestMemoryRead+0xa4>)
90005e8a:	9300      	str	r3, [sp, #0]
90005e8c:	2300      	movs	r3, #0
90005e8e:	68f8      	ldr	r0, [r7, #12]
90005e90:	f000 fa26 	bl	900062e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005e94:	69fa      	ldr	r2, [r7, #28]
90005e96:	69b9      	ldr	r1, [r7, #24]
90005e98:	68f8      	ldr	r0, [r7, #12]
90005e9a:	f000 f8b6 	bl	9000600a <I2C_WaitOnTXISFlagUntilTimeout>
90005e9e:	4603      	mov	r3, r0
90005ea0:	2b00      	cmp	r3, #0
90005ea2:	d001      	beq.n	90005ea8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005ea4:	2301      	movs	r3, #1
90005ea6:	e02c      	b.n	90005f02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005ea8:	88fb      	ldrh	r3, [r7, #6]
90005eaa:	2b01      	cmp	r3, #1
90005eac:	d105      	bne.n	90005eba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005eae:	893b      	ldrh	r3, [r7, #8]
90005eb0:	b2da      	uxtb	r2, r3
90005eb2:	68fb      	ldr	r3, [r7, #12]
90005eb4:	681b      	ldr	r3, [r3, #0]
90005eb6:	629a      	str	r2, [r3, #40]	@ 0x28
90005eb8:	e015      	b.n	90005ee6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005eba:	893b      	ldrh	r3, [r7, #8]
90005ebc:	0a1b      	lsrs	r3, r3, #8
90005ebe:	b29b      	uxth	r3, r3
90005ec0:	b2da      	uxtb	r2, r3
90005ec2:	68fb      	ldr	r3, [r7, #12]
90005ec4:	681b      	ldr	r3, [r3, #0]
90005ec6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005ec8:	69fa      	ldr	r2, [r7, #28]
90005eca:	69b9      	ldr	r1, [r7, #24]
90005ecc:	68f8      	ldr	r0, [r7, #12]
90005ece:	f000 f89c 	bl	9000600a <I2C_WaitOnTXISFlagUntilTimeout>
90005ed2:	4603      	mov	r3, r0
90005ed4:	2b00      	cmp	r3, #0
90005ed6:	d001      	beq.n	90005edc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005ed8:	2301      	movs	r3, #1
90005eda:	e012      	b.n	90005f02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005edc:	893b      	ldrh	r3, [r7, #8]
90005ede:	b2da      	uxtb	r2, r3
90005ee0:	68fb      	ldr	r3, [r7, #12]
90005ee2:	681b      	ldr	r3, [r3, #0]
90005ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005ee6:	69fb      	ldr	r3, [r7, #28]
90005ee8:	9300      	str	r3, [sp, #0]
90005eea:	69bb      	ldr	r3, [r7, #24]
90005eec:	2200      	movs	r2, #0
90005eee:	2140      	movs	r1, #64	@ 0x40
90005ef0:	68f8      	ldr	r0, [r7, #12]
90005ef2:	f000 f831 	bl	90005f58 <I2C_WaitOnFlagUntilTimeout>
90005ef6:	4603      	mov	r3, r0
90005ef8:	2b00      	cmp	r3, #0
90005efa:	d001      	beq.n	90005f00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005efc:	2301      	movs	r3, #1
90005efe:	e000      	b.n	90005f02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005f00:	2300      	movs	r3, #0
}
90005f02:	4618      	mov	r0, r3
90005f04:	3710      	adds	r7, #16
90005f06:	46bd      	mov	sp, r7
90005f08:	bd80      	pop	{r7, pc}
90005f0a:	bf00      	nop
90005f0c:	80002000 	.word	0x80002000

90005f10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005f10:	b480      	push	{r7}
90005f12:	b083      	sub	sp, #12
90005f14:	af00      	add	r7, sp, #0
90005f16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005f18:	687b      	ldr	r3, [r7, #4]
90005f1a:	681b      	ldr	r3, [r3, #0]
90005f1c:	699b      	ldr	r3, [r3, #24]
90005f1e:	f003 0302 	and.w	r3, r3, #2
90005f22:	2b02      	cmp	r3, #2
90005f24:	d103      	bne.n	90005f2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005f26:	687b      	ldr	r3, [r7, #4]
90005f28:	681b      	ldr	r3, [r3, #0]
90005f2a:	2200      	movs	r2, #0
90005f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005f2e:	687b      	ldr	r3, [r7, #4]
90005f30:	681b      	ldr	r3, [r3, #0]
90005f32:	699b      	ldr	r3, [r3, #24]
90005f34:	f003 0301 	and.w	r3, r3, #1
90005f38:	2b01      	cmp	r3, #1
90005f3a:	d007      	beq.n	90005f4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005f3c:	687b      	ldr	r3, [r7, #4]
90005f3e:	681b      	ldr	r3, [r3, #0]
90005f40:	699a      	ldr	r2, [r3, #24]
90005f42:	687b      	ldr	r3, [r7, #4]
90005f44:	681b      	ldr	r3, [r3, #0]
90005f46:	f042 0201 	orr.w	r2, r2, #1
90005f4a:	619a      	str	r2, [r3, #24]
  }
}
90005f4c:	bf00      	nop
90005f4e:	370c      	adds	r7, #12
90005f50:	46bd      	mov	sp, r7
90005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
90005f56:	4770      	bx	lr

90005f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005f58:	b580      	push	{r7, lr}
90005f5a:	b084      	sub	sp, #16
90005f5c:	af00      	add	r7, sp, #0
90005f5e:	60f8      	str	r0, [r7, #12]
90005f60:	60b9      	str	r1, [r7, #8]
90005f62:	603b      	str	r3, [r7, #0]
90005f64:	4613      	mov	r3, r2
90005f66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005f68:	e03b      	b.n	90005fe2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005f6a:	69ba      	ldr	r2, [r7, #24]
90005f6c:	6839      	ldr	r1, [r7, #0]
90005f6e:	68f8      	ldr	r0, [r7, #12]
90005f70:	f000 f8d6 	bl	90006120 <I2C_IsErrorOccurred>
90005f74:	4603      	mov	r3, r0
90005f76:	2b00      	cmp	r3, #0
90005f78:	d001      	beq.n	90005f7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90005f7a:	2301      	movs	r3, #1
90005f7c:	e041      	b.n	90006002 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005f7e:	683b      	ldr	r3, [r7, #0]
90005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
90005f84:	d02d      	beq.n	90005fe2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005f86:	f7fd f963 	bl	90003250 <HAL_GetTick>
90005f8a:	4602      	mov	r2, r0
90005f8c:	69bb      	ldr	r3, [r7, #24]
90005f8e:	1ad3      	subs	r3, r2, r3
90005f90:	683a      	ldr	r2, [r7, #0]
90005f92:	429a      	cmp	r2, r3
90005f94:	d302      	bcc.n	90005f9c <I2C_WaitOnFlagUntilTimeout+0x44>
90005f96:	683b      	ldr	r3, [r7, #0]
90005f98:	2b00      	cmp	r3, #0
90005f9a:	d122      	bne.n	90005fe2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90005f9c:	68fb      	ldr	r3, [r7, #12]
90005f9e:	681b      	ldr	r3, [r3, #0]
90005fa0:	699a      	ldr	r2, [r3, #24]
90005fa2:	68bb      	ldr	r3, [r7, #8]
90005fa4:	4013      	ands	r3, r2
90005fa6:	68ba      	ldr	r2, [r7, #8]
90005fa8:	429a      	cmp	r2, r3
90005faa:	bf0c      	ite	eq
90005fac:	2301      	moveq	r3, #1
90005fae:	2300      	movne	r3, #0
90005fb0:	b2db      	uxtb	r3, r3
90005fb2:	461a      	mov	r2, r3
90005fb4:	79fb      	ldrb	r3, [r7, #7]
90005fb6:	429a      	cmp	r2, r3
90005fb8:	d113      	bne.n	90005fe2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005fba:	68fb      	ldr	r3, [r7, #12]
90005fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005fbe:	f043 0220 	orr.w	r2, r3, #32
90005fc2:	68fb      	ldr	r3, [r7, #12]
90005fc4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005fc6:	68fb      	ldr	r3, [r7, #12]
90005fc8:	2220      	movs	r2, #32
90005fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005fce:	68fb      	ldr	r3, [r7, #12]
90005fd0:	2200      	movs	r2, #0
90005fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005fd6:	68fb      	ldr	r3, [r7, #12]
90005fd8:	2200      	movs	r2, #0
90005fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90005fde:	2301      	movs	r3, #1
90005fe0:	e00f      	b.n	90006002 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005fe2:	68fb      	ldr	r3, [r7, #12]
90005fe4:	681b      	ldr	r3, [r3, #0]
90005fe6:	699a      	ldr	r2, [r3, #24]
90005fe8:	68bb      	ldr	r3, [r7, #8]
90005fea:	4013      	ands	r3, r2
90005fec:	68ba      	ldr	r2, [r7, #8]
90005fee:	429a      	cmp	r2, r3
90005ff0:	bf0c      	ite	eq
90005ff2:	2301      	moveq	r3, #1
90005ff4:	2300      	movne	r3, #0
90005ff6:	b2db      	uxtb	r3, r3
90005ff8:	461a      	mov	r2, r3
90005ffa:	79fb      	ldrb	r3, [r7, #7]
90005ffc:	429a      	cmp	r2, r3
90005ffe:	d0b4      	beq.n	90005f6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90006000:	2300      	movs	r3, #0
}
90006002:	4618      	mov	r0, r3
90006004:	3710      	adds	r7, #16
90006006:	46bd      	mov	sp, r7
90006008:	bd80      	pop	{r7, pc}

9000600a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000600a:	b580      	push	{r7, lr}
9000600c:	b084      	sub	sp, #16
9000600e:	af00      	add	r7, sp, #0
90006010:	60f8      	str	r0, [r7, #12]
90006012:	60b9      	str	r1, [r7, #8]
90006014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006016:	e033      	b.n	90006080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006018:	687a      	ldr	r2, [r7, #4]
9000601a:	68b9      	ldr	r1, [r7, #8]
9000601c:	68f8      	ldr	r0, [r7, #12]
9000601e:	f000 f87f 	bl	90006120 <I2C_IsErrorOccurred>
90006022:	4603      	mov	r3, r0
90006024:	2b00      	cmp	r3, #0
90006026:	d001      	beq.n	9000602c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006028:	2301      	movs	r3, #1
9000602a:	e031      	b.n	90006090 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000602c:	68bb      	ldr	r3, [r7, #8]
9000602e:	f1b3 3fff 	cmp.w	r3, #4294967295
90006032:	d025      	beq.n	90006080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006034:	f7fd f90c 	bl	90003250 <HAL_GetTick>
90006038:	4602      	mov	r2, r0
9000603a:	687b      	ldr	r3, [r7, #4]
9000603c:	1ad3      	subs	r3, r2, r3
9000603e:	68ba      	ldr	r2, [r7, #8]
90006040:	429a      	cmp	r2, r3
90006042:	d302      	bcc.n	9000604a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90006044:	68bb      	ldr	r3, [r7, #8]
90006046:	2b00      	cmp	r3, #0
90006048:	d11a      	bne.n	90006080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000604a:	68fb      	ldr	r3, [r7, #12]
9000604c:	681b      	ldr	r3, [r3, #0]
9000604e:	699b      	ldr	r3, [r3, #24]
90006050:	f003 0302 	and.w	r3, r3, #2
90006054:	2b02      	cmp	r3, #2
90006056:	d013      	beq.n	90006080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006058:	68fb      	ldr	r3, [r7, #12]
9000605a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000605c:	f043 0220 	orr.w	r2, r3, #32
90006060:	68fb      	ldr	r3, [r7, #12]
90006062:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006064:	68fb      	ldr	r3, [r7, #12]
90006066:	2220      	movs	r2, #32
90006068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000606c:	68fb      	ldr	r3, [r7, #12]
9000606e:	2200      	movs	r2, #0
90006070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006074:	68fb      	ldr	r3, [r7, #12]
90006076:	2200      	movs	r2, #0
90006078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
9000607c:	2301      	movs	r3, #1
9000607e:	e007      	b.n	90006090 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006080:	68fb      	ldr	r3, [r7, #12]
90006082:	681b      	ldr	r3, [r3, #0]
90006084:	699b      	ldr	r3, [r3, #24]
90006086:	f003 0302 	and.w	r3, r3, #2
9000608a:	2b02      	cmp	r3, #2
9000608c:	d1c4      	bne.n	90006018 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
9000608e:	2300      	movs	r3, #0
}
90006090:	4618      	mov	r0, r3
90006092:	3710      	adds	r7, #16
90006094:	46bd      	mov	sp, r7
90006096:	bd80      	pop	{r7, pc}

90006098 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006098:	b580      	push	{r7, lr}
9000609a:	b084      	sub	sp, #16
9000609c:	af00      	add	r7, sp, #0
9000609e:	60f8      	str	r0, [r7, #12]
900060a0:	60b9      	str	r1, [r7, #8]
900060a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900060a4:	e02f      	b.n	90006106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
900060a6:	687a      	ldr	r2, [r7, #4]
900060a8:	68b9      	ldr	r1, [r7, #8]
900060aa:	68f8      	ldr	r0, [r7, #12]
900060ac:	f000 f838 	bl	90006120 <I2C_IsErrorOccurred>
900060b0:	4603      	mov	r3, r0
900060b2:	2b00      	cmp	r3, #0
900060b4:	d001      	beq.n	900060ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
900060b6:	2301      	movs	r3, #1
900060b8:	e02d      	b.n	90006116 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900060ba:	f7fd f8c9 	bl	90003250 <HAL_GetTick>
900060be:	4602      	mov	r2, r0
900060c0:	687b      	ldr	r3, [r7, #4]
900060c2:	1ad3      	subs	r3, r2, r3
900060c4:	68ba      	ldr	r2, [r7, #8]
900060c6:	429a      	cmp	r2, r3
900060c8:	d302      	bcc.n	900060d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
900060ca:	68bb      	ldr	r3, [r7, #8]
900060cc:	2b00      	cmp	r3, #0
900060ce:	d11a      	bne.n	90006106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
900060d0:	68fb      	ldr	r3, [r7, #12]
900060d2:	681b      	ldr	r3, [r3, #0]
900060d4:	699b      	ldr	r3, [r3, #24]
900060d6:	f003 0320 	and.w	r3, r3, #32
900060da:	2b20      	cmp	r3, #32
900060dc:	d013      	beq.n	90006106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900060de:	68fb      	ldr	r3, [r7, #12]
900060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900060e2:	f043 0220 	orr.w	r2, r3, #32
900060e6:	68fb      	ldr	r3, [r7, #12]
900060e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
900060ea:	68fb      	ldr	r3, [r7, #12]
900060ec:	2220      	movs	r2, #32
900060ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
900060f2:	68fb      	ldr	r3, [r7, #12]
900060f4:	2200      	movs	r2, #0
900060f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
900060fa:	68fb      	ldr	r3, [r7, #12]
900060fc:	2200      	movs	r2, #0
900060fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
90006102:	2301      	movs	r3, #1
90006104:	e007      	b.n	90006116 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006106:	68fb      	ldr	r3, [r7, #12]
90006108:	681b      	ldr	r3, [r3, #0]
9000610a:	699b      	ldr	r3, [r3, #24]
9000610c:	f003 0320 	and.w	r3, r3, #32
90006110:	2b20      	cmp	r3, #32
90006112:	d1c8      	bne.n	900060a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90006114:	2300      	movs	r3, #0
}
90006116:	4618      	mov	r0, r3
90006118:	3710      	adds	r7, #16
9000611a:	46bd      	mov	sp, r7
9000611c:	bd80      	pop	{r7, pc}
	...

90006120 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90006120:	b580      	push	{r7, lr}
90006122:	b08a      	sub	sp, #40	@ 0x28
90006124:	af00      	add	r7, sp, #0
90006126:	60f8      	str	r0, [r7, #12]
90006128:	60b9      	str	r1, [r7, #8]
9000612a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
9000612c:	2300      	movs	r3, #0
9000612e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90006132:	68fb      	ldr	r3, [r7, #12]
90006134:	681b      	ldr	r3, [r3, #0]
90006136:	699b      	ldr	r3, [r3, #24]
90006138:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
9000613a:	2300      	movs	r3, #0
9000613c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
9000613e:	687b      	ldr	r3, [r7, #4]
90006140:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90006142:	69bb      	ldr	r3, [r7, #24]
90006144:	f003 0310 	and.w	r3, r3, #16
90006148:	2b00      	cmp	r3, #0
9000614a:	d068      	beq.n	9000621e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000614c:	68fb      	ldr	r3, [r7, #12]
9000614e:	681b      	ldr	r3, [r3, #0]
90006150:	2210      	movs	r2, #16
90006152:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006154:	e049      	b.n	900061ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90006156:	68bb      	ldr	r3, [r7, #8]
90006158:	f1b3 3fff 	cmp.w	r3, #4294967295
9000615c:	d045      	beq.n	900061ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000615e:	f7fd f877 	bl	90003250 <HAL_GetTick>
90006162:	4602      	mov	r2, r0
90006164:	69fb      	ldr	r3, [r7, #28]
90006166:	1ad3      	subs	r3, r2, r3
90006168:	68ba      	ldr	r2, [r7, #8]
9000616a:	429a      	cmp	r2, r3
9000616c:	d302      	bcc.n	90006174 <I2C_IsErrorOccurred+0x54>
9000616e:	68bb      	ldr	r3, [r7, #8]
90006170:	2b00      	cmp	r3, #0
90006172:	d13a      	bne.n	900061ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90006174:	68fb      	ldr	r3, [r7, #12]
90006176:	681b      	ldr	r3, [r3, #0]
90006178:	685b      	ldr	r3, [r3, #4]
9000617a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
9000617e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90006180:	68fb      	ldr	r3, [r7, #12]
90006182:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90006186:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006188:	68fb      	ldr	r3, [r7, #12]
9000618a:	681b      	ldr	r3, [r3, #0]
9000618c:	699b      	ldr	r3, [r3, #24]
9000618e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90006192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006196:	d121      	bne.n	900061dc <I2C_IsErrorOccurred+0xbc>
90006198:	697b      	ldr	r3, [r7, #20]
9000619a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000619e:	d01d      	beq.n	900061dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
900061a0:	7cfb      	ldrb	r3, [r7, #19]
900061a2:	2b20      	cmp	r3, #32
900061a4:	d01a      	beq.n	900061dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
900061a6:	68fb      	ldr	r3, [r7, #12]
900061a8:	681b      	ldr	r3, [r3, #0]
900061aa:	685a      	ldr	r2, [r3, #4]
900061ac:	68fb      	ldr	r3, [r7, #12]
900061ae:	681b      	ldr	r3, [r3, #0]
900061b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
900061b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
900061b6:	f7fd f84b 	bl	90003250 <HAL_GetTick>
900061ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900061bc:	e00e      	b.n	900061dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900061be:	f7fd f847 	bl	90003250 <HAL_GetTick>
900061c2:	4602      	mov	r2, r0
900061c4:	69fb      	ldr	r3, [r7, #28]
900061c6:	1ad3      	subs	r3, r2, r3
900061c8:	2b19      	cmp	r3, #25
900061ca:	d907      	bls.n	900061dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900061cc:	6a3b      	ldr	r3, [r7, #32]
900061ce:	f043 0320 	orr.w	r3, r3, #32
900061d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
900061d4:	2301      	movs	r3, #1
900061d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
900061da:	e006      	b.n	900061ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900061dc:	68fb      	ldr	r3, [r7, #12]
900061de:	681b      	ldr	r3, [r3, #0]
900061e0:	699b      	ldr	r3, [r3, #24]
900061e2:	f003 0320 	and.w	r3, r3, #32
900061e6:	2b20      	cmp	r3, #32
900061e8:	d1e9      	bne.n	900061be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900061ea:	68fb      	ldr	r3, [r7, #12]
900061ec:	681b      	ldr	r3, [r3, #0]
900061ee:	699b      	ldr	r3, [r3, #24]
900061f0:	f003 0320 	and.w	r3, r3, #32
900061f4:	2b20      	cmp	r3, #32
900061f6:	d003      	beq.n	90006200 <I2C_IsErrorOccurred+0xe0>
900061f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900061fc:	2b00      	cmp	r3, #0
900061fe:	d0aa      	beq.n	90006156 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006204:	2b00      	cmp	r3, #0
90006206:	d103      	bne.n	90006210 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006208:	68fb      	ldr	r3, [r7, #12]
9000620a:	681b      	ldr	r3, [r3, #0]
9000620c:	2220      	movs	r2, #32
9000620e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006210:	6a3b      	ldr	r3, [r7, #32]
90006212:	f043 0304 	orr.w	r3, r3, #4
90006216:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006218:	2301      	movs	r3, #1
9000621a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000621e:	68fb      	ldr	r3, [r7, #12]
90006220:	681b      	ldr	r3, [r3, #0]
90006222:	699b      	ldr	r3, [r3, #24]
90006224:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006226:	69bb      	ldr	r3, [r7, #24]
90006228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000622c:	2b00      	cmp	r3, #0
9000622e:	d00b      	beq.n	90006248 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90006230:	6a3b      	ldr	r3, [r7, #32]
90006232:	f043 0301 	orr.w	r3, r3, #1
90006236:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006238:	68fb      	ldr	r3, [r7, #12]
9000623a:	681b      	ldr	r3, [r3, #0]
9000623c:	f44f 7280 	mov.w	r2, #256	@ 0x100
90006240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006242:	2301      	movs	r3, #1
90006244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006248:	69bb      	ldr	r3, [r7, #24]
9000624a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000624e:	2b00      	cmp	r3, #0
90006250:	d00b      	beq.n	9000626a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
90006252:	6a3b      	ldr	r3, [r7, #32]
90006254:	f043 0308 	orr.w	r3, r3, #8
90006258:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000625a:	68fb      	ldr	r3, [r7, #12]
9000625c:	681b      	ldr	r3, [r3, #0]
9000625e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
90006262:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006264:	2301      	movs	r3, #1
90006266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000626a:	69bb      	ldr	r3, [r7, #24]
9000626c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90006270:	2b00      	cmp	r3, #0
90006272:	d00b      	beq.n	9000628c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90006274:	6a3b      	ldr	r3, [r7, #32]
90006276:	f043 0302 	orr.w	r3, r3, #2
9000627a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000627c:	68fb      	ldr	r3, [r7, #12]
9000627e:	681b      	ldr	r3, [r3, #0]
90006280:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006286:	2301      	movs	r3, #1
90006288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
9000628c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006290:	2b00      	cmp	r3, #0
90006292:	d01c      	beq.n	900062ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006294:	68f8      	ldr	r0, [r7, #12]
90006296:	f7ff fe3b 	bl	90005f10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000629a:	68fb      	ldr	r3, [r7, #12]
9000629c:	681b      	ldr	r3, [r3, #0]
9000629e:	6859      	ldr	r1, [r3, #4]
900062a0:	68fb      	ldr	r3, [r7, #12]
900062a2:	681a      	ldr	r2, [r3, #0]
900062a4:	4b0d      	ldr	r3, [pc, #52]	@ (900062dc <I2C_IsErrorOccurred+0x1bc>)
900062a6:	400b      	ands	r3, r1
900062a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
900062aa:	68fb      	ldr	r3, [r7, #12]
900062ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
900062ae:	6a3b      	ldr	r3, [r7, #32]
900062b0:	431a      	orrs	r2, r3
900062b2:	68fb      	ldr	r3, [r7, #12]
900062b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
900062b6:	68fb      	ldr	r3, [r7, #12]
900062b8:	2220      	movs	r2, #32
900062ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
900062be:	68fb      	ldr	r3, [r7, #12]
900062c0:	2200      	movs	r2, #0
900062c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900062c6:	68fb      	ldr	r3, [r7, #12]
900062c8:	2200      	movs	r2, #0
900062ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
900062ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
900062d2:	4618      	mov	r0, r3
900062d4:	3728      	adds	r7, #40	@ 0x28
900062d6:	46bd      	mov	sp, r7
900062d8:	bd80      	pop	{r7, pc}
900062da:	bf00      	nop
900062dc:	fe00e800 	.word	0xfe00e800

900062e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
900062e0:	b480      	push	{r7}
900062e2:	b087      	sub	sp, #28
900062e4:	af00      	add	r7, sp, #0
900062e6:	60f8      	str	r0, [r7, #12]
900062e8:	607b      	str	r3, [r7, #4]
900062ea:	460b      	mov	r3, r1
900062ec:	817b      	strh	r3, [r7, #10]
900062ee:	4613      	mov	r3, r2
900062f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900062f2:	897b      	ldrh	r3, [r7, #10]
900062f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900062f8:	7a7b      	ldrb	r3, [r7, #9]
900062fa:	041b      	lsls	r3, r3, #16
900062fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006300:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006302:	687b      	ldr	r3, [r7, #4]
90006304:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006306:	6a3b      	ldr	r3, [r7, #32]
90006308:	4313      	orrs	r3, r2
9000630a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000630e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90006310:	68fb      	ldr	r3, [r7, #12]
90006312:	681b      	ldr	r3, [r3, #0]
90006314:	685a      	ldr	r2, [r3, #4]
90006316:	6a3b      	ldr	r3, [r7, #32]
90006318:	0d5b      	lsrs	r3, r3, #21
9000631a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
9000631e:	4b08      	ldr	r3, [pc, #32]	@ (90006340 <I2C_TransferConfig+0x60>)
90006320:	430b      	orrs	r3, r1
90006322:	43db      	mvns	r3, r3
90006324:	ea02 0103 	and.w	r1, r2, r3
90006328:	68fb      	ldr	r3, [r7, #12]
9000632a:	681b      	ldr	r3, [r3, #0]
9000632c:	697a      	ldr	r2, [r7, #20]
9000632e:	430a      	orrs	r2, r1
90006330:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90006332:	bf00      	nop
90006334:	371c      	adds	r7, #28
90006336:	46bd      	mov	sp, r7
90006338:	f85d 7b04 	ldr.w	r7, [sp], #4
9000633c:	4770      	bx	lr
9000633e:	bf00      	nop
90006340:	03ff63ff 	.word	0x03ff63ff

90006344 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90006344:	b480      	push	{r7}
90006346:	b083      	sub	sp, #12
90006348:	af00      	add	r7, sp, #0
9000634a:	6078      	str	r0, [r7, #4]
9000634c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000634e:	687b      	ldr	r3, [r7, #4]
90006350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006354:	b2db      	uxtb	r3, r3
90006356:	2b20      	cmp	r3, #32
90006358:	d138      	bne.n	900063cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000635a:	687b      	ldr	r3, [r7, #4]
9000635c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006360:	2b01      	cmp	r3, #1
90006362:	d101      	bne.n	90006368 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90006364:	2302      	movs	r3, #2
90006366:	e032      	b.n	900063ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90006368:	687b      	ldr	r3, [r7, #4]
9000636a:	2201      	movs	r2, #1
9000636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006370:	687b      	ldr	r3, [r7, #4]
90006372:	2224      	movs	r2, #36	@ 0x24
90006374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006378:	687b      	ldr	r3, [r7, #4]
9000637a:	681b      	ldr	r3, [r3, #0]
9000637c:	681a      	ldr	r2, [r3, #0]
9000637e:	687b      	ldr	r3, [r7, #4]
90006380:	681b      	ldr	r3, [r3, #0]
90006382:	f022 0201 	bic.w	r2, r2, #1
90006386:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90006388:	687b      	ldr	r3, [r7, #4]
9000638a:	681b      	ldr	r3, [r3, #0]
9000638c:	681a      	ldr	r2, [r3, #0]
9000638e:	687b      	ldr	r3, [r7, #4]
90006390:	681b      	ldr	r3, [r3, #0]
90006392:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006396:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006398:	687b      	ldr	r3, [r7, #4]
9000639a:	681b      	ldr	r3, [r3, #0]
9000639c:	6819      	ldr	r1, [r3, #0]
9000639e:	687b      	ldr	r3, [r7, #4]
900063a0:	681b      	ldr	r3, [r3, #0]
900063a2:	683a      	ldr	r2, [r7, #0]
900063a4:	430a      	orrs	r2, r1
900063a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900063a8:	687b      	ldr	r3, [r7, #4]
900063aa:	681b      	ldr	r3, [r3, #0]
900063ac:	681a      	ldr	r2, [r3, #0]
900063ae:	687b      	ldr	r3, [r7, #4]
900063b0:	681b      	ldr	r3, [r3, #0]
900063b2:	f042 0201 	orr.w	r2, r2, #1
900063b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900063b8:	687b      	ldr	r3, [r7, #4]
900063ba:	2220      	movs	r2, #32
900063bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900063c0:	687b      	ldr	r3, [r7, #4]
900063c2:	2200      	movs	r2, #0
900063c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900063c8:	2300      	movs	r3, #0
900063ca:	e000      	b.n	900063ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
900063cc:	2302      	movs	r3, #2
  }
}
900063ce:	4618      	mov	r0, r3
900063d0:	370c      	adds	r7, #12
900063d2:	46bd      	mov	sp, r7
900063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900063d8:	4770      	bx	lr

900063da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
900063da:	b480      	push	{r7}
900063dc:	b085      	sub	sp, #20
900063de:	af00      	add	r7, sp, #0
900063e0:	6078      	str	r0, [r7, #4]
900063e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900063e4:	687b      	ldr	r3, [r7, #4]
900063e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900063ea:	b2db      	uxtb	r3, r3
900063ec:	2b20      	cmp	r3, #32
900063ee:	d139      	bne.n	90006464 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900063f0:	687b      	ldr	r3, [r7, #4]
900063f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900063f6:	2b01      	cmp	r3, #1
900063f8:	d101      	bne.n	900063fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
900063fa:	2302      	movs	r3, #2
900063fc:	e033      	b.n	90006466 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
900063fe:	687b      	ldr	r3, [r7, #4]
90006400:	2201      	movs	r2, #1
90006402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006406:	687b      	ldr	r3, [r7, #4]
90006408:	2224      	movs	r2, #36	@ 0x24
9000640a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000640e:	687b      	ldr	r3, [r7, #4]
90006410:	681b      	ldr	r3, [r3, #0]
90006412:	681a      	ldr	r2, [r3, #0]
90006414:	687b      	ldr	r3, [r7, #4]
90006416:	681b      	ldr	r3, [r3, #0]
90006418:	f022 0201 	bic.w	r2, r2, #1
9000641c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
9000641e:	687b      	ldr	r3, [r7, #4]
90006420:	681b      	ldr	r3, [r3, #0]
90006422:	681b      	ldr	r3, [r3, #0]
90006424:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006426:	68fb      	ldr	r3, [r7, #12]
90006428:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
9000642c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000642e:	683b      	ldr	r3, [r7, #0]
90006430:	021b      	lsls	r3, r3, #8
90006432:	68fa      	ldr	r2, [r7, #12]
90006434:	4313      	orrs	r3, r2
90006436:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006438:	687b      	ldr	r3, [r7, #4]
9000643a:	681b      	ldr	r3, [r3, #0]
9000643c:	68fa      	ldr	r2, [r7, #12]
9000643e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006440:	687b      	ldr	r3, [r7, #4]
90006442:	681b      	ldr	r3, [r3, #0]
90006444:	681a      	ldr	r2, [r3, #0]
90006446:	687b      	ldr	r3, [r7, #4]
90006448:	681b      	ldr	r3, [r3, #0]
9000644a:	f042 0201 	orr.w	r2, r2, #1
9000644e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006450:	687b      	ldr	r3, [r7, #4]
90006452:	2220      	movs	r2, #32
90006454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006458:	687b      	ldr	r3, [r7, #4]
9000645a:	2200      	movs	r2, #0
9000645c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006460:	2300      	movs	r3, #0
90006462:	e000      	b.n	90006466 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90006464:	2302      	movs	r3, #2
  }
}
90006466:	4618      	mov	r0, r3
90006468:	3714      	adds	r7, #20
9000646a:	46bd      	mov	sp, r7
9000646c:	f85d 7b04 	ldr.w	r7, [sp], #4
90006470:	4770      	bx	lr

90006472 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90006472:	b580      	push	{r7, lr}
90006474:	b084      	sub	sp, #16
90006476:	af00      	add	r7, sp, #0
90006478:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000647a:	687b      	ldr	r3, [r7, #4]
9000647c:	2b00      	cmp	r3, #0
9000647e:	d101      	bne.n	90006484 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90006480:	2301      	movs	r3, #1
90006482:	e08f      	b.n	900065a4 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006484:	687b      	ldr	r3, [r7, #4]
90006486:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
9000648a:	b2db      	uxtb	r3, r3
9000648c:	2b00      	cmp	r3, #0
9000648e:	d106      	bne.n	9000649e <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90006490:	687b      	ldr	r3, [r7, #4]
90006492:	2200      	movs	r2, #0
90006494:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006498:	6878      	ldr	r0, [r7, #4]
9000649a:	f000 f887 	bl	900065ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000649e:	687b      	ldr	r3, [r7, #4]
900064a0:	2202      	movs	r2, #2
900064a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
900064a6:	687b      	ldr	r3, [r7, #4]
900064a8:	681b      	ldr	r3, [r3, #0]
900064aa:	699a      	ldr	r2, [r3, #24]
900064ac:	687b      	ldr	r3, [r7, #4]
900064ae:	681b      	ldr	r3, [r3, #0]
900064b0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
900064b4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900064b6:	687b      	ldr	r3, [r7, #4]
900064b8:	681b      	ldr	r3, [r3, #0]
900064ba:	6999      	ldr	r1, [r3, #24]
900064bc:	687b      	ldr	r3, [r7, #4]
900064be:	685a      	ldr	r2, [r3, #4]
900064c0:	687b      	ldr	r3, [r7, #4]
900064c2:	689b      	ldr	r3, [r3, #8]
900064c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900064c6:	687b      	ldr	r3, [r7, #4]
900064c8:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900064ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900064cc:	687b      	ldr	r3, [r7, #4]
900064ce:	691b      	ldr	r3, [r3, #16]
900064d0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900064d2:	687b      	ldr	r3, [r7, #4]
900064d4:	681b      	ldr	r3, [r3, #0]
900064d6:	430a      	orrs	r2, r1
900064d8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
900064da:	687b      	ldr	r3, [r7, #4]
900064dc:	695b      	ldr	r3, [r3, #20]
900064de:	041b      	lsls	r3, r3, #16
900064e0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
900064e2:	687b      	ldr	r3, [r7, #4]
900064e4:	6999      	ldr	r1, [r3, #24]
900064e6:	687b      	ldr	r3, [r7, #4]
900064e8:	681b      	ldr	r3, [r3, #0]
900064ea:	68fa      	ldr	r2, [r7, #12]
900064ec:	430a      	orrs	r2, r1
900064ee:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
900064f0:	687b      	ldr	r3, [r7, #4]
900064f2:	69db      	ldr	r3, [r3, #28]
900064f4:	041b      	lsls	r3, r3, #16
900064f6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
900064f8:	687b      	ldr	r3, [r7, #4]
900064fa:	6a19      	ldr	r1, [r3, #32]
900064fc:	687b      	ldr	r3, [r7, #4]
900064fe:	681b      	ldr	r3, [r3, #0]
90006500:	68fa      	ldr	r2, [r7, #12]
90006502:	430a      	orrs	r2, r1
90006504:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90006506:	687b      	ldr	r3, [r7, #4]
90006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000650a:	041b      	lsls	r3, r3, #16
9000650c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
9000650e:	687b      	ldr	r3, [r7, #4]
90006510:	6a99      	ldr	r1, [r3, #40]	@ 0x28
90006512:	687b      	ldr	r3, [r7, #4]
90006514:	681b      	ldr	r3, [r3, #0]
90006516:	68fa      	ldr	r2, [r7, #12]
90006518:	430a      	orrs	r2, r1
9000651a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
9000651c:	687b      	ldr	r3, [r7, #4]
9000651e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006520:	041b      	lsls	r3, r3, #16
90006522:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006524:	687b      	ldr	r3, [r7, #4]
90006526:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006528:	687b      	ldr	r3, [r7, #4]
9000652a:	681b      	ldr	r3, [r3, #0]
9000652c:	68fa      	ldr	r2, [r7, #12]
9000652e:	430a      	orrs	r2, r1
90006530:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90006532:	687b      	ldr	r3, [r7, #4]
90006534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90006538:	021b      	lsls	r3, r3, #8
9000653a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000653c:	687b      	ldr	r3, [r7, #4]
9000653e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
90006542:	041b      	lsls	r3, r3, #16
90006544:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90006546:	687b      	ldr	r3, [r7, #4]
90006548:	681b      	ldr	r3, [r3, #0]
9000654a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000654c:	687b      	ldr	r3, [r7, #4]
9000654e:	681b      	ldr	r3, [r3, #0]
90006550:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90006554:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006556:	687b      	ldr	r3, [r7, #4]
90006558:	681b      	ldr	r3, [r3, #0]
9000655a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
9000655c:	68ba      	ldr	r2, [r7, #8]
9000655e:	68fb      	ldr	r3, [r7, #12]
90006560:	4313      	orrs	r3, r2
90006562:	687a      	ldr	r2, [r7, #4]
90006564:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90006568:	431a      	orrs	r2, r3
9000656a:	687b      	ldr	r3, [r7, #4]
9000656c:	681b      	ldr	r3, [r3, #0]
9000656e:	430a      	orrs	r2, r1
90006570:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90006572:	687b      	ldr	r3, [r7, #4]
90006574:	681b      	ldr	r3, [r3, #0]
90006576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006578:	687b      	ldr	r3, [r7, #4]
9000657a:	681b      	ldr	r3, [r3, #0]
9000657c:	f042 0206 	orr.w	r2, r2, #6
90006580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90006582:	687b      	ldr	r3, [r7, #4]
90006584:	681b      	ldr	r3, [r3, #0]
90006586:	699a      	ldr	r2, [r3, #24]
90006588:	687b      	ldr	r3, [r7, #4]
9000658a:	681b      	ldr	r3, [r3, #0]
9000658c:	f042 0201 	orr.w	r2, r2, #1
90006590:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90006592:	687b      	ldr	r3, [r7, #4]
90006594:	2200      	movs	r2, #0
90006596:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000659a:	687b      	ldr	r3, [r7, #4]
9000659c:	2201      	movs	r2, #1
9000659e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
900065a2:	2300      	movs	r3, #0
}
900065a4:	4618      	mov	r0, r3
900065a6:	3710      	adds	r7, #16
900065a8:	46bd      	mov	sp, r7
900065aa:	bd80      	pop	{r7, pc}

900065ac <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900065ac:	b480      	push	{r7}
900065ae:	b083      	sub	sp, #12
900065b0:	af00      	add	r7, sp, #0
900065b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
900065b4:	bf00      	nop
900065b6:	370c      	adds	r7, #12
900065b8:	46bd      	mov	sp, r7
900065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
900065be:	4770      	bx	lr

900065c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900065c0:	b5b0      	push	{r4, r5, r7, lr}
900065c2:	b084      	sub	sp, #16
900065c4:	af00      	add	r7, sp, #0
900065c6:	60f8      	str	r0, [r7, #12]
900065c8:	60b9      	str	r1, [r7, #8]
900065ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
900065cc:	68fb      	ldr	r3, [r7, #12]
900065ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
900065d2:	2b01      	cmp	r3, #1
900065d4:	d101      	bne.n	900065da <HAL_LTDC_ConfigLayer+0x1a>
900065d6:	2302      	movs	r3, #2
900065d8:	e02c      	b.n	90006634 <HAL_LTDC_ConfigLayer+0x74>
900065da:	68fb      	ldr	r3, [r7, #12]
900065dc:	2201      	movs	r2, #1
900065de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900065e2:	68fb      	ldr	r3, [r7, #12]
900065e4:	2202      	movs	r2, #2
900065e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900065ea:	68fa      	ldr	r2, [r7, #12]
900065ec:	687b      	ldr	r3, [r7, #4]
900065ee:	2134      	movs	r1, #52	@ 0x34
900065f0:	fb01 f303 	mul.w	r3, r1, r3
900065f4:	4413      	add	r3, r2
900065f6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
900065fa:	68bb      	ldr	r3, [r7, #8]
900065fc:	4614      	mov	r4, r2
900065fe:	461d      	mov	r5, r3
90006600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000660a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000660c:	682b      	ldr	r3, [r5, #0]
9000660e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90006610:	687a      	ldr	r2, [r7, #4]
90006612:	68b9      	ldr	r1, [r7, #8]
90006614:	68f8      	ldr	r0, [r7, #12]
90006616:	f000 f811 	bl	9000663c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000661a:	68fb      	ldr	r3, [r7, #12]
9000661c:	681b      	ldr	r3, [r3, #0]
9000661e:	2201      	movs	r2, #1
90006620:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90006622:	68fb      	ldr	r3, [r7, #12]
90006624:	2201      	movs	r2, #1
90006626:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
9000662a:	68fb      	ldr	r3, [r7, #12]
9000662c:	2200      	movs	r2, #0
9000662e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90006632:	2300      	movs	r3, #0
}
90006634:	4618      	mov	r0, r3
90006636:	3710      	adds	r7, #16
90006638:	46bd      	mov	sp, r7
9000663a:	bdb0      	pop	{r4, r5, r7, pc}

9000663c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000663c:	b480      	push	{r7}
9000663e:	b089      	sub	sp, #36	@ 0x24
90006640:	af00      	add	r7, sp, #0
90006642:	60f8      	str	r0, [r7, #12]
90006644:	60b9      	str	r1, [r7, #8]
90006646:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90006648:	68bb      	ldr	r3, [r7, #8]
9000664a:	685a      	ldr	r2, [r3, #4]
9000664c:	68fb      	ldr	r3, [r7, #12]
9000664e:	681b      	ldr	r3, [r3, #0]
90006650:	68db      	ldr	r3, [r3, #12]
90006652:	0c1b      	lsrs	r3, r3, #16
90006654:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006658:	4413      	add	r3, r2
9000665a:	041b      	lsls	r3, r3, #16
9000665c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000665e:	68fb      	ldr	r3, [r7, #12]
90006660:	681b      	ldr	r3, [r3, #0]
90006662:	461a      	mov	r2, r3
90006664:	687b      	ldr	r3, [r7, #4]
90006666:	01db      	lsls	r3, r3, #7
90006668:	4413      	add	r3, r2
9000666a:	3384      	adds	r3, #132	@ 0x84
9000666c:	685b      	ldr	r3, [r3, #4]
9000666e:	68fa      	ldr	r2, [r7, #12]
90006670:	6812      	ldr	r2, [r2, #0]
90006672:	4611      	mov	r1, r2
90006674:	687a      	ldr	r2, [r7, #4]
90006676:	01d2      	lsls	r2, r2, #7
90006678:	440a      	add	r2, r1
9000667a:	3284      	adds	r2, #132	@ 0x84
9000667c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006680:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006682:	68bb      	ldr	r3, [r7, #8]
90006684:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006686:	68fb      	ldr	r3, [r7, #12]
90006688:	681b      	ldr	r3, [r3, #0]
9000668a:	68db      	ldr	r3, [r3, #12]
9000668c:	0c1b      	lsrs	r3, r3, #16
9000668e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006692:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006694:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006696:	68fb      	ldr	r3, [r7, #12]
90006698:	681b      	ldr	r3, [r3, #0]
9000669a:	4619      	mov	r1, r3
9000669c:	687b      	ldr	r3, [r7, #4]
9000669e:	01db      	lsls	r3, r3, #7
900066a0:	440b      	add	r3, r1
900066a2:	3384      	adds	r3, #132	@ 0x84
900066a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900066a6:	69fb      	ldr	r3, [r7, #28]
900066a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900066aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900066ac:	68bb      	ldr	r3, [r7, #8]
900066ae:	68da      	ldr	r2, [r3, #12]
900066b0:	68fb      	ldr	r3, [r7, #12]
900066b2:	681b      	ldr	r3, [r3, #0]
900066b4:	68db      	ldr	r3, [r3, #12]
900066b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
900066ba:	4413      	add	r3, r2
900066bc:	041b      	lsls	r3, r3, #16
900066be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900066c0:	68fb      	ldr	r3, [r7, #12]
900066c2:	681b      	ldr	r3, [r3, #0]
900066c4:	461a      	mov	r2, r3
900066c6:	687b      	ldr	r3, [r7, #4]
900066c8:	01db      	lsls	r3, r3, #7
900066ca:	4413      	add	r3, r2
900066cc:	3384      	adds	r3, #132	@ 0x84
900066ce:	689b      	ldr	r3, [r3, #8]
900066d0:	68fa      	ldr	r2, [r7, #12]
900066d2:	6812      	ldr	r2, [r2, #0]
900066d4:	4611      	mov	r1, r2
900066d6:	687a      	ldr	r2, [r7, #4]
900066d8:	01d2      	lsls	r2, r2, #7
900066da:	440a      	add	r2, r1
900066dc:	3284      	adds	r2, #132	@ 0x84
900066de:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900066e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900066e4:	68bb      	ldr	r3, [r7, #8]
900066e6:	689a      	ldr	r2, [r3, #8]
900066e8:	68fb      	ldr	r3, [r7, #12]
900066ea:	681b      	ldr	r3, [r3, #0]
900066ec:	68db      	ldr	r3, [r3, #12]
900066ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
900066f2:	4413      	add	r3, r2
900066f4:	1c5a      	adds	r2, r3, #1
900066f6:	68fb      	ldr	r3, [r7, #12]
900066f8:	681b      	ldr	r3, [r3, #0]
900066fa:	4619      	mov	r1, r3
900066fc:	687b      	ldr	r3, [r7, #4]
900066fe:	01db      	lsls	r3, r3, #7
90006700:	440b      	add	r3, r1
90006702:	3384      	adds	r3, #132	@ 0x84
90006704:	4619      	mov	r1, r3
90006706:	69fb      	ldr	r3, [r7, #28]
90006708:	4313      	orrs	r3, r2
9000670a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000670c:	68fb      	ldr	r3, [r7, #12]
9000670e:	681b      	ldr	r3, [r3, #0]
90006710:	461a      	mov	r2, r3
90006712:	687b      	ldr	r3, [r7, #4]
90006714:	01db      	lsls	r3, r3, #7
90006716:	4413      	add	r3, r2
90006718:	3384      	adds	r3, #132	@ 0x84
9000671a:	691b      	ldr	r3, [r3, #16]
9000671c:	68fa      	ldr	r2, [r7, #12]
9000671e:	6812      	ldr	r2, [r2, #0]
90006720:	4611      	mov	r1, r2
90006722:	687a      	ldr	r2, [r7, #4]
90006724:	01d2      	lsls	r2, r2, #7
90006726:	440a      	add	r2, r1
90006728:	3284      	adds	r2, #132	@ 0x84
9000672a:	f023 0307 	bic.w	r3, r3, #7
9000672e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90006730:	68fb      	ldr	r3, [r7, #12]
90006732:	681b      	ldr	r3, [r3, #0]
90006734:	461a      	mov	r2, r3
90006736:	687b      	ldr	r3, [r7, #4]
90006738:	01db      	lsls	r3, r3, #7
9000673a:	4413      	add	r3, r2
9000673c:	3384      	adds	r3, #132	@ 0x84
9000673e:	461a      	mov	r2, r3
90006740:	68bb      	ldr	r3, [r7, #8]
90006742:	691b      	ldr	r3, [r3, #16]
90006744:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90006746:	68bb      	ldr	r3, [r7, #8]
90006748:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
9000674c:	021b      	lsls	r3, r3, #8
9000674e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90006750:	68bb      	ldr	r3, [r7, #8]
90006752:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
90006756:	041b      	lsls	r3, r3, #16
90006758:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000675a:	68bb      	ldr	r3, [r7, #8]
9000675c:	699b      	ldr	r3, [r3, #24]
9000675e:	061b      	lsls	r3, r3, #24
90006760:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
90006762:	68bb      	ldr	r3, [r7, #8]
90006764:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90006768:	461a      	mov	r2, r3
9000676a:	69fb      	ldr	r3, [r7, #28]
9000676c:	431a      	orrs	r2, r3
9000676e:	69bb      	ldr	r3, [r7, #24]
90006770:	431a      	orrs	r2, r3
90006772:	68fb      	ldr	r3, [r7, #12]
90006774:	681b      	ldr	r3, [r3, #0]
90006776:	4619      	mov	r1, r3
90006778:	687b      	ldr	r3, [r7, #4]
9000677a:	01db      	lsls	r3, r3, #7
9000677c:	440b      	add	r3, r1
9000677e:	3384      	adds	r3, #132	@ 0x84
90006780:	4619      	mov	r1, r3
90006782:	697b      	ldr	r3, [r7, #20]
90006784:	4313      	orrs	r3, r2
90006786:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006788:	68fb      	ldr	r3, [r7, #12]
9000678a:	681b      	ldr	r3, [r3, #0]
9000678c:	461a      	mov	r2, r3
9000678e:	687b      	ldr	r3, [r7, #4]
90006790:	01db      	lsls	r3, r3, #7
90006792:	4413      	add	r3, r2
90006794:	3384      	adds	r3, #132	@ 0x84
90006796:	695b      	ldr	r3, [r3, #20]
90006798:	68fa      	ldr	r2, [r7, #12]
9000679a:	6812      	ldr	r2, [r2, #0]
9000679c:	4611      	mov	r1, r2
9000679e:	687a      	ldr	r2, [r7, #4]
900067a0:	01d2      	lsls	r2, r2, #7
900067a2:	440a      	add	r2, r1
900067a4:	3284      	adds	r2, #132	@ 0x84
900067a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
900067aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900067ac:	68fb      	ldr	r3, [r7, #12]
900067ae:	681b      	ldr	r3, [r3, #0]
900067b0:	461a      	mov	r2, r3
900067b2:	687b      	ldr	r3, [r7, #4]
900067b4:	01db      	lsls	r3, r3, #7
900067b6:	4413      	add	r3, r2
900067b8:	3384      	adds	r3, #132	@ 0x84
900067ba:	461a      	mov	r2, r3
900067bc:	68bb      	ldr	r3, [r7, #8]
900067be:	695b      	ldr	r3, [r3, #20]
900067c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900067c2:	68fb      	ldr	r3, [r7, #12]
900067c4:	681b      	ldr	r3, [r3, #0]
900067c6:	461a      	mov	r2, r3
900067c8:	687b      	ldr	r3, [r7, #4]
900067ca:	01db      	lsls	r3, r3, #7
900067cc:	4413      	add	r3, r2
900067ce:	3384      	adds	r3, #132	@ 0x84
900067d0:	69da      	ldr	r2, [r3, #28]
900067d2:	68fb      	ldr	r3, [r7, #12]
900067d4:	681b      	ldr	r3, [r3, #0]
900067d6:	4619      	mov	r1, r3
900067d8:	687b      	ldr	r3, [r7, #4]
900067da:	01db      	lsls	r3, r3, #7
900067dc:	440b      	add	r3, r1
900067de:	3384      	adds	r3, #132	@ 0x84
900067e0:	4619      	mov	r1, r3
900067e2:	4b4f      	ldr	r3, [pc, #316]	@ (90006920 <LTDC_SetConfig+0x2e4>)
900067e4:	4013      	ands	r3, r2
900067e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900067e8:	68bb      	ldr	r3, [r7, #8]
900067ea:	69da      	ldr	r2, [r3, #28]
900067ec:	68bb      	ldr	r3, [r7, #8]
900067ee:	6a1b      	ldr	r3, [r3, #32]
900067f0:	68f9      	ldr	r1, [r7, #12]
900067f2:	6809      	ldr	r1, [r1, #0]
900067f4:	4608      	mov	r0, r1
900067f6:	6879      	ldr	r1, [r7, #4]
900067f8:	01c9      	lsls	r1, r1, #7
900067fa:	4401      	add	r1, r0
900067fc:	3184      	adds	r1, #132	@ 0x84
900067fe:	4313      	orrs	r3, r2
90006800:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90006802:	68fb      	ldr	r3, [r7, #12]
90006804:	681b      	ldr	r3, [r3, #0]
90006806:	461a      	mov	r2, r3
90006808:	687b      	ldr	r3, [r7, #4]
9000680a:	01db      	lsls	r3, r3, #7
9000680c:	4413      	add	r3, r2
9000680e:	3384      	adds	r3, #132	@ 0x84
90006810:	461a      	mov	r2, r3
90006812:	68bb      	ldr	r3, [r7, #8]
90006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006816:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006818:	68bb      	ldr	r3, [r7, #8]
9000681a:	691b      	ldr	r3, [r3, #16]
9000681c:	2b00      	cmp	r3, #0
9000681e:	d102      	bne.n	90006826 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90006820:	2304      	movs	r3, #4
90006822:	61fb      	str	r3, [r7, #28]
90006824:	e01b      	b.n	9000685e <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006826:	68bb      	ldr	r3, [r7, #8]
90006828:	691b      	ldr	r3, [r3, #16]
9000682a:	2b01      	cmp	r3, #1
9000682c:	d102      	bne.n	90006834 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
9000682e:	2303      	movs	r3, #3
90006830:	61fb      	str	r3, [r7, #28]
90006832:	e014      	b.n	9000685e <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006834:	68bb      	ldr	r3, [r7, #8]
90006836:	691b      	ldr	r3, [r3, #16]
90006838:	2b04      	cmp	r3, #4
9000683a:	d00b      	beq.n	90006854 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
9000683c:	68bb      	ldr	r3, [r7, #8]
9000683e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006840:	2b02      	cmp	r3, #2
90006842:	d007      	beq.n	90006854 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006844:	68bb      	ldr	r3, [r7, #8]
90006846:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006848:	2b03      	cmp	r3, #3
9000684a:	d003      	beq.n	90006854 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
9000684c:	68bb      	ldr	r3, [r7, #8]
9000684e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006850:	2b07      	cmp	r3, #7
90006852:	d102      	bne.n	9000685a <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90006854:	2302      	movs	r3, #2
90006856:	61fb      	str	r3, [r7, #28]
90006858:	e001      	b.n	9000685e <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
9000685a:	2301      	movs	r3, #1
9000685c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000685e:	68fb      	ldr	r3, [r7, #12]
90006860:	681b      	ldr	r3, [r3, #0]
90006862:	461a      	mov	r2, r3
90006864:	687b      	ldr	r3, [r7, #4]
90006866:	01db      	lsls	r3, r3, #7
90006868:	4413      	add	r3, r2
9000686a:	3384      	adds	r3, #132	@ 0x84
9000686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000686e:	68fa      	ldr	r2, [r7, #12]
90006870:	6812      	ldr	r2, [r2, #0]
90006872:	4611      	mov	r1, r2
90006874:	687a      	ldr	r2, [r7, #4]
90006876:	01d2      	lsls	r2, r2, #7
90006878:	440a      	add	r2, r1
9000687a:	3284      	adds	r2, #132	@ 0x84
9000687c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90006880:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006882:	68bb      	ldr	r3, [r7, #8]
90006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006886:	69fa      	ldr	r2, [r7, #28]
90006888:	fb02 f303 	mul.w	r3, r2, r3
9000688c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000688e:	68bb      	ldr	r3, [r7, #8]
90006890:	6859      	ldr	r1, [r3, #4]
90006892:	68bb      	ldr	r3, [r7, #8]
90006894:	681b      	ldr	r3, [r3, #0]
90006896:	1acb      	subs	r3, r1, r3
90006898:	69f9      	ldr	r1, [r7, #28]
9000689a:	fb01 f303 	mul.w	r3, r1, r3
9000689e:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
900068a0:	68f9      	ldr	r1, [r7, #12]
900068a2:	6809      	ldr	r1, [r1, #0]
900068a4:	4608      	mov	r0, r1
900068a6:	6879      	ldr	r1, [r7, #4]
900068a8:	01c9      	lsls	r1, r1, #7
900068aa:	4401      	add	r1, r0
900068ac:	3184      	adds	r1, #132	@ 0x84
900068ae:	4313      	orrs	r3, r2
900068b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900068b2:	68fb      	ldr	r3, [r7, #12]
900068b4:	681b      	ldr	r3, [r3, #0]
900068b6:	461a      	mov	r2, r3
900068b8:	687b      	ldr	r3, [r7, #4]
900068ba:	01db      	lsls	r3, r3, #7
900068bc:	4413      	add	r3, r2
900068be:	3384      	adds	r3, #132	@ 0x84
900068c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
900068c2:	68fb      	ldr	r3, [r7, #12]
900068c4:	681b      	ldr	r3, [r3, #0]
900068c6:	4619      	mov	r1, r3
900068c8:	687b      	ldr	r3, [r7, #4]
900068ca:	01db      	lsls	r3, r3, #7
900068cc:	440b      	add	r3, r1
900068ce:	3384      	adds	r3, #132	@ 0x84
900068d0:	4619      	mov	r1, r3
900068d2:	4b14      	ldr	r3, [pc, #80]	@ (90006924 <LTDC_SetConfig+0x2e8>)
900068d4:	4013      	ands	r3, r2
900068d6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900068d8:	68fb      	ldr	r3, [r7, #12]
900068da:	681b      	ldr	r3, [r3, #0]
900068dc:	461a      	mov	r2, r3
900068de:	687b      	ldr	r3, [r7, #4]
900068e0:	01db      	lsls	r3, r3, #7
900068e2:	4413      	add	r3, r2
900068e4:	3384      	adds	r3, #132	@ 0x84
900068e6:	461a      	mov	r2, r3
900068e8:	68bb      	ldr	r3, [r7, #8]
900068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900068ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900068ee:	68fb      	ldr	r3, [r7, #12]
900068f0:	681b      	ldr	r3, [r3, #0]
900068f2:	461a      	mov	r2, r3
900068f4:	687b      	ldr	r3, [r7, #4]
900068f6:	01db      	lsls	r3, r3, #7
900068f8:	4413      	add	r3, r2
900068fa:	3384      	adds	r3, #132	@ 0x84
900068fc:	681b      	ldr	r3, [r3, #0]
900068fe:	68fa      	ldr	r2, [r7, #12]
90006900:	6812      	ldr	r2, [r2, #0]
90006902:	4611      	mov	r1, r2
90006904:	687a      	ldr	r2, [r7, #4]
90006906:	01d2      	lsls	r2, r2, #7
90006908:	440a      	add	r2, r1
9000690a:	3284      	adds	r2, #132	@ 0x84
9000690c:	f043 0301 	orr.w	r3, r3, #1
90006910:	6013      	str	r3, [r2, #0]
}
90006912:	bf00      	nop
90006914:	3724      	adds	r7, #36	@ 0x24
90006916:	46bd      	mov	sp, r7
90006918:	f85d 7b04 	ldr.w	r7, [sp], #4
9000691c:	4770      	bx	lr
9000691e:	bf00      	nop
90006920:	fffff8f8 	.word	0xfffff8f8
90006924:	fffff800 	.word	0xfffff800

90006928 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006928:	b580      	push	{r7, lr}
9000692a:	b084      	sub	sp, #16
9000692c:	af00      	add	r7, sp, #0
9000692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006930:	f7fc fc8e 	bl	90003250 <HAL_GetTick>
90006934:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006936:	687b      	ldr	r3, [r7, #4]
90006938:	2b00      	cmp	r3, #0
9000693a:	d101      	bne.n	90006940 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
9000693c:	2301      	movs	r3, #1
9000693e:	e03b      	b.n	900069b8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006940:	687b      	ldr	r3, [r7, #4]
90006942:	2200      	movs	r2, #0
90006944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006948:	687b      	ldr	r3, [r7, #4]
9000694a:	2202      	movs	r2, #2
9000694c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006950:	687b      	ldr	r3, [r7, #4]
90006952:	681b      	ldr	r3, [r3, #0]
90006954:	68da      	ldr	r2, [r3, #12]
90006956:	687b      	ldr	r3, [r7, #4]
90006958:	681b      	ldr	r3, [r3, #0]
9000695a:	f022 0201 	bic.w	r2, r2, #1
9000695e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006960:	e00f      	b.n	90006982 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006962:	f7fc fc75 	bl	90003250 <HAL_GetTick>
90006966:	4602      	mov	r2, r0
90006968:	68fb      	ldr	r3, [r7, #12]
9000696a:	1ad3      	subs	r3, r2, r3
9000696c:	2b05      	cmp	r3, #5
9000696e:	d908      	bls.n	90006982 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006970:	687b      	ldr	r3, [r7, #4]
90006972:	2240      	movs	r2, #64	@ 0x40
90006974:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006976:	687b      	ldr	r3, [r7, #4]
90006978:	2203      	movs	r2, #3
9000697a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
9000697e:	2301      	movs	r3, #1
90006980:	e01a      	b.n	900069b8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006982:	687b      	ldr	r3, [r7, #4]
90006984:	681b      	ldr	r3, [r3, #0]
90006986:	68db      	ldr	r3, [r3, #12]
90006988:	f003 0301 	and.w	r3, r3, #1
9000698c:	2b00      	cmp	r3, #0
9000698e:	d1e8      	bne.n	90006962 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006990:	6878      	ldr	r0, [r7, #4]
90006992:	f000 f86d 	bl	90006a70 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006996:	687b      	ldr	r3, [r7, #4]
90006998:	2200      	movs	r2, #0
9000699a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
9000699c:	687b      	ldr	r3, [r7, #4]
9000699e:	2200      	movs	r2, #0
900069a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
900069a2:	687b      	ldr	r3, [r7, #4]
900069a4:	2200      	movs	r2, #0
900069a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900069a8:	687b      	ldr	r3, [r7, #4]
900069aa:	2200      	movs	r2, #0
900069ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
900069ae:	687b      	ldr	r3, [r7, #4]
900069b0:	2201      	movs	r2, #1
900069b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
900069b6:	2300      	movs	r3, #0
}
900069b8:	4618      	mov	r0, r3
900069ba:	3710      	adds	r7, #16
900069bc:	46bd      	mov	sp, r7
900069be:	bd80      	pop	{r7, pc}

900069c0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
900069c0:	b480      	push	{r7}
900069c2:	b083      	sub	sp, #12
900069c4:	af00      	add	r7, sp, #0
900069c6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900069c8:	687b      	ldr	r3, [r7, #4]
900069ca:	2b00      	cmp	r3, #0
900069cc:	d101      	bne.n	900069d2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
900069ce:	2301      	movs	r3, #1
900069d0:	e048      	b.n	90006a64 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
900069d2:	687b      	ldr	r3, [r7, #4]
900069d4:	681b      	ldr	r3, [r3, #0]
900069d6:	68da      	ldr	r2, [r3, #12]
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	681b      	ldr	r3, [r3, #0]
900069dc:	f022 0201 	bic.w	r2, r2, #1
900069e0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
900069e2:	687b      	ldr	r3, [r7, #4]
900069e4:	681b      	ldr	r3, [r3, #0]
900069e6:	2200      	movs	r2, #0
900069e8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
900069ea:	687b      	ldr	r3, [r7, #4]
900069ec:	681b      	ldr	r3, [r3, #0]
900069ee:	2200      	movs	r2, #0
900069f0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
900069f2:	687b      	ldr	r3, [r7, #4]
900069f4:	681b      	ldr	r3, [r3, #0]
900069f6:	2200      	movs	r2, #0
900069f8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
900069fa:	687b      	ldr	r3, [r7, #4]
900069fc:	681b      	ldr	r3, [r3, #0]
900069fe:	2200      	movs	r2, #0
90006a00:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006a02:	687b      	ldr	r3, [r7, #4]
90006a04:	681b      	ldr	r3, [r3, #0]
90006a06:	2200      	movs	r2, #0
90006a08:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006a0a:	687b      	ldr	r3, [r7, #4]
90006a0c:	681b      	ldr	r3, [r3, #0]
90006a0e:	2200      	movs	r2, #0
90006a10:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006a12:	687b      	ldr	r3, [r7, #4]
90006a14:	681b      	ldr	r3, [r3, #0]
90006a16:	2200      	movs	r2, #0
90006a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90006a1a:	687b      	ldr	r3, [r7, #4]
90006a1c:	681b      	ldr	r3, [r3, #0]
90006a1e:	2200      	movs	r2, #0
90006a20:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006a22:	687b      	ldr	r3, [r7, #4]
90006a24:	681b      	ldr	r3, [r3, #0]
90006a26:	2200      	movs	r2, #0
90006a28:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006a2a:	687b      	ldr	r3, [r7, #4]
90006a2c:	681b      	ldr	r3, [r3, #0]
90006a2e:	2200      	movs	r2, #0
90006a30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006a32:	687b      	ldr	r3, [r7, #4]
90006a34:	681b      	ldr	r3, [r3, #0]
90006a36:	221f      	movs	r2, #31
90006a38:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006a3a:	687b      	ldr	r3, [r7, #4]
90006a3c:	2200      	movs	r2, #0
90006a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006a40:	687b      	ldr	r3, [r7, #4]
90006a42:	2200      	movs	r2, #0
90006a44:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006a46:	687b      	ldr	r3, [r7, #4]
90006a48:	2200      	movs	r2, #0
90006a4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006a4c:	687b      	ldr	r3, [r7, #4]
90006a4e:	2200      	movs	r2, #0
90006a50:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006a52:	687b      	ldr	r3, [r7, #4]
90006a54:	2200      	movs	r2, #0
90006a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006a5a:	687b      	ldr	r3, [r7, #4]
90006a5c:	2200      	movs	r2, #0
90006a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006a62:	2300      	movs	r3, #0
}
90006a64:	4618      	mov	r0, r3
90006a66:	370c      	adds	r7, #12
90006a68:	46bd      	mov	sp, r7
90006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a6e:	4770      	bx	lr

90006a70 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006a70:	b480      	push	{r7}
90006a72:	b085      	sub	sp, #20
90006a74:	af00      	add	r7, sp, #0
90006a76:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006a78:	687b      	ldr	r3, [r7, #4]
90006a7a:	68d9      	ldr	r1, [r3, #12]
90006a7c:	687b      	ldr	r3, [r7, #4]
90006a7e:	691a      	ldr	r2, [r3, #16]
90006a80:	687b      	ldr	r3, [r7, #4]
90006a82:	681b      	ldr	r3, [r3, #0]
90006a84:	430a      	orrs	r2, r1
90006a86:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a88:	687b      	ldr	r3, [r7, #4]
90006a8a:	695a      	ldr	r2, [r3, #20]
90006a8c:	687b      	ldr	r3, [r7, #4]
90006a8e:	699b      	ldr	r3, [r3, #24]
90006a90:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a92:	687b      	ldr	r3, [r7, #4]
90006a94:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a96:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a98:	687b      	ldr	r3, [r7, #4]
90006a9a:	6a1b      	ldr	r3, [r3, #32]
90006a9c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006a9e:	687b      	ldr	r3, [r7, #4]
90006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006aa2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006aa4:	687b      	ldr	r3, [r7, #4]
90006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006aa8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006aaa:	687b      	ldr	r3, [r7, #4]
90006aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006aae:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006ab0:	687b      	ldr	r3, [r7, #4]
90006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006ab4:	3b01      	subs	r3, #1
90006ab6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006ab8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006abc:	687b      	ldr	r3, [r7, #4]
90006abe:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006ac0:	687b      	ldr	r3, [r7, #4]
90006ac2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006ac4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006ac6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006ac8:	687b      	ldr	r3, [r7, #4]
90006aca:	685b      	ldr	r3, [r3, #4]
90006acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006ad0:	d107      	bne.n	90006ae2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006ad2:	687b      	ldr	r3, [r7, #4]
90006ad4:	681b      	ldr	r3, [r3, #0]
90006ad6:	691a      	ldr	r2, [r3, #16]
90006ad8:	687b      	ldr	r3, [r7, #4]
90006ada:	681b      	ldr	r3, [r3, #0]
90006adc:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006ae0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006ae2:	687b      	ldr	r3, [r7, #4]
90006ae4:	681b      	ldr	r3, [r3, #0]
90006ae6:	2200      	movs	r2, #0
90006ae8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006aea:	687b      	ldr	r3, [r7, #4]
90006aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006aee:	2b00      	cmp	r3, #0
90006af0:	da11      	bge.n	90006b16 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006af2:	687b      	ldr	r3, [r7, #4]
90006af4:	681b      	ldr	r3, [r3, #0]
90006af6:	695a      	ldr	r2, [r3, #20]
90006af8:	687b      	ldr	r3, [r7, #4]
90006afa:	681b      	ldr	r3, [r3, #0]
90006afc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006b00:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006b02:	687b      	ldr	r3, [r7, #4]
90006b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006b06:	425b      	negs	r3, r3
90006b08:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006b0a:	687b      	ldr	r3, [r7, #4]
90006b0c:	681b      	ldr	r3, [r3, #0]
90006b0e:	68fa      	ldr	r2, [r7, #12]
90006b10:	b292      	uxth	r2, r2
90006b12:	621a      	str	r2, [r3, #32]
90006b14:	e006      	b.n	90006b24 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006b16:	687b      	ldr	r3, [r7, #4]
90006b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006b1a:	461a      	mov	r2, r3
90006b1c:	687b      	ldr	r3, [r7, #4]
90006b1e:	681b      	ldr	r3, [r3, #0]
90006b20:	b292      	uxth	r2, r2
90006b22:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006b24:	687b      	ldr	r3, [r7, #4]
90006b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006b28:	2b00      	cmp	r3, #0
90006b2a:	da15      	bge.n	90006b58 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006b2c:	687b      	ldr	r3, [r7, #4]
90006b2e:	681b      	ldr	r3, [r3, #0]
90006b30:	695a      	ldr	r2, [r3, #20]
90006b32:	687b      	ldr	r3, [r7, #4]
90006b34:	681b      	ldr	r3, [r3, #0]
90006b36:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006b3a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006b3c:	687b      	ldr	r3, [r7, #4]
90006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006b40:	425b      	negs	r3, r3
90006b42:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006b44:	687b      	ldr	r3, [r7, #4]
90006b46:	681b      	ldr	r3, [r3, #0]
90006b48:	6a19      	ldr	r1, [r3, #32]
90006b4a:	68fb      	ldr	r3, [r7, #12]
90006b4c:	041a      	lsls	r2, r3, #16
90006b4e:	687b      	ldr	r3, [r7, #4]
90006b50:	681b      	ldr	r3, [r3, #0]
90006b52:	430a      	orrs	r2, r1
90006b54:	621a      	str	r2, [r3, #32]
90006b56:	e009      	b.n	90006b6c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006b58:	687b      	ldr	r3, [r7, #4]
90006b5a:	681b      	ldr	r3, [r3, #0]
90006b5c:	6a19      	ldr	r1, [r3, #32]
90006b5e:	687b      	ldr	r3, [r7, #4]
90006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006b62:	041a      	lsls	r2, r3, #16
90006b64:	687b      	ldr	r3, [r7, #4]
90006b66:	681b      	ldr	r3, [r3, #0]
90006b68:	430a      	orrs	r2, r1
90006b6a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006b6c:	687b      	ldr	r3, [r7, #4]
90006b6e:	685b      	ldr	r3, [r3, #4]
90006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006b74:	d006      	beq.n	90006b84 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006b76:	687b      	ldr	r3, [r7, #4]
90006b78:	685a      	ldr	r2, [r3, #4]
90006b7a:	687b      	ldr	r3, [r7, #4]
90006b7c:	681b      	ldr	r3, [r3, #0]
90006b7e:	b2d2      	uxtb	r2, r2
90006b80:	629a      	str	r2, [r3, #40]	@ 0x28
90006b82:	e003      	b.n	90006b8c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006b84:	687b      	ldr	r3, [r7, #4]
90006b86:	681b      	ldr	r3, [r3, #0]
90006b88:	2200      	movs	r2, #0
90006b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006b8c:	687b      	ldr	r3, [r7, #4]
90006b8e:	681b      	ldr	r3, [r3, #0]
90006b90:	2200      	movs	r2, #0
90006b92:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006b94:	bf00      	nop
90006b96:	3714      	adds	r7, #20
90006b98:	46bd      	mov	sp, r7
90006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006b9e:	4770      	bx	lr

90006ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006ba0:	b580      	push	{r7, lr}
90006ba2:	b08c      	sub	sp, #48	@ 0x30
90006ba4:	af00      	add	r7, sp, #0
90006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006ba8:	687b      	ldr	r3, [r7, #4]
90006baa:	2b00      	cmp	r3, #0
90006bac:	d102      	bne.n	90006bb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006bae:	2301      	movs	r3, #1
90006bb0:	f000 bc48 	b.w	90007444 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006bb4:	687b      	ldr	r3, [r7, #4]
90006bb6:	681b      	ldr	r3, [r3, #0]
90006bb8:	f003 0301 	and.w	r3, r3, #1
90006bbc:	2b00      	cmp	r3, #0
90006bbe:	f000 8088 	beq.w	90006cd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006bc2:	4b99      	ldr	r3, [pc, #612]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006bc4:	691b      	ldr	r3, [r3, #16]
90006bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006bcc:	4b96      	ldr	r3, [pc, #600]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006bd4:	2b10      	cmp	r3, #16
90006bd6:	d007      	beq.n	90006be8 <HAL_RCC_OscConfig+0x48>
90006bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006bda:	2b18      	cmp	r3, #24
90006bdc:	d111      	bne.n	90006c02 <HAL_RCC_OscConfig+0x62>
90006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006be0:	f003 0303 	and.w	r3, r3, #3
90006be4:	2b02      	cmp	r3, #2
90006be6:	d10c      	bne.n	90006c02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006be8:	4b8f      	ldr	r3, [pc, #572]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006bea:	681b      	ldr	r3, [r3, #0]
90006bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006bf0:	2b00      	cmp	r3, #0
90006bf2:	d06d      	beq.n	90006cd0 <HAL_RCC_OscConfig+0x130>
90006bf4:	687b      	ldr	r3, [r7, #4]
90006bf6:	685b      	ldr	r3, [r3, #4]
90006bf8:	2b00      	cmp	r3, #0
90006bfa:	d169      	bne.n	90006cd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006bfc:	2301      	movs	r3, #1
90006bfe:	f000 bc21 	b.w	90007444 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006c02:	687b      	ldr	r3, [r7, #4]
90006c04:	685b      	ldr	r3, [r3, #4]
90006c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006c0a:	d106      	bne.n	90006c1a <HAL_RCC_OscConfig+0x7a>
90006c0c:	4b86      	ldr	r3, [pc, #536]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c0e:	681b      	ldr	r3, [r3, #0]
90006c10:	4a85      	ldr	r2, [pc, #532]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006c16:	6013      	str	r3, [r2, #0]
90006c18:	e02e      	b.n	90006c78 <HAL_RCC_OscConfig+0xd8>
90006c1a:	687b      	ldr	r3, [r7, #4]
90006c1c:	685b      	ldr	r3, [r3, #4]
90006c1e:	2b00      	cmp	r3, #0
90006c20:	d10c      	bne.n	90006c3c <HAL_RCC_OscConfig+0x9c>
90006c22:	4b81      	ldr	r3, [pc, #516]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c24:	681b      	ldr	r3, [r3, #0]
90006c26:	4a80      	ldr	r2, [pc, #512]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006c2c:	6013      	str	r3, [r2, #0]
90006c2e:	4b7e      	ldr	r3, [pc, #504]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c30:	681b      	ldr	r3, [r3, #0]
90006c32:	4a7d      	ldr	r2, [pc, #500]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006c38:	6013      	str	r3, [r2, #0]
90006c3a:	e01d      	b.n	90006c78 <HAL_RCC_OscConfig+0xd8>
90006c3c:	687b      	ldr	r3, [r7, #4]
90006c3e:	685b      	ldr	r3, [r3, #4]
90006c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006c44:	d10c      	bne.n	90006c60 <HAL_RCC_OscConfig+0xc0>
90006c46:	4b78      	ldr	r3, [pc, #480]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c48:	681b      	ldr	r3, [r3, #0]
90006c4a:	4a77      	ldr	r2, [pc, #476]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006c50:	6013      	str	r3, [r2, #0]
90006c52:	4b75      	ldr	r3, [pc, #468]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c54:	681b      	ldr	r3, [r3, #0]
90006c56:	4a74      	ldr	r2, [pc, #464]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006c5c:	6013      	str	r3, [r2, #0]
90006c5e:	e00b      	b.n	90006c78 <HAL_RCC_OscConfig+0xd8>
90006c60:	4b71      	ldr	r3, [pc, #452]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c62:	681b      	ldr	r3, [r3, #0]
90006c64:	4a70      	ldr	r2, [pc, #448]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006c6a:	6013      	str	r3, [r2, #0]
90006c6c:	4b6e      	ldr	r3, [pc, #440]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c6e:	681b      	ldr	r3, [r3, #0]
90006c70:	4a6d      	ldr	r2, [pc, #436]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006c78:	687b      	ldr	r3, [r7, #4]
90006c7a:	685b      	ldr	r3, [r3, #4]
90006c7c:	2b00      	cmp	r3, #0
90006c7e:	d013      	beq.n	90006ca8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006c80:	f7fc fae6 	bl	90003250 <HAL_GetTick>
90006c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006c86:	e008      	b.n	90006c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006c88:	f7fc fae2 	bl	90003250 <HAL_GetTick>
90006c8c:	4602      	mov	r2, r0
90006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c90:	1ad3      	subs	r3, r2, r3
90006c92:	2b64      	cmp	r3, #100	@ 0x64
90006c94:	d901      	bls.n	90006c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006c96:	2303      	movs	r3, #3
90006c98:	e3d4      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006c9a:	4b63      	ldr	r3, [pc, #396]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006c9c:	681b      	ldr	r3, [r3, #0]
90006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006ca2:	2b00      	cmp	r3, #0
90006ca4:	d0f0      	beq.n	90006c88 <HAL_RCC_OscConfig+0xe8>
90006ca6:	e014      	b.n	90006cd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006ca8:	f7fc fad2 	bl	90003250 <HAL_GetTick>
90006cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006cae:	e008      	b.n	90006cc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006cb0:	f7fc face 	bl	90003250 <HAL_GetTick>
90006cb4:	4602      	mov	r2, r0
90006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006cb8:	1ad3      	subs	r3, r2, r3
90006cba:	2b64      	cmp	r3, #100	@ 0x64
90006cbc:	d901      	bls.n	90006cc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006cbe:	2303      	movs	r3, #3
90006cc0:	e3c0      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006cc2:	4b59      	ldr	r3, [pc, #356]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006cc4:	681b      	ldr	r3, [r3, #0]
90006cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006cca:	2b00      	cmp	r3, #0
90006ccc:	d1f0      	bne.n	90006cb0 <HAL_RCC_OscConfig+0x110>
90006cce:	e000      	b.n	90006cd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006cd2:	687b      	ldr	r3, [r7, #4]
90006cd4:	681b      	ldr	r3, [r3, #0]
90006cd6:	f003 0302 	and.w	r3, r3, #2
90006cda:	2b00      	cmp	r3, #0
90006cdc:	f000 80ca 	beq.w	90006e74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006ce0:	4b51      	ldr	r3, [pc, #324]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006ce2:	691b      	ldr	r3, [r3, #16]
90006ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006ce8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006cea:	4b4f      	ldr	r3, [pc, #316]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006cee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006cf0:	6a3b      	ldr	r3, [r7, #32]
90006cf2:	2b00      	cmp	r3, #0
90006cf4:	d007      	beq.n	90006d06 <HAL_RCC_OscConfig+0x166>
90006cf6:	6a3b      	ldr	r3, [r7, #32]
90006cf8:	2b18      	cmp	r3, #24
90006cfa:	d156      	bne.n	90006daa <HAL_RCC_OscConfig+0x20a>
90006cfc:	69fb      	ldr	r3, [r7, #28]
90006cfe:	f003 0303 	and.w	r3, r3, #3
90006d02:	2b00      	cmp	r3, #0
90006d04:	d151      	bne.n	90006daa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d06:	4b48      	ldr	r3, [pc, #288]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d08:	681b      	ldr	r3, [r3, #0]
90006d0a:	f003 0304 	and.w	r3, r3, #4
90006d0e:	2b00      	cmp	r3, #0
90006d10:	d005      	beq.n	90006d1e <HAL_RCC_OscConfig+0x17e>
90006d12:	687b      	ldr	r3, [r7, #4]
90006d14:	68db      	ldr	r3, [r3, #12]
90006d16:	2b00      	cmp	r3, #0
90006d18:	d101      	bne.n	90006d1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006d1a:	2301      	movs	r3, #1
90006d1c:	e392      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006d1e:	4b42      	ldr	r3, [pc, #264]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d20:	681b      	ldr	r3, [r3, #0]
90006d22:	f023 0219 	bic.w	r2, r3, #25
90006d26:	687b      	ldr	r3, [r7, #4]
90006d28:	68db      	ldr	r3, [r3, #12]
90006d2a:	493f      	ldr	r1, [pc, #252]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d2c:	4313      	orrs	r3, r2
90006d2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d30:	f7fc fa8e 	bl	90003250 <HAL_GetTick>
90006d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006d36:	e008      	b.n	90006d4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006d38:	f7fc fa8a 	bl	90003250 <HAL_GetTick>
90006d3c:	4602      	mov	r2, r0
90006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006d40:	1ad3      	subs	r3, r2, r3
90006d42:	2b02      	cmp	r3, #2
90006d44:	d901      	bls.n	90006d4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006d46:	2303      	movs	r3, #3
90006d48:	e37c      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006d4a:	4b37      	ldr	r3, [pc, #220]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d4c:	681b      	ldr	r3, [r3, #0]
90006d4e:	f003 0304 	and.w	r3, r3, #4
90006d52:	2b00      	cmp	r3, #0
90006d54:	d0f0      	beq.n	90006d38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d56:	f7fc faab 	bl	900032b0 <HAL_GetREVID>
90006d5a:	4603      	mov	r3, r0
90006d5c:	f241 0203 	movw	r2, #4099	@ 0x1003
90006d60:	4293      	cmp	r3, r2
90006d62:	d817      	bhi.n	90006d94 <HAL_RCC_OscConfig+0x1f4>
90006d64:	687b      	ldr	r3, [r7, #4]
90006d66:	691b      	ldr	r3, [r3, #16]
90006d68:	2b40      	cmp	r3, #64	@ 0x40
90006d6a:	d108      	bne.n	90006d7e <HAL_RCC_OscConfig+0x1de>
90006d6c:	4b2e      	ldr	r3, [pc, #184]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d6e:	685b      	ldr	r3, [r3, #4]
90006d70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006d74:	4a2c      	ldr	r2, [pc, #176]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006d7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d7c:	e07a      	b.n	90006e74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d7e:	4b2a      	ldr	r3, [pc, #168]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d80:	685b      	ldr	r3, [r3, #4]
90006d82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006d86:	687b      	ldr	r3, [r7, #4]
90006d88:	691b      	ldr	r3, [r3, #16]
90006d8a:	031b      	lsls	r3, r3, #12
90006d8c:	4926      	ldr	r1, [pc, #152]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d8e:	4313      	orrs	r3, r2
90006d90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d92:	e06f      	b.n	90006e74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d94:	4b24      	ldr	r3, [pc, #144]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006d96:	685b      	ldr	r3, [r3, #4]
90006d98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006d9c:	687b      	ldr	r3, [r7, #4]
90006d9e:	691b      	ldr	r3, [r3, #16]
90006da0:	061b      	lsls	r3, r3, #24
90006da2:	4921      	ldr	r1, [pc, #132]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006da4:	4313      	orrs	r3, r2
90006da6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006da8:	e064      	b.n	90006e74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006daa:	687b      	ldr	r3, [r7, #4]
90006dac:	68db      	ldr	r3, [r3, #12]
90006dae:	2b00      	cmp	r3, #0
90006db0:	d047      	beq.n	90006e42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006db2:	4b1d      	ldr	r3, [pc, #116]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006db4:	681b      	ldr	r3, [r3, #0]
90006db6:	f023 0219 	bic.w	r2, r3, #25
90006dba:	687b      	ldr	r3, [r7, #4]
90006dbc:	68db      	ldr	r3, [r3, #12]
90006dbe:	491a      	ldr	r1, [pc, #104]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006dc0:	4313      	orrs	r3, r2
90006dc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006dc4:	f7fc fa44 	bl	90003250 <HAL_GetTick>
90006dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dca:	e008      	b.n	90006dde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006dcc:	f7fc fa40 	bl	90003250 <HAL_GetTick>
90006dd0:	4602      	mov	r2, r0
90006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006dd4:	1ad3      	subs	r3, r2, r3
90006dd6:	2b02      	cmp	r3, #2
90006dd8:	d901      	bls.n	90006dde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006dda:	2303      	movs	r3, #3
90006ddc:	e332      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dde:	4b12      	ldr	r3, [pc, #72]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006de0:	681b      	ldr	r3, [r3, #0]
90006de2:	f003 0304 	and.w	r3, r3, #4
90006de6:	2b00      	cmp	r3, #0
90006de8:	d0f0      	beq.n	90006dcc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006dea:	f7fc fa61 	bl	900032b0 <HAL_GetREVID>
90006dee:	4603      	mov	r3, r0
90006df0:	f241 0203 	movw	r2, #4099	@ 0x1003
90006df4:	4293      	cmp	r3, r2
90006df6:	d819      	bhi.n	90006e2c <HAL_RCC_OscConfig+0x28c>
90006df8:	687b      	ldr	r3, [r7, #4]
90006dfa:	691b      	ldr	r3, [r3, #16]
90006dfc:	2b40      	cmp	r3, #64	@ 0x40
90006dfe:	d108      	bne.n	90006e12 <HAL_RCC_OscConfig+0x272>
90006e00:	4b09      	ldr	r3, [pc, #36]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006e02:	685b      	ldr	r3, [r3, #4]
90006e04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006e08:	4a07      	ldr	r2, [pc, #28]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006e0e:	6053      	str	r3, [r2, #4]
90006e10:	e030      	b.n	90006e74 <HAL_RCC_OscConfig+0x2d4>
90006e12:	4b05      	ldr	r3, [pc, #20]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006e14:	685b      	ldr	r3, [r3, #4]
90006e16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006e1a:	687b      	ldr	r3, [r7, #4]
90006e1c:	691b      	ldr	r3, [r3, #16]
90006e1e:	031b      	lsls	r3, r3, #12
90006e20:	4901      	ldr	r1, [pc, #4]	@ (90006e28 <HAL_RCC_OscConfig+0x288>)
90006e22:	4313      	orrs	r3, r2
90006e24:	604b      	str	r3, [r1, #4]
90006e26:	e025      	b.n	90006e74 <HAL_RCC_OscConfig+0x2d4>
90006e28:	58024400 	.word	0x58024400
90006e2c:	4b9a      	ldr	r3, [pc, #616]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006e2e:	685b      	ldr	r3, [r3, #4]
90006e30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006e34:	687b      	ldr	r3, [r7, #4]
90006e36:	691b      	ldr	r3, [r3, #16]
90006e38:	061b      	lsls	r3, r3, #24
90006e3a:	4997      	ldr	r1, [pc, #604]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006e3c:	4313      	orrs	r3, r2
90006e3e:	604b      	str	r3, [r1, #4]
90006e40:	e018      	b.n	90006e74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006e42:	4b95      	ldr	r3, [pc, #596]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006e44:	681b      	ldr	r3, [r3, #0]
90006e46:	4a94      	ldr	r2, [pc, #592]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006e48:	f023 0301 	bic.w	r3, r3, #1
90006e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e4e:	f7fc f9ff 	bl	90003250 <HAL_GetTick>
90006e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006e54:	e008      	b.n	90006e68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006e56:	f7fc f9fb 	bl	90003250 <HAL_GetTick>
90006e5a:	4602      	mov	r2, r0
90006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e5e:	1ad3      	subs	r3, r2, r3
90006e60:	2b02      	cmp	r3, #2
90006e62:	d901      	bls.n	90006e68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006e64:	2303      	movs	r3, #3
90006e66:	e2ed      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006e68:	4b8b      	ldr	r3, [pc, #556]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006e6a:	681b      	ldr	r3, [r3, #0]
90006e6c:	f003 0304 	and.w	r3, r3, #4
90006e70:	2b00      	cmp	r3, #0
90006e72:	d1f0      	bne.n	90006e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006e74:	687b      	ldr	r3, [r7, #4]
90006e76:	681b      	ldr	r3, [r3, #0]
90006e78:	f003 0310 	and.w	r3, r3, #16
90006e7c:	2b00      	cmp	r3, #0
90006e7e:	f000 80a9 	beq.w	90006fd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006e82:	4b85      	ldr	r3, [pc, #532]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006e84:	691b      	ldr	r3, [r3, #16]
90006e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006e8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006e8c:	4b82      	ldr	r3, [pc, #520]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006e90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006e92:	69bb      	ldr	r3, [r7, #24]
90006e94:	2b08      	cmp	r3, #8
90006e96:	d007      	beq.n	90006ea8 <HAL_RCC_OscConfig+0x308>
90006e98:	69bb      	ldr	r3, [r7, #24]
90006e9a:	2b18      	cmp	r3, #24
90006e9c:	d13a      	bne.n	90006f14 <HAL_RCC_OscConfig+0x374>
90006e9e:	697b      	ldr	r3, [r7, #20]
90006ea0:	f003 0303 	and.w	r3, r3, #3
90006ea4:	2b01      	cmp	r3, #1
90006ea6:	d135      	bne.n	90006f14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006ea8:	4b7b      	ldr	r3, [pc, #492]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006eaa:	681b      	ldr	r3, [r3, #0]
90006eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006eb0:	2b00      	cmp	r3, #0
90006eb2:	d005      	beq.n	90006ec0 <HAL_RCC_OscConfig+0x320>
90006eb4:	687b      	ldr	r3, [r7, #4]
90006eb6:	69db      	ldr	r3, [r3, #28]
90006eb8:	2b80      	cmp	r3, #128	@ 0x80
90006eba:	d001      	beq.n	90006ec0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006ebc:	2301      	movs	r3, #1
90006ebe:	e2c1      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006ec0:	f7fc f9f6 	bl	900032b0 <HAL_GetREVID>
90006ec4:	4603      	mov	r3, r0
90006ec6:	f241 0203 	movw	r2, #4099	@ 0x1003
90006eca:	4293      	cmp	r3, r2
90006ecc:	d817      	bhi.n	90006efe <HAL_RCC_OscConfig+0x35e>
90006ece:	687b      	ldr	r3, [r7, #4]
90006ed0:	6a1b      	ldr	r3, [r3, #32]
90006ed2:	2b20      	cmp	r3, #32
90006ed4:	d108      	bne.n	90006ee8 <HAL_RCC_OscConfig+0x348>
90006ed6:	4b70      	ldr	r3, [pc, #448]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006ed8:	685b      	ldr	r3, [r3, #4]
90006eda:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006ede:	4a6e      	ldr	r2, [pc, #440]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006ee0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006ee4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006ee6:	e075      	b.n	90006fd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006ee8:	4b6b      	ldr	r3, [pc, #428]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006eea:	685b      	ldr	r3, [r3, #4]
90006eec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006ef0:	687b      	ldr	r3, [r7, #4]
90006ef2:	6a1b      	ldr	r3, [r3, #32]
90006ef4:	069b      	lsls	r3, r3, #26
90006ef6:	4968      	ldr	r1, [pc, #416]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006ef8:	4313      	orrs	r3, r2
90006efa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006efc:	e06a      	b.n	90006fd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006efe:	4b66      	ldr	r3, [pc, #408]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f00:	68db      	ldr	r3, [r3, #12]
90006f02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006f06:	687b      	ldr	r3, [r7, #4]
90006f08:	6a1b      	ldr	r3, [r3, #32]
90006f0a:	061b      	lsls	r3, r3, #24
90006f0c:	4962      	ldr	r1, [pc, #392]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f0e:	4313      	orrs	r3, r2
90006f10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f12:	e05f      	b.n	90006fd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006f14:	687b      	ldr	r3, [r7, #4]
90006f16:	69db      	ldr	r3, [r3, #28]
90006f18:	2b00      	cmp	r3, #0
90006f1a:	d042      	beq.n	90006fa2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006f1c:	4b5e      	ldr	r3, [pc, #376]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f1e:	681b      	ldr	r3, [r3, #0]
90006f20:	4a5d      	ldr	r2, [pc, #372]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90006f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f28:	f7fc f992 	bl	90003250 <HAL_GetTick>
90006f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006f2e:	e008      	b.n	90006f42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006f30:	f7fc f98e 	bl	90003250 <HAL_GetTick>
90006f34:	4602      	mov	r2, r0
90006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f38:	1ad3      	subs	r3, r2, r3
90006f3a:	2b02      	cmp	r3, #2
90006f3c:	d901      	bls.n	90006f42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006f3e:	2303      	movs	r3, #3
90006f40:	e280      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006f42:	4b55      	ldr	r3, [pc, #340]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f44:	681b      	ldr	r3, [r3, #0]
90006f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006f4a:	2b00      	cmp	r3, #0
90006f4c:	d0f0      	beq.n	90006f30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f4e:	f7fc f9af 	bl	900032b0 <HAL_GetREVID>
90006f52:	4603      	mov	r3, r0
90006f54:	f241 0203 	movw	r2, #4099	@ 0x1003
90006f58:	4293      	cmp	r3, r2
90006f5a:	d817      	bhi.n	90006f8c <HAL_RCC_OscConfig+0x3ec>
90006f5c:	687b      	ldr	r3, [r7, #4]
90006f5e:	6a1b      	ldr	r3, [r3, #32]
90006f60:	2b20      	cmp	r3, #32
90006f62:	d108      	bne.n	90006f76 <HAL_RCC_OscConfig+0x3d6>
90006f64:	4b4c      	ldr	r3, [pc, #304]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f66:	685b      	ldr	r3, [r3, #4]
90006f68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006f6c:	4a4a      	ldr	r2, [pc, #296]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006f72:	6053      	str	r3, [r2, #4]
90006f74:	e02e      	b.n	90006fd4 <HAL_RCC_OscConfig+0x434>
90006f76:	4b48      	ldr	r3, [pc, #288]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f78:	685b      	ldr	r3, [r3, #4]
90006f7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006f7e:	687b      	ldr	r3, [r7, #4]
90006f80:	6a1b      	ldr	r3, [r3, #32]
90006f82:	069b      	lsls	r3, r3, #26
90006f84:	4944      	ldr	r1, [pc, #272]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f86:	4313      	orrs	r3, r2
90006f88:	604b      	str	r3, [r1, #4]
90006f8a:	e023      	b.n	90006fd4 <HAL_RCC_OscConfig+0x434>
90006f8c:	4b42      	ldr	r3, [pc, #264]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f8e:	68db      	ldr	r3, [r3, #12]
90006f90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006f94:	687b      	ldr	r3, [r7, #4]
90006f96:	6a1b      	ldr	r3, [r3, #32]
90006f98:	061b      	lsls	r3, r3, #24
90006f9a:	493f      	ldr	r1, [pc, #252]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006f9c:	4313      	orrs	r3, r2
90006f9e:	60cb      	str	r3, [r1, #12]
90006fa0:	e018      	b.n	90006fd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90006fa2:	4b3d      	ldr	r3, [pc, #244]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006fa4:	681b      	ldr	r3, [r3, #0]
90006fa6:	4a3c      	ldr	r2, [pc, #240]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90006fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006fae:	f7fc f94f 	bl	90003250 <HAL_GetTick>
90006fb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006fb4:	e008      	b.n	90006fc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006fb6:	f7fc f94b 	bl	90003250 <HAL_GetTick>
90006fba:	4602      	mov	r2, r0
90006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006fbe:	1ad3      	subs	r3, r2, r3
90006fc0:	2b02      	cmp	r3, #2
90006fc2:	d901      	bls.n	90006fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90006fc4:	2303      	movs	r3, #3
90006fc6:	e23d      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006fc8:	4b33      	ldr	r3, [pc, #204]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006fca:	681b      	ldr	r3, [r3, #0]
90006fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006fd0:	2b00      	cmp	r3, #0
90006fd2:	d1f0      	bne.n	90006fb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90006fd4:	687b      	ldr	r3, [r7, #4]
90006fd6:	681b      	ldr	r3, [r3, #0]
90006fd8:	f003 0308 	and.w	r3, r3, #8
90006fdc:	2b00      	cmp	r3, #0
90006fde:	d036      	beq.n	9000704e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90006fe0:	687b      	ldr	r3, [r7, #4]
90006fe2:	695b      	ldr	r3, [r3, #20]
90006fe4:	2b00      	cmp	r3, #0
90006fe6:	d019      	beq.n	9000701c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90006fe8:	4b2b      	ldr	r3, [pc, #172]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006fec:	4a2a      	ldr	r2, [pc, #168]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90006fee:	f043 0301 	orr.w	r3, r3, #1
90006ff2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006ff4:	f7fc f92c 	bl	90003250 <HAL_GetTick>
90006ff8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006ffa:	e008      	b.n	9000700e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006ffc:	f7fc f928 	bl	90003250 <HAL_GetTick>
90007000:	4602      	mov	r2, r0
90007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007004:	1ad3      	subs	r3, r2, r3
90007006:	2b02      	cmp	r3, #2
90007008:	d901      	bls.n	9000700e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
9000700a:	2303      	movs	r3, #3
9000700c:	e21a      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000700e:	4b22      	ldr	r3, [pc, #136]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90007010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007012:	f003 0302 	and.w	r3, r3, #2
90007016:	2b00      	cmp	r3, #0
90007018:	d0f0      	beq.n	90006ffc <HAL_RCC_OscConfig+0x45c>
9000701a:	e018      	b.n	9000704e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
9000701c:	4b1e      	ldr	r3, [pc, #120]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
9000701e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007020:	4a1d      	ldr	r2, [pc, #116]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90007022:	f023 0301 	bic.w	r3, r3, #1
90007026:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007028:	f7fc f912 	bl	90003250 <HAL_GetTick>
9000702c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000702e:	e008      	b.n	90007042 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007030:	f7fc f90e 	bl	90003250 <HAL_GetTick>
90007034:	4602      	mov	r2, r0
90007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007038:	1ad3      	subs	r3, r2, r3
9000703a:	2b02      	cmp	r3, #2
9000703c:	d901      	bls.n	90007042 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
9000703e:	2303      	movs	r3, #3
90007040:	e200      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90007042:	4b15      	ldr	r3, [pc, #84]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90007044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007046:	f003 0302 	and.w	r3, r3, #2
9000704a:	2b00      	cmp	r3, #0
9000704c:	d1f0      	bne.n	90007030 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000704e:	687b      	ldr	r3, [r7, #4]
90007050:	681b      	ldr	r3, [r3, #0]
90007052:	f003 0320 	and.w	r3, r3, #32
90007056:	2b00      	cmp	r3, #0
90007058:	d039      	beq.n	900070ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000705a:	687b      	ldr	r3, [r7, #4]
9000705c:	699b      	ldr	r3, [r3, #24]
9000705e:	2b00      	cmp	r3, #0
90007060:	d01c      	beq.n	9000709c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90007062:	4b0d      	ldr	r3, [pc, #52]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90007064:	681b      	ldr	r3, [r3, #0]
90007066:	4a0c      	ldr	r2, [pc, #48]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
90007068:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
9000706c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000706e:	f7fc f8ef 	bl	90003250 <HAL_GetTick>
90007072:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007074:	e008      	b.n	90007088 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007076:	f7fc f8eb 	bl	90003250 <HAL_GetTick>
9000707a:	4602      	mov	r2, r0
9000707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000707e:	1ad3      	subs	r3, r2, r3
90007080:	2b02      	cmp	r3, #2
90007082:	d901      	bls.n	90007088 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007084:	2303      	movs	r3, #3
90007086:	e1dd      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007088:	4b03      	ldr	r3, [pc, #12]	@ (90007098 <HAL_RCC_OscConfig+0x4f8>)
9000708a:	681b      	ldr	r3, [r3, #0]
9000708c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007090:	2b00      	cmp	r3, #0
90007092:	d0f0      	beq.n	90007076 <HAL_RCC_OscConfig+0x4d6>
90007094:	e01b      	b.n	900070ce <HAL_RCC_OscConfig+0x52e>
90007096:	bf00      	nop
90007098:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
9000709c:	4b9b      	ldr	r3, [pc, #620]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000709e:	681b      	ldr	r3, [r3, #0]
900070a0:	4a9a      	ldr	r2, [pc, #616]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900070a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
900070a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900070a8:	f7fc f8d2 	bl	90003250 <HAL_GetTick>
900070ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900070ae:	e008      	b.n	900070c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
900070b0:	f7fc f8ce 	bl	90003250 <HAL_GetTick>
900070b4:	4602      	mov	r2, r0
900070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070b8:	1ad3      	subs	r3, r2, r3
900070ba:	2b02      	cmp	r3, #2
900070bc:	d901      	bls.n	900070c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
900070be:	2303      	movs	r3, #3
900070c0:	e1c0      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900070c2:	4b92      	ldr	r3, [pc, #584]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900070c4:	681b      	ldr	r3, [r3, #0]
900070c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900070ca:	2b00      	cmp	r3, #0
900070cc:	d1f0      	bne.n	900070b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900070ce:	687b      	ldr	r3, [r7, #4]
900070d0:	681b      	ldr	r3, [r3, #0]
900070d2:	f003 0304 	and.w	r3, r3, #4
900070d6:	2b00      	cmp	r3, #0
900070d8:	f000 8081 	beq.w	900071de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900070dc:	4b8c      	ldr	r3, [pc, #560]	@ (90007310 <HAL_RCC_OscConfig+0x770>)
900070de:	681b      	ldr	r3, [r3, #0]
900070e0:	4a8b      	ldr	r2, [pc, #556]	@ (90007310 <HAL_RCC_OscConfig+0x770>)
900070e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900070e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900070e8:	f7fc f8b2 	bl	90003250 <HAL_GetTick>
900070ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900070ee:	e008      	b.n	90007102 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900070f0:	f7fc f8ae 	bl	90003250 <HAL_GetTick>
900070f4:	4602      	mov	r2, r0
900070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070f8:	1ad3      	subs	r3, r2, r3
900070fa:	2b64      	cmp	r3, #100	@ 0x64
900070fc:	d901      	bls.n	90007102 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
900070fe:	2303      	movs	r3, #3
90007100:	e1a0      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007102:	4b83      	ldr	r3, [pc, #524]	@ (90007310 <HAL_RCC_OscConfig+0x770>)
90007104:	681b      	ldr	r3, [r3, #0]
90007106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000710a:	2b00      	cmp	r3, #0
9000710c:	d0f0      	beq.n	900070f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000710e:	687b      	ldr	r3, [r7, #4]
90007110:	689b      	ldr	r3, [r3, #8]
90007112:	2b01      	cmp	r3, #1
90007114:	d106      	bne.n	90007124 <HAL_RCC_OscConfig+0x584>
90007116:	4b7d      	ldr	r3, [pc, #500]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000711a:	4a7c      	ldr	r2, [pc, #496]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000711c:	f043 0301 	orr.w	r3, r3, #1
90007120:	6713      	str	r3, [r2, #112]	@ 0x70
90007122:	e02d      	b.n	90007180 <HAL_RCC_OscConfig+0x5e0>
90007124:	687b      	ldr	r3, [r7, #4]
90007126:	689b      	ldr	r3, [r3, #8]
90007128:	2b00      	cmp	r3, #0
9000712a:	d10c      	bne.n	90007146 <HAL_RCC_OscConfig+0x5a6>
9000712c:	4b77      	ldr	r3, [pc, #476]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000712e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007130:	4a76      	ldr	r2, [pc, #472]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007132:	f023 0301 	bic.w	r3, r3, #1
90007136:	6713      	str	r3, [r2, #112]	@ 0x70
90007138:	4b74      	ldr	r3, [pc, #464]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000713a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000713c:	4a73      	ldr	r2, [pc, #460]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000713e:	f023 0304 	bic.w	r3, r3, #4
90007142:	6713      	str	r3, [r2, #112]	@ 0x70
90007144:	e01c      	b.n	90007180 <HAL_RCC_OscConfig+0x5e0>
90007146:	687b      	ldr	r3, [r7, #4]
90007148:	689b      	ldr	r3, [r3, #8]
9000714a:	2b05      	cmp	r3, #5
9000714c:	d10c      	bne.n	90007168 <HAL_RCC_OscConfig+0x5c8>
9000714e:	4b6f      	ldr	r3, [pc, #444]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007152:	4a6e      	ldr	r2, [pc, #440]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007154:	f043 0304 	orr.w	r3, r3, #4
90007158:	6713      	str	r3, [r2, #112]	@ 0x70
9000715a:	4b6c      	ldr	r3, [pc, #432]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000715c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000715e:	4a6b      	ldr	r2, [pc, #428]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007160:	f043 0301 	orr.w	r3, r3, #1
90007164:	6713      	str	r3, [r2, #112]	@ 0x70
90007166:	e00b      	b.n	90007180 <HAL_RCC_OscConfig+0x5e0>
90007168:	4b68      	ldr	r3, [pc, #416]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000716a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000716c:	4a67      	ldr	r2, [pc, #412]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000716e:	f023 0301 	bic.w	r3, r3, #1
90007172:	6713      	str	r3, [r2, #112]	@ 0x70
90007174:	4b65      	ldr	r3, [pc, #404]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007178:	4a64      	ldr	r2, [pc, #400]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000717a:	f023 0304 	bic.w	r3, r3, #4
9000717e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90007180:	687b      	ldr	r3, [r7, #4]
90007182:	689b      	ldr	r3, [r3, #8]
90007184:	2b00      	cmp	r3, #0
90007186:	d015      	beq.n	900071b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007188:	f7fc f862 	bl	90003250 <HAL_GetTick>
9000718c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000718e:	e00a      	b.n	900071a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007190:	f7fc f85e 	bl	90003250 <HAL_GetTick>
90007194:	4602      	mov	r2, r0
90007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007198:	1ad3      	subs	r3, r2, r3
9000719a:	f241 3288 	movw	r2, #5000	@ 0x1388
9000719e:	4293      	cmp	r3, r2
900071a0:	d901      	bls.n	900071a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
900071a2:	2303      	movs	r3, #3
900071a4:	e14e      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900071a6:	4b59      	ldr	r3, [pc, #356]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900071a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071aa:	f003 0302 	and.w	r3, r3, #2
900071ae:	2b00      	cmp	r3, #0
900071b0:	d0ee      	beq.n	90007190 <HAL_RCC_OscConfig+0x5f0>
900071b2:	e014      	b.n	900071de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900071b4:	f7fc f84c 	bl	90003250 <HAL_GetTick>
900071b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900071ba:	e00a      	b.n	900071d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900071bc:	f7fc f848 	bl	90003250 <HAL_GetTick>
900071c0:	4602      	mov	r2, r0
900071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071c4:	1ad3      	subs	r3, r2, r3
900071c6:	f241 3288 	movw	r2, #5000	@ 0x1388
900071ca:	4293      	cmp	r3, r2
900071cc:	d901      	bls.n	900071d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
900071ce:	2303      	movs	r3, #3
900071d0:	e138      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900071d2:	4b4e      	ldr	r3, [pc, #312]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900071d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071d6:	f003 0302 	and.w	r3, r3, #2
900071da:	2b00      	cmp	r3, #0
900071dc:	d1ee      	bne.n	900071bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900071de:	687b      	ldr	r3, [r7, #4]
900071e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900071e2:	2b00      	cmp	r3, #0
900071e4:	f000 812d 	beq.w	90007442 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
900071e8:	4b48      	ldr	r3, [pc, #288]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900071ea:	691b      	ldr	r3, [r3, #16]
900071ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900071f0:	2b18      	cmp	r3, #24
900071f2:	f000 80bd 	beq.w	90007370 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900071f6:	687b      	ldr	r3, [r7, #4]
900071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900071fa:	2b02      	cmp	r3, #2
900071fc:	f040 809e 	bne.w	9000733c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007200:	4b42      	ldr	r3, [pc, #264]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007202:	681b      	ldr	r3, [r3, #0]
90007204:	4a41      	ldr	r2, [pc, #260]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
9000720a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000720c:	f7fc f820 	bl	90003250 <HAL_GetTick>
90007210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007212:	e008      	b.n	90007226 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007214:	f7fc f81c 	bl	90003250 <HAL_GetTick>
90007218:	4602      	mov	r2, r0
9000721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000721c:	1ad3      	subs	r3, r2, r3
9000721e:	2b02      	cmp	r3, #2
90007220:	d901      	bls.n	90007226 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90007222:	2303      	movs	r3, #3
90007224:	e10e      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007226:	4b39      	ldr	r3, [pc, #228]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007228:	681b      	ldr	r3, [r3, #0]
9000722a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000722e:	2b00      	cmp	r3, #0
90007230:	d1f0      	bne.n	90007214 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90007232:	4b36      	ldr	r3, [pc, #216]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007234:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
90007236:	4b37      	ldr	r3, [pc, #220]	@ (90007314 <HAL_RCC_OscConfig+0x774>)
90007238:	4013      	ands	r3, r2
9000723a:	687a      	ldr	r2, [r7, #4]
9000723c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
9000723e:	687a      	ldr	r2, [r7, #4]
90007240:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
90007242:	0112      	lsls	r2, r2, #4
90007244:	430a      	orrs	r2, r1
90007246:	4931      	ldr	r1, [pc, #196]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007248:	4313      	orrs	r3, r2
9000724a:	628b      	str	r3, [r1, #40]	@ 0x28
9000724c:	687b      	ldr	r3, [r7, #4]
9000724e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007250:	3b01      	subs	r3, #1
90007252:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007256:	687b      	ldr	r3, [r7, #4]
90007258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000725a:	3b01      	subs	r3, #1
9000725c:	025b      	lsls	r3, r3, #9
9000725e:	b29b      	uxth	r3, r3
90007260:	431a      	orrs	r2, r3
90007262:	687b      	ldr	r3, [r7, #4]
90007264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007266:	3b01      	subs	r3, #1
90007268:	041b      	lsls	r3, r3, #16
9000726a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000726e:	431a      	orrs	r2, r3
90007270:	687b      	ldr	r3, [r7, #4]
90007272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007274:	3b01      	subs	r3, #1
90007276:	061b      	lsls	r3, r3, #24
90007278:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000727c:	4923      	ldr	r1, [pc, #140]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000727e:	4313      	orrs	r3, r2
90007280:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90007282:	4b22      	ldr	r3, [pc, #136]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007286:	4a21      	ldr	r2, [pc, #132]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007288:	f023 0301 	bic.w	r3, r3, #1
9000728c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000728e:	4b1f      	ldr	r3, [pc, #124]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
90007290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007292:	4b21      	ldr	r3, [pc, #132]	@ (90007318 <HAL_RCC_OscConfig+0x778>)
90007294:	4013      	ands	r3, r2
90007296:	687a      	ldr	r2, [r7, #4]
90007298:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000729a:	00d2      	lsls	r2, r2, #3
9000729c:	491b      	ldr	r1, [pc, #108]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
9000729e:	4313      	orrs	r3, r2
900072a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
900072a2:	4b1a      	ldr	r3, [pc, #104]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072a6:	f023 020c 	bic.w	r2, r3, #12
900072aa:	687b      	ldr	r3, [r7, #4]
900072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900072ae:	4917      	ldr	r1, [pc, #92]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072b0:	4313      	orrs	r3, r2
900072b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
900072b4:	4b15      	ldr	r3, [pc, #84]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072b8:	f023 0202 	bic.w	r2, r3, #2
900072bc:	687b      	ldr	r3, [r7, #4]
900072be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900072c0:	4912      	ldr	r1, [pc, #72]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072c2:	4313      	orrs	r3, r2
900072c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
900072c6:	4b11      	ldr	r3, [pc, #68]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072ca:	4a10      	ldr	r2, [pc, #64]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900072d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900072d2:	4b0e      	ldr	r3, [pc, #56]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072d6:	4a0d      	ldr	r2, [pc, #52]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900072dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
900072de:	4b0b      	ldr	r3, [pc, #44]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072e2:	4a0a      	ldr	r2, [pc, #40]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
900072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
900072ea:	4b08      	ldr	r3, [pc, #32]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072ee:	4a07      	ldr	r2, [pc, #28]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072f0:	f043 0301 	orr.w	r3, r3, #1
900072f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
900072f6:	4b05      	ldr	r3, [pc, #20]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072f8:	681b      	ldr	r3, [r3, #0]
900072fa:	4a04      	ldr	r2, [pc, #16]	@ (9000730c <HAL_RCC_OscConfig+0x76c>)
900072fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90007300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007302:	f7fb ffa5 	bl	90003250 <HAL_GetTick>
90007306:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007308:	e011      	b.n	9000732e <HAL_RCC_OscConfig+0x78e>
9000730a:	bf00      	nop
9000730c:	58024400 	.word	0x58024400
90007310:	58024800 	.word	0x58024800
90007314:	fffffc0c 	.word	0xfffffc0c
90007318:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000731c:	f7fb ff98 	bl	90003250 <HAL_GetTick>
90007320:	4602      	mov	r2, r0
90007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007324:	1ad3      	subs	r3, r2, r3
90007326:	2b02      	cmp	r3, #2
90007328:	d901      	bls.n	9000732e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
9000732a:	2303      	movs	r3, #3
9000732c:	e08a      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000732e:	4b47      	ldr	r3, [pc, #284]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007330:	681b      	ldr	r3, [r3, #0]
90007332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007336:	2b00      	cmp	r3, #0
90007338:	d0f0      	beq.n	9000731c <HAL_RCC_OscConfig+0x77c>
9000733a:	e082      	b.n	90007442 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000733c:	4b43      	ldr	r3, [pc, #268]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
9000733e:	681b      	ldr	r3, [r3, #0]
90007340:	4a42      	ldr	r2, [pc, #264]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007348:	f7fb ff82 	bl	90003250 <HAL_GetTick>
9000734c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000734e:	e008      	b.n	90007362 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007350:	f7fb ff7e 	bl	90003250 <HAL_GetTick>
90007354:	4602      	mov	r2, r0
90007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007358:	1ad3      	subs	r3, r2, r3
9000735a:	2b02      	cmp	r3, #2
9000735c:	d901      	bls.n	90007362 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
9000735e:	2303      	movs	r3, #3
90007360:	e070      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007362:	4b3a      	ldr	r3, [pc, #232]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007364:	681b      	ldr	r3, [r3, #0]
90007366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000736a:	2b00      	cmp	r3, #0
9000736c:	d1f0      	bne.n	90007350 <HAL_RCC_OscConfig+0x7b0>
9000736e:	e068      	b.n	90007442 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90007370:	4b36      	ldr	r3, [pc, #216]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007374:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90007376:	4b35      	ldr	r3, [pc, #212]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000737a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000737c:	687b      	ldr	r3, [r7, #4]
9000737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007380:	2b01      	cmp	r3, #1
90007382:	d031      	beq.n	900073e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007384:	693b      	ldr	r3, [r7, #16]
90007386:	f003 0203 	and.w	r2, r3, #3
9000738a:	687b      	ldr	r3, [r7, #4]
9000738c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000738e:	429a      	cmp	r2, r3
90007390:	d12a      	bne.n	900073e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007392:	693b      	ldr	r3, [r7, #16]
90007394:	091b      	lsrs	r3, r3, #4
90007396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
9000739a:	687b      	ldr	r3, [r7, #4]
9000739c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000739e:	429a      	cmp	r2, r3
900073a0:	d122      	bne.n	900073e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900073a2:	68fb      	ldr	r3, [r7, #12]
900073a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
900073a8:	687b      	ldr	r3, [r7, #4]
900073aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900073ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900073ae:	429a      	cmp	r2, r3
900073b0:	d11a      	bne.n	900073e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900073b2:	68fb      	ldr	r3, [r7, #12]
900073b4:	0a5b      	lsrs	r3, r3, #9
900073b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900073ba:	687b      	ldr	r3, [r7, #4]
900073bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900073be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900073c0:	429a      	cmp	r2, r3
900073c2:	d111      	bne.n	900073e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900073c4:	68fb      	ldr	r3, [r7, #12]
900073c6:	0c1b      	lsrs	r3, r3, #16
900073c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900073cc:	687b      	ldr	r3, [r7, #4]
900073ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900073d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900073d2:	429a      	cmp	r2, r3
900073d4:	d108      	bne.n	900073e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
900073d6:	68fb      	ldr	r3, [r7, #12]
900073d8:	0e1b      	lsrs	r3, r3, #24
900073da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900073de:	687b      	ldr	r3, [r7, #4]
900073e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900073e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900073e4:	429a      	cmp	r2, r3
900073e6:	d001      	beq.n	900073ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
900073e8:	2301      	movs	r3, #1
900073ea:	e02b      	b.n	90007444 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
900073ec:	4b17      	ldr	r3, [pc, #92]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
900073ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900073f0:	08db      	lsrs	r3, r3, #3
900073f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
900073f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
900073f8:	687b      	ldr	r3, [r7, #4]
900073fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900073fc:	693a      	ldr	r2, [r7, #16]
900073fe:	429a      	cmp	r2, r3
90007400:	d01f      	beq.n	90007442 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90007402:	4b12      	ldr	r3, [pc, #72]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007406:	4a11      	ldr	r2, [pc, #68]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007408:	f023 0301 	bic.w	r3, r3, #1
9000740c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
9000740e:	f7fb ff1f 	bl	90003250 <HAL_GetTick>
90007412:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007414:	bf00      	nop
90007416:	f7fb ff1b 	bl	90003250 <HAL_GetTick>
9000741a:	4602      	mov	r2, r0
9000741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000741e:	4293      	cmp	r3, r2
90007420:	d0f9      	beq.n	90007416 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007422:	4b0a      	ldr	r3, [pc, #40]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007426:	4b0a      	ldr	r3, [pc, #40]	@ (90007450 <HAL_RCC_OscConfig+0x8b0>)
90007428:	4013      	ands	r3, r2
9000742a:	687a      	ldr	r2, [r7, #4]
9000742c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000742e:	00d2      	lsls	r2, r2, #3
90007430:	4906      	ldr	r1, [pc, #24]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007432:	4313      	orrs	r3, r2
90007434:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90007436:	4b05      	ldr	r3, [pc, #20]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
90007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000743a:	4a04      	ldr	r2, [pc, #16]	@ (9000744c <HAL_RCC_OscConfig+0x8ac>)
9000743c:	f043 0301 	orr.w	r3, r3, #1
90007440:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
90007442:	2300      	movs	r3, #0
}
90007444:	4618      	mov	r0, r3
90007446:	3730      	adds	r7, #48	@ 0x30
90007448:	46bd      	mov	sp, r7
9000744a:	bd80      	pop	{r7, pc}
9000744c:	58024400 	.word	0x58024400
90007450:	ffff0007 	.word	0xffff0007

90007454 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90007454:	b580      	push	{r7, lr}
90007456:	b086      	sub	sp, #24
90007458:	af00      	add	r7, sp, #0
9000745a:	6078      	str	r0, [r7, #4]
9000745c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
9000745e:	687b      	ldr	r3, [r7, #4]
90007460:	2b00      	cmp	r3, #0
90007462:	d101      	bne.n	90007468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90007464:	2301      	movs	r3, #1
90007466:	e19c      	b.n	900077a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90007468:	4b8a      	ldr	r3, [pc, #552]	@ (90007694 <HAL_RCC_ClockConfig+0x240>)
9000746a:	681b      	ldr	r3, [r3, #0]
9000746c:	f003 030f 	and.w	r3, r3, #15
90007470:	683a      	ldr	r2, [r7, #0]
90007472:	429a      	cmp	r2, r3
90007474:	d910      	bls.n	90007498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007476:	4b87      	ldr	r3, [pc, #540]	@ (90007694 <HAL_RCC_ClockConfig+0x240>)
90007478:	681b      	ldr	r3, [r3, #0]
9000747a:	f023 020f 	bic.w	r2, r3, #15
9000747e:	4985      	ldr	r1, [pc, #532]	@ (90007694 <HAL_RCC_ClockConfig+0x240>)
90007480:	683b      	ldr	r3, [r7, #0]
90007482:	4313      	orrs	r3, r2
90007484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007486:	4b83      	ldr	r3, [pc, #524]	@ (90007694 <HAL_RCC_ClockConfig+0x240>)
90007488:	681b      	ldr	r3, [r3, #0]
9000748a:	f003 030f 	and.w	r3, r3, #15
9000748e:	683a      	ldr	r2, [r7, #0]
90007490:	429a      	cmp	r2, r3
90007492:	d001      	beq.n	90007498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007494:	2301      	movs	r3, #1
90007496:	e184      	b.n	900077a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007498:	687b      	ldr	r3, [r7, #4]
9000749a:	681b      	ldr	r3, [r3, #0]
9000749c:	f003 0304 	and.w	r3, r3, #4
900074a0:	2b00      	cmp	r3, #0
900074a2:	d010      	beq.n	900074c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
900074a4:	687b      	ldr	r3, [r7, #4]
900074a6:	691a      	ldr	r2, [r3, #16]
900074a8:	4b7b      	ldr	r3, [pc, #492]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900074aa:	699b      	ldr	r3, [r3, #24]
900074ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900074b0:	429a      	cmp	r2, r3
900074b2:	d908      	bls.n	900074c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
900074b4:	4b78      	ldr	r3, [pc, #480]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900074b6:	699b      	ldr	r3, [r3, #24]
900074b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900074bc:	687b      	ldr	r3, [r7, #4]
900074be:	691b      	ldr	r3, [r3, #16]
900074c0:	4975      	ldr	r1, [pc, #468]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900074c2:	4313      	orrs	r3, r2
900074c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900074c6:	687b      	ldr	r3, [r7, #4]
900074c8:	681b      	ldr	r3, [r3, #0]
900074ca:	f003 0308 	and.w	r3, r3, #8
900074ce:	2b00      	cmp	r3, #0
900074d0:	d010      	beq.n	900074f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900074d2:	687b      	ldr	r3, [r7, #4]
900074d4:	695a      	ldr	r2, [r3, #20]
900074d6:	4b70      	ldr	r3, [pc, #448]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900074d8:	69db      	ldr	r3, [r3, #28]
900074da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900074de:	429a      	cmp	r2, r3
900074e0:	d908      	bls.n	900074f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900074e2:	4b6d      	ldr	r3, [pc, #436]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900074e4:	69db      	ldr	r3, [r3, #28]
900074e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900074ea:	687b      	ldr	r3, [r7, #4]
900074ec:	695b      	ldr	r3, [r3, #20]
900074ee:	496a      	ldr	r1, [pc, #424]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900074f0:	4313      	orrs	r3, r2
900074f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900074f4:	687b      	ldr	r3, [r7, #4]
900074f6:	681b      	ldr	r3, [r3, #0]
900074f8:	f003 0310 	and.w	r3, r3, #16
900074fc:	2b00      	cmp	r3, #0
900074fe:	d010      	beq.n	90007522 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007500:	687b      	ldr	r3, [r7, #4]
90007502:	699a      	ldr	r2, [r3, #24]
90007504:	4b64      	ldr	r3, [pc, #400]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007506:	69db      	ldr	r3, [r3, #28]
90007508:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
9000750c:	429a      	cmp	r2, r3
9000750e:	d908      	bls.n	90007522 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007510:	4b61      	ldr	r3, [pc, #388]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007512:	69db      	ldr	r3, [r3, #28]
90007514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90007518:	687b      	ldr	r3, [r7, #4]
9000751a:	699b      	ldr	r3, [r3, #24]
9000751c:	495e      	ldr	r1, [pc, #376]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
9000751e:	4313      	orrs	r3, r2
90007520:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007522:	687b      	ldr	r3, [r7, #4]
90007524:	681b      	ldr	r3, [r3, #0]
90007526:	f003 0320 	and.w	r3, r3, #32
9000752a:	2b00      	cmp	r3, #0
9000752c:	d010      	beq.n	90007550 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000752e:	687b      	ldr	r3, [r7, #4]
90007530:	69da      	ldr	r2, [r3, #28]
90007532:	4b59      	ldr	r3, [pc, #356]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007534:	6a1b      	ldr	r3, [r3, #32]
90007536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000753a:	429a      	cmp	r2, r3
9000753c:	d908      	bls.n	90007550 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000753e:	4b56      	ldr	r3, [pc, #344]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007540:	6a1b      	ldr	r3, [r3, #32]
90007542:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007546:	687b      	ldr	r3, [r7, #4]
90007548:	69db      	ldr	r3, [r3, #28]
9000754a:	4953      	ldr	r1, [pc, #332]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
9000754c:	4313      	orrs	r3, r2
9000754e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007550:	687b      	ldr	r3, [r7, #4]
90007552:	681b      	ldr	r3, [r3, #0]
90007554:	f003 0302 	and.w	r3, r3, #2
90007558:	2b00      	cmp	r3, #0
9000755a:	d010      	beq.n	9000757e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000755c:	687b      	ldr	r3, [r7, #4]
9000755e:	68da      	ldr	r2, [r3, #12]
90007560:	4b4d      	ldr	r3, [pc, #308]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007562:	699b      	ldr	r3, [r3, #24]
90007564:	f003 030f 	and.w	r3, r3, #15
90007568:	429a      	cmp	r2, r3
9000756a:	d908      	bls.n	9000757e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000756c:	4b4a      	ldr	r3, [pc, #296]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
9000756e:	699b      	ldr	r3, [r3, #24]
90007570:	f023 020f 	bic.w	r2, r3, #15
90007574:	687b      	ldr	r3, [r7, #4]
90007576:	68db      	ldr	r3, [r3, #12]
90007578:	4947      	ldr	r1, [pc, #284]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
9000757a:	4313      	orrs	r3, r2
9000757c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000757e:	687b      	ldr	r3, [r7, #4]
90007580:	681b      	ldr	r3, [r3, #0]
90007582:	f003 0301 	and.w	r3, r3, #1
90007586:	2b00      	cmp	r3, #0
90007588:	d055      	beq.n	90007636 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000758a:	4b43      	ldr	r3, [pc, #268]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
9000758c:	699b      	ldr	r3, [r3, #24]
9000758e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
90007592:	687b      	ldr	r3, [r7, #4]
90007594:	689b      	ldr	r3, [r3, #8]
90007596:	4940      	ldr	r1, [pc, #256]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007598:	4313      	orrs	r3, r2
9000759a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000759c:	687b      	ldr	r3, [r7, #4]
9000759e:	685b      	ldr	r3, [r3, #4]
900075a0:	2b02      	cmp	r3, #2
900075a2:	d107      	bne.n	900075b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900075a4:	4b3c      	ldr	r3, [pc, #240]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900075a6:	681b      	ldr	r3, [r3, #0]
900075a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900075ac:	2b00      	cmp	r3, #0
900075ae:	d121      	bne.n	900075f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900075b0:	2301      	movs	r3, #1
900075b2:	e0f6      	b.n	900077a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
900075b4:	687b      	ldr	r3, [r7, #4]
900075b6:	685b      	ldr	r3, [r3, #4]
900075b8:	2b03      	cmp	r3, #3
900075ba:	d107      	bne.n	900075cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900075bc:	4b36      	ldr	r3, [pc, #216]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900075be:	681b      	ldr	r3, [r3, #0]
900075c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900075c4:	2b00      	cmp	r3, #0
900075c6:	d115      	bne.n	900075f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900075c8:	2301      	movs	r3, #1
900075ca:	e0ea      	b.n	900077a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
900075cc:	687b      	ldr	r3, [r7, #4]
900075ce:	685b      	ldr	r3, [r3, #4]
900075d0:	2b01      	cmp	r3, #1
900075d2:	d107      	bne.n	900075e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900075d4:	4b30      	ldr	r3, [pc, #192]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900075d6:	681b      	ldr	r3, [r3, #0]
900075d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900075dc:	2b00      	cmp	r3, #0
900075de:	d109      	bne.n	900075f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900075e0:	2301      	movs	r3, #1
900075e2:	e0de      	b.n	900077a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900075e4:	4b2c      	ldr	r3, [pc, #176]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900075e6:	681b      	ldr	r3, [r3, #0]
900075e8:	f003 0304 	and.w	r3, r3, #4
900075ec:	2b00      	cmp	r3, #0
900075ee:	d101      	bne.n	900075f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900075f0:	2301      	movs	r3, #1
900075f2:	e0d6      	b.n	900077a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
900075f4:	4b28      	ldr	r3, [pc, #160]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
900075f6:	691b      	ldr	r3, [r3, #16]
900075f8:	f023 0207 	bic.w	r2, r3, #7
900075fc:	687b      	ldr	r3, [r7, #4]
900075fe:	685b      	ldr	r3, [r3, #4]
90007600:	4925      	ldr	r1, [pc, #148]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007602:	4313      	orrs	r3, r2
90007604:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007606:	f7fb fe23 	bl	90003250 <HAL_GetTick>
9000760a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000760c:	e00a      	b.n	90007624 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000760e:	f7fb fe1f 	bl	90003250 <HAL_GetTick>
90007612:	4602      	mov	r2, r0
90007614:	697b      	ldr	r3, [r7, #20]
90007616:	1ad3      	subs	r3, r2, r3
90007618:	f241 3288 	movw	r2, #5000	@ 0x1388
9000761c:	4293      	cmp	r3, r2
9000761e:	d901      	bls.n	90007624 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90007620:	2303      	movs	r3, #3
90007622:	e0be      	b.n	900077a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007624:	4b1c      	ldr	r3, [pc, #112]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007626:	691b      	ldr	r3, [r3, #16]
90007628:	f003 0238 	and.w	r2, r3, #56	@ 0x38
9000762c:	687b      	ldr	r3, [r7, #4]
9000762e:	685b      	ldr	r3, [r3, #4]
90007630:	00db      	lsls	r3, r3, #3
90007632:	429a      	cmp	r2, r3
90007634:	d1eb      	bne.n	9000760e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007636:	687b      	ldr	r3, [r7, #4]
90007638:	681b      	ldr	r3, [r3, #0]
9000763a:	f003 0302 	and.w	r3, r3, #2
9000763e:	2b00      	cmp	r3, #0
90007640:	d010      	beq.n	90007664 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90007642:	687b      	ldr	r3, [r7, #4]
90007644:	68da      	ldr	r2, [r3, #12]
90007646:	4b14      	ldr	r3, [pc, #80]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007648:	699b      	ldr	r3, [r3, #24]
9000764a:	f003 030f 	and.w	r3, r3, #15
9000764e:	429a      	cmp	r2, r3
90007650:	d208      	bcs.n	90007664 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007652:	4b11      	ldr	r3, [pc, #68]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007654:	699b      	ldr	r3, [r3, #24]
90007656:	f023 020f 	bic.w	r2, r3, #15
9000765a:	687b      	ldr	r3, [r7, #4]
9000765c:	68db      	ldr	r3, [r3, #12]
9000765e:	490e      	ldr	r1, [pc, #56]	@ (90007698 <HAL_RCC_ClockConfig+0x244>)
90007660:	4313      	orrs	r3, r2
90007662:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90007664:	4b0b      	ldr	r3, [pc, #44]	@ (90007694 <HAL_RCC_ClockConfig+0x240>)
90007666:	681b      	ldr	r3, [r3, #0]
90007668:	f003 030f 	and.w	r3, r3, #15
9000766c:	683a      	ldr	r2, [r7, #0]
9000766e:	429a      	cmp	r2, r3
90007670:	d214      	bcs.n	9000769c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007672:	4b08      	ldr	r3, [pc, #32]	@ (90007694 <HAL_RCC_ClockConfig+0x240>)
90007674:	681b      	ldr	r3, [r3, #0]
90007676:	f023 020f 	bic.w	r2, r3, #15
9000767a:	4906      	ldr	r1, [pc, #24]	@ (90007694 <HAL_RCC_ClockConfig+0x240>)
9000767c:	683b      	ldr	r3, [r7, #0]
9000767e:	4313      	orrs	r3, r2
90007680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007682:	4b04      	ldr	r3, [pc, #16]	@ (90007694 <HAL_RCC_ClockConfig+0x240>)
90007684:	681b      	ldr	r3, [r3, #0]
90007686:	f003 030f 	and.w	r3, r3, #15
9000768a:	683a      	ldr	r2, [r7, #0]
9000768c:	429a      	cmp	r2, r3
9000768e:	d005      	beq.n	9000769c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007690:	2301      	movs	r3, #1
90007692:	e086      	b.n	900077a2 <HAL_RCC_ClockConfig+0x34e>
90007694:	52002000 	.word	0x52002000
90007698:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000769c:	687b      	ldr	r3, [r7, #4]
9000769e:	681b      	ldr	r3, [r3, #0]
900076a0:	f003 0304 	and.w	r3, r3, #4
900076a4:	2b00      	cmp	r3, #0
900076a6:	d010      	beq.n	900076ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
900076a8:	687b      	ldr	r3, [r7, #4]
900076aa:	691a      	ldr	r2, [r3, #16]
900076ac:	4b3f      	ldr	r3, [pc, #252]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
900076ae:	699b      	ldr	r3, [r3, #24]
900076b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900076b4:	429a      	cmp	r2, r3
900076b6:	d208      	bcs.n	900076ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
900076b8:	4b3c      	ldr	r3, [pc, #240]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
900076ba:	699b      	ldr	r3, [r3, #24]
900076bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900076c0:	687b      	ldr	r3, [r7, #4]
900076c2:	691b      	ldr	r3, [r3, #16]
900076c4:	4939      	ldr	r1, [pc, #228]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
900076c6:	4313      	orrs	r3, r2
900076c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900076ca:	687b      	ldr	r3, [r7, #4]
900076cc:	681b      	ldr	r3, [r3, #0]
900076ce:	f003 0308 	and.w	r3, r3, #8
900076d2:	2b00      	cmp	r3, #0
900076d4:	d010      	beq.n	900076f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900076d6:	687b      	ldr	r3, [r7, #4]
900076d8:	695a      	ldr	r2, [r3, #20]
900076da:	4b34      	ldr	r3, [pc, #208]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
900076dc:	69db      	ldr	r3, [r3, #28]
900076de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900076e2:	429a      	cmp	r2, r3
900076e4:	d208      	bcs.n	900076f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900076e6:	4b31      	ldr	r3, [pc, #196]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
900076e8:	69db      	ldr	r3, [r3, #28]
900076ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900076ee:	687b      	ldr	r3, [r7, #4]
900076f0:	695b      	ldr	r3, [r3, #20]
900076f2:	492e      	ldr	r1, [pc, #184]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
900076f4:	4313      	orrs	r3, r2
900076f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900076f8:	687b      	ldr	r3, [r7, #4]
900076fa:	681b      	ldr	r3, [r3, #0]
900076fc:	f003 0310 	and.w	r3, r3, #16
90007700:	2b00      	cmp	r3, #0
90007702:	d010      	beq.n	90007726 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007704:	687b      	ldr	r3, [r7, #4]
90007706:	699a      	ldr	r2, [r3, #24]
90007708:	4b28      	ldr	r3, [pc, #160]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
9000770a:	69db      	ldr	r3, [r3, #28]
9000770c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007710:	429a      	cmp	r2, r3
90007712:	d208      	bcs.n	90007726 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007714:	4b25      	ldr	r3, [pc, #148]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
90007716:	69db      	ldr	r3, [r3, #28]
90007718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
9000771c:	687b      	ldr	r3, [r7, #4]
9000771e:	699b      	ldr	r3, [r3, #24]
90007720:	4922      	ldr	r1, [pc, #136]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
90007722:	4313      	orrs	r3, r2
90007724:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007726:	687b      	ldr	r3, [r7, #4]
90007728:	681b      	ldr	r3, [r3, #0]
9000772a:	f003 0320 	and.w	r3, r3, #32
9000772e:	2b00      	cmp	r3, #0
90007730:	d010      	beq.n	90007754 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90007732:	687b      	ldr	r3, [r7, #4]
90007734:	69da      	ldr	r2, [r3, #28]
90007736:	4b1d      	ldr	r3, [pc, #116]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
90007738:	6a1b      	ldr	r3, [r3, #32]
9000773a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000773e:	429a      	cmp	r2, r3
90007740:	d208      	bcs.n	90007754 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90007742:	4b1a      	ldr	r3, [pc, #104]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
90007744:	6a1b      	ldr	r3, [r3, #32]
90007746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000774a:	687b      	ldr	r3, [r7, #4]
9000774c:	69db      	ldr	r3, [r3, #28]
9000774e:	4917      	ldr	r1, [pc, #92]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
90007750:	4313      	orrs	r3, r2
90007752:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007754:	f000 f834 	bl	900077c0 <HAL_RCC_GetSysClockFreq>
90007758:	4602      	mov	r2, r0
9000775a:	4b14      	ldr	r3, [pc, #80]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
9000775c:	699b      	ldr	r3, [r3, #24]
9000775e:	0a1b      	lsrs	r3, r3, #8
90007760:	f003 030f 	and.w	r3, r3, #15
90007764:	4912      	ldr	r1, [pc, #72]	@ (900077b0 <HAL_RCC_ClockConfig+0x35c>)
90007766:	5ccb      	ldrb	r3, [r1, r3]
90007768:	f003 031f 	and.w	r3, r3, #31
9000776c:	fa22 f303 	lsr.w	r3, r2, r3
90007770:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007772:	4b0e      	ldr	r3, [pc, #56]	@ (900077ac <HAL_RCC_ClockConfig+0x358>)
90007774:	699b      	ldr	r3, [r3, #24]
90007776:	f003 030f 	and.w	r3, r3, #15
9000777a:	4a0d      	ldr	r2, [pc, #52]	@ (900077b0 <HAL_RCC_ClockConfig+0x35c>)
9000777c:	5cd3      	ldrb	r3, [r2, r3]
9000777e:	f003 031f 	and.w	r3, r3, #31
90007782:	693a      	ldr	r2, [r7, #16]
90007784:	fa22 f303 	lsr.w	r3, r2, r3
90007788:	4a0a      	ldr	r2, [pc, #40]	@ (900077b4 <HAL_RCC_ClockConfig+0x360>)
9000778a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000778c:	4a0a      	ldr	r2, [pc, #40]	@ (900077b8 <HAL_RCC_ClockConfig+0x364>)
9000778e:	693b      	ldr	r3, [r7, #16]
90007790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007792:	4b0a      	ldr	r3, [pc, #40]	@ (900077bc <HAL_RCC_ClockConfig+0x368>)
90007794:	681b      	ldr	r3, [r3, #0]
90007796:	4618      	mov	r0, r3
90007798:	f7fb fd10 	bl	900031bc <HAL_InitTick>
9000779c:	4603      	mov	r3, r0
9000779e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
900077a0:	7bfb      	ldrb	r3, [r7, #15]
}
900077a2:	4618      	mov	r0, r3
900077a4:	3718      	adds	r7, #24
900077a6:	46bd      	mov	sp, r7
900077a8:	bd80      	pop	{r7, pc}
900077aa:	bf00      	nop
900077ac:	58024400 	.word	0x58024400
900077b0:	9000d750 	.word	0x9000d750
900077b4:	20000004 	.word	0x20000004
900077b8:	20000000 	.word	0x20000000
900077bc:	20000008 	.word	0x20000008

900077c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
900077c0:	b480      	push	{r7}
900077c2:	b089      	sub	sp, #36	@ 0x24
900077c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
900077c6:	4bb3      	ldr	r3, [pc, #716]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
900077c8:	691b      	ldr	r3, [r3, #16]
900077ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900077ce:	2b18      	cmp	r3, #24
900077d0:	f200 8155 	bhi.w	90007a7e <HAL_RCC_GetSysClockFreq+0x2be>
900077d4:	a201      	add	r2, pc, #4	@ (adr r2, 900077dc <HAL_RCC_GetSysClockFreq+0x1c>)
900077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900077da:	bf00      	nop
900077dc:	90007841 	.word	0x90007841
900077e0:	90007a7f 	.word	0x90007a7f
900077e4:	90007a7f 	.word	0x90007a7f
900077e8:	90007a7f 	.word	0x90007a7f
900077ec:	90007a7f 	.word	0x90007a7f
900077f0:	90007a7f 	.word	0x90007a7f
900077f4:	90007a7f 	.word	0x90007a7f
900077f8:	90007a7f 	.word	0x90007a7f
900077fc:	90007867 	.word	0x90007867
90007800:	90007a7f 	.word	0x90007a7f
90007804:	90007a7f 	.word	0x90007a7f
90007808:	90007a7f 	.word	0x90007a7f
9000780c:	90007a7f 	.word	0x90007a7f
90007810:	90007a7f 	.word	0x90007a7f
90007814:	90007a7f 	.word	0x90007a7f
90007818:	90007a7f 	.word	0x90007a7f
9000781c:	9000786d 	.word	0x9000786d
90007820:	90007a7f 	.word	0x90007a7f
90007824:	90007a7f 	.word	0x90007a7f
90007828:	90007a7f 	.word	0x90007a7f
9000782c:	90007a7f 	.word	0x90007a7f
90007830:	90007a7f 	.word	0x90007a7f
90007834:	90007a7f 	.word	0x90007a7f
90007838:	90007a7f 	.word	0x90007a7f
9000783c:	90007873 	.word	0x90007873
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007840:	4b94      	ldr	r3, [pc, #592]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007842:	681b      	ldr	r3, [r3, #0]
90007844:	f003 0320 	and.w	r3, r3, #32
90007848:	2b00      	cmp	r3, #0
9000784a:	d009      	beq.n	90007860 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000784c:	4b91      	ldr	r3, [pc, #580]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000784e:	681b      	ldr	r3, [r3, #0]
90007850:	08db      	lsrs	r3, r3, #3
90007852:	f003 0303 	and.w	r3, r3, #3
90007856:	4a90      	ldr	r2, [pc, #576]	@ (90007a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007858:	fa22 f303 	lsr.w	r3, r2, r3
9000785c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
9000785e:	e111      	b.n	90007a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90007860:	4b8d      	ldr	r3, [pc, #564]	@ (90007a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007862:	61bb      	str	r3, [r7, #24]
      break;
90007864:	e10e      	b.n	90007a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
90007866:	4b8d      	ldr	r3, [pc, #564]	@ (90007a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
90007868:	61bb      	str	r3, [r7, #24]
      break;
9000786a:	e10b      	b.n	90007a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
9000786c:	4b8c      	ldr	r3, [pc, #560]	@ (90007aa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
9000786e:	61bb      	str	r3, [r7, #24]
      break;
90007870:	e108      	b.n	90007a84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90007872:	4b88      	ldr	r3, [pc, #544]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007876:	f003 0303 	and.w	r3, r3, #3
9000787a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000787c:	4b85      	ldr	r3, [pc, #532]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000787e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007880:	091b      	lsrs	r3, r3, #4
90007882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90007886:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90007888:	4b82      	ldr	r3, [pc, #520]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000788c:	f003 0301 	and.w	r3, r3, #1
90007890:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007892:	4b80      	ldr	r3, [pc, #512]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007896:	08db      	lsrs	r3, r3, #3
90007898:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000789c:	68fa      	ldr	r2, [r7, #12]
9000789e:	fb02 f303 	mul.w	r3, r2, r3
900078a2:	ee07 3a90 	vmov	s15, r3
900078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900078aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
900078ae:	693b      	ldr	r3, [r7, #16]
900078b0:	2b00      	cmp	r3, #0
900078b2:	f000 80e1 	beq.w	90007a78 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
900078b6:	697b      	ldr	r3, [r7, #20]
900078b8:	2b02      	cmp	r3, #2
900078ba:	f000 8083 	beq.w	900079c4 <HAL_RCC_GetSysClockFreq+0x204>
900078be:	697b      	ldr	r3, [r7, #20]
900078c0:	2b02      	cmp	r3, #2
900078c2:	f200 80a1 	bhi.w	90007a08 <HAL_RCC_GetSysClockFreq+0x248>
900078c6:	697b      	ldr	r3, [r7, #20]
900078c8:	2b00      	cmp	r3, #0
900078ca:	d003      	beq.n	900078d4 <HAL_RCC_GetSysClockFreq+0x114>
900078cc:	697b      	ldr	r3, [r7, #20]
900078ce:	2b01      	cmp	r3, #1
900078d0:	d056      	beq.n	90007980 <HAL_RCC_GetSysClockFreq+0x1c0>
900078d2:	e099      	b.n	90007a08 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900078d4:	4b6f      	ldr	r3, [pc, #444]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078d6:	681b      	ldr	r3, [r3, #0]
900078d8:	f003 0320 	and.w	r3, r3, #32
900078dc:	2b00      	cmp	r3, #0
900078de:	d02d      	beq.n	9000793c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900078e0:	4b6c      	ldr	r3, [pc, #432]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078e2:	681b      	ldr	r3, [r3, #0]
900078e4:	08db      	lsrs	r3, r3, #3
900078e6:	f003 0303 	and.w	r3, r3, #3
900078ea:	4a6b      	ldr	r2, [pc, #428]	@ (90007a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
900078ec:	fa22 f303 	lsr.w	r3, r2, r3
900078f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900078f2:	687b      	ldr	r3, [r7, #4]
900078f4:	ee07 3a90 	vmov	s15, r3
900078f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900078fc:	693b      	ldr	r3, [r7, #16]
900078fe:	ee07 3a90 	vmov	s15, r3
90007902:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000790a:	4b62      	ldr	r3, [pc, #392]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007912:	ee07 3a90 	vmov	s15, r3
90007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000791a:	ed97 6a02 	vldr	s12, [r7, #8]
9000791e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
90007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000792a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007932:	ee67 7a27 	vmul.f32	s15, s14, s15
90007936:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
9000793a:	e087      	b.n	90007a4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000793c:	693b      	ldr	r3, [r7, #16]
9000793e:	ee07 3a90 	vmov	s15, r3
90007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007946:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007aa8 <HAL_RCC_GetSysClockFreq+0x2e8>
9000794a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000794e:	4b51      	ldr	r3, [pc, #324]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007952:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007956:	ee07 3a90 	vmov	s15, r3
9000795a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000795e:	ed97 6a02 	vldr	s12, [r7, #8]
90007962:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
90007966:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000796e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007976:	ee67 7a27 	vmul.f32	s15, s14, s15
9000797a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000797e:	e065      	b.n	90007a4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007980:	693b      	ldr	r3, [r7, #16]
90007982:	ee07 3a90 	vmov	s15, r3
90007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000798a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007aac <HAL_RCC_GetSysClockFreq+0x2ec>
9000798e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007992:	4b40      	ldr	r3, [pc, #256]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007996:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000799a:	ee07 3a90 	vmov	s15, r3
9000799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079a2:	ed97 6a02 	vldr	s12, [r7, #8]
900079a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
900079aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900079b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079ba:	ee67 7a27 	vmul.f32	s15, s14, s15
900079be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900079c2:	e043      	b.n	90007a4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900079c4:	693b      	ldr	r3, [r7, #16]
900079c6:	ee07 3a90 	vmov	s15, r3
900079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007ab0 <HAL_RCC_GetSysClockFreq+0x2f0>
900079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079d6:	4b2f      	ldr	r3, [pc, #188]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079de:	ee07 3a90 	vmov	s15, r3
900079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079e6:	ed97 6a02 	vldr	s12, [r7, #8]
900079ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
900079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a06:	e021      	b.n	90007a4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a08:	693b      	ldr	r3, [r7, #16]
90007a0a:	ee07 3a90 	vmov	s15, r3
90007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007aac <HAL_RCC_GetSysClockFreq+0x2ec>
90007a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a1a:	4b1e      	ldr	r3, [pc, #120]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a22:	ee07 3a90 	vmov	s15, r3
90007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a2a:	ed97 6a02 	vldr	s12, [r7, #8]
90007a2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007a4c:	4b11      	ldr	r3, [pc, #68]	@ (90007a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a50:	0a5b      	lsrs	r3, r3, #9
90007a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007a56:	3301      	adds	r3, #1
90007a58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007a5a:	683b      	ldr	r3, [r7, #0]
90007a5c:	ee07 3a90 	vmov	s15, r3
90007a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007a64:	edd7 6a07 	vldr	s13, [r7, #28]
90007a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007a70:	ee17 3a90 	vmov	r3, s15
90007a74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007a76:	e005      	b.n	90007a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007a78:	2300      	movs	r3, #0
90007a7a:	61bb      	str	r3, [r7, #24]
      break;
90007a7c:	e002      	b.n	90007a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007a7e:	4b07      	ldr	r3, [pc, #28]	@ (90007a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
90007a80:	61bb      	str	r3, [r7, #24]
      break;
90007a82:	bf00      	nop
  }

  return sysclockfreq;
90007a84:	69bb      	ldr	r3, [r7, #24]
}
90007a86:	4618      	mov	r0, r3
90007a88:	3724      	adds	r7, #36	@ 0x24
90007a8a:	46bd      	mov	sp, r7
90007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
90007a90:	4770      	bx	lr
90007a92:	bf00      	nop
90007a94:	58024400 	.word	0x58024400
90007a98:	03d09000 	.word	0x03d09000
90007a9c:	003d0900 	.word	0x003d0900
90007aa0:	017d7840 	.word	0x017d7840
90007aa4:	46000000 	.word	0x46000000
90007aa8:	4c742400 	.word	0x4c742400
90007aac:	4a742400 	.word	0x4a742400
90007ab0:	4bbebc20 	.word	0x4bbebc20

90007ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007ab4:	b580      	push	{r7, lr}
90007ab6:	b082      	sub	sp, #8
90007ab8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007aba:	f7ff fe81 	bl	900077c0 <HAL_RCC_GetSysClockFreq>
90007abe:	4602      	mov	r2, r0
90007ac0:	4b10      	ldr	r3, [pc, #64]	@ (90007b04 <HAL_RCC_GetHCLKFreq+0x50>)
90007ac2:	699b      	ldr	r3, [r3, #24]
90007ac4:	0a1b      	lsrs	r3, r3, #8
90007ac6:	f003 030f 	and.w	r3, r3, #15
90007aca:	490f      	ldr	r1, [pc, #60]	@ (90007b08 <HAL_RCC_GetHCLKFreq+0x54>)
90007acc:	5ccb      	ldrb	r3, [r1, r3]
90007ace:	f003 031f 	and.w	r3, r3, #31
90007ad2:	fa22 f303 	lsr.w	r3, r2, r3
90007ad6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007ad8:	4b0a      	ldr	r3, [pc, #40]	@ (90007b04 <HAL_RCC_GetHCLKFreq+0x50>)
90007ada:	699b      	ldr	r3, [r3, #24]
90007adc:	f003 030f 	and.w	r3, r3, #15
90007ae0:	4a09      	ldr	r2, [pc, #36]	@ (90007b08 <HAL_RCC_GetHCLKFreq+0x54>)
90007ae2:	5cd3      	ldrb	r3, [r2, r3]
90007ae4:	f003 031f 	and.w	r3, r3, #31
90007ae8:	687a      	ldr	r2, [r7, #4]
90007aea:	fa22 f303 	lsr.w	r3, r2, r3
90007aee:	4a07      	ldr	r2, [pc, #28]	@ (90007b0c <HAL_RCC_GetHCLKFreq+0x58>)
90007af0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007af2:	4a07      	ldr	r2, [pc, #28]	@ (90007b10 <HAL_RCC_GetHCLKFreq+0x5c>)
90007af4:	687b      	ldr	r3, [r7, #4]
90007af6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007af8:	4b04      	ldr	r3, [pc, #16]	@ (90007b0c <HAL_RCC_GetHCLKFreq+0x58>)
90007afa:	681b      	ldr	r3, [r3, #0]
}
90007afc:	4618      	mov	r0, r3
90007afe:	3708      	adds	r7, #8
90007b00:	46bd      	mov	sp, r7
90007b02:	bd80      	pop	{r7, pc}
90007b04:	58024400 	.word	0x58024400
90007b08:	9000d750 	.word	0x9000d750
90007b0c:	20000004 	.word	0x20000004
90007b10:	20000000 	.word	0x20000000

90007b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007b14:	b580      	push	{r7, lr}
90007b16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007b18:	f7ff ffcc 	bl	90007ab4 <HAL_RCC_GetHCLKFreq>
90007b1c:	4602      	mov	r2, r0
90007b1e:	4b06      	ldr	r3, [pc, #24]	@ (90007b38 <HAL_RCC_GetPCLK1Freq+0x24>)
90007b20:	69db      	ldr	r3, [r3, #28]
90007b22:	091b      	lsrs	r3, r3, #4
90007b24:	f003 0307 	and.w	r3, r3, #7
90007b28:	4904      	ldr	r1, [pc, #16]	@ (90007b3c <HAL_RCC_GetPCLK1Freq+0x28>)
90007b2a:	5ccb      	ldrb	r3, [r1, r3]
90007b2c:	f003 031f 	and.w	r3, r3, #31
90007b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90007b34:	4618      	mov	r0, r3
90007b36:	bd80      	pop	{r7, pc}
90007b38:	58024400 	.word	0x58024400
90007b3c:	9000d750 	.word	0x9000d750

90007b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007b40:	b580      	push	{r7, lr}
90007b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007b44:	f7ff ffb6 	bl	90007ab4 <HAL_RCC_GetHCLKFreq>
90007b48:	4602      	mov	r2, r0
90007b4a:	4b06      	ldr	r3, [pc, #24]	@ (90007b64 <HAL_RCC_GetPCLK2Freq+0x24>)
90007b4c:	69db      	ldr	r3, [r3, #28]
90007b4e:	0a1b      	lsrs	r3, r3, #8
90007b50:	f003 0307 	and.w	r3, r3, #7
90007b54:	4904      	ldr	r1, [pc, #16]	@ (90007b68 <HAL_RCC_GetPCLK2Freq+0x28>)
90007b56:	5ccb      	ldrb	r3, [r1, r3]
90007b58:	f003 031f 	and.w	r3, r3, #31
90007b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007b60:	4618      	mov	r0, r3
90007b62:	bd80      	pop	{r7, pc}
90007b64:	58024400 	.word	0x58024400
90007b68:	9000d750 	.word	0x9000d750

90007b6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007b70:	b0ca      	sub	sp, #296	@ 0x128
90007b72:	af00      	add	r7, sp, #0
90007b74:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007b78:	2300      	movs	r3, #0
90007b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007b7e:	2300      	movs	r3, #0
90007b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
90007b8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007b90:	2500      	movs	r5, #0
90007b92:	ea54 0305 	orrs.w	r3, r4, r5
90007b96:	d049      	beq.n	90007c2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007b9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007ba2:	d02f      	beq.n	90007c04 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007ba4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007ba8:	d828      	bhi.n	90007bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
90007baa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007bae:	d01a      	beq.n	90007be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007bb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007bb4:	d822      	bhi.n	90007bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
90007bb6:	2b00      	cmp	r3, #0
90007bb8:	d003      	beq.n	90007bc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
90007bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007bbe:	d007      	beq.n	90007bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007bc0:	e01c      	b.n	90007bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007bc2:	4bb8      	ldr	r3, [pc, #736]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007bc6:	4ab7      	ldr	r2, [pc, #732]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007bce:	e01a      	b.n	90007c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bd4:	3308      	adds	r3, #8
90007bd6:	2102      	movs	r1, #2
90007bd8:	4618      	mov	r0, r3
90007bda:	f001 fc8f 	bl	900094fc <RCCEx_PLL2_Config>
90007bde:	4603      	mov	r3, r0
90007be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007be4:	e00f      	b.n	90007c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bea:	3328      	adds	r3, #40	@ 0x28
90007bec:	2102      	movs	r1, #2
90007bee:	4618      	mov	r0, r3
90007bf0:	f001 fd36 	bl	90009660 <RCCEx_PLL3_Config>
90007bf4:	4603      	mov	r3, r0
90007bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007bfa:	e004      	b.n	90007c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007bfc:	2301      	movs	r3, #1
90007bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007c02:	e000      	b.n	90007c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007c04:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c0a:	2b00      	cmp	r3, #0
90007c0c:	d10a      	bne.n	90007c24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007c0e:	4ba5      	ldr	r3, [pc, #660]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007c12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007c1c:	4aa1      	ldr	r2, [pc, #644]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c1e:	430b      	orrs	r3, r1
90007c20:	6513      	str	r3, [r2, #80]	@ 0x50
90007c22:	e003      	b.n	90007c2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
90007c34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007c38:	f04f 0900 	mov.w	r9, #0
90007c3c:	ea58 0309 	orrs.w	r3, r8, r9
90007c40:	d047      	beq.n	90007cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007c48:	2b04      	cmp	r3, #4
90007c4a:	d82a      	bhi.n	90007ca2 <HAL_RCCEx_PeriphCLKConfig+0x136>
90007c4c:	a201      	add	r2, pc, #4	@ (adr r2, 90007c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007c52:	bf00      	nop
90007c54:	90007c69 	.word	0x90007c69
90007c58:	90007c77 	.word	0x90007c77
90007c5c:	90007c8d 	.word	0x90007c8d
90007c60:	90007cab 	.word	0x90007cab
90007c64:	90007cab 	.word	0x90007cab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007c68:	4b8e      	ldr	r3, [pc, #568]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c6c:	4a8d      	ldr	r2, [pc, #564]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c74:	e01a      	b.n	90007cac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c7a:	3308      	adds	r3, #8
90007c7c:	2100      	movs	r1, #0
90007c7e:	4618      	mov	r0, r3
90007c80:	f001 fc3c 	bl	900094fc <RCCEx_PLL2_Config>
90007c84:	4603      	mov	r3, r0
90007c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c8a:	e00f      	b.n	90007cac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c90:	3328      	adds	r3, #40	@ 0x28
90007c92:	2100      	movs	r1, #0
90007c94:	4618      	mov	r0, r3
90007c96:	f001 fce3 	bl	90009660 <RCCEx_PLL3_Config>
90007c9a:	4603      	mov	r3, r0
90007c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ca0:	e004      	b.n	90007cac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007ca2:	2301      	movs	r3, #1
90007ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007ca8:	e000      	b.n	90007cac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007caa:	bf00      	nop
    }

    if (ret == HAL_OK)
90007cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cb0:	2b00      	cmp	r3, #0
90007cb2:	d10a      	bne.n	90007cca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007cb4:	4b7b      	ldr	r3, [pc, #492]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007cb8:	f023 0107 	bic.w	r1, r3, #7
90007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007cc2:	4a78      	ldr	r2, [pc, #480]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cc4:	430b      	orrs	r3, r1
90007cc6:	6513      	str	r3, [r2, #80]	@ 0x50
90007cc8:	e003      	b.n	90007cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
90007cda:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007cde:	f04f 0b00 	mov.w	fp, #0
90007ce2:	ea5a 030b 	orrs.w	r3, sl, fp
90007ce6:	d04c      	beq.n	90007d82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007cf2:	d030      	beq.n	90007d56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007cf8:	d829      	bhi.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007cfa:	2bc0      	cmp	r3, #192	@ 0xc0
90007cfc:	d02d      	beq.n	90007d5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007cfe:	2bc0      	cmp	r3, #192	@ 0xc0
90007d00:	d825      	bhi.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d02:	2b80      	cmp	r3, #128	@ 0x80
90007d04:	d018      	beq.n	90007d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007d06:	2b80      	cmp	r3, #128	@ 0x80
90007d08:	d821      	bhi.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d0a:	2b00      	cmp	r3, #0
90007d0c:	d002      	beq.n	90007d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007d0e:	2b40      	cmp	r3, #64	@ 0x40
90007d10:	d007      	beq.n	90007d22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007d12:	e01c      	b.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d14:	4b63      	ldr	r3, [pc, #396]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007d18:	4a62      	ldr	r2, [pc, #392]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d20:	e01c      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d26:	3308      	adds	r3, #8
90007d28:	2100      	movs	r1, #0
90007d2a:	4618      	mov	r0, r3
90007d2c:	f001 fbe6 	bl	900094fc <RCCEx_PLL2_Config>
90007d30:	4603      	mov	r3, r0
90007d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d36:	e011      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d3c:	3328      	adds	r3, #40	@ 0x28
90007d3e:	2100      	movs	r1, #0
90007d40:	4618      	mov	r0, r3
90007d42:	f001 fc8d 	bl	90009660 <RCCEx_PLL3_Config>
90007d46:	4603      	mov	r3, r0
90007d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d4c:	e006      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007d4e:	2301      	movs	r3, #1
90007d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007d54:	e002      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007d56:	bf00      	nop
90007d58:	e000      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d60:	2b00      	cmp	r3, #0
90007d62:	d10a      	bne.n	90007d7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007d64:	4b4f      	ldr	r3, [pc, #316]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007d68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007d72:	4a4c      	ldr	r2, [pc, #304]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d74:	430b      	orrs	r3, r1
90007d76:	6513      	str	r3, [r2, #80]	@ 0x50
90007d78:	e003      	b.n	90007d82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007d8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007d92:	2300      	movs	r3, #0
90007d94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007d98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90007d9c:	460b      	mov	r3, r1
90007d9e:	4313      	orrs	r3, r2
90007da0:	d053      	beq.n	90007e4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007daa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007dae:	d035      	beq.n	90007e1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007db0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007db4:	d82e      	bhi.n	90007e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007db6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007dba:	d031      	beq.n	90007e20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007dbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007dc0:	d828      	bhi.n	90007e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007dc6:	d01a      	beq.n	90007dfe <HAL_RCCEx_PeriphCLKConfig+0x292>
90007dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007dcc:	d822      	bhi.n	90007e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007dce:	2b00      	cmp	r3, #0
90007dd0:	d003      	beq.n	90007dda <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007dd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007dd6:	d007      	beq.n	90007de8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007dd8:	e01c      	b.n	90007e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007dda:	4b32      	ldr	r3, [pc, #200]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007dde:	4a31      	ldr	r2, [pc, #196]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007de6:	e01c      	b.n	90007e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dec:	3308      	adds	r3, #8
90007dee:	2100      	movs	r1, #0
90007df0:	4618      	mov	r0, r3
90007df2:	f001 fb83 	bl	900094fc <RCCEx_PLL2_Config>
90007df6:	4603      	mov	r3, r0
90007df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007dfc:	e011      	b.n	90007e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e02:	3328      	adds	r3, #40	@ 0x28
90007e04:	2100      	movs	r1, #0
90007e06:	4618      	mov	r0, r3
90007e08:	f001 fc2a 	bl	90009660 <RCCEx_PLL3_Config>
90007e0c:	4603      	mov	r3, r0
90007e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e12:	e006      	b.n	90007e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007e14:	2301      	movs	r3, #1
90007e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007e1a:	e002      	b.n	90007e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007e1c:	bf00      	nop
90007e1e:	e000      	b.n	90007e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007e20:	bf00      	nop
    }

    if (ret == HAL_OK)
90007e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e26:	2b00      	cmp	r3, #0
90007e28:	d10b      	bne.n	90007e42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007e2a:	4b1e      	ldr	r3, [pc, #120]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007e2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007e3a:	4a1a      	ldr	r2, [pc, #104]	@ (90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e3c:	430b      	orrs	r3, r1
90007e3e:	6593      	str	r3, [r2, #88]	@ 0x58
90007e40:	e003      	b.n	90007e4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007e56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007e5a:	2300      	movs	r3, #0
90007e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007e60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007e64:	460b      	mov	r3, r1
90007e66:	4313      	orrs	r3, r2
90007e68:	d056      	beq.n	90007f18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007e72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007e76:	d038      	beq.n	90007eea <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007e78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007e7c:	d831      	bhi.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007e82:	d034      	beq.n	90007eee <HAL_RCCEx_PeriphCLKConfig+0x382>
90007e84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007e88:	d82b      	bhi.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007e8e:	d01d      	beq.n	90007ecc <HAL_RCCEx_PeriphCLKConfig+0x360>
90007e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007e94:	d825      	bhi.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e96:	2b00      	cmp	r3, #0
90007e98:	d006      	beq.n	90007ea8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007e9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007e9e:	d00a      	beq.n	90007eb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007ea0:	e01f      	b.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007ea2:	bf00      	nop
90007ea4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ea8:	4ba2      	ldr	r3, [pc, #648]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007eac:	4aa1      	ldr	r2, [pc, #644]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007eb4:	e01c      	b.n	90007ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007eba:	3308      	adds	r3, #8
90007ebc:	2100      	movs	r1, #0
90007ebe:	4618      	mov	r0, r3
90007ec0:	f001 fb1c 	bl	900094fc <RCCEx_PLL2_Config>
90007ec4:	4603      	mov	r3, r0
90007ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007eca:	e011      	b.n	90007ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ed0:	3328      	adds	r3, #40	@ 0x28
90007ed2:	2100      	movs	r1, #0
90007ed4:	4618      	mov	r0, r3
90007ed6:	f001 fbc3 	bl	90009660 <RCCEx_PLL3_Config>
90007eda:	4603      	mov	r3, r0
90007edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ee0:	e006      	b.n	90007ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007ee2:	2301      	movs	r3, #1
90007ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007ee8:	e002      	b.n	90007ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007eea:	bf00      	nop
90007eec:	e000      	b.n	90007ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007eee:	bf00      	nop
    }

    if (ret == HAL_OK)
90007ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ef4:	2b00      	cmp	r3, #0
90007ef6:	d10b      	bne.n	90007f10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007ef8:	4b8e      	ldr	r3, [pc, #568]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007efc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007f08:	4a8a      	ldr	r2, [pc, #552]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f0a:	430b      	orrs	r3, r1
90007f0c:	6593      	str	r3, [r2, #88]	@ 0x58
90007f0e:	e003      	b.n	90007f18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90007f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90007f28:	2300      	movs	r3, #0
90007f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90007f2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90007f32:	460b      	mov	r3, r1
90007f34:	4313      	orrs	r3, r2
90007f36:	d03a      	beq.n	90007fae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007f3e:	2b30      	cmp	r3, #48	@ 0x30
90007f40:	d01f      	beq.n	90007f82 <HAL_RCCEx_PeriphCLKConfig+0x416>
90007f42:	2b30      	cmp	r3, #48	@ 0x30
90007f44:	d819      	bhi.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007f46:	2b20      	cmp	r3, #32
90007f48:	d00c      	beq.n	90007f64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007f4a:	2b20      	cmp	r3, #32
90007f4c:	d815      	bhi.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007f4e:	2b00      	cmp	r3, #0
90007f50:	d019      	beq.n	90007f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007f52:	2b10      	cmp	r3, #16
90007f54:	d111      	bne.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f56:	4b77      	ldr	r3, [pc, #476]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f5a:	4a76      	ldr	r2, [pc, #472]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007f62:	e011      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f68:	3308      	adds	r3, #8
90007f6a:	2102      	movs	r1, #2
90007f6c:	4618      	mov	r0, r3
90007f6e:	f001 fac5 	bl	900094fc <RCCEx_PLL2_Config>
90007f72:	4603      	mov	r3, r0
90007f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007f78:	e006      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007f7a:	2301      	movs	r3, #1
90007f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f80:	e002      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007f82:	bf00      	nop
90007f84:	e000      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007f86:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f8c:	2b00      	cmp	r3, #0
90007f8e:	d10a      	bne.n	90007fa6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90007f90:	4b68      	ldr	r3, [pc, #416]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007f94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007f9e:	4a65      	ldr	r2, [pc, #404]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fa0:	430b      	orrs	r3, r1
90007fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
90007fa4:	e003      	b.n	90007fae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
90007fb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90007fba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90007fbe:	2300      	movs	r3, #0
90007fc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90007fc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90007fc8:	460b      	mov	r3, r1
90007fca:	4313      	orrs	r3, r2
90007fcc:	d051      	beq.n	90008072 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90007fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007fd8:	d035      	beq.n	90008046 <HAL_RCCEx_PeriphCLKConfig+0x4da>
90007fda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007fde:	d82e      	bhi.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007fe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007fe4:	d031      	beq.n	9000804a <HAL_RCCEx_PeriphCLKConfig+0x4de>
90007fe6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007fea:	d828      	bhi.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007ff0:	d01a      	beq.n	90008028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90007ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007ff6:	d822      	bhi.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007ff8:	2b00      	cmp	r3, #0
90007ffa:	d003      	beq.n	90008004 <HAL_RCCEx_PeriphCLKConfig+0x498>
90007ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008000:	d007      	beq.n	90008012 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90008002:	e01c      	b.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008004:	4b4b      	ldr	r3, [pc, #300]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008008:	4a4a      	ldr	r2, [pc, #296]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000800a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000800e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008010:	e01c      	b.n	9000804c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008016:	3308      	adds	r3, #8
90008018:	2100      	movs	r1, #0
9000801a:	4618      	mov	r0, r3
9000801c:	f001 fa6e 	bl	900094fc <RCCEx_PLL2_Config>
90008020:	4603      	mov	r3, r0
90008022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008026:	e011      	b.n	9000804c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000802c:	3328      	adds	r3, #40	@ 0x28
9000802e:	2100      	movs	r1, #0
90008030:	4618      	mov	r0, r3
90008032:	f001 fb15 	bl	90009660 <RCCEx_PLL3_Config>
90008036:	4603      	mov	r3, r0
90008038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
9000803c:	e006      	b.n	9000804c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000803e:	2301      	movs	r3, #1
90008040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008044:	e002      	b.n	9000804c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008046:	bf00      	nop
90008048:	e000      	b.n	9000804c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
9000804a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000804c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008050:	2b00      	cmp	r3, #0
90008052:	d10a      	bne.n	9000806a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90008054:	4b37      	ldr	r3, [pc, #220]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008058:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
9000805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008062:	4a34      	ldr	r2, [pc, #208]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008064:	430b      	orrs	r3, r1
90008066:	6513      	str	r3, [r2, #80]	@ 0x50
90008068:	e003      	b.n	90008072 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000806e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008076:	e9d3 2300 	ldrd	r2, r3, [r3]
9000807a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
9000807e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90008082:	2300      	movs	r3, #0
90008084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90008088:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
9000808c:	460b      	mov	r3, r1
9000808e:	4313      	orrs	r3, r2
90008090:	d056      	beq.n	90008140 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000809c:	d033      	beq.n	90008106 <HAL_RCCEx_PeriphCLKConfig+0x59a>
9000809e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
900080a2:	d82c      	bhi.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x592>
900080a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900080a8:	d02f      	beq.n	9000810a <HAL_RCCEx_PeriphCLKConfig+0x59e>
900080aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900080ae:	d826      	bhi.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x592>
900080b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
900080b4:	d02b      	beq.n	9000810e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
900080b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
900080ba:	d820      	bhi.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x592>
900080bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900080c0:	d012      	beq.n	900080e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
900080c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900080c6:	d81a      	bhi.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x592>
900080c8:	2b00      	cmp	r3, #0
900080ca:	d022      	beq.n	90008112 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
900080cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900080d0:	d115      	bne.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900080d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080d6:	3308      	adds	r3, #8
900080d8:	2101      	movs	r1, #1
900080da:	4618      	mov	r0, r3
900080dc:	f001 fa0e 	bl	900094fc <RCCEx_PLL2_Config>
900080e0:	4603      	mov	r3, r0
900080e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900080e6:	e015      	b.n	90008114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900080e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080ec:	3328      	adds	r3, #40	@ 0x28
900080ee:	2101      	movs	r1, #1
900080f0:	4618      	mov	r0, r3
900080f2:	f001 fab5 	bl	90009660 <RCCEx_PLL3_Config>
900080f6:	4603      	mov	r3, r0
900080f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900080fc:	e00a      	b.n	90008114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900080fe:	2301      	movs	r3, #1
90008100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008104:	e006      	b.n	90008114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008106:	bf00      	nop
90008108:	e004      	b.n	90008114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000810a:	bf00      	nop
9000810c:	e002      	b.n	90008114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000810e:	bf00      	nop
90008110:	e000      	b.n	90008114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008112:	bf00      	nop
    }

    if (ret == HAL_OK)
90008114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008118:	2b00      	cmp	r3, #0
9000811a:	d10d      	bne.n	90008138 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000811c:	4b05      	ldr	r3, [pc, #20]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000811e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008120:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000812a:	4a02      	ldr	r2, [pc, #8]	@ (90008134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000812c:	430b      	orrs	r3, r1
9000812e:	6513      	str	r3, [r2, #80]	@ 0x50
90008130:	e006      	b.n	90008140 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
90008132:	bf00      	nop
90008134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000813c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008144:	e9d3 2300 	ldrd	r2, r3, [r3]
90008148:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
9000814c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90008150:	2300      	movs	r3, #0
90008152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90008156:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
9000815a:	460b      	mov	r3, r1
9000815c:	4313      	orrs	r3, r2
9000815e:	d055      	beq.n	9000820c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
90008160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000816c:	d033      	beq.n	900081d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
9000816e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008172:	d82c      	bhi.n	900081ce <HAL_RCCEx_PeriphCLKConfig+0x662>
90008174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008178:	d02f      	beq.n	900081da <HAL_RCCEx_PeriphCLKConfig+0x66e>
9000817a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000817e:	d826      	bhi.n	900081ce <HAL_RCCEx_PeriphCLKConfig+0x662>
90008180:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008184:	d02b      	beq.n	900081de <HAL_RCCEx_PeriphCLKConfig+0x672>
90008186:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000818a:	d820      	bhi.n	900081ce <HAL_RCCEx_PeriphCLKConfig+0x662>
9000818c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008190:	d012      	beq.n	900081b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90008192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008196:	d81a      	bhi.n	900081ce <HAL_RCCEx_PeriphCLKConfig+0x662>
90008198:	2b00      	cmp	r3, #0
9000819a:	d022      	beq.n	900081e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
9000819c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900081a0:	d115      	bne.n	900081ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081a6:	3308      	adds	r3, #8
900081a8:	2101      	movs	r1, #1
900081aa:	4618      	mov	r0, r3
900081ac:	f001 f9a6 	bl	900094fc <RCCEx_PLL2_Config>
900081b0:	4603      	mov	r3, r0
900081b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
900081b6:	e015      	b.n	900081e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081bc:	3328      	adds	r3, #40	@ 0x28
900081be:	2101      	movs	r1, #1
900081c0:	4618      	mov	r0, r3
900081c2:	f001 fa4d 	bl	90009660 <RCCEx_PLL3_Config>
900081c6:	4603      	mov	r3, r0
900081c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
900081cc:	e00a      	b.n	900081e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
900081ce:	2301      	movs	r3, #1
900081d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900081d4:	e006      	b.n	900081e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900081d6:	bf00      	nop
900081d8:	e004      	b.n	900081e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900081da:	bf00      	nop
900081dc:	e002      	b.n	900081e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900081de:	bf00      	nop
900081e0:	e000      	b.n	900081e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900081e2:	bf00      	nop
    }

    if (ret == HAL_OK)
900081e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081e8:	2b00      	cmp	r3, #0
900081ea:	d10b      	bne.n	90008204 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
900081ec:	4ba3      	ldr	r3, [pc, #652]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900081ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900081f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900081fc:	4a9f      	ldr	r2, [pc, #636]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900081fe:	430b      	orrs	r3, r1
90008200:	6593      	str	r3, [r2, #88]	@ 0x58
90008202:	e003      	b.n	9000820c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000820c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008210:	e9d3 2300 	ldrd	r2, r3, [r3]
90008214:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
90008218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
9000821c:	2300      	movs	r3, #0
9000821e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
90008222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008226:	460b      	mov	r3, r1
90008228:	4313      	orrs	r3, r2
9000822a:	d037      	beq.n	9000829c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
9000822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008236:	d00e      	beq.n	90008256 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90008238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000823c:	d816      	bhi.n	9000826c <HAL_RCCEx_PeriphCLKConfig+0x700>
9000823e:	2b00      	cmp	r3, #0
90008240:	d018      	beq.n	90008274 <HAL_RCCEx_PeriphCLKConfig+0x708>
90008242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008246:	d111      	bne.n	9000826c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008248:	4b8c      	ldr	r3, [pc, #560]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000824c:	4a8b      	ldr	r2, [pc, #556]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000824e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008254:	e00f      	b.n	90008276 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000825a:	3308      	adds	r3, #8
9000825c:	2101      	movs	r1, #1
9000825e:	4618      	mov	r0, r3
90008260:	f001 f94c 	bl	900094fc <RCCEx_PLL2_Config>
90008264:	4603      	mov	r3, r0
90008266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
9000826a:	e004      	b.n	90008276 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000826c:	2301      	movs	r3, #1
9000826e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008272:	e000      	b.n	90008276 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90008274:	bf00      	nop
    }

    if (ret == HAL_OK)
90008276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000827a:	2b00      	cmp	r3, #0
9000827c:	d10a      	bne.n	90008294 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000827e:	4b7f      	ldr	r3, [pc, #508]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008282:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000828a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000828c:	4a7b      	ldr	r2, [pc, #492]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000828e:	430b      	orrs	r3, r1
90008290:	6513      	str	r3, [r2, #80]	@ 0x50
90008292:	e003      	b.n	9000829c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000829c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
900082a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
900082a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
900082ac:	2300      	movs	r3, #0
900082ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
900082b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
900082b6:	460b      	mov	r3, r1
900082b8:	4313      	orrs	r3, r2
900082ba:	d039      	beq.n	90008330 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
900082bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900082c2:	2b03      	cmp	r3, #3
900082c4:	d81c      	bhi.n	90008300 <HAL_RCCEx_PeriphCLKConfig+0x794>
900082c6:	a201      	add	r2, pc, #4	@ (adr r2, 900082cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
900082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900082cc:	90008309 	.word	0x90008309
900082d0:	900082dd 	.word	0x900082dd
900082d4:	900082eb 	.word	0x900082eb
900082d8:	90008309 	.word	0x90008309
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900082dc:	4b67      	ldr	r3, [pc, #412]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900082e0:	4a66      	ldr	r2, [pc, #408]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900082e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
900082e8:	e00f      	b.n	9000830a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900082ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082ee:	3308      	adds	r3, #8
900082f0:	2102      	movs	r1, #2
900082f2:	4618      	mov	r0, r3
900082f4:	f001 f902 	bl	900094fc <RCCEx_PLL2_Config>
900082f8:	4603      	mov	r3, r0
900082fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
900082fe:	e004      	b.n	9000830a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008300:	2301      	movs	r3, #1
90008302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008306:	e000      	b.n	9000830a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008308:	bf00      	nop
    }

    if (ret == HAL_OK)
9000830a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000830e:	2b00      	cmp	r3, #0
90008310:	d10a      	bne.n	90008328 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90008312:	4b5a      	ldr	r3, [pc, #360]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008316:	f023 0103 	bic.w	r1, r3, #3
9000831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000831e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008320:	4a56      	ldr	r2, [pc, #344]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008322:	430b      	orrs	r3, r1
90008324:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008326:	e003      	b.n	90008330 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000832c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90008330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008334:	e9d3 2300 	ldrd	r2, r3, [r3]
90008338:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
9000833c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
90008340:	2300      	movs	r3, #0
90008342:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
90008346:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
9000834a:	460b      	mov	r3, r1
9000834c:	4313      	orrs	r3, r2
9000834e:	f000 809f 	beq.w	90008490 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90008352:	4b4b      	ldr	r3, [pc, #300]	@ (90008480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008354:	681b      	ldr	r3, [r3, #0]
90008356:	4a4a      	ldr	r2, [pc, #296]	@ (90008480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000835c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000835e:	f7fa ff77 	bl	90003250 <HAL_GetTick>
90008362:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008366:	e00b      	b.n	90008380 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90008368:	f7fa ff72 	bl	90003250 <HAL_GetTick>
9000836c:	4602      	mov	r2, r0
9000836e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008372:	1ad3      	subs	r3, r2, r3
90008374:	2b64      	cmp	r3, #100	@ 0x64
90008376:	d903      	bls.n	90008380 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90008378:	2303      	movs	r3, #3
9000837a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000837e:	e005      	b.n	9000838c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008380:	4b3f      	ldr	r3, [pc, #252]	@ (90008480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008382:	681b      	ldr	r3, [r3, #0]
90008384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90008388:	2b00      	cmp	r3, #0
9000838a:	d0ed      	beq.n	90008368 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
9000838c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008390:	2b00      	cmp	r3, #0
90008392:	d179      	bne.n	90008488 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008394:	4b39      	ldr	r3, [pc, #228]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008396:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000839c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900083a0:	4053      	eors	r3, r2
900083a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
900083a6:	2b00      	cmp	r3, #0
900083a8:	d015      	beq.n	900083d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
900083aa:	4b34      	ldr	r3, [pc, #208]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900083ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
900083b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
900083b6:	4b31      	ldr	r3, [pc, #196]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900083ba:	4a30      	ldr	r2, [pc, #192]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900083c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
900083c2:	4b2e      	ldr	r3, [pc, #184]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900083c6:	4a2d      	ldr	r2, [pc, #180]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900083cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
900083ce:	4a2b      	ldr	r2, [pc, #172]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
900083d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
900083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900083de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900083e2:	d118      	bne.n	90008416 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900083e4:	f7fa ff34 	bl	90003250 <HAL_GetTick>
900083e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900083ec:	e00d      	b.n	9000840a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900083ee:	f7fa ff2f 	bl	90003250 <HAL_GetTick>
900083f2:	4602      	mov	r2, r0
900083f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900083f8:	1ad2      	subs	r2, r2, r3
900083fa:	f241 3388 	movw	r3, #5000	@ 0x1388
900083fe:	429a      	cmp	r2, r3
90008400:	d903      	bls.n	9000840a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90008402:	2303      	movs	r3, #3
90008404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90008408:	e005      	b.n	90008416 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000840a:	4b1c      	ldr	r3, [pc, #112]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000840c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000840e:	f003 0302 	and.w	r3, r3, #2
90008412:	2b00      	cmp	r3, #0
90008414:	d0eb      	beq.n	900083ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90008416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000841a:	2b00      	cmp	r3, #0
9000841c:	d129      	bne.n	90008472 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000842a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000842e:	d10e      	bne.n	9000844e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90008430:	4b12      	ldr	r3, [pc, #72]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008432:	691b      	ldr	r3, [r3, #16]
90008434:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
90008438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000843c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008440:	091a      	lsrs	r2, r3, #4
90008442:	4b10      	ldr	r3, [pc, #64]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0x918>)
90008444:	4013      	ands	r3, r2
90008446:	4a0d      	ldr	r2, [pc, #52]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008448:	430b      	orrs	r3, r1
9000844a:	6113      	str	r3, [r2, #16]
9000844c:	e005      	b.n	9000845a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000844e:	4b0b      	ldr	r3, [pc, #44]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008450:	691b      	ldr	r3, [r3, #16]
90008452:	4a0a      	ldr	r2, [pc, #40]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008454:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90008458:	6113      	str	r3, [r2, #16]
9000845a:	4b08      	ldr	r3, [pc, #32]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000845c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
9000845e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008462:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008466:	f3c3 030b 	ubfx	r3, r3, #0, #12
9000846a:	4a04      	ldr	r2, [pc, #16]	@ (9000847c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000846c:	430b      	orrs	r3, r1
9000846e:	6713      	str	r3, [r2, #112]	@ 0x70
90008470:	e00e      	b.n	90008490 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
90008472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
9000847a:	e009      	b.n	90008490 <HAL_RCCEx_PeriphCLKConfig+0x924>
9000847c:	58024400 	.word	0x58024400
90008480:	58024800 	.word	0x58024800
90008484:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90008488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000848c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008494:	e9d3 2300 	ldrd	r2, r3, [r3]
90008498:	f002 0301 	and.w	r3, r2, #1
9000849c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
900084a0:	2300      	movs	r3, #0
900084a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
900084a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
900084aa:	460b      	mov	r3, r1
900084ac:	4313      	orrs	r3, r2
900084ae:	f000 8089 	beq.w	900085c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
900084b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900084b8:	2b28      	cmp	r3, #40	@ 0x28
900084ba:	d86b      	bhi.n	90008594 <HAL_RCCEx_PeriphCLKConfig+0xa28>
900084bc:	a201      	add	r2, pc, #4	@ (adr r2, 900084c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
900084be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900084c2:	bf00      	nop
900084c4:	9000859d 	.word	0x9000859d
900084c8:	90008595 	.word	0x90008595
900084cc:	90008595 	.word	0x90008595
900084d0:	90008595 	.word	0x90008595
900084d4:	90008595 	.word	0x90008595
900084d8:	90008595 	.word	0x90008595
900084dc:	90008595 	.word	0x90008595
900084e0:	90008595 	.word	0x90008595
900084e4:	90008569 	.word	0x90008569
900084e8:	90008595 	.word	0x90008595
900084ec:	90008595 	.word	0x90008595
900084f0:	90008595 	.word	0x90008595
900084f4:	90008595 	.word	0x90008595
900084f8:	90008595 	.word	0x90008595
900084fc:	90008595 	.word	0x90008595
90008500:	90008595 	.word	0x90008595
90008504:	9000857f 	.word	0x9000857f
90008508:	90008595 	.word	0x90008595
9000850c:	90008595 	.word	0x90008595
90008510:	90008595 	.word	0x90008595
90008514:	90008595 	.word	0x90008595
90008518:	90008595 	.word	0x90008595
9000851c:	90008595 	.word	0x90008595
90008520:	90008595 	.word	0x90008595
90008524:	9000859d 	.word	0x9000859d
90008528:	90008595 	.word	0x90008595
9000852c:	90008595 	.word	0x90008595
90008530:	90008595 	.word	0x90008595
90008534:	90008595 	.word	0x90008595
90008538:	90008595 	.word	0x90008595
9000853c:	90008595 	.word	0x90008595
90008540:	90008595 	.word	0x90008595
90008544:	9000859d 	.word	0x9000859d
90008548:	90008595 	.word	0x90008595
9000854c:	90008595 	.word	0x90008595
90008550:	90008595 	.word	0x90008595
90008554:	90008595 	.word	0x90008595
90008558:	90008595 	.word	0x90008595
9000855c:	90008595 	.word	0x90008595
90008560:	90008595 	.word	0x90008595
90008564:	9000859d 	.word	0x9000859d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000856c:	3308      	adds	r3, #8
9000856e:	2101      	movs	r1, #1
90008570:	4618      	mov	r0, r3
90008572:	f000 ffc3 	bl	900094fc <RCCEx_PLL2_Config>
90008576:	4603      	mov	r3, r0
90008578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000857c:	e00f      	b.n	9000859e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000857e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008582:	3328      	adds	r3, #40	@ 0x28
90008584:	2101      	movs	r1, #1
90008586:	4618      	mov	r0, r3
90008588:	f001 f86a 	bl	90009660 <RCCEx_PLL3_Config>
9000858c:	4603      	mov	r3, r0
9000858e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008592:	e004      	b.n	9000859e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008594:	2301      	movs	r3, #1
90008596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000859a:	e000      	b.n	9000859e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
9000859c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000859e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085a2:	2b00      	cmp	r3, #0
900085a4:	d10a      	bne.n	900085bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
900085a6:	4bbf      	ldr	r3, [pc, #764]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900085a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900085aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
900085ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900085b4:	4abb      	ldr	r2, [pc, #748]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900085b6:	430b      	orrs	r3, r1
900085b8:	6553      	str	r3, [r2, #84]	@ 0x54
900085ba:	e003      	b.n	900085c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
900085bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
900085c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
900085cc:	f002 0302 	and.w	r3, r2, #2
900085d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
900085d4:	2300      	movs	r3, #0
900085d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
900085da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
900085de:	460b      	mov	r3, r1
900085e0:	4313      	orrs	r3, r2
900085e2:	d041      	beq.n	90008668 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
900085e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900085ea:	2b05      	cmp	r3, #5
900085ec:	d824      	bhi.n	90008638 <HAL_RCCEx_PeriphCLKConfig+0xacc>
900085ee:	a201      	add	r2, pc, #4	@ (adr r2, 900085f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
900085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900085f4:	90008641 	.word	0x90008641
900085f8:	9000860d 	.word	0x9000860d
900085fc:	90008623 	.word	0x90008623
90008600:	90008641 	.word	0x90008641
90008604:	90008641 	.word	0x90008641
90008608:	90008641 	.word	0x90008641
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008610:	3308      	adds	r3, #8
90008612:	2101      	movs	r1, #1
90008614:	4618      	mov	r0, r3
90008616:	f000 ff71 	bl	900094fc <RCCEx_PLL2_Config>
9000861a:	4603      	mov	r3, r0
9000861c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008620:	e00f      	b.n	90008642 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008626:	3328      	adds	r3, #40	@ 0x28
90008628:	2101      	movs	r1, #1
9000862a:	4618      	mov	r0, r3
9000862c:	f001 f818 	bl	90009660 <RCCEx_PLL3_Config>
90008630:	4603      	mov	r3, r0
90008632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008636:	e004      	b.n	90008642 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008638:	2301      	movs	r3, #1
9000863a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000863e:	e000      	b.n	90008642 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90008640:	bf00      	nop
    }

    if (ret == HAL_OK)
90008642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008646:	2b00      	cmp	r3, #0
90008648:	d10a      	bne.n	90008660 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000864a:	4b96      	ldr	r3, [pc, #600]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000864c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000864e:	f023 0107 	bic.w	r1, r3, #7
90008652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008658:	4a92      	ldr	r2, [pc, #584]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000865a:	430b      	orrs	r3, r1
9000865c:	6553      	str	r3, [r2, #84]	@ 0x54
9000865e:	e003      	b.n	90008668 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90008668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000866c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008670:	f002 0304 	and.w	r3, r2, #4
90008674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90008678:	2300      	movs	r3, #0
9000867a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
9000867e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
90008682:	460b      	mov	r3, r1
90008684:	4313      	orrs	r3, r2
90008686:	d044      	beq.n	90008712 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90008688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000868c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008690:	2b05      	cmp	r3, #5
90008692:	d825      	bhi.n	900086e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008694:	a201      	add	r2, pc, #4	@ (adr r2, 9000869c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000869a:	bf00      	nop
9000869c:	900086e9 	.word	0x900086e9
900086a0:	900086b5 	.word	0x900086b5
900086a4:	900086cb 	.word	0x900086cb
900086a8:	900086e9 	.word	0x900086e9
900086ac:	900086e9 	.word	0x900086e9
900086b0:	900086e9 	.word	0x900086e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086b8:	3308      	adds	r3, #8
900086ba:	2101      	movs	r1, #1
900086bc:	4618      	mov	r0, r3
900086be:	f000 ff1d 	bl	900094fc <RCCEx_PLL2_Config>
900086c2:	4603      	mov	r3, r0
900086c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900086c8:	e00f      	b.n	900086ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900086ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086ce:	3328      	adds	r3, #40	@ 0x28
900086d0:	2101      	movs	r1, #1
900086d2:	4618      	mov	r0, r3
900086d4:	f000 ffc4 	bl	90009660 <RCCEx_PLL3_Config>
900086d8:	4603      	mov	r3, r0
900086da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900086de:	e004      	b.n	900086ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900086e0:	2301      	movs	r3, #1
900086e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086e6:	e000      	b.n	900086ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
900086e8:	bf00      	nop
    }

    if (ret == HAL_OK)
900086ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086ee:	2b00      	cmp	r3, #0
900086f0:	d10b      	bne.n	9000870a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
900086f2:	4b6c      	ldr	r3, [pc, #432]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900086f6:	f023 0107 	bic.w	r1, r3, #7
900086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008702:	4a68      	ldr	r2, [pc, #416]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008704:	430b      	orrs	r3, r1
90008706:	6593      	str	r3, [r2, #88]	@ 0x58
90008708:	e003      	b.n	90008712 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000870a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000870e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008716:	e9d3 2300 	ldrd	r2, r3, [r3]
9000871a:	f002 0320 	and.w	r3, r2, #32
9000871e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
90008722:	2300      	movs	r3, #0
90008724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
9000872c:	460b      	mov	r3, r1
9000872e:	4313      	orrs	r3, r2
90008730:	d055      	beq.n	900087de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
90008732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000873a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000873e:	d033      	beq.n	900087a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90008740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008744:	d82c      	bhi.n	900087a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000874a:	d02f      	beq.n	900087ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
9000874c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008750:	d826      	bhi.n	900087a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008752:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008756:	d02b      	beq.n	900087b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
90008758:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000875c:	d820      	bhi.n	900087a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000875e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008762:	d012      	beq.n	9000878a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
90008764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008768:	d81a      	bhi.n	900087a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000876a:	2b00      	cmp	r3, #0
9000876c:	d022      	beq.n	900087b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
9000876e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008772:	d115      	bne.n	900087a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008778:	3308      	adds	r3, #8
9000877a:	2100      	movs	r1, #0
9000877c:	4618      	mov	r0, r3
9000877e:	f000 febd 	bl	900094fc <RCCEx_PLL2_Config>
90008782:	4603      	mov	r3, r0
90008784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008788:	e015      	b.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000878e:	3328      	adds	r3, #40	@ 0x28
90008790:	2102      	movs	r1, #2
90008792:	4618      	mov	r0, r3
90008794:	f000 ff64 	bl	90009660 <RCCEx_PLL3_Config>
90008798:	4603      	mov	r3, r0
9000879a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000879e:	e00a      	b.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900087a0:	2301      	movs	r3, #1
900087a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900087a6:	e006      	b.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900087a8:	bf00      	nop
900087aa:	e004      	b.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900087ac:	bf00      	nop
900087ae:	e002      	b.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900087b0:	bf00      	nop
900087b2:	e000      	b.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900087b4:	bf00      	nop
    }

    if (ret == HAL_OK)
900087b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087ba:	2b00      	cmp	r3, #0
900087bc:	d10b      	bne.n	900087d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
900087be:	4b39      	ldr	r3, [pc, #228]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900087c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900087c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900087ce:	4a35      	ldr	r2, [pc, #212]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900087d0:	430b      	orrs	r3, r1
900087d2:	6553      	str	r3, [r2, #84]	@ 0x54
900087d4:	e003      	b.n	900087de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
900087d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
900087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
900087e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
900087ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
900087ee:	2300      	movs	r3, #0
900087f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
900087f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
900087f8:	460b      	mov	r3, r1
900087fa:	4313      	orrs	r3, r2
900087fc:	d058      	beq.n	900088b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
900087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008806:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
9000880a:	d033      	beq.n	90008874 <HAL_RCCEx_PeriphCLKConfig+0xd08>
9000880c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008810:	d82c      	bhi.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008816:	d02f      	beq.n	90008878 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000881c:	d826      	bhi.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000881e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008822:	d02b      	beq.n	9000887c <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008824:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008828:	d820      	bhi.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000882a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000882e:	d012      	beq.n	90008856 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008834:	d81a      	bhi.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008836:	2b00      	cmp	r3, #0
90008838:	d022      	beq.n	90008880 <HAL_RCCEx_PeriphCLKConfig+0xd14>
9000883a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000883e:	d115      	bne.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008844:	3308      	adds	r3, #8
90008846:	2100      	movs	r1, #0
90008848:	4618      	mov	r0, r3
9000884a:	f000 fe57 	bl	900094fc <RCCEx_PLL2_Config>
9000884e:	4603      	mov	r3, r0
90008850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008854:	e015      	b.n	90008882 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000885a:	3328      	adds	r3, #40	@ 0x28
9000885c:	2102      	movs	r1, #2
9000885e:	4618      	mov	r0, r3
90008860:	f000 fefe 	bl	90009660 <RCCEx_PLL3_Config>
90008864:	4603      	mov	r3, r0
90008866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
9000886a:	e00a      	b.n	90008882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000886c:	2301      	movs	r3, #1
9000886e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008872:	e006      	b.n	90008882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008874:	bf00      	nop
90008876:	e004      	b.n	90008882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008878:	bf00      	nop
9000887a:	e002      	b.n	90008882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000887c:	bf00      	nop
9000887e:	e000      	b.n	90008882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008880:	bf00      	nop
    }

    if (ret == HAL_OK)
90008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008886:	2b00      	cmp	r3, #0
90008888:	d10e      	bne.n	900088a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000888a:	4b06      	ldr	r3, [pc, #24]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000888c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000888e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008896:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000889a:	4a02      	ldr	r2, [pc, #8]	@ (900088a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000889c:	430b      	orrs	r3, r1
9000889e:	6593      	str	r3, [r2, #88]	@ 0x58
900088a0:	e006      	b.n	900088b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
900088a2:	bf00      	nop
900088a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900088a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900088ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
900088b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
900088b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
900088bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
900088c0:	2300      	movs	r3, #0
900088c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
900088c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
900088ca:	460b      	mov	r3, r1
900088cc:	4313      	orrs	r3, r2
900088ce:	d055      	beq.n	9000897c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
900088d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900088d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900088dc:	d033      	beq.n	90008946 <HAL_RCCEx_PeriphCLKConfig+0xdda>
900088de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900088e2:	d82c      	bhi.n	9000893e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900088e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900088e8:	d02f      	beq.n	9000894a <HAL_RCCEx_PeriphCLKConfig+0xdde>
900088ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900088ee:	d826      	bhi.n	9000893e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900088f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
900088f4:	d02b      	beq.n	9000894e <HAL_RCCEx_PeriphCLKConfig+0xde2>
900088f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
900088fa:	d820      	bhi.n	9000893e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900088fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008900:	d012      	beq.n	90008928 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90008902:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008906:	d81a      	bhi.n	9000893e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008908:	2b00      	cmp	r3, #0
9000890a:	d022      	beq.n	90008952 <HAL_RCCEx_PeriphCLKConfig+0xde6>
9000890c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008910:	d115      	bne.n	9000893e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008916:	3308      	adds	r3, #8
90008918:	2100      	movs	r1, #0
9000891a:	4618      	mov	r0, r3
9000891c:	f000 fdee 	bl	900094fc <RCCEx_PLL2_Config>
90008920:	4603      	mov	r3, r0
90008922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008926:	e015      	b.n	90008954 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000892c:	3328      	adds	r3, #40	@ 0x28
9000892e:	2102      	movs	r1, #2
90008930:	4618      	mov	r0, r3
90008932:	f000 fe95 	bl	90009660 <RCCEx_PLL3_Config>
90008936:	4603      	mov	r3, r0
90008938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000893c:	e00a      	b.n	90008954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000893e:	2301      	movs	r3, #1
90008940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008944:	e006      	b.n	90008954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008946:	bf00      	nop
90008948:	e004      	b.n	90008954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000894a:	bf00      	nop
9000894c:	e002      	b.n	90008954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000894e:	bf00      	nop
90008950:	e000      	b.n	90008954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008952:	bf00      	nop
    }

    if (ret == HAL_OK)
90008954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008958:	2b00      	cmp	r3, #0
9000895a:	d10b      	bne.n	90008974 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000895c:	4ba1      	ldr	r3, [pc, #644]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000895e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008960:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
90008964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
9000896c:	4a9d      	ldr	r2, [pc, #628]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000896e:	430b      	orrs	r3, r1
90008970:	6593      	str	r3, [r2, #88]	@ 0x58
90008972:	e003      	b.n	9000897c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000897c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008980:	e9d3 2300 	ldrd	r2, r3, [r3]
90008984:	f002 0308 	and.w	r3, r2, #8
90008988:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
9000898c:	2300      	movs	r3, #0
9000898e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008992:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008996:	460b      	mov	r3, r1
90008998:	4313      	orrs	r3, r2
9000899a:	d01e      	beq.n	900089da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000899c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900089a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900089a8:	d10c      	bne.n	900089c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089ae:	3328      	adds	r3, #40	@ 0x28
900089b0:	2102      	movs	r1, #2
900089b2:	4618      	mov	r0, r3
900089b4:	f000 fe54 	bl	90009660 <RCCEx_PLL3_Config>
900089b8:	4603      	mov	r3, r0
900089ba:	2b00      	cmp	r3, #0
900089bc:	d002      	beq.n	900089c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
900089be:	2301      	movs	r3, #1
900089c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
900089c4:	4b87      	ldr	r3, [pc, #540]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900089c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
900089cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900089d4:	4a83      	ldr	r2, [pc, #524]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089d6:	430b      	orrs	r3, r1
900089d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089de:	e9d3 2300 	ldrd	r2, r3, [r3]
900089e2:	f002 0310 	and.w	r3, r2, #16
900089e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
900089ea:	2300      	movs	r3, #0
900089ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
900089f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
900089f4:	460b      	mov	r3, r1
900089f6:	4313      	orrs	r3, r2
900089f8:	d01e      	beq.n	90008a38 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
900089fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008a06:	d10c      	bne.n	90008a22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a0c:	3328      	adds	r3, #40	@ 0x28
90008a0e:	2102      	movs	r1, #2
90008a10:	4618      	mov	r0, r3
90008a12:	f000 fe25 	bl	90009660 <RCCEx_PLL3_Config>
90008a16:	4603      	mov	r3, r0
90008a18:	2b00      	cmp	r3, #0
90008a1a:	d002      	beq.n	90008a22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008a1c:	2301      	movs	r3, #1
90008a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008a22:	4b70      	ldr	r3, [pc, #448]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008a26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008a32:	4a6c      	ldr	r2, [pc, #432]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a34:	430b      	orrs	r3, r1
90008a36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008a44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008a48:	2300      	movs	r3, #0
90008a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90008a4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008a52:	460b      	mov	r3, r1
90008a54:	4313      	orrs	r3, r2
90008a56:	d03e      	beq.n	90008ad6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008a64:	d022      	beq.n	90008aac <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008a6a:	d81b      	bhi.n	90008aa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008a6c:	2b00      	cmp	r3, #0
90008a6e:	d003      	beq.n	90008a78 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008a74:	d00b      	beq.n	90008a8e <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008a76:	e015      	b.n	90008aa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a7c:	3308      	adds	r3, #8
90008a7e:	2100      	movs	r1, #0
90008a80:	4618      	mov	r0, r3
90008a82:	f000 fd3b 	bl	900094fc <RCCEx_PLL2_Config>
90008a86:	4603      	mov	r3, r0
90008a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008a8c:	e00f      	b.n	90008aae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a92:	3328      	adds	r3, #40	@ 0x28
90008a94:	2102      	movs	r1, #2
90008a96:	4618      	mov	r0, r3
90008a98:	f000 fde2 	bl	90009660 <RCCEx_PLL3_Config>
90008a9c:	4603      	mov	r3, r0
90008a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008aa2:	e004      	b.n	90008aae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008aa4:	2301      	movs	r3, #1
90008aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008aaa:	e000      	b.n	90008aae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008aac:	bf00      	nop
    }

    if (ret == HAL_OK)
90008aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ab2:	2b00      	cmp	r3, #0
90008ab4:	d10b      	bne.n	90008ace <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008ab6:	4b4b      	ldr	r3, [pc, #300]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008aba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008ac6:	4a47      	ldr	r2, [pc, #284]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ac8:	430b      	orrs	r3, r1
90008aca:	6593      	str	r3, [r2, #88]	@ 0x58
90008acc:	e003      	b.n	90008ad6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ade:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
90008ae4:	2300      	movs	r3, #0
90008ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008ae8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008aec:	460b      	mov	r3, r1
90008aee:	4313      	orrs	r3, r2
90008af0:	d03b      	beq.n	90008b6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008afa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008afe:	d01f      	beq.n	90008b40 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008b00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008b04:	d818      	bhi.n	90008b38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008b0a:	d003      	beq.n	90008b14 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008b0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008b10:	d007      	beq.n	90008b22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008b12:	e011      	b.n	90008b38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008b14:	4b33      	ldr	r3, [pc, #204]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008b18:	4a32      	ldr	r2, [pc, #200]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008b20:	e00f      	b.n	90008b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b26:	3328      	adds	r3, #40	@ 0x28
90008b28:	2101      	movs	r1, #1
90008b2a:	4618      	mov	r0, r3
90008b2c:	f000 fd98 	bl	90009660 <RCCEx_PLL3_Config>
90008b30:	4603      	mov	r3, r0
90008b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008b36:	e004      	b.n	90008b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b38:	2301      	movs	r3, #1
90008b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b3e:	e000      	b.n	90008b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008b40:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b46:	2b00      	cmp	r3, #0
90008b48:	d10b      	bne.n	90008b62 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008b4a:	4b26      	ldr	r3, [pc, #152]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008b4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008b5a:	4a22      	ldr	r2, [pc, #136]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b5c:	430b      	orrs	r3, r1
90008b5e:	6553      	str	r3, [r2, #84]	@ 0x54
90008b60:	e003      	b.n	90008b6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008b76:	673b      	str	r3, [r7, #112]	@ 0x70
90008b78:	2300      	movs	r3, #0
90008b7a:	677b      	str	r3, [r7, #116]	@ 0x74
90008b7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008b80:	460b      	mov	r3, r1
90008b82:	4313      	orrs	r3, r2
90008b84:	d034      	beq.n	90008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008b8c:	2b00      	cmp	r3, #0
90008b8e:	d003      	beq.n	90008b98 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008b94:	d007      	beq.n	90008ba6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008b96:	e011      	b.n	90008bbc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008b98:	4b12      	ldr	r3, [pc, #72]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008b9c:	4a11      	ldr	r2, [pc, #68]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008ba4:	e00e      	b.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008baa:	3308      	adds	r3, #8
90008bac:	2102      	movs	r1, #2
90008bae:	4618      	mov	r0, r3
90008bb0:	f000 fca4 	bl	900094fc <RCCEx_PLL2_Config>
90008bb4:	4603      	mov	r3, r0
90008bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008bba:	e003      	b.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008bbc:	2301      	movs	r3, #1
90008bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
90008bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bc8:	2b00      	cmp	r3, #0
90008bca:	d10d      	bne.n	90008be8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008bcc:	4b05      	ldr	r3, [pc, #20]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008bd0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008bda:	4a02      	ldr	r2, [pc, #8]	@ (90008be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bdc:	430b      	orrs	r3, r1
90008bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008be0:	e006      	b.n	90008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008be2:	bf00      	nop
90008be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bf8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
90008bfe:	2300      	movs	r3, #0
90008c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008c02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008c06:	460b      	mov	r3, r1
90008c08:	4313      	orrs	r3, r2
90008c0a:	d00c      	beq.n	90008c26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c10:	3328      	adds	r3, #40	@ 0x28
90008c12:	2102      	movs	r1, #2
90008c14:	4618      	mov	r0, r3
90008c16:	f000 fd23 	bl	90009660 <RCCEx_PLL3_Config>
90008c1a:	4603      	mov	r3, r0
90008c1c:	2b00      	cmp	r3, #0
90008c1e:	d002      	beq.n	90008c26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008c20:	2301      	movs	r3, #1
90008c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008c32:	663b      	str	r3, [r7, #96]	@ 0x60
90008c34:	2300      	movs	r3, #0
90008c36:	667b      	str	r3, [r7, #100]	@ 0x64
90008c38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008c3c:	460b      	mov	r3, r1
90008c3e:	4313      	orrs	r3, r2
90008c40:	d038      	beq.n	90008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008c4e:	d018      	beq.n	90008c82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008c50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008c54:	d811      	bhi.n	90008c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008c5a:	d014      	beq.n	90008c86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008c60:	d80b      	bhi.n	90008c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008c62:	2b00      	cmp	r3, #0
90008c64:	d011      	beq.n	90008c8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008c6a:	d106      	bne.n	90008c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008c6c:	4bc3      	ldr	r3, [pc, #780]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008c70:	4ac2      	ldr	r2, [pc, #776]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008c78:	e008      	b.n	90008c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008c7a:	2301      	movs	r3, #1
90008c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c80:	e004      	b.n	90008c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c82:	bf00      	nop
90008c84:	e002      	b.n	90008c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c86:	bf00      	nop
90008c88:	e000      	b.n	90008c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c90:	2b00      	cmp	r3, #0
90008c92:	d10b      	bne.n	90008cac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008c94:	4bb9      	ldr	r3, [pc, #740]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008ca4:	4ab5      	ldr	r2, [pc, #724]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ca6:	430b      	orrs	r3, r1
90008ca8:	6553      	str	r3, [r2, #84]	@ 0x54
90008caa:	e003      	b.n	90008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
90008cc2:	2300      	movs	r3, #0
90008cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008cc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008cca:	460b      	mov	r3, r1
90008ccc:	4313      	orrs	r3, r2
90008cce:	d009      	beq.n	90008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008cd0:	4baa      	ldr	r3, [pc, #680]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008cd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008cde:	4aa7      	ldr	r2, [pc, #668]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ce0:	430b      	orrs	r3, r1
90008ce2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008cf0:	653b      	str	r3, [r7, #80]	@ 0x50
90008cf2:	2300      	movs	r3, #0
90008cf4:	657b      	str	r3, [r7, #84]	@ 0x54
90008cf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008cfa:	460b      	mov	r3, r1
90008cfc:	4313      	orrs	r3, r2
90008cfe:	d00a      	beq.n	90008d16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008d00:	4b9e      	ldr	r3, [pc, #632]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d02:	691b      	ldr	r3, [r3, #16]
90008d04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008d10:	4a9a      	ldr	r2, [pc, #616]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d12:	430b      	orrs	r3, r1
90008d14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008d22:	64bb      	str	r3, [r7, #72]	@ 0x48
90008d24:	2300      	movs	r3, #0
90008d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008d28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008d2c:	460b      	mov	r3, r1
90008d2e:	4313      	orrs	r3, r2
90008d30:	d009      	beq.n	90008d46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008d32:	4b92      	ldr	r3, [pc, #584]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008d36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008d40:	4a8e      	ldr	r2, [pc, #568]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d42:	430b      	orrs	r3, r1
90008d44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008d52:	643b      	str	r3, [r7, #64]	@ 0x40
90008d54:	2300      	movs	r3, #0
90008d56:	647b      	str	r3, [r7, #68]	@ 0x44
90008d58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008d5c:	460b      	mov	r3, r1
90008d5e:	4313      	orrs	r3, r2
90008d60:	d00e      	beq.n	90008d80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008d62:	4b86      	ldr	r3, [pc, #536]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d64:	691b      	ldr	r3, [r3, #16]
90008d66:	4a85      	ldr	r2, [pc, #532]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008d6c:	6113      	str	r3, [r2, #16]
90008d6e:	4b83      	ldr	r3, [pc, #524]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d70:	6919      	ldr	r1, [r3, #16]
90008d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008d7a:	4a80      	ldr	r2, [pc, #512]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d7c:	430b      	orrs	r3, r1
90008d7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
90008d8e:	2300      	movs	r3, #0
90008d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008d92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008d96:	460b      	mov	r3, r1
90008d98:	4313      	orrs	r3, r2
90008d9a:	d009      	beq.n	90008db0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008d9c:	4b77      	ldr	r3, [pc, #476]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008da0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008daa:	4a74      	ldr	r2, [pc, #464]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dac:	430b      	orrs	r3, r1
90008dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008db8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90008dbc:	633b      	str	r3, [r7, #48]	@ 0x30
90008dbe:	2300      	movs	r3, #0
90008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
90008dc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90008dc6:	460b      	mov	r3, r1
90008dc8:	4313      	orrs	r3, r2
90008dca:	d00a      	beq.n	90008de2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008dcc:	4b6b      	ldr	r3, [pc, #428]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008dd0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90008dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90008ddc:	4a67      	ldr	r2, [pc, #412]	@ (90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dde:	430b      	orrs	r3, r1
90008de0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008dea:	2100      	movs	r1, #0
90008dec:	62b9      	str	r1, [r7, #40]	@ 0x28
90008dee:	f003 0301 	and.w	r3, r3, #1
90008df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
90008df4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90008df8:	460b      	mov	r3, r1
90008dfa:	4313      	orrs	r3, r2
90008dfc:	d011      	beq.n	90008e22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e02:	3308      	adds	r3, #8
90008e04:	2100      	movs	r1, #0
90008e06:	4618      	mov	r0, r3
90008e08:	f000 fb78 	bl	900094fc <RCCEx_PLL2_Config>
90008e0c:	4603      	mov	r3, r0
90008e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e16:	2b00      	cmp	r3, #0
90008e18:	d003      	beq.n	90008e22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e2a:	2100      	movs	r1, #0
90008e2c:	6239      	str	r1, [r7, #32]
90008e2e:	f003 0302 	and.w	r3, r3, #2
90008e32:	627b      	str	r3, [r7, #36]	@ 0x24
90008e34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008e38:	460b      	mov	r3, r1
90008e3a:	4313      	orrs	r3, r2
90008e3c:	d011      	beq.n	90008e62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e42:	3308      	adds	r3, #8
90008e44:	2101      	movs	r1, #1
90008e46:	4618      	mov	r0, r3
90008e48:	f000 fb58 	bl	900094fc <RCCEx_PLL2_Config>
90008e4c:	4603      	mov	r3, r0
90008e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e56:	2b00      	cmp	r3, #0
90008e58:	d003      	beq.n	90008e62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e6a:	2100      	movs	r1, #0
90008e6c:	61b9      	str	r1, [r7, #24]
90008e6e:	f003 0304 	and.w	r3, r3, #4
90008e72:	61fb      	str	r3, [r7, #28]
90008e74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008e78:	460b      	mov	r3, r1
90008e7a:	4313      	orrs	r3, r2
90008e7c:	d011      	beq.n	90008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e82:	3308      	adds	r3, #8
90008e84:	2102      	movs	r1, #2
90008e86:	4618      	mov	r0, r3
90008e88:	f000 fb38 	bl	900094fc <RCCEx_PLL2_Config>
90008e8c:	4603      	mov	r3, r0
90008e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e96:	2b00      	cmp	r3, #0
90008e98:	d003      	beq.n	90008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008eaa:	2100      	movs	r1, #0
90008eac:	6139      	str	r1, [r7, #16]
90008eae:	f003 0308 	and.w	r3, r3, #8
90008eb2:	617b      	str	r3, [r7, #20]
90008eb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008eb8:	460b      	mov	r3, r1
90008eba:	4313      	orrs	r3, r2
90008ebc:	d011      	beq.n	90008ee2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ec2:	3328      	adds	r3, #40	@ 0x28
90008ec4:	2100      	movs	r1, #0
90008ec6:	4618      	mov	r0, r3
90008ec8:	f000 fbca 	bl	90009660 <RCCEx_PLL3_Config>
90008ecc:	4603      	mov	r3, r0
90008ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90008ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ed6:	2b00      	cmp	r3, #0
90008ed8:	d003      	beq.n	90008ee2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008eea:	2100      	movs	r1, #0
90008eec:	60b9      	str	r1, [r7, #8]
90008eee:	f003 0310 	and.w	r3, r3, #16
90008ef2:	60fb      	str	r3, [r7, #12]
90008ef4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008ef8:	460b      	mov	r3, r1
90008efa:	4313      	orrs	r3, r2
90008efc:	d011      	beq.n	90008f22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f02:	3328      	adds	r3, #40	@ 0x28
90008f04:	2101      	movs	r1, #1
90008f06:	4618      	mov	r0, r3
90008f08:	f000 fbaa 	bl	90009660 <RCCEx_PLL3_Config>
90008f0c:	4603      	mov	r3, r0
90008f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f16:	2b00      	cmp	r3, #0
90008f18:	d003      	beq.n	90008f22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f2a:	2100      	movs	r1, #0
90008f2c:	6039      	str	r1, [r7, #0]
90008f2e:	f003 0320 	and.w	r3, r3, #32
90008f32:	607b      	str	r3, [r7, #4]
90008f34:	e9d7 1200 	ldrd	r1, r2, [r7]
90008f38:	460b      	mov	r3, r1
90008f3a:	4313      	orrs	r3, r2
90008f3c:	d011      	beq.n	90008f62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f42:	3328      	adds	r3, #40	@ 0x28
90008f44:	2102      	movs	r1, #2
90008f46:	4618      	mov	r0, r3
90008f48:	f000 fb8a 	bl	90009660 <RCCEx_PLL3_Config>
90008f4c:	4603      	mov	r3, r0
90008f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f56:	2b00      	cmp	r3, #0
90008f58:	d003      	beq.n	90008f62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90008f62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90008f66:	2b00      	cmp	r3, #0
90008f68:	d101      	bne.n	90008f6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008f6a:	2300      	movs	r3, #0
90008f6c:	e000      	b.n	90008f70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008f6e:	2301      	movs	r3, #1
}
90008f70:	4618      	mov	r0, r3
90008f72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90008f76:	46bd      	mov	sp, r7
90008f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90008f7c:	58024400 	.word	0x58024400

90008f80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90008f80:	b580      	push	{r7, lr}
90008f82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90008f84:	f7fe fd96 	bl	90007ab4 <HAL_RCC_GetHCLKFreq>
90008f88:	4602      	mov	r2, r0
90008f8a:	4b06      	ldr	r3, [pc, #24]	@ (90008fa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90008f8c:	6a1b      	ldr	r3, [r3, #32]
90008f8e:	091b      	lsrs	r3, r3, #4
90008f90:	f003 0307 	and.w	r3, r3, #7
90008f94:	4904      	ldr	r1, [pc, #16]	@ (90008fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90008f96:	5ccb      	ldrb	r3, [r1, r3]
90008f98:	f003 031f 	and.w	r3, r3, #31
90008f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90008fa0:	4618      	mov	r0, r3
90008fa2:	bd80      	pop	{r7, pc}
90008fa4:	58024400 	.word	0x58024400
90008fa8:	9000d750 	.word	0x9000d750

90008fac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90008fac:	b480      	push	{r7}
90008fae:	b089      	sub	sp, #36	@ 0x24
90008fb0:	af00      	add	r7, sp, #0
90008fb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90008fb4:	4ba1      	ldr	r3, [pc, #644]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008fb8:	f003 0303 	and.w	r3, r3, #3
90008fbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90008fbe:	4b9f      	ldr	r3, [pc, #636]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008fc2:	0b1b      	lsrs	r3, r3, #12
90008fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90008fc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90008fca:	4b9c      	ldr	r3, [pc, #624]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008fce:	091b      	lsrs	r3, r3, #4
90008fd0:	f003 0301 	and.w	r3, r3, #1
90008fd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90008fd6:	4b99      	ldr	r3, [pc, #612]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90008fda:	08db      	lsrs	r3, r3, #3
90008fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
90008fe0:	693a      	ldr	r2, [r7, #16]
90008fe2:	fb02 f303 	mul.w	r3, r2, r3
90008fe6:	ee07 3a90 	vmov	s15, r3
90008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008fee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90008ff2:	697b      	ldr	r3, [r7, #20]
90008ff4:	2b00      	cmp	r3, #0
90008ff6:	f000 8111 	beq.w	9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90008ffa:	69bb      	ldr	r3, [r7, #24]
90008ffc:	2b02      	cmp	r3, #2
90008ffe:	f000 8083 	beq.w	90009108 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90009002:	69bb      	ldr	r3, [r7, #24]
90009004:	2b02      	cmp	r3, #2
90009006:	f200 80a1 	bhi.w	9000914c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
9000900a:	69bb      	ldr	r3, [r7, #24]
9000900c:	2b00      	cmp	r3, #0
9000900e:	d003      	beq.n	90009018 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90009010:	69bb      	ldr	r3, [r7, #24]
90009012:	2b01      	cmp	r3, #1
90009014:	d056      	beq.n	900090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90009016:	e099      	b.n	9000914c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009018:	4b88      	ldr	r3, [pc, #544]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000901a:	681b      	ldr	r3, [r3, #0]
9000901c:	f003 0320 	and.w	r3, r3, #32
90009020:	2b00      	cmp	r3, #0
90009022:	d02d      	beq.n	90009080 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009024:	4b85      	ldr	r3, [pc, #532]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009026:	681b      	ldr	r3, [r3, #0]
90009028:	08db      	lsrs	r3, r3, #3
9000902a:	f003 0303 	and.w	r3, r3, #3
9000902e:	4a84      	ldr	r2, [pc, #528]	@ (90009240 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90009030:	fa22 f303 	lsr.w	r3, r2, r3
90009034:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009036:	68bb      	ldr	r3, [r7, #8]
90009038:	ee07 3a90 	vmov	s15, r3
9000903c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009040:	697b      	ldr	r3, [r7, #20]
90009042:	ee07 3a90 	vmov	s15, r3
90009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000904e:	4b7b      	ldr	r3, [pc, #492]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009056:	ee07 3a90 	vmov	s15, r3
9000905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000905e:	ed97 6a03 	vldr	s12, [r7, #12]
90009062:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009066:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000906e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009072:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009076:	ee67 7a27 	vmul.f32	s15, s14, s15
9000907a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
9000907e:	e087      	b.n	90009190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009080:	697b      	ldr	r3, [r7, #20]
90009082:	ee07 3a90 	vmov	s15, r3
90009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000908a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009248 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
9000908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009092:	4b6a      	ldr	r3, [pc, #424]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009096:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000909a:	ee07 3a90 	vmov	s15, r3
9000909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090a2:	ed97 6a03 	vldr	s12, [r7, #12]
900090a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
900090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
900090b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
900090be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900090c2:	e065      	b.n	90009190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900090c4:	697b      	ldr	r3, [r7, #20]
900090c6:	ee07 3a90 	vmov	s15, r3
900090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
900090ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 9000924c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
900090d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900090d6:	4b59      	ldr	r3, [pc, #356]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
900090de:	ee07 3a90 	vmov	s15, r3
900090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090e6:	ed97 6a03 	vldr	s12, [r7, #12]
900090ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900090ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
900090f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900090f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900090fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
900090fe:	ee67 7a27 	vmul.f32	s15, s14, s15
90009102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009106:	e043      	b.n	90009190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009108:	697b      	ldr	r3, [r7, #20]
9000910a:	ee07 3a90 	vmov	s15, r3
9000910e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009112:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
90009116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000911a:	4b48      	ldr	r3, [pc, #288]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000911c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000911e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009122:	ee07 3a90 	vmov	s15, r3
90009126:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000912a:	ed97 6a03 	vldr	s12, [r7, #12]
9000912e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009132:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009136:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000913a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000913e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009142:	ee67 7a27 	vmul.f32	s15, s14, s15
90009146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000914a:	e021      	b.n	90009190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000914c:	697b      	ldr	r3, [r7, #20]
9000914e:	ee07 3a90 	vmov	s15, r3
90009152:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009156:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 9000924c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000915a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000915e:	4b37      	ldr	r3, [pc, #220]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009162:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009166:	ee07 3a90 	vmov	s15, r3
9000916a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000916e:	ed97 6a03 	vldr	s12, [r7, #12]
90009172:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009176:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000917a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000917e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009182:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009186:	ee67 7a27 	vmul.f32	s15, s14, s15
9000918a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000918e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90009190:	4b2a      	ldr	r3, [pc, #168]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009194:	0a5b      	lsrs	r3, r3, #9
90009196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000919a:	ee07 3a90 	vmov	s15, r3
9000919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900091a6:	ee37 7a87 	vadd.f32	s14, s15, s14
900091aa:	edd7 6a07 	vldr	s13, [r7, #28]
900091ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
900091b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900091b6:	ee17 2a90 	vmov	r2, s15
900091ba:	687b      	ldr	r3, [r7, #4]
900091bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
900091be:	4b1f      	ldr	r3, [pc, #124]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091c2:	0c1b      	lsrs	r3, r3, #16
900091c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900091c8:	ee07 3a90 	vmov	s15, r3
900091cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900091d4:	ee37 7a87 	vadd.f32	s14, s15, s14
900091d8:	edd7 6a07 	vldr	s13, [r7, #28]
900091dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
900091e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900091e4:	ee17 2a90 	vmov	r2, s15
900091e8:	687b      	ldr	r3, [r7, #4]
900091ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
900091ec:	4b13      	ldr	r3, [pc, #76]	@ (9000923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091f0:	0e1b      	lsrs	r3, r3, #24
900091f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900091f6:	ee07 3a90 	vmov	s15, r3
900091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009202:	ee37 7a87 	vadd.f32	s14, s15, s14
90009206:	edd7 6a07 	vldr	s13, [r7, #28]
9000920a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000920e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009212:	ee17 2a90 	vmov	r2, s15
90009216:	687b      	ldr	r3, [r7, #4]
90009218:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
9000921a:	e008      	b.n	9000922e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
9000921c:	687b      	ldr	r3, [r7, #4]
9000921e:	2200      	movs	r2, #0
90009220:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90009222:	687b      	ldr	r3, [r7, #4]
90009224:	2200      	movs	r2, #0
90009226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90009228:	687b      	ldr	r3, [r7, #4]
9000922a:	2200      	movs	r2, #0
9000922c:	609a      	str	r2, [r3, #8]
}
9000922e:	bf00      	nop
90009230:	3724      	adds	r7, #36	@ 0x24
90009232:	46bd      	mov	sp, r7
90009234:	f85d 7b04 	ldr.w	r7, [sp], #4
90009238:	4770      	bx	lr
9000923a:	bf00      	nop
9000923c:	58024400 	.word	0x58024400
90009240:	03d09000 	.word	0x03d09000
90009244:	46000000 	.word	0x46000000
90009248:	4c742400 	.word	0x4c742400
9000924c:	4a742400 	.word	0x4a742400
90009250:	4bbebc20 	.word	0x4bbebc20

90009254 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
90009254:	b480      	push	{r7}
90009256:	b089      	sub	sp, #36	@ 0x24
90009258:	af00      	add	r7, sp, #0
9000925a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000925c:	4ba1      	ldr	r3, [pc, #644]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000925e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009260:	f003 0303 	and.w	r3, r3, #3
90009264:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
90009266:	4b9f      	ldr	r3, [pc, #636]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000926a:	0d1b      	lsrs	r3, r3, #20
9000926c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90009270:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
90009272:	4b9c      	ldr	r3, [pc, #624]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009276:	0a1b      	lsrs	r3, r3, #8
90009278:	f003 0301 	and.w	r3, r3, #1
9000927c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000927e:	4b99      	ldr	r3, [pc, #612]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90009282:	08db      	lsrs	r3, r3, #3
90009284:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009288:	693a      	ldr	r2, [r7, #16]
9000928a:	fb02 f303 	mul.w	r3, r2, r3
9000928e:	ee07 3a90 	vmov	s15, r3
90009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009296:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
9000929a:	697b      	ldr	r3, [r7, #20]
9000929c:	2b00      	cmp	r3, #0
9000929e:	f000 8111 	beq.w	900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
900092a2:	69bb      	ldr	r3, [r7, #24]
900092a4:	2b02      	cmp	r3, #2
900092a6:	f000 8083 	beq.w	900093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
900092aa:	69bb      	ldr	r3, [r7, #24]
900092ac:	2b02      	cmp	r3, #2
900092ae:	f200 80a1 	bhi.w	900093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
900092b2:	69bb      	ldr	r3, [r7, #24]
900092b4:	2b00      	cmp	r3, #0
900092b6:	d003      	beq.n	900092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
900092b8:	69bb      	ldr	r3, [r7, #24]
900092ba:	2b01      	cmp	r3, #1
900092bc:	d056      	beq.n	9000936c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
900092be:	e099      	b.n	900093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900092c0:	4b88      	ldr	r3, [pc, #544]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092c2:	681b      	ldr	r3, [r3, #0]
900092c4:	f003 0320 	and.w	r3, r3, #32
900092c8:	2b00      	cmp	r3, #0
900092ca:	d02d      	beq.n	90009328 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900092cc:	4b85      	ldr	r3, [pc, #532]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092ce:	681b      	ldr	r3, [r3, #0]
900092d0:	08db      	lsrs	r3, r3, #3
900092d2:	f003 0303 	and.w	r3, r3, #3
900092d6:	4a84      	ldr	r2, [pc, #528]	@ (900094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
900092d8:	fa22 f303 	lsr.w	r3, r2, r3
900092dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900092de:	68bb      	ldr	r3, [r7, #8]
900092e0:	ee07 3a90 	vmov	s15, r3
900092e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
900092e8:	697b      	ldr	r3, [r7, #20]
900092ea:	ee07 3a90 	vmov	s15, r3
900092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900092f6:	4b7b      	ldr	r3, [pc, #492]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900092fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
900092fe:	ee07 3a90 	vmov	s15, r3
90009302:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009306:	ed97 6a03 	vldr	s12, [r7, #12]
9000930a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000930e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009312:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000931a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000931e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009322:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009326:	e087      	b.n	90009438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009328:	697b      	ldr	r3, [r7, #20]
9000932a:	ee07 3a90 	vmov	s15, r3
9000932e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009332:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
90009336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000933a:	4b6a      	ldr	r3, [pc, #424]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000933c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000933e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009342:	ee07 3a90 	vmov	s15, r3
90009346:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000934a:	ed97 6a03 	vldr	s12, [r7, #12]
9000934e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009352:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009356:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000935a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000935e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009362:	ee67 7a27 	vmul.f32	s15, s14, s15
90009366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000936a:	e065      	b.n	90009438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000936c:	697b      	ldr	r3, [r7, #20]
9000936e:	ee07 3a90 	vmov	s15, r3
90009372:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009376:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000937a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000937e:	4b59      	ldr	r3, [pc, #356]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009382:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009386:	ee07 3a90 	vmov	s15, r3
9000938a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000938e:	ed97 6a03 	vldr	s12, [r7, #12]
90009392:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009396:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000939a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000939e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900093a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093a6:	ee67 7a27 	vmul.f32	s15, s14, s15
900093aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900093ae:	e043      	b.n	90009438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900093b0:	697b      	ldr	r3, [r7, #20]
900093b2:	ee07 3a90 	vmov	s15, r3
900093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
900093be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900093c2:	4b48      	ldr	r3, [pc, #288]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900093ca:	ee07 3a90 	vmov	s15, r3
900093ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
900093d2:	ed97 6a03 	vldr	s12, [r7, #12]
900093d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900093da:	eec6 7a25 	vdiv.f32	s15, s12, s11
900093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
900093e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900093e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
900093ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900093f2:	e021      	b.n	90009438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900093f4:	697b      	ldr	r3, [r7, #20]
900093f6:	ee07 3a90 	vmov	s15, r3
900093fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009406:	4b37      	ldr	r3, [pc, #220]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000940a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000940e:	ee07 3a90 	vmov	s15, r3
90009412:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009416:	ed97 6a03 	vldr	s12, [r7, #12]
9000941a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000941e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009422:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000942a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000942e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009436:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
90009438:	4b2a      	ldr	r3, [pc, #168]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000943a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000943c:	0a5b      	lsrs	r3, r3, #9
9000943e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009442:	ee07 3a90 	vmov	s15, r3
90009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000944a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000944e:	ee37 7a87 	vadd.f32	s14, s15, s14
90009452:	edd7 6a07 	vldr	s13, [r7, #28]
90009456:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000945a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000945e:	ee17 2a90 	vmov	r2, s15
90009462:	687b      	ldr	r3, [r7, #4]
90009464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
90009466:	4b1f      	ldr	r3, [pc, #124]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000946a:	0c1b      	lsrs	r3, r3, #16
9000946c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009470:	ee07 3a90 	vmov	s15, r3
90009474:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000947c:	ee37 7a87 	vadd.f32	s14, s15, s14
90009480:	edd7 6a07 	vldr	s13, [r7, #28]
90009484:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000948c:	ee17 2a90 	vmov	r2, s15
90009490:	687b      	ldr	r3, [r7, #4]
90009492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009494:	4b13      	ldr	r3, [pc, #76]	@ (900094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009498:	0e1b      	lsrs	r3, r3, #24
9000949a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000949e:	ee07 3a90 	vmov	s15, r3
900094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900094a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900094aa:	ee37 7a87 	vadd.f32	s14, s15, s14
900094ae:	edd7 6a07 	vldr	s13, [r7, #28]
900094b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
900094b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900094ba:	ee17 2a90 	vmov	r2, s15
900094be:	687b      	ldr	r3, [r7, #4]
900094c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
900094c2:	e008      	b.n	900094d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
900094c4:	687b      	ldr	r3, [r7, #4]
900094c6:	2200      	movs	r2, #0
900094c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
900094ca:	687b      	ldr	r3, [r7, #4]
900094cc:	2200      	movs	r2, #0
900094ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
900094d0:	687b      	ldr	r3, [r7, #4]
900094d2:	2200      	movs	r2, #0
900094d4:	609a      	str	r2, [r3, #8]
}
900094d6:	bf00      	nop
900094d8:	3724      	adds	r7, #36	@ 0x24
900094da:	46bd      	mov	sp, r7
900094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900094e0:	4770      	bx	lr
900094e2:	bf00      	nop
900094e4:	58024400 	.word	0x58024400
900094e8:	03d09000 	.word	0x03d09000
900094ec:	46000000 	.word	0x46000000
900094f0:	4c742400 	.word	0x4c742400
900094f4:	4a742400 	.word	0x4a742400
900094f8:	4bbebc20 	.word	0x4bbebc20

900094fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
900094fc:	b580      	push	{r7, lr}
900094fe:	b084      	sub	sp, #16
90009500:	af00      	add	r7, sp, #0
90009502:	6078      	str	r0, [r7, #4]
90009504:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009506:	2300      	movs	r3, #0
90009508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000950a:	4b53      	ldr	r3, [pc, #332]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
9000950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000950e:	f003 0303 	and.w	r3, r3, #3
90009512:	2b03      	cmp	r3, #3
90009514:	d101      	bne.n	9000951a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90009516:	2301      	movs	r3, #1
90009518:	e099      	b.n	9000964e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000951a:	4b4f      	ldr	r3, [pc, #316]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
9000951c:	681b      	ldr	r3, [r3, #0]
9000951e:	4a4e      	ldr	r2, [pc, #312]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009520:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009526:	f7f9 fe93 	bl	90003250 <HAL_GetTick>
9000952a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000952c:	e008      	b.n	90009540 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000952e:	f7f9 fe8f 	bl	90003250 <HAL_GetTick>
90009532:	4602      	mov	r2, r0
90009534:	68bb      	ldr	r3, [r7, #8]
90009536:	1ad3      	subs	r3, r2, r3
90009538:	2b02      	cmp	r3, #2
9000953a:	d901      	bls.n	90009540 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
9000953c:	2303      	movs	r3, #3
9000953e:	e086      	b.n	9000964e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009540:	4b45      	ldr	r3, [pc, #276]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009542:	681b      	ldr	r3, [r3, #0]
90009544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009548:	2b00      	cmp	r3, #0
9000954a:	d1f0      	bne.n	9000952e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000954c:	4b42      	ldr	r3, [pc, #264]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
9000954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009550:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009554:	687b      	ldr	r3, [r7, #4]
90009556:	681b      	ldr	r3, [r3, #0]
90009558:	031b      	lsls	r3, r3, #12
9000955a:	493f      	ldr	r1, [pc, #252]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
9000955c:	4313      	orrs	r3, r2
9000955e:	628b      	str	r3, [r1, #40]	@ 0x28
90009560:	687b      	ldr	r3, [r7, #4]
90009562:	685b      	ldr	r3, [r3, #4]
90009564:	3b01      	subs	r3, #1
90009566:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000956a:	687b      	ldr	r3, [r7, #4]
9000956c:	689b      	ldr	r3, [r3, #8]
9000956e:	3b01      	subs	r3, #1
90009570:	025b      	lsls	r3, r3, #9
90009572:	b29b      	uxth	r3, r3
90009574:	431a      	orrs	r2, r3
90009576:	687b      	ldr	r3, [r7, #4]
90009578:	68db      	ldr	r3, [r3, #12]
9000957a:	3b01      	subs	r3, #1
9000957c:	041b      	lsls	r3, r3, #16
9000957e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009582:	431a      	orrs	r2, r3
90009584:	687b      	ldr	r3, [r7, #4]
90009586:	691b      	ldr	r3, [r3, #16]
90009588:	3b01      	subs	r3, #1
9000958a:	061b      	lsls	r3, r3, #24
9000958c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009590:	4931      	ldr	r1, [pc, #196]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009592:	4313      	orrs	r3, r2
90009594:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009596:	4b30      	ldr	r3, [pc, #192]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000959a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000959e:	687b      	ldr	r3, [r7, #4]
900095a0:	695b      	ldr	r3, [r3, #20]
900095a2:	492d      	ldr	r1, [pc, #180]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095a4:	4313      	orrs	r3, r2
900095a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
900095a8:	4b2b      	ldr	r3, [pc, #172]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095ac:	f023 0220 	bic.w	r2, r3, #32
900095b0:	687b      	ldr	r3, [r7, #4]
900095b2:	699b      	ldr	r3, [r3, #24]
900095b4:	4928      	ldr	r1, [pc, #160]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095b6:	4313      	orrs	r3, r2
900095b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
900095ba:	4b27      	ldr	r3, [pc, #156]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095be:	4a26      	ldr	r2, [pc, #152]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095c0:	f023 0310 	bic.w	r3, r3, #16
900095c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
900095c6:	4b24      	ldr	r3, [pc, #144]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
900095ca:	4b24      	ldr	r3, [pc, #144]	@ (9000965c <RCCEx_PLL2_Config+0x160>)
900095cc:	4013      	ands	r3, r2
900095ce:	687a      	ldr	r2, [r7, #4]
900095d0:	69d2      	ldr	r2, [r2, #28]
900095d2:	00d2      	lsls	r2, r2, #3
900095d4:	4920      	ldr	r1, [pc, #128]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095d6:	4313      	orrs	r3, r2
900095d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
900095da:	4b1f      	ldr	r3, [pc, #124]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095de:	4a1e      	ldr	r2, [pc, #120]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095e0:	f043 0310 	orr.w	r3, r3, #16
900095e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900095e6:	683b      	ldr	r3, [r7, #0]
900095e8:	2b00      	cmp	r3, #0
900095ea:	d106      	bne.n	900095fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
900095ec:	4b1a      	ldr	r3, [pc, #104]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095f0:	4a19      	ldr	r2, [pc, #100]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
900095f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
900095f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095f8:	e00f      	b.n	9000961a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900095fa:	683b      	ldr	r3, [r7, #0]
900095fc:	2b01      	cmp	r3, #1
900095fe:	d106      	bne.n	9000960e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90009600:	4b15      	ldr	r3, [pc, #84]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009604:	4a14      	ldr	r2, [pc, #80]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
9000960a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000960c:	e005      	b.n	9000961a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000960e:	4b12      	ldr	r3, [pc, #72]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009612:	4a11      	ldr	r2, [pc, #68]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
90009618:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000961a:	4b0f      	ldr	r3, [pc, #60]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
9000961c:	681b      	ldr	r3, [r3, #0]
9000961e:	4a0e      	ldr	r2, [pc, #56]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009620:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009626:	f7f9 fe13 	bl	90003250 <HAL_GetTick>
9000962a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000962c:	e008      	b.n	90009640 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000962e:	f7f9 fe0f 	bl	90003250 <HAL_GetTick>
90009632:	4602      	mov	r2, r0
90009634:	68bb      	ldr	r3, [r7, #8]
90009636:	1ad3      	subs	r3, r2, r3
90009638:	2b02      	cmp	r3, #2
9000963a:	d901      	bls.n	90009640 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000963c:	2303      	movs	r3, #3
9000963e:	e006      	b.n	9000964e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009640:	4b05      	ldr	r3, [pc, #20]	@ (90009658 <RCCEx_PLL2_Config+0x15c>)
90009642:	681b      	ldr	r3, [r3, #0]
90009644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009648:	2b00      	cmp	r3, #0
9000964a:	d0f0      	beq.n	9000962e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000964c:	7bfb      	ldrb	r3, [r7, #15]
}
9000964e:	4618      	mov	r0, r3
90009650:	3710      	adds	r7, #16
90009652:	46bd      	mov	sp, r7
90009654:	bd80      	pop	{r7, pc}
90009656:	bf00      	nop
90009658:	58024400 	.word	0x58024400
9000965c:	ffff0007 	.word	0xffff0007

90009660 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90009660:	b580      	push	{r7, lr}
90009662:	b084      	sub	sp, #16
90009664:	af00      	add	r7, sp, #0
90009666:	6078      	str	r0, [r7, #4]
90009668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000966a:	2300      	movs	r3, #0
9000966c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000966e:	4b53      	ldr	r3, [pc, #332]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009672:	f003 0303 	and.w	r3, r3, #3
90009676:	2b03      	cmp	r3, #3
90009678:	d101      	bne.n	9000967e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
9000967a:	2301      	movs	r3, #1
9000967c:	e099      	b.n	900097b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000967e:	4b4f      	ldr	r3, [pc, #316]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009680:	681b      	ldr	r3, [r3, #0]
90009682:	4a4e      	ldr	r2, [pc, #312]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
90009688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000968a:	f7f9 fde1 	bl	90003250 <HAL_GetTick>
9000968e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009690:	e008      	b.n	900096a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009692:	f7f9 fddd 	bl	90003250 <HAL_GetTick>
90009696:	4602      	mov	r2, r0
90009698:	68bb      	ldr	r3, [r7, #8]
9000969a:	1ad3      	subs	r3, r2, r3
9000969c:	2b02      	cmp	r3, #2
9000969e:	d901      	bls.n	900096a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
900096a0:	2303      	movs	r3, #3
900096a2:	e086      	b.n	900097b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
900096a4:	4b45      	ldr	r3, [pc, #276]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
900096a6:	681b      	ldr	r3, [r3, #0]
900096a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900096ac:	2b00      	cmp	r3, #0
900096ae:	d1f0      	bne.n	90009692 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
900096b0:	4b42      	ldr	r3, [pc, #264]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
900096b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900096b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
900096b8:	687b      	ldr	r3, [r7, #4]
900096ba:	681b      	ldr	r3, [r3, #0]
900096bc:	051b      	lsls	r3, r3, #20
900096be:	493f      	ldr	r1, [pc, #252]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
900096c0:	4313      	orrs	r3, r2
900096c2:	628b      	str	r3, [r1, #40]	@ 0x28
900096c4:	687b      	ldr	r3, [r7, #4]
900096c6:	685b      	ldr	r3, [r3, #4]
900096c8:	3b01      	subs	r3, #1
900096ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
900096ce:	687b      	ldr	r3, [r7, #4]
900096d0:	689b      	ldr	r3, [r3, #8]
900096d2:	3b01      	subs	r3, #1
900096d4:	025b      	lsls	r3, r3, #9
900096d6:	b29b      	uxth	r3, r3
900096d8:	431a      	orrs	r2, r3
900096da:	687b      	ldr	r3, [r7, #4]
900096dc:	68db      	ldr	r3, [r3, #12]
900096de:	3b01      	subs	r3, #1
900096e0:	041b      	lsls	r3, r3, #16
900096e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900096e6:	431a      	orrs	r2, r3
900096e8:	687b      	ldr	r3, [r7, #4]
900096ea:	691b      	ldr	r3, [r3, #16]
900096ec:	3b01      	subs	r3, #1
900096ee:	061b      	lsls	r3, r3, #24
900096f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900096f4:	4931      	ldr	r1, [pc, #196]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
900096f6:	4313      	orrs	r3, r2
900096f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
900096fa:	4b30      	ldr	r3, [pc, #192]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
900096fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
90009702:	687b      	ldr	r3, [r7, #4]
90009704:	695b      	ldr	r3, [r3, #20]
90009706:	492d      	ldr	r1, [pc, #180]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009708:	4313      	orrs	r3, r2
9000970a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000970c:	4b2b      	ldr	r3, [pc, #172]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
9000970e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009710:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
90009714:	687b      	ldr	r3, [r7, #4]
90009716:	699b      	ldr	r3, [r3, #24]
90009718:	4928      	ldr	r1, [pc, #160]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
9000971a:	4313      	orrs	r3, r2
9000971c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000971e:	4b27      	ldr	r3, [pc, #156]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009722:	4a26      	ldr	r2, [pc, #152]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
90009728:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000972a:	4b24      	ldr	r3, [pc, #144]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
9000972c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000972e:	4b24      	ldr	r3, [pc, #144]	@ (900097c0 <RCCEx_PLL3_Config+0x160>)
90009730:	4013      	ands	r3, r2
90009732:	687a      	ldr	r2, [r7, #4]
90009734:	69d2      	ldr	r2, [r2, #28]
90009736:	00d2      	lsls	r2, r2, #3
90009738:	4920      	ldr	r1, [pc, #128]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
9000973a:	4313      	orrs	r3, r2
9000973c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000973e:	4b1f      	ldr	r3, [pc, #124]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009742:	4a1e      	ldr	r2, [pc, #120]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90009748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000974a:	683b      	ldr	r3, [r7, #0]
9000974c:	2b00      	cmp	r3, #0
9000974e:	d106      	bne.n	9000975e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90009750:	4b1a      	ldr	r3, [pc, #104]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009754:	4a19      	ldr	r2, [pc, #100]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009756:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000975a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000975c:	e00f      	b.n	9000977e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000975e:	683b      	ldr	r3, [r7, #0]
90009760:	2b01      	cmp	r3, #1
90009762:	d106      	bne.n	90009772 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90009764:	4b15      	ldr	r3, [pc, #84]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009768:	4a14      	ldr	r2, [pc, #80]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
9000976a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
9000976e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009770:	e005      	b.n	9000977e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90009772:	4b12      	ldr	r3, [pc, #72]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009776:	4a11      	ldr	r2, [pc, #68]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000977c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000977e:	4b0f      	ldr	r3, [pc, #60]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009780:	681b      	ldr	r3, [r3, #0]
90009782:	4a0e      	ldr	r2, [pc, #56]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
90009784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
90009788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000978a:	f7f9 fd61 	bl	90003250 <HAL_GetTick>
9000978e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009790:	e008      	b.n	900097a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009792:	f7f9 fd5d 	bl	90003250 <HAL_GetTick>
90009796:	4602      	mov	r2, r0
90009798:	68bb      	ldr	r3, [r7, #8]
9000979a:	1ad3      	subs	r3, r2, r3
9000979c:	2b02      	cmp	r3, #2
9000979e:	d901      	bls.n	900097a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
900097a0:	2303      	movs	r3, #3
900097a2:	e006      	b.n	900097b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
900097a4:	4b05      	ldr	r3, [pc, #20]	@ (900097bc <RCCEx_PLL3_Config+0x15c>)
900097a6:	681b      	ldr	r3, [r3, #0]
900097a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900097ac:	2b00      	cmp	r3, #0
900097ae:	d0f0      	beq.n	90009792 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
900097b0:	7bfb      	ldrb	r3, [r7, #15]
}
900097b2:	4618      	mov	r0, r3
900097b4:	3710      	adds	r7, #16
900097b6:	46bd      	mov	sp, r7
900097b8:	bd80      	pop	{r7, pc}
900097ba:	bf00      	nop
900097bc:	58024400 	.word	0x58024400
900097c0:	ffff0007 	.word	0xffff0007

900097c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
900097c4:	b580      	push	{r7, lr}
900097c6:	b082      	sub	sp, #8
900097c8:	af00      	add	r7, sp, #0
900097ca:	6078      	str	r0, [r7, #4]
900097cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
900097ce:	687b      	ldr	r3, [r7, #4]
900097d0:	2b00      	cmp	r3, #0
900097d2:	d101      	bne.n	900097d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
900097d4:	2301      	movs	r3, #1
900097d6:	e02b      	b.n	90009830 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
900097d8:	687b      	ldr	r3, [r7, #4]
900097da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900097de:	b2db      	uxtb	r3, r3
900097e0:	2b00      	cmp	r3, #0
900097e2:	d106      	bne.n	900097f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
900097e4:	687b      	ldr	r3, [r7, #4]
900097e6:	2200      	movs	r2, #0
900097e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
900097ec:	6878      	ldr	r0, [r7, #4]
900097ee:	f000 f825 	bl	9000983c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900097f2:	687b      	ldr	r3, [r7, #4]
900097f4:	2202      	movs	r2, #2
900097f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900097fa:	687b      	ldr	r3, [r7, #4]
900097fc:	681a      	ldr	r2, [r3, #0]
900097fe:	687b      	ldr	r3, [r7, #4]
90009800:	3304      	adds	r3, #4
90009802:	4619      	mov	r1, r3
90009804:	4610      	mov	r0, r2
90009806:	f001 fb51 	bl	9000aeac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000980a:	687b      	ldr	r3, [r7, #4]
9000980c:	6818      	ldr	r0, [r3, #0]
9000980e:	687b      	ldr	r3, [r7, #4]
90009810:	685b      	ldr	r3, [r3, #4]
90009812:	461a      	mov	r2, r3
90009814:	6839      	ldr	r1, [r7, #0]
90009816:	f001 fba5 	bl	9000af64 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000981a:	4b07      	ldr	r3, [pc, #28]	@ (90009838 <HAL_SDRAM_Init+0x74>)
9000981c:	681b      	ldr	r3, [r3, #0]
9000981e:	4a06      	ldr	r2, [pc, #24]	@ (90009838 <HAL_SDRAM_Init+0x74>)
90009820:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009824:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90009826:	687b      	ldr	r3, [r7, #4]
90009828:	2201      	movs	r2, #1
9000982a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000982e:	2300      	movs	r3, #0
}
90009830:	4618      	mov	r0, r3
90009832:	3708      	adds	r7, #8
90009834:	46bd      	mov	sp, r7
90009836:	bd80      	pop	{r7, pc}
90009838:	52004000 	.word	0x52004000

9000983c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
9000983c:	b480      	push	{r7}
9000983e:	b083      	sub	sp, #12
90009840:	af00      	add	r7, sp, #0
90009842:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009844:	bf00      	nop
90009846:	370c      	adds	r7, #12
90009848:	46bd      	mov	sp, r7
9000984a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000984e:	4770      	bx	lr

90009850 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
90009850:	b580      	push	{r7, lr}
90009852:	b086      	sub	sp, #24
90009854:	af00      	add	r7, sp, #0
90009856:	60f8      	str	r0, [r7, #12]
90009858:	60b9      	str	r1, [r7, #8]
9000985a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000985c:	68fb      	ldr	r3, [r7, #12]
9000985e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009862:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
90009864:	7dfb      	ldrb	r3, [r7, #23]
90009866:	2b02      	cmp	r3, #2
90009868:	d101      	bne.n	9000986e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
9000986a:	2302      	movs	r3, #2
9000986c:	e021      	b.n	900098b2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000986e:	7dfb      	ldrb	r3, [r7, #23]
90009870:	2b01      	cmp	r3, #1
90009872:	d002      	beq.n	9000987a <HAL_SDRAM_SendCommand+0x2a>
90009874:	7dfb      	ldrb	r3, [r7, #23]
90009876:	2b05      	cmp	r3, #5
90009878:	d118      	bne.n	900098ac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000987a:	68fb      	ldr	r3, [r7, #12]
9000987c:	2202      	movs	r2, #2
9000987e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90009882:	68fb      	ldr	r3, [r7, #12]
90009884:	681b      	ldr	r3, [r3, #0]
90009886:	687a      	ldr	r2, [r7, #4]
90009888:	68b9      	ldr	r1, [r7, #8]
9000988a:	4618      	mov	r0, r3
9000988c:	f001 fbd4 	bl	9000b038 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009890:	68bb      	ldr	r3, [r7, #8]
90009892:	681b      	ldr	r3, [r3, #0]
90009894:	2b02      	cmp	r3, #2
90009896:	d104      	bne.n	900098a2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009898:	68fb      	ldr	r3, [r7, #12]
9000989a:	2205      	movs	r2, #5
9000989c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900098a0:	e006      	b.n	900098b0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
900098a2:	68fb      	ldr	r3, [r7, #12]
900098a4:	2201      	movs	r2, #1
900098a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900098aa:	e001      	b.n	900098b0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
900098ac:	2301      	movs	r3, #1
900098ae:	e000      	b.n	900098b2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
900098b0:	2300      	movs	r3, #0
}
900098b2:	4618      	mov	r0, r3
900098b4:	3718      	adds	r7, #24
900098b6:	46bd      	mov	sp, r7
900098b8:	bd80      	pop	{r7, pc}

900098ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
900098ba:	b580      	push	{r7, lr}
900098bc:	b082      	sub	sp, #8
900098be:	af00      	add	r7, sp, #0
900098c0:	6078      	str	r0, [r7, #4]
900098c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
900098c4:	687b      	ldr	r3, [r7, #4]
900098c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900098ca:	b2db      	uxtb	r3, r3
900098cc:	2b02      	cmp	r3, #2
900098ce:	d101      	bne.n	900098d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
900098d0:	2302      	movs	r3, #2
900098d2:	e016      	b.n	90009902 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
900098d4:	687b      	ldr	r3, [r7, #4]
900098d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900098da:	b2db      	uxtb	r3, r3
900098dc:	2b01      	cmp	r3, #1
900098de:	d10f      	bne.n	90009900 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900098e0:	687b      	ldr	r3, [r7, #4]
900098e2:	2202      	movs	r2, #2
900098e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
900098e8:	687b      	ldr	r3, [r7, #4]
900098ea:	681b      	ldr	r3, [r3, #0]
900098ec:	6839      	ldr	r1, [r7, #0]
900098ee:	4618      	mov	r0, r3
900098f0:	f001 fbc6 	bl	9000b080 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
900098f4:	687b      	ldr	r3, [r7, #4]
900098f6:	2201      	movs	r2, #1
900098f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
900098fc:	2300      	movs	r3, #0
900098fe:	e000      	b.n	90009902 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90009900:	2301      	movs	r3, #1
}
90009902:	4618      	mov	r0, r3
90009904:	3708      	adds	r7, #8
90009906:	46bd      	mov	sp, r7
90009908:	bd80      	pop	{r7, pc}

9000990a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
9000990a:	b580      	push	{r7, lr}
9000990c:	b082      	sub	sp, #8
9000990e:	af00      	add	r7, sp, #0
90009910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90009912:	687b      	ldr	r3, [r7, #4]
90009914:	2b00      	cmp	r3, #0
90009916:	d101      	bne.n	9000991c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
90009918:	2301      	movs	r3, #1
9000991a:	e049      	b.n	900099b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
9000991c:	687b      	ldr	r3, [r7, #4]
9000991e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90009922:	b2db      	uxtb	r3, r3
90009924:	2b00      	cmp	r3, #0
90009926:	d106      	bne.n	90009936 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90009928:	687b      	ldr	r3, [r7, #4]
9000992a:	2200      	movs	r2, #0
9000992c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
90009930:	6878      	ldr	r0, [r7, #4]
90009932:	f000 f89d 	bl	90009a70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90009936:	687b      	ldr	r3, [r7, #4]
90009938:	2202      	movs	r2, #2
9000993a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000993e:	687b      	ldr	r3, [r7, #4]
90009940:	681a      	ldr	r2, [r3, #0]
90009942:	687b      	ldr	r3, [r7, #4]
90009944:	3304      	adds	r3, #4
90009946:	4619      	mov	r1, r3
90009948:	4610      	mov	r0, r2
9000994a:	f000 f8a5 	bl	90009a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000994e:	687b      	ldr	r3, [r7, #4]
90009950:	2201      	movs	r2, #1
90009952:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009956:	687b      	ldr	r3, [r7, #4]
90009958:	2201      	movs	r2, #1
9000995a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000995e:	687b      	ldr	r3, [r7, #4]
90009960:	2201      	movs	r2, #1
90009962:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009966:	687b      	ldr	r3, [r7, #4]
90009968:	2201      	movs	r2, #1
9000996a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000996e:	687b      	ldr	r3, [r7, #4]
90009970:	2201      	movs	r2, #1
90009972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009976:	687b      	ldr	r3, [r7, #4]
90009978:	2201      	movs	r2, #1
9000997a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000997e:	687b      	ldr	r3, [r7, #4]
90009980:	2201      	movs	r2, #1
90009982:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009986:	687b      	ldr	r3, [r7, #4]
90009988:	2201      	movs	r2, #1
9000998a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000998e:	687b      	ldr	r3, [r7, #4]
90009990:	2201      	movs	r2, #1
90009992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009996:	687b      	ldr	r3, [r7, #4]
90009998:	2201      	movs	r2, #1
9000999a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000999e:	687b      	ldr	r3, [r7, #4]
900099a0:	2201      	movs	r2, #1
900099a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
900099a6:	687b      	ldr	r3, [r7, #4]
900099a8:	2201      	movs	r2, #1
900099aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
900099ae:	2300      	movs	r3, #0
}
900099b0:	4618      	mov	r0, r3
900099b2:	3708      	adds	r7, #8
900099b4:	46bd      	mov	sp, r7
900099b6:	bd80      	pop	{r7, pc}

900099b8 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
900099b8:	b580      	push	{r7, lr}
900099ba:	b082      	sub	sp, #8
900099bc:	af00      	add	r7, sp, #0
900099be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
900099c0:	687b      	ldr	r3, [r7, #4]
900099c2:	2202      	movs	r2, #2
900099c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
900099c8:	687b      	ldr	r3, [r7, #4]
900099ca:	681b      	ldr	r3, [r3, #0]
900099cc:	6a1a      	ldr	r2, [r3, #32]
900099ce:	f241 1311 	movw	r3, #4369	@ 0x1111
900099d2:	4013      	ands	r3, r2
900099d4:	2b00      	cmp	r3, #0
900099d6:	d10f      	bne.n	900099f8 <HAL_TIM_PWM_DeInit+0x40>
900099d8:	687b      	ldr	r3, [r7, #4]
900099da:	681b      	ldr	r3, [r3, #0]
900099dc:	6a1a      	ldr	r2, [r3, #32]
900099de:	f240 4344 	movw	r3, #1092	@ 0x444
900099e2:	4013      	ands	r3, r2
900099e4:	2b00      	cmp	r3, #0
900099e6:	d107      	bne.n	900099f8 <HAL_TIM_PWM_DeInit+0x40>
900099e8:	687b      	ldr	r3, [r7, #4]
900099ea:	681b      	ldr	r3, [r3, #0]
900099ec:	681a      	ldr	r2, [r3, #0]
900099ee:	687b      	ldr	r3, [r7, #4]
900099f0:	681b      	ldr	r3, [r3, #0]
900099f2:	f022 0201 	bic.w	r2, r2, #1
900099f6:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
900099f8:	6878      	ldr	r0, [r7, #4]
900099fa:	f000 f843 	bl	90009a84 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
900099fe:	687b      	ldr	r3, [r7, #4]
90009a00:	2200      	movs	r2, #0
90009a02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009a06:	687b      	ldr	r3, [r7, #4]
90009a08:	2200      	movs	r2, #0
90009a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009a0e:	687b      	ldr	r3, [r7, #4]
90009a10:	2200      	movs	r2, #0
90009a12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009a16:	687b      	ldr	r3, [r7, #4]
90009a18:	2200      	movs	r2, #0
90009a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009a1e:	687b      	ldr	r3, [r7, #4]
90009a20:	2200      	movs	r2, #0
90009a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009a26:	687b      	ldr	r3, [r7, #4]
90009a28:	2200      	movs	r2, #0
90009a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009a2e:	687b      	ldr	r3, [r7, #4]
90009a30:	2200      	movs	r2, #0
90009a32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009a36:	687b      	ldr	r3, [r7, #4]
90009a38:	2200      	movs	r2, #0
90009a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009a3e:	687b      	ldr	r3, [r7, #4]
90009a40:	2200      	movs	r2, #0
90009a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009a46:	687b      	ldr	r3, [r7, #4]
90009a48:	2200      	movs	r2, #0
90009a4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009a4e:	687b      	ldr	r3, [r7, #4]
90009a50:	2200      	movs	r2, #0
90009a52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009a56:	687b      	ldr	r3, [r7, #4]
90009a58:	2200      	movs	r2, #0
90009a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
90009a5e:	687b      	ldr	r3, [r7, #4]
90009a60:	2200      	movs	r2, #0
90009a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90009a66:	2300      	movs	r3, #0
}
90009a68:	4618      	mov	r0, r3
90009a6a:	3708      	adds	r7, #8
90009a6c:	46bd      	mov	sp, r7
90009a6e:	bd80      	pop	{r7, pc}

90009a70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90009a70:	b480      	push	{r7}
90009a72:	b083      	sub	sp, #12
90009a74:	af00      	add	r7, sp, #0
90009a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009a78:	bf00      	nop
90009a7a:	370c      	adds	r7, #12
90009a7c:	46bd      	mov	sp, r7
90009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a82:	4770      	bx	lr

90009a84 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009a84:	b480      	push	{r7}
90009a86:	b083      	sub	sp, #12
90009a88:	af00      	add	r7, sp, #0
90009a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009a8c:	bf00      	nop
90009a8e:	370c      	adds	r7, #12
90009a90:	46bd      	mov	sp, r7
90009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a96:	4770      	bx	lr

90009a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009a98:	b480      	push	{r7}
90009a9a:	b085      	sub	sp, #20
90009a9c:	af00      	add	r7, sp, #0
90009a9e:	6078      	str	r0, [r7, #4]
90009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009aa2:	687b      	ldr	r3, [r7, #4]
90009aa4:	681b      	ldr	r3, [r3, #0]
90009aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009aa8:	687b      	ldr	r3, [r7, #4]
90009aaa:	4a43      	ldr	r2, [pc, #268]	@ (90009bb8 <TIM_Base_SetConfig+0x120>)
90009aac:	4293      	cmp	r3, r2
90009aae:	d013      	beq.n	90009ad8 <TIM_Base_SetConfig+0x40>
90009ab0:	687b      	ldr	r3, [r7, #4]
90009ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009ab6:	d00f      	beq.n	90009ad8 <TIM_Base_SetConfig+0x40>
90009ab8:	687b      	ldr	r3, [r7, #4]
90009aba:	4a40      	ldr	r2, [pc, #256]	@ (90009bbc <TIM_Base_SetConfig+0x124>)
90009abc:	4293      	cmp	r3, r2
90009abe:	d00b      	beq.n	90009ad8 <TIM_Base_SetConfig+0x40>
90009ac0:	687b      	ldr	r3, [r7, #4]
90009ac2:	4a3f      	ldr	r2, [pc, #252]	@ (90009bc0 <TIM_Base_SetConfig+0x128>)
90009ac4:	4293      	cmp	r3, r2
90009ac6:	d007      	beq.n	90009ad8 <TIM_Base_SetConfig+0x40>
90009ac8:	687b      	ldr	r3, [r7, #4]
90009aca:	4a3e      	ldr	r2, [pc, #248]	@ (90009bc4 <TIM_Base_SetConfig+0x12c>)
90009acc:	4293      	cmp	r3, r2
90009ace:	d003      	beq.n	90009ad8 <TIM_Base_SetConfig+0x40>
90009ad0:	687b      	ldr	r3, [r7, #4]
90009ad2:	4a3d      	ldr	r2, [pc, #244]	@ (90009bc8 <TIM_Base_SetConfig+0x130>)
90009ad4:	4293      	cmp	r3, r2
90009ad6:	d108      	bne.n	90009aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90009ad8:	68fb      	ldr	r3, [r7, #12]
90009ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
90009ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90009ae0:	683b      	ldr	r3, [r7, #0]
90009ae2:	685b      	ldr	r3, [r3, #4]
90009ae4:	68fa      	ldr	r2, [r7, #12]
90009ae6:	4313      	orrs	r3, r2
90009ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90009aea:	687b      	ldr	r3, [r7, #4]
90009aec:	4a32      	ldr	r2, [pc, #200]	@ (90009bb8 <TIM_Base_SetConfig+0x120>)
90009aee:	4293      	cmp	r3, r2
90009af0:	d01f      	beq.n	90009b32 <TIM_Base_SetConfig+0x9a>
90009af2:	687b      	ldr	r3, [r7, #4]
90009af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009af8:	d01b      	beq.n	90009b32 <TIM_Base_SetConfig+0x9a>
90009afa:	687b      	ldr	r3, [r7, #4]
90009afc:	4a2f      	ldr	r2, [pc, #188]	@ (90009bbc <TIM_Base_SetConfig+0x124>)
90009afe:	4293      	cmp	r3, r2
90009b00:	d017      	beq.n	90009b32 <TIM_Base_SetConfig+0x9a>
90009b02:	687b      	ldr	r3, [r7, #4]
90009b04:	4a2e      	ldr	r2, [pc, #184]	@ (90009bc0 <TIM_Base_SetConfig+0x128>)
90009b06:	4293      	cmp	r3, r2
90009b08:	d013      	beq.n	90009b32 <TIM_Base_SetConfig+0x9a>
90009b0a:	687b      	ldr	r3, [r7, #4]
90009b0c:	4a2d      	ldr	r2, [pc, #180]	@ (90009bc4 <TIM_Base_SetConfig+0x12c>)
90009b0e:	4293      	cmp	r3, r2
90009b10:	d00f      	beq.n	90009b32 <TIM_Base_SetConfig+0x9a>
90009b12:	687b      	ldr	r3, [r7, #4]
90009b14:	4a2c      	ldr	r2, [pc, #176]	@ (90009bc8 <TIM_Base_SetConfig+0x130>)
90009b16:	4293      	cmp	r3, r2
90009b18:	d00b      	beq.n	90009b32 <TIM_Base_SetConfig+0x9a>
90009b1a:	687b      	ldr	r3, [r7, #4]
90009b1c:	4a2b      	ldr	r2, [pc, #172]	@ (90009bcc <TIM_Base_SetConfig+0x134>)
90009b1e:	4293      	cmp	r3, r2
90009b20:	d007      	beq.n	90009b32 <TIM_Base_SetConfig+0x9a>
90009b22:	687b      	ldr	r3, [r7, #4]
90009b24:	4a2a      	ldr	r2, [pc, #168]	@ (90009bd0 <TIM_Base_SetConfig+0x138>)
90009b26:	4293      	cmp	r3, r2
90009b28:	d003      	beq.n	90009b32 <TIM_Base_SetConfig+0x9a>
90009b2a:	687b      	ldr	r3, [r7, #4]
90009b2c:	4a29      	ldr	r2, [pc, #164]	@ (90009bd4 <TIM_Base_SetConfig+0x13c>)
90009b2e:	4293      	cmp	r3, r2
90009b30:	d108      	bne.n	90009b44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009b32:	68fb      	ldr	r3, [r7, #12]
90009b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90009b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90009b3a:	683b      	ldr	r3, [r7, #0]
90009b3c:	68db      	ldr	r3, [r3, #12]
90009b3e:	68fa      	ldr	r2, [r7, #12]
90009b40:	4313      	orrs	r3, r2
90009b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009b44:	68fb      	ldr	r3, [r7, #12]
90009b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
90009b4a:	683b      	ldr	r3, [r7, #0]
90009b4c:	695b      	ldr	r3, [r3, #20]
90009b4e:	4313      	orrs	r3, r2
90009b50:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009b52:	683b      	ldr	r3, [r7, #0]
90009b54:	689a      	ldr	r2, [r3, #8]
90009b56:	687b      	ldr	r3, [r7, #4]
90009b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90009b5a:	683b      	ldr	r3, [r7, #0]
90009b5c:	681a      	ldr	r2, [r3, #0]
90009b5e:	687b      	ldr	r3, [r7, #4]
90009b60:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009b62:	687b      	ldr	r3, [r7, #4]
90009b64:	4a14      	ldr	r2, [pc, #80]	@ (90009bb8 <TIM_Base_SetConfig+0x120>)
90009b66:	4293      	cmp	r3, r2
90009b68:	d00f      	beq.n	90009b8a <TIM_Base_SetConfig+0xf2>
90009b6a:	687b      	ldr	r3, [r7, #4]
90009b6c:	4a16      	ldr	r2, [pc, #88]	@ (90009bc8 <TIM_Base_SetConfig+0x130>)
90009b6e:	4293      	cmp	r3, r2
90009b70:	d00b      	beq.n	90009b8a <TIM_Base_SetConfig+0xf2>
90009b72:	687b      	ldr	r3, [r7, #4]
90009b74:	4a15      	ldr	r2, [pc, #84]	@ (90009bcc <TIM_Base_SetConfig+0x134>)
90009b76:	4293      	cmp	r3, r2
90009b78:	d007      	beq.n	90009b8a <TIM_Base_SetConfig+0xf2>
90009b7a:	687b      	ldr	r3, [r7, #4]
90009b7c:	4a14      	ldr	r2, [pc, #80]	@ (90009bd0 <TIM_Base_SetConfig+0x138>)
90009b7e:	4293      	cmp	r3, r2
90009b80:	d003      	beq.n	90009b8a <TIM_Base_SetConfig+0xf2>
90009b82:	687b      	ldr	r3, [r7, #4]
90009b84:	4a13      	ldr	r2, [pc, #76]	@ (90009bd4 <TIM_Base_SetConfig+0x13c>)
90009b86:	4293      	cmp	r3, r2
90009b88:	d103      	bne.n	90009b92 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90009b8a:	683b      	ldr	r3, [r7, #0]
90009b8c:	691a      	ldr	r2, [r3, #16]
90009b8e:	687b      	ldr	r3, [r7, #4]
90009b90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009b92:	687b      	ldr	r3, [r7, #4]
90009b94:	681b      	ldr	r3, [r3, #0]
90009b96:	f043 0204 	orr.w	r2, r3, #4
90009b9a:	687b      	ldr	r3, [r7, #4]
90009b9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009b9e:	687b      	ldr	r3, [r7, #4]
90009ba0:	2201      	movs	r2, #1
90009ba2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009ba4:	687b      	ldr	r3, [r7, #4]
90009ba6:	68fa      	ldr	r2, [r7, #12]
90009ba8:	601a      	str	r2, [r3, #0]
}
90009baa:	bf00      	nop
90009bac:	3714      	adds	r7, #20
90009bae:	46bd      	mov	sp, r7
90009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
90009bb4:	4770      	bx	lr
90009bb6:	bf00      	nop
90009bb8:	40010000 	.word	0x40010000
90009bbc:	40000400 	.word	0x40000400
90009bc0:	40000800 	.word	0x40000800
90009bc4:	40000c00 	.word	0x40000c00
90009bc8:	40010400 	.word	0x40010400
90009bcc:	40014000 	.word	0x40014000
90009bd0:	40014400 	.word	0x40014400
90009bd4:	40014800 	.word	0x40014800

90009bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90009bd8:	b580      	push	{r7, lr}
90009bda:	b082      	sub	sp, #8
90009bdc:	af00      	add	r7, sp, #0
90009bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90009be0:	687b      	ldr	r3, [r7, #4]
90009be2:	2b00      	cmp	r3, #0
90009be4:	d101      	bne.n	90009bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90009be6:	2301      	movs	r3, #1
90009be8:	e042      	b.n	90009c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90009bea:	687b      	ldr	r3, [r7, #4]
90009bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009bf0:	2b00      	cmp	r3, #0
90009bf2:	d106      	bne.n	90009c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90009bf4:	687b      	ldr	r3, [r7, #4]
90009bf6:	2200      	movs	r2, #0
90009bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90009bfc:	6878      	ldr	r0, [r7, #4]
90009bfe:	f7f6 ff77 	bl	90000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90009c02:	687b      	ldr	r3, [r7, #4]
90009c04:	2224      	movs	r2, #36	@ 0x24
90009c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90009c0a:	687b      	ldr	r3, [r7, #4]
90009c0c:	681b      	ldr	r3, [r3, #0]
90009c0e:	681a      	ldr	r2, [r3, #0]
90009c10:	687b      	ldr	r3, [r7, #4]
90009c12:	681b      	ldr	r3, [r3, #0]
90009c14:	f022 0201 	bic.w	r2, r2, #1
90009c18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90009c1a:	687b      	ldr	r3, [r7, #4]
90009c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009c1e:	2b00      	cmp	r3, #0
90009c20:	d002      	beq.n	90009c28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009c22:	6878      	ldr	r0, [r7, #4]
90009c24:	f000 fe1e 	bl	9000a864 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009c28:	6878      	ldr	r0, [r7, #4]
90009c2a:	f000 f8b3 	bl	90009d94 <UART_SetConfig>
90009c2e:	4603      	mov	r3, r0
90009c30:	2b01      	cmp	r3, #1
90009c32:	d101      	bne.n	90009c38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009c34:	2301      	movs	r3, #1
90009c36:	e01b      	b.n	90009c70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009c38:	687b      	ldr	r3, [r7, #4]
90009c3a:	681b      	ldr	r3, [r3, #0]
90009c3c:	685a      	ldr	r2, [r3, #4]
90009c3e:	687b      	ldr	r3, [r7, #4]
90009c40:	681b      	ldr	r3, [r3, #0]
90009c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009c48:	687b      	ldr	r3, [r7, #4]
90009c4a:	681b      	ldr	r3, [r3, #0]
90009c4c:	689a      	ldr	r2, [r3, #8]
90009c4e:	687b      	ldr	r3, [r7, #4]
90009c50:	681b      	ldr	r3, [r3, #0]
90009c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009c58:	687b      	ldr	r3, [r7, #4]
90009c5a:	681b      	ldr	r3, [r3, #0]
90009c5c:	681a      	ldr	r2, [r3, #0]
90009c5e:	687b      	ldr	r3, [r7, #4]
90009c60:	681b      	ldr	r3, [r3, #0]
90009c62:	f042 0201 	orr.w	r2, r2, #1
90009c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009c68:	6878      	ldr	r0, [r7, #4]
90009c6a:	f000 fe9d 	bl	9000a9a8 <UART_CheckIdleState>
90009c6e:	4603      	mov	r3, r0
}
90009c70:	4618      	mov	r0, r3
90009c72:	3708      	adds	r7, #8
90009c74:	46bd      	mov	sp, r7
90009c76:	bd80      	pop	{r7, pc}

90009c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009c78:	b580      	push	{r7, lr}
90009c7a:	b08a      	sub	sp, #40	@ 0x28
90009c7c:	af02      	add	r7, sp, #8
90009c7e:	60f8      	str	r0, [r7, #12]
90009c80:	60b9      	str	r1, [r7, #8]
90009c82:	603b      	str	r3, [r7, #0]
90009c84:	4613      	mov	r3, r2
90009c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009c88:	68fb      	ldr	r3, [r7, #12]
90009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009c8e:	2b20      	cmp	r3, #32
90009c90:	d17b      	bne.n	90009d8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009c92:	68bb      	ldr	r3, [r7, #8]
90009c94:	2b00      	cmp	r3, #0
90009c96:	d002      	beq.n	90009c9e <HAL_UART_Transmit+0x26>
90009c98:	88fb      	ldrh	r3, [r7, #6]
90009c9a:	2b00      	cmp	r3, #0
90009c9c:	d101      	bne.n	90009ca2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90009c9e:	2301      	movs	r3, #1
90009ca0:	e074      	b.n	90009d8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009ca2:	68fb      	ldr	r3, [r7, #12]
90009ca4:	2200      	movs	r2, #0
90009ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90009caa:	68fb      	ldr	r3, [r7, #12]
90009cac:	2221      	movs	r2, #33	@ 0x21
90009cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009cb2:	f7f9 facd 	bl	90003250 <HAL_GetTick>
90009cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009cb8:	68fb      	ldr	r3, [r7, #12]
90009cba:	88fa      	ldrh	r2, [r7, #6]
90009cbc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90009cc0:	68fb      	ldr	r3, [r7, #12]
90009cc2:	88fa      	ldrh	r2, [r7, #6]
90009cc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90009cc8:	68fb      	ldr	r3, [r7, #12]
90009cca:	689b      	ldr	r3, [r3, #8]
90009ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009cd0:	d108      	bne.n	90009ce4 <HAL_UART_Transmit+0x6c>
90009cd2:	68fb      	ldr	r3, [r7, #12]
90009cd4:	691b      	ldr	r3, [r3, #16]
90009cd6:	2b00      	cmp	r3, #0
90009cd8:	d104      	bne.n	90009ce4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90009cda:	2300      	movs	r3, #0
90009cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90009cde:	68bb      	ldr	r3, [r7, #8]
90009ce0:	61bb      	str	r3, [r7, #24]
90009ce2:	e003      	b.n	90009cec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90009ce4:	68bb      	ldr	r3, [r7, #8]
90009ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90009ce8:	2300      	movs	r3, #0
90009cea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90009cec:	e030      	b.n	90009d50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90009cee:	683b      	ldr	r3, [r7, #0]
90009cf0:	9300      	str	r3, [sp, #0]
90009cf2:	697b      	ldr	r3, [r7, #20]
90009cf4:	2200      	movs	r2, #0
90009cf6:	2180      	movs	r1, #128	@ 0x80
90009cf8:	68f8      	ldr	r0, [r7, #12]
90009cfa:	f000 feff 	bl	9000aafc <UART_WaitOnFlagUntilTimeout>
90009cfe:	4603      	mov	r3, r0
90009d00:	2b00      	cmp	r3, #0
90009d02:	d005      	beq.n	90009d10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90009d04:	68fb      	ldr	r3, [r7, #12]
90009d06:	2220      	movs	r2, #32
90009d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90009d0c:	2303      	movs	r3, #3
90009d0e:	e03d      	b.n	90009d8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90009d10:	69fb      	ldr	r3, [r7, #28]
90009d12:	2b00      	cmp	r3, #0
90009d14:	d10b      	bne.n	90009d2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90009d16:	69bb      	ldr	r3, [r7, #24]
90009d18:	881b      	ldrh	r3, [r3, #0]
90009d1a:	461a      	mov	r2, r3
90009d1c:	68fb      	ldr	r3, [r7, #12]
90009d1e:	681b      	ldr	r3, [r3, #0]
90009d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009d24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009d26:	69bb      	ldr	r3, [r7, #24]
90009d28:	3302      	adds	r3, #2
90009d2a:	61bb      	str	r3, [r7, #24]
90009d2c:	e007      	b.n	90009d3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90009d2e:	69fb      	ldr	r3, [r7, #28]
90009d30:	781a      	ldrb	r2, [r3, #0]
90009d32:	68fb      	ldr	r3, [r7, #12]
90009d34:	681b      	ldr	r3, [r3, #0]
90009d36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009d38:	69fb      	ldr	r3, [r7, #28]
90009d3a:	3301      	adds	r3, #1
90009d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90009d3e:	68fb      	ldr	r3, [r7, #12]
90009d40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009d44:	b29b      	uxth	r3, r3
90009d46:	3b01      	subs	r3, #1
90009d48:	b29a      	uxth	r2, r3
90009d4a:	68fb      	ldr	r3, [r7, #12]
90009d4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009d50:	68fb      	ldr	r3, [r7, #12]
90009d52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009d56:	b29b      	uxth	r3, r3
90009d58:	2b00      	cmp	r3, #0
90009d5a:	d1c8      	bne.n	90009cee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90009d5c:	683b      	ldr	r3, [r7, #0]
90009d5e:	9300      	str	r3, [sp, #0]
90009d60:	697b      	ldr	r3, [r7, #20]
90009d62:	2200      	movs	r2, #0
90009d64:	2140      	movs	r1, #64	@ 0x40
90009d66:	68f8      	ldr	r0, [r7, #12]
90009d68:	f000 fec8 	bl	9000aafc <UART_WaitOnFlagUntilTimeout>
90009d6c:	4603      	mov	r3, r0
90009d6e:	2b00      	cmp	r3, #0
90009d70:	d005      	beq.n	90009d7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009d72:	68fb      	ldr	r3, [r7, #12]
90009d74:	2220      	movs	r2, #32
90009d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90009d7a:	2303      	movs	r3, #3
90009d7c:	e006      	b.n	90009d8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90009d7e:	68fb      	ldr	r3, [r7, #12]
90009d80:	2220      	movs	r2, #32
90009d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009d86:	2300      	movs	r3, #0
90009d88:	e000      	b.n	90009d8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90009d8a:	2302      	movs	r3, #2
  }
}
90009d8c:	4618      	mov	r0, r3
90009d8e:	3720      	adds	r7, #32
90009d90:	46bd      	mov	sp, r7
90009d92:	bd80      	pop	{r7, pc}

90009d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009d98:	b092      	sub	sp, #72	@ 0x48
90009d9a:	af00      	add	r7, sp, #0
90009d9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90009d9e:	2300      	movs	r3, #0
90009da0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009da4:	697b      	ldr	r3, [r7, #20]
90009da6:	689a      	ldr	r2, [r3, #8]
90009da8:	697b      	ldr	r3, [r7, #20]
90009daa:	691b      	ldr	r3, [r3, #16]
90009dac:	431a      	orrs	r2, r3
90009dae:	697b      	ldr	r3, [r7, #20]
90009db0:	695b      	ldr	r3, [r3, #20]
90009db2:	431a      	orrs	r2, r3
90009db4:	697b      	ldr	r3, [r7, #20]
90009db6:	69db      	ldr	r3, [r3, #28]
90009db8:	4313      	orrs	r3, r2
90009dba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90009dbc:	697b      	ldr	r3, [r7, #20]
90009dbe:	681b      	ldr	r3, [r3, #0]
90009dc0:	681a      	ldr	r2, [r3, #0]
90009dc2:	4bbe      	ldr	r3, [pc, #760]	@ (9000a0bc <UART_SetConfig+0x328>)
90009dc4:	4013      	ands	r3, r2
90009dc6:	697a      	ldr	r2, [r7, #20]
90009dc8:	6812      	ldr	r2, [r2, #0]
90009dca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009dcc:	430b      	orrs	r3, r1
90009dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90009dd0:	697b      	ldr	r3, [r7, #20]
90009dd2:	681b      	ldr	r3, [r3, #0]
90009dd4:	685b      	ldr	r3, [r3, #4]
90009dd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90009dda:	697b      	ldr	r3, [r7, #20]
90009ddc:	68da      	ldr	r2, [r3, #12]
90009dde:	697b      	ldr	r3, [r7, #20]
90009de0:	681b      	ldr	r3, [r3, #0]
90009de2:	430a      	orrs	r2, r1
90009de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009de6:	697b      	ldr	r3, [r7, #20]
90009de8:	699b      	ldr	r3, [r3, #24]
90009dea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009dec:	697b      	ldr	r3, [r7, #20]
90009dee:	681b      	ldr	r3, [r3, #0]
90009df0:	4ab3      	ldr	r2, [pc, #716]	@ (9000a0c0 <UART_SetConfig+0x32c>)
90009df2:	4293      	cmp	r3, r2
90009df4:	d004      	beq.n	90009e00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009df6:	697b      	ldr	r3, [r7, #20]
90009df8:	6a1b      	ldr	r3, [r3, #32]
90009dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009dfc:	4313      	orrs	r3, r2
90009dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009e00:	697b      	ldr	r3, [r7, #20]
90009e02:	681b      	ldr	r3, [r3, #0]
90009e04:	689a      	ldr	r2, [r3, #8]
90009e06:	4baf      	ldr	r3, [pc, #700]	@ (9000a0c4 <UART_SetConfig+0x330>)
90009e08:	4013      	ands	r3, r2
90009e0a:	697a      	ldr	r2, [r7, #20]
90009e0c:	6812      	ldr	r2, [r2, #0]
90009e0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009e10:	430b      	orrs	r3, r1
90009e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009e14:	697b      	ldr	r3, [r7, #20]
90009e16:	681b      	ldr	r3, [r3, #0]
90009e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009e1a:	f023 010f 	bic.w	r1, r3, #15
90009e1e:	697b      	ldr	r3, [r7, #20]
90009e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009e22:	697b      	ldr	r3, [r7, #20]
90009e24:	681b      	ldr	r3, [r3, #0]
90009e26:	430a      	orrs	r2, r1
90009e28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009e2a:	697b      	ldr	r3, [r7, #20]
90009e2c:	681b      	ldr	r3, [r3, #0]
90009e2e:	4aa6      	ldr	r2, [pc, #664]	@ (9000a0c8 <UART_SetConfig+0x334>)
90009e30:	4293      	cmp	r3, r2
90009e32:	d177      	bne.n	90009f24 <UART_SetConfig+0x190>
90009e34:	4ba5      	ldr	r3, [pc, #660]	@ (9000a0cc <UART_SetConfig+0x338>)
90009e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009e38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009e3c:	2b28      	cmp	r3, #40	@ 0x28
90009e3e:	d86d      	bhi.n	90009f1c <UART_SetConfig+0x188>
90009e40:	a201      	add	r2, pc, #4	@ (adr r2, 90009e48 <UART_SetConfig+0xb4>)
90009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009e46:	bf00      	nop
90009e48:	90009eed 	.word	0x90009eed
90009e4c:	90009f1d 	.word	0x90009f1d
90009e50:	90009f1d 	.word	0x90009f1d
90009e54:	90009f1d 	.word	0x90009f1d
90009e58:	90009f1d 	.word	0x90009f1d
90009e5c:	90009f1d 	.word	0x90009f1d
90009e60:	90009f1d 	.word	0x90009f1d
90009e64:	90009f1d 	.word	0x90009f1d
90009e68:	90009ef5 	.word	0x90009ef5
90009e6c:	90009f1d 	.word	0x90009f1d
90009e70:	90009f1d 	.word	0x90009f1d
90009e74:	90009f1d 	.word	0x90009f1d
90009e78:	90009f1d 	.word	0x90009f1d
90009e7c:	90009f1d 	.word	0x90009f1d
90009e80:	90009f1d 	.word	0x90009f1d
90009e84:	90009f1d 	.word	0x90009f1d
90009e88:	90009efd 	.word	0x90009efd
90009e8c:	90009f1d 	.word	0x90009f1d
90009e90:	90009f1d 	.word	0x90009f1d
90009e94:	90009f1d 	.word	0x90009f1d
90009e98:	90009f1d 	.word	0x90009f1d
90009e9c:	90009f1d 	.word	0x90009f1d
90009ea0:	90009f1d 	.word	0x90009f1d
90009ea4:	90009f1d 	.word	0x90009f1d
90009ea8:	90009f05 	.word	0x90009f05
90009eac:	90009f1d 	.word	0x90009f1d
90009eb0:	90009f1d 	.word	0x90009f1d
90009eb4:	90009f1d 	.word	0x90009f1d
90009eb8:	90009f1d 	.word	0x90009f1d
90009ebc:	90009f1d 	.word	0x90009f1d
90009ec0:	90009f1d 	.word	0x90009f1d
90009ec4:	90009f1d 	.word	0x90009f1d
90009ec8:	90009f0d 	.word	0x90009f0d
90009ecc:	90009f1d 	.word	0x90009f1d
90009ed0:	90009f1d 	.word	0x90009f1d
90009ed4:	90009f1d 	.word	0x90009f1d
90009ed8:	90009f1d 	.word	0x90009f1d
90009edc:	90009f1d 	.word	0x90009f1d
90009ee0:	90009f1d 	.word	0x90009f1d
90009ee4:	90009f1d 	.word	0x90009f1d
90009ee8:	90009f15 	.word	0x90009f15
90009eec:	2301      	movs	r3, #1
90009eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ef2:	e222      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009ef4:	2304      	movs	r3, #4
90009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009efa:	e21e      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009efc:	2308      	movs	r3, #8
90009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f02:	e21a      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f04:	2310      	movs	r3, #16
90009f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f0a:	e216      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f0c:	2320      	movs	r3, #32
90009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f12:	e212      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f14:	2340      	movs	r3, #64	@ 0x40
90009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f1a:	e20e      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f1c:	2380      	movs	r3, #128	@ 0x80
90009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f22:	e20a      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f24:	697b      	ldr	r3, [r7, #20]
90009f26:	681b      	ldr	r3, [r3, #0]
90009f28:	4a69      	ldr	r2, [pc, #420]	@ (9000a0d0 <UART_SetConfig+0x33c>)
90009f2a:	4293      	cmp	r3, r2
90009f2c:	d130      	bne.n	90009f90 <UART_SetConfig+0x1fc>
90009f2e:	4b67      	ldr	r3, [pc, #412]	@ (9000a0cc <UART_SetConfig+0x338>)
90009f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f32:	f003 0307 	and.w	r3, r3, #7
90009f36:	2b05      	cmp	r3, #5
90009f38:	d826      	bhi.n	90009f88 <UART_SetConfig+0x1f4>
90009f3a:	a201      	add	r2, pc, #4	@ (adr r2, 90009f40 <UART_SetConfig+0x1ac>)
90009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f40:	90009f59 	.word	0x90009f59
90009f44:	90009f61 	.word	0x90009f61
90009f48:	90009f69 	.word	0x90009f69
90009f4c:	90009f71 	.word	0x90009f71
90009f50:	90009f79 	.word	0x90009f79
90009f54:	90009f81 	.word	0x90009f81
90009f58:	2300      	movs	r3, #0
90009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f5e:	e1ec      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f60:	2304      	movs	r3, #4
90009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f66:	e1e8      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f68:	2308      	movs	r3, #8
90009f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f6e:	e1e4      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f70:	2310      	movs	r3, #16
90009f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f76:	e1e0      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f78:	2320      	movs	r3, #32
90009f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f7e:	e1dc      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f80:	2340      	movs	r3, #64	@ 0x40
90009f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f86:	e1d8      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f88:	2380      	movs	r3, #128	@ 0x80
90009f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f8e:	e1d4      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009f90:	697b      	ldr	r3, [r7, #20]
90009f92:	681b      	ldr	r3, [r3, #0]
90009f94:	4a4f      	ldr	r2, [pc, #316]	@ (9000a0d4 <UART_SetConfig+0x340>)
90009f96:	4293      	cmp	r3, r2
90009f98:	d130      	bne.n	90009ffc <UART_SetConfig+0x268>
90009f9a:	4b4c      	ldr	r3, [pc, #304]	@ (9000a0cc <UART_SetConfig+0x338>)
90009f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f9e:	f003 0307 	and.w	r3, r3, #7
90009fa2:	2b05      	cmp	r3, #5
90009fa4:	d826      	bhi.n	90009ff4 <UART_SetConfig+0x260>
90009fa6:	a201      	add	r2, pc, #4	@ (adr r2, 90009fac <UART_SetConfig+0x218>)
90009fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009fac:	90009fc5 	.word	0x90009fc5
90009fb0:	90009fcd 	.word	0x90009fcd
90009fb4:	90009fd5 	.word	0x90009fd5
90009fb8:	90009fdd 	.word	0x90009fdd
90009fbc:	90009fe5 	.word	0x90009fe5
90009fc0:	90009fed 	.word	0x90009fed
90009fc4:	2300      	movs	r3, #0
90009fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fca:	e1b6      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009fcc:	2304      	movs	r3, #4
90009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fd2:	e1b2      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009fd4:	2308      	movs	r3, #8
90009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fda:	e1ae      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009fdc:	2310      	movs	r3, #16
90009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fe2:	e1aa      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009fe4:	2320      	movs	r3, #32
90009fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fea:	e1a6      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009fec:	2340      	movs	r3, #64	@ 0x40
90009fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ff2:	e1a2      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009ff4:	2380      	movs	r3, #128	@ 0x80
90009ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ffa:	e19e      	b.n	9000a33a <UART_SetConfig+0x5a6>
90009ffc:	697b      	ldr	r3, [r7, #20]
90009ffe:	681b      	ldr	r3, [r3, #0]
9000a000:	4a35      	ldr	r2, [pc, #212]	@ (9000a0d8 <UART_SetConfig+0x344>)
9000a002:	4293      	cmp	r3, r2
9000a004:	d130      	bne.n	9000a068 <UART_SetConfig+0x2d4>
9000a006:	4b31      	ldr	r3, [pc, #196]	@ (9000a0cc <UART_SetConfig+0x338>)
9000a008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a00a:	f003 0307 	and.w	r3, r3, #7
9000a00e:	2b05      	cmp	r3, #5
9000a010:	d826      	bhi.n	9000a060 <UART_SetConfig+0x2cc>
9000a012:	a201      	add	r2, pc, #4	@ (adr r2, 9000a018 <UART_SetConfig+0x284>)
9000a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a018:	9000a031 	.word	0x9000a031
9000a01c:	9000a039 	.word	0x9000a039
9000a020:	9000a041 	.word	0x9000a041
9000a024:	9000a049 	.word	0x9000a049
9000a028:	9000a051 	.word	0x9000a051
9000a02c:	9000a059 	.word	0x9000a059
9000a030:	2300      	movs	r3, #0
9000a032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a036:	e180      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a038:	2304      	movs	r3, #4
9000a03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a03e:	e17c      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a040:	2308      	movs	r3, #8
9000a042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a046:	e178      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a048:	2310      	movs	r3, #16
9000a04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a04e:	e174      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a050:	2320      	movs	r3, #32
9000a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a056:	e170      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a058:	2340      	movs	r3, #64	@ 0x40
9000a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a05e:	e16c      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a060:	2380      	movs	r3, #128	@ 0x80
9000a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a066:	e168      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a068:	697b      	ldr	r3, [r7, #20]
9000a06a:	681b      	ldr	r3, [r3, #0]
9000a06c:	4a1b      	ldr	r2, [pc, #108]	@ (9000a0dc <UART_SetConfig+0x348>)
9000a06e:	4293      	cmp	r3, r2
9000a070:	d142      	bne.n	9000a0f8 <UART_SetConfig+0x364>
9000a072:	4b16      	ldr	r3, [pc, #88]	@ (9000a0cc <UART_SetConfig+0x338>)
9000a074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a076:	f003 0307 	and.w	r3, r3, #7
9000a07a:	2b05      	cmp	r3, #5
9000a07c:	d838      	bhi.n	9000a0f0 <UART_SetConfig+0x35c>
9000a07e:	a201      	add	r2, pc, #4	@ (adr r2, 9000a084 <UART_SetConfig+0x2f0>)
9000a080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a084:	9000a09d 	.word	0x9000a09d
9000a088:	9000a0a5 	.word	0x9000a0a5
9000a08c:	9000a0ad 	.word	0x9000a0ad
9000a090:	9000a0b5 	.word	0x9000a0b5
9000a094:	9000a0e1 	.word	0x9000a0e1
9000a098:	9000a0e9 	.word	0x9000a0e9
9000a09c:	2300      	movs	r3, #0
9000a09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0a2:	e14a      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a0a4:	2304      	movs	r3, #4
9000a0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0aa:	e146      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a0ac:	2308      	movs	r3, #8
9000a0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0b2:	e142      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a0b4:	2310      	movs	r3, #16
9000a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ba:	e13e      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a0bc:	cfff69f3 	.word	0xcfff69f3
9000a0c0:	58000c00 	.word	0x58000c00
9000a0c4:	11fff4ff 	.word	0x11fff4ff
9000a0c8:	40011000 	.word	0x40011000
9000a0cc:	58024400 	.word	0x58024400
9000a0d0:	40004400 	.word	0x40004400
9000a0d4:	40004800 	.word	0x40004800
9000a0d8:	40004c00 	.word	0x40004c00
9000a0dc:	40005000 	.word	0x40005000
9000a0e0:	2320      	movs	r3, #32
9000a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0e6:	e128      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a0e8:	2340      	movs	r3, #64	@ 0x40
9000a0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ee:	e124      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a0f0:	2380      	movs	r3, #128	@ 0x80
9000a0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0f6:	e120      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a0f8:	697b      	ldr	r3, [r7, #20]
9000a0fa:	681b      	ldr	r3, [r3, #0]
9000a0fc:	4acb      	ldr	r2, [pc, #812]	@ (9000a42c <UART_SetConfig+0x698>)
9000a0fe:	4293      	cmp	r3, r2
9000a100:	d176      	bne.n	9000a1f0 <UART_SetConfig+0x45c>
9000a102:	4bcb      	ldr	r3, [pc, #812]	@ (9000a430 <UART_SetConfig+0x69c>)
9000a104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000a10a:	2b28      	cmp	r3, #40	@ 0x28
9000a10c:	d86c      	bhi.n	9000a1e8 <UART_SetConfig+0x454>
9000a10e:	a201      	add	r2, pc, #4	@ (adr r2, 9000a114 <UART_SetConfig+0x380>)
9000a110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a114:	9000a1b9 	.word	0x9000a1b9
9000a118:	9000a1e9 	.word	0x9000a1e9
9000a11c:	9000a1e9 	.word	0x9000a1e9
9000a120:	9000a1e9 	.word	0x9000a1e9
9000a124:	9000a1e9 	.word	0x9000a1e9
9000a128:	9000a1e9 	.word	0x9000a1e9
9000a12c:	9000a1e9 	.word	0x9000a1e9
9000a130:	9000a1e9 	.word	0x9000a1e9
9000a134:	9000a1c1 	.word	0x9000a1c1
9000a138:	9000a1e9 	.word	0x9000a1e9
9000a13c:	9000a1e9 	.word	0x9000a1e9
9000a140:	9000a1e9 	.word	0x9000a1e9
9000a144:	9000a1e9 	.word	0x9000a1e9
9000a148:	9000a1e9 	.word	0x9000a1e9
9000a14c:	9000a1e9 	.word	0x9000a1e9
9000a150:	9000a1e9 	.word	0x9000a1e9
9000a154:	9000a1c9 	.word	0x9000a1c9
9000a158:	9000a1e9 	.word	0x9000a1e9
9000a15c:	9000a1e9 	.word	0x9000a1e9
9000a160:	9000a1e9 	.word	0x9000a1e9
9000a164:	9000a1e9 	.word	0x9000a1e9
9000a168:	9000a1e9 	.word	0x9000a1e9
9000a16c:	9000a1e9 	.word	0x9000a1e9
9000a170:	9000a1e9 	.word	0x9000a1e9
9000a174:	9000a1d1 	.word	0x9000a1d1
9000a178:	9000a1e9 	.word	0x9000a1e9
9000a17c:	9000a1e9 	.word	0x9000a1e9
9000a180:	9000a1e9 	.word	0x9000a1e9
9000a184:	9000a1e9 	.word	0x9000a1e9
9000a188:	9000a1e9 	.word	0x9000a1e9
9000a18c:	9000a1e9 	.word	0x9000a1e9
9000a190:	9000a1e9 	.word	0x9000a1e9
9000a194:	9000a1d9 	.word	0x9000a1d9
9000a198:	9000a1e9 	.word	0x9000a1e9
9000a19c:	9000a1e9 	.word	0x9000a1e9
9000a1a0:	9000a1e9 	.word	0x9000a1e9
9000a1a4:	9000a1e9 	.word	0x9000a1e9
9000a1a8:	9000a1e9 	.word	0x9000a1e9
9000a1ac:	9000a1e9 	.word	0x9000a1e9
9000a1b0:	9000a1e9 	.word	0x9000a1e9
9000a1b4:	9000a1e1 	.word	0x9000a1e1
9000a1b8:	2301      	movs	r3, #1
9000a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1be:	e0bc      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a1c0:	2304      	movs	r3, #4
9000a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1c6:	e0b8      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a1c8:	2308      	movs	r3, #8
9000a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1ce:	e0b4      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a1d0:	2310      	movs	r3, #16
9000a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1d6:	e0b0      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a1d8:	2320      	movs	r3, #32
9000a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1de:	e0ac      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a1e0:	2340      	movs	r3, #64	@ 0x40
9000a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1e6:	e0a8      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a1e8:	2380      	movs	r3, #128	@ 0x80
9000a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1ee:	e0a4      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a1f0:	697b      	ldr	r3, [r7, #20]
9000a1f2:	681b      	ldr	r3, [r3, #0]
9000a1f4:	4a8f      	ldr	r2, [pc, #572]	@ (9000a434 <UART_SetConfig+0x6a0>)
9000a1f6:	4293      	cmp	r3, r2
9000a1f8:	d130      	bne.n	9000a25c <UART_SetConfig+0x4c8>
9000a1fa:	4b8d      	ldr	r3, [pc, #564]	@ (9000a430 <UART_SetConfig+0x69c>)
9000a1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a1fe:	f003 0307 	and.w	r3, r3, #7
9000a202:	2b05      	cmp	r3, #5
9000a204:	d826      	bhi.n	9000a254 <UART_SetConfig+0x4c0>
9000a206:	a201      	add	r2, pc, #4	@ (adr r2, 9000a20c <UART_SetConfig+0x478>)
9000a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a20c:	9000a225 	.word	0x9000a225
9000a210:	9000a22d 	.word	0x9000a22d
9000a214:	9000a235 	.word	0x9000a235
9000a218:	9000a23d 	.word	0x9000a23d
9000a21c:	9000a245 	.word	0x9000a245
9000a220:	9000a24d 	.word	0x9000a24d
9000a224:	2300      	movs	r3, #0
9000a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a22a:	e086      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a22c:	2304      	movs	r3, #4
9000a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a232:	e082      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a234:	2308      	movs	r3, #8
9000a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a23a:	e07e      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a23c:	2310      	movs	r3, #16
9000a23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a242:	e07a      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a244:	2320      	movs	r3, #32
9000a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a24a:	e076      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a24c:	2340      	movs	r3, #64	@ 0x40
9000a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a252:	e072      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a254:	2380      	movs	r3, #128	@ 0x80
9000a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a25a:	e06e      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a25c:	697b      	ldr	r3, [r7, #20]
9000a25e:	681b      	ldr	r3, [r3, #0]
9000a260:	4a75      	ldr	r2, [pc, #468]	@ (9000a438 <UART_SetConfig+0x6a4>)
9000a262:	4293      	cmp	r3, r2
9000a264:	d130      	bne.n	9000a2c8 <UART_SetConfig+0x534>
9000a266:	4b72      	ldr	r3, [pc, #456]	@ (9000a430 <UART_SetConfig+0x69c>)
9000a268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a26a:	f003 0307 	and.w	r3, r3, #7
9000a26e:	2b05      	cmp	r3, #5
9000a270:	d826      	bhi.n	9000a2c0 <UART_SetConfig+0x52c>
9000a272:	a201      	add	r2, pc, #4	@ (adr r2, 9000a278 <UART_SetConfig+0x4e4>)
9000a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a278:	9000a291 	.word	0x9000a291
9000a27c:	9000a299 	.word	0x9000a299
9000a280:	9000a2a1 	.word	0x9000a2a1
9000a284:	9000a2a9 	.word	0x9000a2a9
9000a288:	9000a2b1 	.word	0x9000a2b1
9000a28c:	9000a2b9 	.word	0x9000a2b9
9000a290:	2300      	movs	r3, #0
9000a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a296:	e050      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a298:	2304      	movs	r3, #4
9000a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a29e:	e04c      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a2a0:	2308      	movs	r3, #8
9000a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2a6:	e048      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a2a8:	2310      	movs	r3, #16
9000a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2ae:	e044      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a2b0:	2320      	movs	r3, #32
9000a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2b6:	e040      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a2b8:	2340      	movs	r3, #64	@ 0x40
9000a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2be:	e03c      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a2c0:	2380      	movs	r3, #128	@ 0x80
9000a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2c6:	e038      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a2c8:	697b      	ldr	r3, [r7, #20]
9000a2ca:	681b      	ldr	r3, [r3, #0]
9000a2cc:	4a5b      	ldr	r2, [pc, #364]	@ (9000a43c <UART_SetConfig+0x6a8>)
9000a2ce:	4293      	cmp	r3, r2
9000a2d0:	d130      	bne.n	9000a334 <UART_SetConfig+0x5a0>
9000a2d2:	4b57      	ldr	r3, [pc, #348]	@ (9000a430 <UART_SetConfig+0x69c>)
9000a2d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a2d6:	f003 0307 	and.w	r3, r3, #7
9000a2da:	2b05      	cmp	r3, #5
9000a2dc:	d826      	bhi.n	9000a32c <UART_SetConfig+0x598>
9000a2de:	a201      	add	r2, pc, #4	@ (adr r2, 9000a2e4 <UART_SetConfig+0x550>)
9000a2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a2e4:	9000a2fd 	.word	0x9000a2fd
9000a2e8:	9000a305 	.word	0x9000a305
9000a2ec:	9000a30d 	.word	0x9000a30d
9000a2f0:	9000a315 	.word	0x9000a315
9000a2f4:	9000a31d 	.word	0x9000a31d
9000a2f8:	9000a325 	.word	0x9000a325
9000a2fc:	2302      	movs	r3, #2
9000a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a302:	e01a      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a304:	2304      	movs	r3, #4
9000a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a30a:	e016      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a30c:	2308      	movs	r3, #8
9000a30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a312:	e012      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a314:	2310      	movs	r3, #16
9000a316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a31a:	e00e      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a31c:	2320      	movs	r3, #32
9000a31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a322:	e00a      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a324:	2340      	movs	r3, #64	@ 0x40
9000a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a32a:	e006      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a32c:	2380      	movs	r3, #128	@ 0x80
9000a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a332:	e002      	b.n	9000a33a <UART_SetConfig+0x5a6>
9000a334:	2380      	movs	r3, #128	@ 0x80
9000a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000a33a:	697b      	ldr	r3, [r7, #20]
9000a33c:	681b      	ldr	r3, [r3, #0]
9000a33e:	4a3f      	ldr	r2, [pc, #252]	@ (9000a43c <UART_SetConfig+0x6a8>)
9000a340:	4293      	cmp	r3, r2
9000a342:	f040 80f8 	bne.w	9000a536 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000a346:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a34a:	2b20      	cmp	r3, #32
9000a34c:	dc46      	bgt.n	9000a3dc <UART_SetConfig+0x648>
9000a34e:	2b02      	cmp	r3, #2
9000a350:	f2c0 8082 	blt.w	9000a458 <UART_SetConfig+0x6c4>
9000a354:	3b02      	subs	r3, #2
9000a356:	2b1e      	cmp	r3, #30
9000a358:	d87e      	bhi.n	9000a458 <UART_SetConfig+0x6c4>
9000a35a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a360 <UART_SetConfig+0x5cc>)
9000a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a360:	9000a3e3 	.word	0x9000a3e3
9000a364:	9000a459 	.word	0x9000a459
9000a368:	9000a3eb 	.word	0x9000a3eb
9000a36c:	9000a459 	.word	0x9000a459
9000a370:	9000a459 	.word	0x9000a459
9000a374:	9000a459 	.word	0x9000a459
9000a378:	9000a3fb 	.word	0x9000a3fb
9000a37c:	9000a459 	.word	0x9000a459
9000a380:	9000a459 	.word	0x9000a459
9000a384:	9000a459 	.word	0x9000a459
9000a388:	9000a459 	.word	0x9000a459
9000a38c:	9000a459 	.word	0x9000a459
9000a390:	9000a459 	.word	0x9000a459
9000a394:	9000a459 	.word	0x9000a459
9000a398:	9000a40b 	.word	0x9000a40b
9000a39c:	9000a459 	.word	0x9000a459
9000a3a0:	9000a459 	.word	0x9000a459
9000a3a4:	9000a459 	.word	0x9000a459
9000a3a8:	9000a459 	.word	0x9000a459
9000a3ac:	9000a459 	.word	0x9000a459
9000a3b0:	9000a459 	.word	0x9000a459
9000a3b4:	9000a459 	.word	0x9000a459
9000a3b8:	9000a459 	.word	0x9000a459
9000a3bc:	9000a459 	.word	0x9000a459
9000a3c0:	9000a459 	.word	0x9000a459
9000a3c4:	9000a459 	.word	0x9000a459
9000a3c8:	9000a459 	.word	0x9000a459
9000a3cc:	9000a459 	.word	0x9000a459
9000a3d0:	9000a459 	.word	0x9000a459
9000a3d4:	9000a459 	.word	0x9000a459
9000a3d8:	9000a44b 	.word	0x9000a44b
9000a3dc:	2b40      	cmp	r3, #64	@ 0x40
9000a3de:	d037      	beq.n	9000a450 <UART_SetConfig+0x6bc>
9000a3e0:	e03a      	b.n	9000a458 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000a3e2:	f7fe fdcd 	bl	90008f80 <HAL_RCCEx_GetD3PCLK1Freq>
9000a3e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a3e8:	e03c      	b.n	9000a464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a3ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a3ee:	4618      	mov	r0, r3
9000a3f0:	f7fe fddc 	bl	90008fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3f8:	e034      	b.n	9000a464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a3fa:	f107 0318 	add.w	r3, r7, #24
9000a3fe:	4618      	mov	r0, r3
9000a400:	f7fe ff28 	bl	90009254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a404:	69fb      	ldr	r3, [r7, #28]
9000a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a408:	e02c      	b.n	9000a464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a40a:	4b09      	ldr	r3, [pc, #36]	@ (9000a430 <UART_SetConfig+0x69c>)
9000a40c:	681b      	ldr	r3, [r3, #0]
9000a40e:	f003 0320 	and.w	r3, r3, #32
9000a412:	2b00      	cmp	r3, #0
9000a414:	d016      	beq.n	9000a444 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a416:	4b06      	ldr	r3, [pc, #24]	@ (9000a430 <UART_SetConfig+0x69c>)
9000a418:	681b      	ldr	r3, [r3, #0]
9000a41a:	08db      	lsrs	r3, r3, #3
9000a41c:	f003 0303 	and.w	r3, r3, #3
9000a420:	4a07      	ldr	r2, [pc, #28]	@ (9000a440 <UART_SetConfig+0x6ac>)
9000a422:	fa22 f303 	lsr.w	r3, r2, r3
9000a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a428:	e01c      	b.n	9000a464 <UART_SetConfig+0x6d0>
9000a42a:	bf00      	nop
9000a42c:	40011400 	.word	0x40011400
9000a430:	58024400 	.word	0x58024400
9000a434:	40007800 	.word	0x40007800
9000a438:	40007c00 	.word	0x40007c00
9000a43c:	58000c00 	.word	0x58000c00
9000a440:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a444:	4b9d      	ldr	r3, [pc, #628]	@ (9000a6bc <UART_SetConfig+0x928>)
9000a446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a448:	e00c      	b.n	9000a464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a44a:	4b9d      	ldr	r3, [pc, #628]	@ (9000a6c0 <UART_SetConfig+0x92c>)
9000a44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a44e:	e009      	b.n	9000a464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a450:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a456:	e005      	b.n	9000a464 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a458:	2300      	movs	r3, #0
9000a45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a45c:	2301      	movs	r3, #1
9000a45e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a462:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a466:	2b00      	cmp	r3, #0
9000a468:	f000 81de 	beq.w	9000a828 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a46c:	697b      	ldr	r3, [r7, #20]
9000a46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a470:	4a94      	ldr	r2, [pc, #592]	@ (9000a6c4 <UART_SetConfig+0x930>)
9000a472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a476:	461a      	mov	r2, r3
9000a478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a47a:	fbb3 f3f2 	udiv	r3, r3, r2
9000a47e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a480:	697b      	ldr	r3, [r7, #20]
9000a482:	685a      	ldr	r2, [r3, #4]
9000a484:	4613      	mov	r3, r2
9000a486:	005b      	lsls	r3, r3, #1
9000a488:	4413      	add	r3, r2
9000a48a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a48c:	429a      	cmp	r2, r3
9000a48e:	d305      	bcc.n	9000a49c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a490:	697b      	ldr	r3, [r7, #20]
9000a492:	685b      	ldr	r3, [r3, #4]
9000a494:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a498:	429a      	cmp	r2, r3
9000a49a:	d903      	bls.n	9000a4a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a49c:	2301      	movs	r3, #1
9000a49e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a4a2:	e1c1      	b.n	9000a828 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a4a6:	2200      	movs	r2, #0
9000a4a8:	60bb      	str	r3, [r7, #8]
9000a4aa:	60fa      	str	r2, [r7, #12]
9000a4ac:	697b      	ldr	r3, [r7, #20]
9000a4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a4b0:	4a84      	ldr	r2, [pc, #528]	@ (9000a6c4 <UART_SetConfig+0x930>)
9000a4b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a4b6:	b29b      	uxth	r3, r3
9000a4b8:	2200      	movs	r2, #0
9000a4ba:	603b      	str	r3, [r7, #0]
9000a4bc:	607a      	str	r2, [r7, #4]
9000a4be:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a4c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a4c6:	f7f5 ff5b 	bl	90000380 <__aeabi_uldivmod>
9000a4ca:	4602      	mov	r2, r0
9000a4cc:	460b      	mov	r3, r1
9000a4ce:	4610      	mov	r0, r2
9000a4d0:	4619      	mov	r1, r3
9000a4d2:	f04f 0200 	mov.w	r2, #0
9000a4d6:	f04f 0300 	mov.w	r3, #0
9000a4da:	020b      	lsls	r3, r1, #8
9000a4dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a4e0:	0202      	lsls	r2, r0, #8
9000a4e2:	6979      	ldr	r1, [r7, #20]
9000a4e4:	6849      	ldr	r1, [r1, #4]
9000a4e6:	0849      	lsrs	r1, r1, #1
9000a4e8:	2000      	movs	r0, #0
9000a4ea:	460c      	mov	r4, r1
9000a4ec:	4605      	mov	r5, r0
9000a4ee:	eb12 0804 	adds.w	r8, r2, r4
9000a4f2:	eb43 0905 	adc.w	r9, r3, r5
9000a4f6:	697b      	ldr	r3, [r7, #20]
9000a4f8:	685b      	ldr	r3, [r3, #4]
9000a4fa:	2200      	movs	r2, #0
9000a4fc:	469a      	mov	sl, r3
9000a4fe:	4693      	mov	fp, r2
9000a500:	4652      	mov	r2, sl
9000a502:	465b      	mov	r3, fp
9000a504:	4640      	mov	r0, r8
9000a506:	4649      	mov	r1, r9
9000a508:	f7f5 ff3a 	bl	90000380 <__aeabi_uldivmod>
9000a50c:	4602      	mov	r2, r0
9000a50e:	460b      	mov	r3, r1
9000a510:	4613      	mov	r3, r2
9000a512:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a51a:	d308      	bcc.n	9000a52e <UART_SetConfig+0x79a>
9000a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a51e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a522:	d204      	bcs.n	9000a52e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a524:	697b      	ldr	r3, [r7, #20]
9000a526:	681b      	ldr	r3, [r3, #0]
9000a528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a52a:	60da      	str	r2, [r3, #12]
9000a52c:	e17c      	b.n	9000a828 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a52e:	2301      	movs	r3, #1
9000a530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a534:	e178      	b.n	9000a828 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a536:	697b      	ldr	r3, [r7, #20]
9000a538:	69db      	ldr	r3, [r3, #28]
9000a53a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a53e:	f040 80c5 	bne.w	9000a6cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a542:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a546:	2b20      	cmp	r3, #32
9000a548:	dc48      	bgt.n	9000a5dc <UART_SetConfig+0x848>
9000a54a:	2b00      	cmp	r3, #0
9000a54c:	db7b      	blt.n	9000a646 <UART_SetConfig+0x8b2>
9000a54e:	2b20      	cmp	r3, #32
9000a550:	d879      	bhi.n	9000a646 <UART_SetConfig+0x8b2>
9000a552:	a201      	add	r2, pc, #4	@ (adr r2, 9000a558 <UART_SetConfig+0x7c4>)
9000a554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a558:	9000a5e3 	.word	0x9000a5e3
9000a55c:	9000a5eb 	.word	0x9000a5eb
9000a560:	9000a647 	.word	0x9000a647
9000a564:	9000a647 	.word	0x9000a647
9000a568:	9000a5f3 	.word	0x9000a5f3
9000a56c:	9000a647 	.word	0x9000a647
9000a570:	9000a647 	.word	0x9000a647
9000a574:	9000a647 	.word	0x9000a647
9000a578:	9000a603 	.word	0x9000a603
9000a57c:	9000a647 	.word	0x9000a647
9000a580:	9000a647 	.word	0x9000a647
9000a584:	9000a647 	.word	0x9000a647
9000a588:	9000a647 	.word	0x9000a647
9000a58c:	9000a647 	.word	0x9000a647
9000a590:	9000a647 	.word	0x9000a647
9000a594:	9000a647 	.word	0x9000a647
9000a598:	9000a613 	.word	0x9000a613
9000a59c:	9000a647 	.word	0x9000a647
9000a5a0:	9000a647 	.word	0x9000a647
9000a5a4:	9000a647 	.word	0x9000a647
9000a5a8:	9000a647 	.word	0x9000a647
9000a5ac:	9000a647 	.word	0x9000a647
9000a5b0:	9000a647 	.word	0x9000a647
9000a5b4:	9000a647 	.word	0x9000a647
9000a5b8:	9000a647 	.word	0x9000a647
9000a5bc:	9000a647 	.word	0x9000a647
9000a5c0:	9000a647 	.word	0x9000a647
9000a5c4:	9000a647 	.word	0x9000a647
9000a5c8:	9000a647 	.word	0x9000a647
9000a5cc:	9000a647 	.word	0x9000a647
9000a5d0:	9000a647 	.word	0x9000a647
9000a5d4:	9000a647 	.word	0x9000a647
9000a5d8:	9000a639 	.word	0x9000a639
9000a5dc:	2b40      	cmp	r3, #64	@ 0x40
9000a5de:	d02e      	beq.n	9000a63e <UART_SetConfig+0x8aa>
9000a5e0:	e031      	b.n	9000a646 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a5e2:	f7fd fa97 	bl	90007b14 <HAL_RCC_GetPCLK1Freq>
9000a5e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a5e8:	e033      	b.n	9000a652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a5ea:	f7fd faa9 	bl	90007b40 <HAL_RCC_GetPCLK2Freq>
9000a5ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a5f0:	e02f      	b.n	9000a652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a5f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a5f6:	4618      	mov	r0, r3
9000a5f8:	f7fe fcd8 	bl	90008fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a600:	e027      	b.n	9000a652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a602:	f107 0318 	add.w	r3, r7, #24
9000a606:	4618      	mov	r0, r3
9000a608:	f7fe fe24 	bl	90009254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a60c:	69fb      	ldr	r3, [r7, #28]
9000a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a610:	e01f      	b.n	9000a652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a612:	4b2d      	ldr	r3, [pc, #180]	@ (9000a6c8 <UART_SetConfig+0x934>)
9000a614:	681b      	ldr	r3, [r3, #0]
9000a616:	f003 0320 	and.w	r3, r3, #32
9000a61a:	2b00      	cmp	r3, #0
9000a61c:	d009      	beq.n	9000a632 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a61e:	4b2a      	ldr	r3, [pc, #168]	@ (9000a6c8 <UART_SetConfig+0x934>)
9000a620:	681b      	ldr	r3, [r3, #0]
9000a622:	08db      	lsrs	r3, r3, #3
9000a624:	f003 0303 	and.w	r3, r3, #3
9000a628:	4a24      	ldr	r2, [pc, #144]	@ (9000a6bc <UART_SetConfig+0x928>)
9000a62a:	fa22 f303 	lsr.w	r3, r2, r3
9000a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a630:	e00f      	b.n	9000a652 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a632:	4b22      	ldr	r3, [pc, #136]	@ (9000a6bc <UART_SetConfig+0x928>)
9000a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a636:	e00c      	b.n	9000a652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a638:	4b21      	ldr	r3, [pc, #132]	@ (9000a6c0 <UART_SetConfig+0x92c>)
9000a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a63c:	e009      	b.n	9000a652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a63e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a644:	e005      	b.n	9000a652 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a646:	2300      	movs	r3, #0
9000a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a64a:	2301      	movs	r3, #1
9000a64c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a650:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a654:	2b00      	cmp	r3, #0
9000a656:	f000 80e7 	beq.w	9000a828 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a65a:	697b      	ldr	r3, [r7, #20]
9000a65c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a65e:	4a19      	ldr	r2, [pc, #100]	@ (9000a6c4 <UART_SetConfig+0x930>)
9000a660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a664:	461a      	mov	r2, r3
9000a666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a668:	fbb3 f3f2 	udiv	r3, r3, r2
9000a66c:	005a      	lsls	r2, r3, #1
9000a66e:	697b      	ldr	r3, [r7, #20]
9000a670:	685b      	ldr	r3, [r3, #4]
9000a672:	085b      	lsrs	r3, r3, #1
9000a674:	441a      	add	r2, r3
9000a676:	697b      	ldr	r3, [r7, #20]
9000a678:	685b      	ldr	r3, [r3, #4]
9000a67a:	fbb2 f3f3 	udiv	r3, r2, r3
9000a67e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a682:	2b0f      	cmp	r3, #15
9000a684:	d916      	bls.n	9000a6b4 <UART_SetConfig+0x920>
9000a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a68c:	d212      	bcs.n	9000a6b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a690:	b29b      	uxth	r3, r3
9000a692:	f023 030f 	bic.w	r3, r3, #15
9000a696:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a69a:	085b      	lsrs	r3, r3, #1
9000a69c:	b29b      	uxth	r3, r3
9000a69e:	f003 0307 	and.w	r3, r3, #7
9000a6a2:	b29a      	uxth	r2, r3
9000a6a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a6a6:	4313      	orrs	r3, r2
9000a6a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a6aa:	697b      	ldr	r3, [r7, #20]
9000a6ac:	681b      	ldr	r3, [r3, #0]
9000a6ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a6b0:	60da      	str	r2, [r3, #12]
9000a6b2:	e0b9      	b.n	9000a828 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a6b4:	2301      	movs	r3, #1
9000a6b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a6ba:	e0b5      	b.n	9000a828 <UART_SetConfig+0xa94>
9000a6bc:	03d09000 	.word	0x03d09000
9000a6c0:	003d0900 	.word	0x003d0900
9000a6c4:	9000d760 	.word	0x9000d760
9000a6c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a6cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a6d0:	2b20      	cmp	r3, #32
9000a6d2:	dc49      	bgt.n	9000a768 <UART_SetConfig+0x9d4>
9000a6d4:	2b00      	cmp	r3, #0
9000a6d6:	db7c      	blt.n	9000a7d2 <UART_SetConfig+0xa3e>
9000a6d8:	2b20      	cmp	r3, #32
9000a6da:	d87a      	bhi.n	9000a7d2 <UART_SetConfig+0xa3e>
9000a6dc:	a201      	add	r2, pc, #4	@ (adr r2, 9000a6e4 <UART_SetConfig+0x950>)
9000a6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a6e2:	bf00      	nop
9000a6e4:	9000a76f 	.word	0x9000a76f
9000a6e8:	9000a777 	.word	0x9000a777
9000a6ec:	9000a7d3 	.word	0x9000a7d3
9000a6f0:	9000a7d3 	.word	0x9000a7d3
9000a6f4:	9000a77f 	.word	0x9000a77f
9000a6f8:	9000a7d3 	.word	0x9000a7d3
9000a6fc:	9000a7d3 	.word	0x9000a7d3
9000a700:	9000a7d3 	.word	0x9000a7d3
9000a704:	9000a78f 	.word	0x9000a78f
9000a708:	9000a7d3 	.word	0x9000a7d3
9000a70c:	9000a7d3 	.word	0x9000a7d3
9000a710:	9000a7d3 	.word	0x9000a7d3
9000a714:	9000a7d3 	.word	0x9000a7d3
9000a718:	9000a7d3 	.word	0x9000a7d3
9000a71c:	9000a7d3 	.word	0x9000a7d3
9000a720:	9000a7d3 	.word	0x9000a7d3
9000a724:	9000a79f 	.word	0x9000a79f
9000a728:	9000a7d3 	.word	0x9000a7d3
9000a72c:	9000a7d3 	.word	0x9000a7d3
9000a730:	9000a7d3 	.word	0x9000a7d3
9000a734:	9000a7d3 	.word	0x9000a7d3
9000a738:	9000a7d3 	.word	0x9000a7d3
9000a73c:	9000a7d3 	.word	0x9000a7d3
9000a740:	9000a7d3 	.word	0x9000a7d3
9000a744:	9000a7d3 	.word	0x9000a7d3
9000a748:	9000a7d3 	.word	0x9000a7d3
9000a74c:	9000a7d3 	.word	0x9000a7d3
9000a750:	9000a7d3 	.word	0x9000a7d3
9000a754:	9000a7d3 	.word	0x9000a7d3
9000a758:	9000a7d3 	.word	0x9000a7d3
9000a75c:	9000a7d3 	.word	0x9000a7d3
9000a760:	9000a7d3 	.word	0x9000a7d3
9000a764:	9000a7c5 	.word	0x9000a7c5
9000a768:	2b40      	cmp	r3, #64	@ 0x40
9000a76a:	d02e      	beq.n	9000a7ca <UART_SetConfig+0xa36>
9000a76c:	e031      	b.n	9000a7d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a76e:	f7fd f9d1 	bl	90007b14 <HAL_RCC_GetPCLK1Freq>
9000a772:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a774:	e033      	b.n	9000a7de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a776:	f7fd f9e3 	bl	90007b40 <HAL_RCC_GetPCLK2Freq>
9000a77a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a77c:	e02f      	b.n	9000a7de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a77e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a782:	4618      	mov	r0, r3
9000a784:	f7fe fc12 	bl	90008fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a78c:	e027      	b.n	9000a7de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a78e:	f107 0318 	add.w	r3, r7, #24
9000a792:	4618      	mov	r0, r3
9000a794:	f7fe fd5e 	bl	90009254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a798:	69fb      	ldr	r3, [r7, #28]
9000a79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a79c:	e01f      	b.n	9000a7de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a79e:	4b2d      	ldr	r3, [pc, #180]	@ (9000a854 <UART_SetConfig+0xac0>)
9000a7a0:	681b      	ldr	r3, [r3, #0]
9000a7a2:	f003 0320 	and.w	r3, r3, #32
9000a7a6:	2b00      	cmp	r3, #0
9000a7a8:	d009      	beq.n	9000a7be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a7aa:	4b2a      	ldr	r3, [pc, #168]	@ (9000a854 <UART_SetConfig+0xac0>)
9000a7ac:	681b      	ldr	r3, [r3, #0]
9000a7ae:	08db      	lsrs	r3, r3, #3
9000a7b0:	f003 0303 	and.w	r3, r3, #3
9000a7b4:	4a28      	ldr	r2, [pc, #160]	@ (9000a858 <UART_SetConfig+0xac4>)
9000a7b6:	fa22 f303 	lsr.w	r3, r2, r3
9000a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a7bc:	e00f      	b.n	9000a7de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a7be:	4b26      	ldr	r3, [pc, #152]	@ (9000a858 <UART_SetConfig+0xac4>)
9000a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a7c2:	e00c      	b.n	9000a7de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a7c4:	4b25      	ldr	r3, [pc, #148]	@ (9000a85c <UART_SetConfig+0xac8>)
9000a7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a7c8:	e009      	b.n	9000a7de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a7ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a7d0:	e005      	b.n	9000a7de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a7d2:	2300      	movs	r3, #0
9000a7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a7d6:	2301      	movs	r3, #1
9000a7d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a7dc:	bf00      	nop
    }

    if (pclk != 0U)
9000a7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a7e0:	2b00      	cmp	r3, #0
9000a7e2:	d021      	beq.n	9000a828 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a7e4:	697b      	ldr	r3, [r7, #20]
9000a7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a7e8:	4a1d      	ldr	r2, [pc, #116]	@ (9000a860 <UART_SetConfig+0xacc>)
9000a7ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a7ee:	461a      	mov	r2, r3
9000a7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a7f2:	fbb3 f2f2 	udiv	r2, r3, r2
9000a7f6:	697b      	ldr	r3, [r7, #20]
9000a7f8:	685b      	ldr	r3, [r3, #4]
9000a7fa:	085b      	lsrs	r3, r3, #1
9000a7fc:	441a      	add	r2, r3
9000a7fe:	697b      	ldr	r3, [r7, #20]
9000a800:	685b      	ldr	r3, [r3, #4]
9000a802:	fbb2 f3f3 	udiv	r3, r2, r3
9000a806:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a80a:	2b0f      	cmp	r3, #15
9000a80c:	d909      	bls.n	9000a822 <UART_SetConfig+0xa8e>
9000a80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a814:	d205      	bcs.n	9000a822 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a818:	b29a      	uxth	r2, r3
9000a81a:	697b      	ldr	r3, [r7, #20]
9000a81c:	681b      	ldr	r3, [r3, #0]
9000a81e:	60da      	str	r2, [r3, #12]
9000a820:	e002      	b.n	9000a828 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a822:	2301      	movs	r3, #1
9000a824:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a828:	697b      	ldr	r3, [r7, #20]
9000a82a:	2201      	movs	r2, #1
9000a82c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a830:	697b      	ldr	r3, [r7, #20]
9000a832:	2201      	movs	r2, #1
9000a834:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a838:	697b      	ldr	r3, [r7, #20]
9000a83a:	2200      	movs	r2, #0
9000a83c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a83e:	697b      	ldr	r3, [r7, #20]
9000a840:	2200      	movs	r2, #0
9000a842:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a844:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a848:	4618      	mov	r0, r3
9000a84a:	3748      	adds	r7, #72	@ 0x48
9000a84c:	46bd      	mov	sp, r7
9000a84e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a852:	bf00      	nop
9000a854:	58024400 	.word	0x58024400
9000a858:	03d09000 	.word	0x03d09000
9000a85c:	003d0900 	.word	0x003d0900
9000a860:	9000d760 	.word	0x9000d760

9000a864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a864:	b480      	push	{r7}
9000a866:	b083      	sub	sp, #12
9000a868:	af00      	add	r7, sp, #0
9000a86a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a86c:	687b      	ldr	r3, [r7, #4]
9000a86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a870:	f003 0308 	and.w	r3, r3, #8
9000a874:	2b00      	cmp	r3, #0
9000a876:	d00a      	beq.n	9000a88e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a878:	687b      	ldr	r3, [r7, #4]
9000a87a:	681b      	ldr	r3, [r3, #0]
9000a87c:	685b      	ldr	r3, [r3, #4]
9000a87e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a882:	687b      	ldr	r3, [r7, #4]
9000a884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a886:	687b      	ldr	r3, [r7, #4]
9000a888:	681b      	ldr	r3, [r3, #0]
9000a88a:	430a      	orrs	r2, r1
9000a88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a88e:	687b      	ldr	r3, [r7, #4]
9000a890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a892:	f003 0301 	and.w	r3, r3, #1
9000a896:	2b00      	cmp	r3, #0
9000a898:	d00a      	beq.n	9000a8b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a89a:	687b      	ldr	r3, [r7, #4]
9000a89c:	681b      	ldr	r3, [r3, #0]
9000a89e:	685b      	ldr	r3, [r3, #4]
9000a8a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a8a4:	687b      	ldr	r3, [r7, #4]
9000a8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a8a8:	687b      	ldr	r3, [r7, #4]
9000a8aa:	681b      	ldr	r3, [r3, #0]
9000a8ac:	430a      	orrs	r2, r1
9000a8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a8b0:	687b      	ldr	r3, [r7, #4]
9000a8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8b4:	f003 0302 	and.w	r3, r3, #2
9000a8b8:	2b00      	cmp	r3, #0
9000a8ba:	d00a      	beq.n	9000a8d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a8bc:	687b      	ldr	r3, [r7, #4]
9000a8be:	681b      	ldr	r3, [r3, #0]
9000a8c0:	685b      	ldr	r3, [r3, #4]
9000a8c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000a8c6:	687b      	ldr	r3, [r7, #4]
9000a8c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000a8ca:	687b      	ldr	r3, [r7, #4]
9000a8cc:	681b      	ldr	r3, [r3, #0]
9000a8ce:	430a      	orrs	r2, r1
9000a8d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000a8d2:	687b      	ldr	r3, [r7, #4]
9000a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8d6:	f003 0304 	and.w	r3, r3, #4
9000a8da:	2b00      	cmp	r3, #0
9000a8dc:	d00a      	beq.n	9000a8f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000a8de:	687b      	ldr	r3, [r7, #4]
9000a8e0:	681b      	ldr	r3, [r3, #0]
9000a8e2:	685b      	ldr	r3, [r3, #4]
9000a8e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000a8e8:	687b      	ldr	r3, [r7, #4]
9000a8ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000a8ec:	687b      	ldr	r3, [r7, #4]
9000a8ee:	681b      	ldr	r3, [r3, #0]
9000a8f0:	430a      	orrs	r2, r1
9000a8f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000a8f4:	687b      	ldr	r3, [r7, #4]
9000a8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8f8:	f003 0310 	and.w	r3, r3, #16
9000a8fc:	2b00      	cmp	r3, #0
9000a8fe:	d00a      	beq.n	9000a916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000a900:	687b      	ldr	r3, [r7, #4]
9000a902:	681b      	ldr	r3, [r3, #0]
9000a904:	689b      	ldr	r3, [r3, #8]
9000a906:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000a90a:	687b      	ldr	r3, [r7, #4]
9000a90c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a90e:	687b      	ldr	r3, [r7, #4]
9000a910:	681b      	ldr	r3, [r3, #0]
9000a912:	430a      	orrs	r2, r1
9000a914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000a916:	687b      	ldr	r3, [r7, #4]
9000a918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a91a:	f003 0320 	and.w	r3, r3, #32
9000a91e:	2b00      	cmp	r3, #0
9000a920:	d00a      	beq.n	9000a938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000a922:	687b      	ldr	r3, [r7, #4]
9000a924:	681b      	ldr	r3, [r3, #0]
9000a926:	689b      	ldr	r3, [r3, #8]
9000a928:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000a92c:	687b      	ldr	r3, [r7, #4]
9000a92e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000a930:	687b      	ldr	r3, [r7, #4]
9000a932:	681b      	ldr	r3, [r3, #0]
9000a934:	430a      	orrs	r2, r1
9000a936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000a938:	687b      	ldr	r3, [r7, #4]
9000a93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a940:	2b00      	cmp	r3, #0
9000a942:	d01a      	beq.n	9000a97a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000a944:	687b      	ldr	r3, [r7, #4]
9000a946:	681b      	ldr	r3, [r3, #0]
9000a948:	685b      	ldr	r3, [r3, #4]
9000a94a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000a94e:	687b      	ldr	r3, [r7, #4]
9000a950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a952:	687b      	ldr	r3, [r7, #4]
9000a954:	681b      	ldr	r3, [r3, #0]
9000a956:	430a      	orrs	r2, r1
9000a958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000a95a:	687b      	ldr	r3, [r7, #4]
9000a95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000a95e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a962:	d10a      	bne.n	9000a97a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000a964:	687b      	ldr	r3, [r7, #4]
9000a966:	681b      	ldr	r3, [r3, #0]
9000a968:	685b      	ldr	r3, [r3, #4]
9000a96a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000a96e:	687b      	ldr	r3, [r7, #4]
9000a970:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000a972:	687b      	ldr	r3, [r7, #4]
9000a974:	681b      	ldr	r3, [r3, #0]
9000a976:	430a      	orrs	r2, r1
9000a978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000a97a:	687b      	ldr	r3, [r7, #4]
9000a97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a97e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000a982:	2b00      	cmp	r3, #0
9000a984:	d00a      	beq.n	9000a99c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000a986:	687b      	ldr	r3, [r7, #4]
9000a988:	681b      	ldr	r3, [r3, #0]
9000a98a:	685b      	ldr	r3, [r3, #4]
9000a98c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000a990:	687b      	ldr	r3, [r7, #4]
9000a992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000a994:	687b      	ldr	r3, [r7, #4]
9000a996:	681b      	ldr	r3, [r3, #0]
9000a998:	430a      	orrs	r2, r1
9000a99a:	605a      	str	r2, [r3, #4]
  }
}
9000a99c:	bf00      	nop
9000a99e:	370c      	adds	r7, #12
9000a9a0:	46bd      	mov	sp, r7
9000a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a9a6:	4770      	bx	lr

9000a9a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000a9a8:	b580      	push	{r7, lr}
9000a9aa:	b098      	sub	sp, #96	@ 0x60
9000a9ac:	af02      	add	r7, sp, #8
9000a9ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000a9b0:	687b      	ldr	r3, [r7, #4]
9000a9b2:	2200      	movs	r2, #0
9000a9b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000a9b8:	f7f8 fc4a 	bl	90003250 <HAL_GetTick>
9000a9bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000a9be:	687b      	ldr	r3, [r7, #4]
9000a9c0:	681b      	ldr	r3, [r3, #0]
9000a9c2:	681b      	ldr	r3, [r3, #0]
9000a9c4:	f003 0308 	and.w	r3, r3, #8
9000a9c8:	2b08      	cmp	r3, #8
9000a9ca:	d12f      	bne.n	9000aa2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a9cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a9d0:	9300      	str	r3, [sp, #0]
9000a9d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a9d4:	2200      	movs	r2, #0
9000a9d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000a9da:	6878      	ldr	r0, [r7, #4]
9000a9dc:	f000 f88e 	bl	9000aafc <UART_WaitOnFlagUntilTimeout>
9000a9e0:	4603      	mov	r3, r0
9000a9e2:	2b00      	cmp	r3, #0
9000a9e4:	d022      	beq.n	9000aa2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000a9e6:	687b      	ldr	r3, [r7, #4]
9000a9e8:	681b      	ldr	r3, [r3, #0]
9000a9ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a9ee:	e853 3f00 	ldrex	r3, [r3]
9000a9f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000a9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000a9f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000a9fa:	653b      	str	r3, [r7, #80]	@ 0x50
9000a9fc:	687b      	ldr	r3, [r7, #4]
9000a9fe:	681b      	ldr	r3, [r3, #0]
9000aa00:	461a      	mov	r2, r3
9000aa02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000aa04:	647b      	str	r3, [r7, #68]	@ 0x44
9000aa06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000aa0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000aa0c:	e841 2300 	strex	r3, r2, [r1]
9000aa10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000aa12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000aa14:	2b00      	cmp	r3, #0
9000aa16:	d1e6      	bne.n	9000a9e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000aa18:	687b      	ldr	r3, [r7, #4]
9000aa1a:	2220      	movs	r2, #32
9000aa1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000aa20:	687b      	ldr	r3, [r7, #4]
9000aa22:	2200      	movs	r2, #0
9000aa24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000aa28:	2303      	movs	r3, #3
9000aa2a:	e063      	b.n	9000aaf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000aa2c:	687b      	ldr	r3, [r7, #4]
9000aa2e:	681b      	ldr	r3, [r3, #0]
9000aa30:	681b      	ldr	r3, [r3, #0]
9000aa32:	f003 0304 	and.w	r3, r3, #4
9000aa36:	2b04      	cmp	r3, #4
9000aa38:	d149      	bne.n	9000aace <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000aa3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000aa3e:	9300      	str	r3, [sp, #0]
9000aa40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000aa42:	2200      	movs	r2, #0
9000aa44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000aa48:	6878      	ldr	r0, [r7, #4]
9000aa4a:	f000 f857 	bl	9000aafc <UART_WaitOnFlagUntilTimeout>
9000aa4e:	4603      	mov	r3, r0
9000aa50:	2b00      	cmp	r3, #0
9000aa52:	d03c      	beq.n	9000aace <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000aa54:	687b      	ldr	r3, [r7, #4]
9000aa56:	681b      	ldr	r3, [r3, #0]
9000aa58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000aa5c:	e853 3f00 	ldrex	r3, [r3]
9000aa60:	623b      	str	r3, [r7, #32]
   return(result);
9000aa62:	6a3b      	ldr	r3, [r7, #32]
9000aa64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000aa68:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000aa6a:	687b      	ldr	r3, [r7, #4]
9000aa6c:	681b      	ldr	r3, [r3, #0]
9000aa6e:	461a      	mov	r2, r3
9000aa70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000aa72:	633b      	str	r3, [r7, #48]	@ 0x30
9000aa74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000aa78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000aa7a:	e841 2300 	strex	r3, r2, [r1]
9000aa7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000aa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000aa82:	2b00      	cmp	r3, #0
9000aa84:	d1e6      	bne.n	9000aa54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000aa86:	687b      	ldr	r3, [r7, #4]
9000aa88:	681b      	ldr	r3, [r3, #0]
9000aa8a:	3308      	adds	r3, #8
9000aa8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa8e:	693b      	ldr	r3, [r7, #16]
9000aa90:	e853 3f00 	ldrex	r3, [r3]
9000aa94:	60fb      	str	r3, [r7, #12]
   return(result);
9000aa96:	68fb      	ldr	r3, [r7, #12]
9000aa98:	f023 0301 	bic.w	r3, r3, #1
9000aa9c:	64bb      	str	r3, [r7, #72]	@ 0x48
9000aa9e:	687b      	ldr	r3, [r7, #4]
9000aaa0:	681b      	ldr	r3, [r3, #0]
9000aaa2:	3308      	adds	r3, #8
9000aaa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000aaa6:	61fa      	str	r2, [r7, #28]
9000aaa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aaaa:	69b9      	ldr	r1, [r7, #24]
9000aaac:	69fa      	ldr	r2, [r7, #28]
9000aaae:	e841 2300 	strex	r3, r2, [r1]
9000aab2:	617b      	str	r3, [r7, #20]
   return(result);
9000aab4:	697b      	ldr	r3, [r7, #20]
9000aab6:	2b00      	cmp	r3, #0
9000aab8:	d1e5      	bne.n	9000aa86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000aaba:	687b      	ldr	r3, [r7, #4]
9000aabc:	2220      	movs	r2, #32
9000aabe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000aac2:	687b      	ldr	r3, [r7, #4]
9000aac4:	2200      	movs	r2, #0
9000aac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000aaca:	2303      	movs	r3, #3
9000aacc:	e012      	b.n	9000aaf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000aace:	687b      	ldr	r3, [r7, #4]
9000aad0:	2220      	movs	r2, #32
9000aad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000aad6:	687b      	ldr	r3, [r7, #4]
9000aad8:	2220      	movs	r2, #32
9000aada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000aade:	687b      	ldr	r3, [r7, #4]
9000aae0:	2200      	movs	r2, #0
9000aae2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000aae4:	687b      	ldr	r3, [r7, #4]
9000aae6:	2200      	movs	r2, #0
9000aae8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000aaea:	687b      	ldr	r3, [r7, #4]
9000aaec:	2200      	movs	r2, #0
9000aaee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000aaf2:	2300      	movs	r3, #0
}
9000aaf4:	4618      	mov	r0, r3
9000aaf6:	3758      	adds	r7, #88	@ 0x58
9000aaf8:	46bd      	mov	sp, r7
9000aafa:	bd80      	pop	{r7, pc}

9000aafc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000aafc:	b580      	push	{r7, lr}
9000aafe:	b084      	sub	sp, #16
9000ab00:	af00      	add	r7, sp, #0
9000ab02:	60f8      	str	r0, [r7, #12]
9000ab04:	60b9      	str	r1, [r7, #8]
9000ab06:	603b      	str	r3, [r7, #0]
9000ab08:	4613      	mov	r3, r2
9000ab0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000ab0c:	e04f      	b.n	9000abae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000ab0e:	69bb      	ldr	r3, [r7, #24]
9000ab10:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ab14:	d04b      	beq.n	9000abae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ab16:	f7f8 fb9b 	bl	90003250 <HAL_GetTick>
9000ab1a:	4602      	mov	r2, r0
9000ab1c:	683b      	ldr	r3, [r7, #0]
9000ab1e:	1ad3      	subs	r3, r2, r3
9000ab20:	69ba      	ldr	r2, [r7, #24]
9000ab22:	429a      	cmp	r2, r3
9000ab24:	d302      	bcc.n	9000ab2c <UART_WaitOnFlagUntilTimeout+0x30>
9000ab26:	69bb      	ldr	r3, [r7, #24]
9000ab28:	2b00      	cmp	r3, #0
9000ab2a:	d101      	bne.n	9000ab30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000ab2c:	2303      	movs	r3, #3
9000ab2e:	e04e      	b.n	9000abce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000ab30:	68fb      	ldr	r3, [r7, #12]
9000ab32:	681b      	ldr	r3, [r3, #0]
9000ab34:	681b      	ldr	r3, [r3, #0]
9000ab36:	f003 0304 	and.w	r3, r3, #4
9000ab3a:	2b00      	cmp	r3, #0
9000ab3c:	d037      	beq.n	9000abae <UART_WaitOnFlagUntilTimeout+0xb2>
9000ab3e:	68bb      	ldr	r3, [r7, #8]
9000ab40:	2b80      	cmp	r3, #128	@ 0x80
9000ab42:	d034      	beq.n	9000abae <UART_WaitOnFlagUntilTimeout+0xb2>
9000ab44:	68bb      	ldr	r3, [r7, #8]
9000ab46:	2b40      	cmp	r3, #64	@ 0x40
9000ab48:	d031      	beq.n	9000abae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000ab4a:	68fb      	ldr	r3, [r7, #12]
9000ab4c:	681b      	ldr	r3, [r3, #0]
9000ab4e:	69db      	ldr	r3, [r3, #28]
9000ab50:	f003 0308 	and.w	r3, r3, #8
9000ab54:	2b08      	cmp	r3, #8
9000ab56:	d110      	bne.n	9000ab7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000ab58:	68fb      	ldr	r3, [r7, #12]
9000ab5a:	681b      	ldr	r3, [r3, #0]
9000ab5c:	2208      	movs	r2, #8
9000ab5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000ab60:	68f8      	ldr	r0, [r7, #12]
9000ab62:	f000 f839 	bl	9000abd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000ab66:	68fb      	ldr	r3, [r7, #12]
9000ab68:	2208      	movs	r2, #8
9000ab6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000ab6e:	68fb      	ldr	r3, [r7, #12]
9000ab70:	2200      	movs	r2, #0
9000ab72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000ab76:	2301      	movs	r3, #1
9000ab78:	e029      	b.n	9000abce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000ab7a:	68fb      	ldr	r3, [r7, #12]
9000ab7c:	681b      	ldr	r3, [r3, #0]
9000ab7e:	69db      	ldr	r3, [r3, #28]
9000ab80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000ab84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000ab88:	d111      	bne.n	9000abae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000ab8a:	68fb      	ldr	r3, [r7, #12]
9000ab8c:	681b      	ldr	r3, [r3, #0]
9000ab8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000ab92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000ab94:	68f8      	ldr	r0, [r7, #12]
9000ab96:	f000 f81f 	bl	9000abd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000ab9a:	68fb      	ldr	r3, [r7, #12]
9000ab9c:	2220      	movs	r2, #32
9000ab9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000aba2:	68fb      	ldr	r3, [r7, #12]
9000aba4:	2200      	movs	r2, #0
9000aba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000abaa:	2303      	movs	r3, #3
9000abac:	e00f      	b.n	9000abce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000abae:	68fb      	ldr	r3, [r7, #12]
9000abb0:	681b      	ldr	r3, [r3, #0]
9000abb2:	69da      	ldr	r2, [r3, #28]
9000abb4:	68bb      	ldr	r3, [r7, #8]
9000abb6:	4013      	ands	r3, r2
9000abb8:	68ba      	ldr	r2, [r7, #8]
9000abba:	429a      	cmp	r2, r3
9000abbc:	bf0c      	ite	eq
9000abbe:	2301      	moveq	r3, #1
9000abc0:	2300      	movne	r3, #0
9000abc2:	b2db      	uxtb	r3, r3
9000abc4:	461a      	mov	r2, r3
9000abc6:	79fb      	ldrb	r3, [r7, #7]
9000abc8:	429a      	cmp	r2, r3
9000abca:	d0a0      	beq.n	9000ab0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000abcc:	2300      	movs	r3, #0
}
9000abce:	4618      	mov	r0, r3
9000abd0:	3710      	adds	r7, #16
9000abd2:	46bd      	mov	sp, r7
9000abd4:	bd80      	pop	{r7, pc}
	...

9000abd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000abd8:	b480      	push	{r7}
9000abda:	b095      	sub	sp, #84	@ 0x54
9000abdc:	af00      	add	r7, sp, #0
9000abde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000abe0:	687b      	ldr	r3, [r7, #4]
9000abe2:	681b      	ldr	r3, [r3, #0]
9000abe4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000abe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000abe8:	e853 3f00 	ldrex	r3, [r3]
9000abec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000abee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000abf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000abf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000abf6:	687b      	ldr	r3, [r7, #4]
9000abf8:	681b      	ldr	r3, [r3, #0]
9000abfa:	461a      	mov	r2, r3
9000abfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000abfe:	643b      	str	r3, [r7, #64]	@ 0x40
9000ac00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ac02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000ac04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000ac06:	e841 2300 	strex	r3, r2, [r1]
9000ac0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000ac0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ac0e:	2b00      	cmp	r3, #0
9000ac10:	d1e6      	bne.n	9000abe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000ac12:	687b      	ldr	r3, [r7, #4]
9000ac14:	681b      	ldr	r3, [r3, #0]
9000ac16:	3308      	adds	r3, #8
9000ac18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ac1a:	6a3b      	ldr	r3, [r7, #32]
9000ac1c:	e853 3f00 	ldrex	r3, [r3]
9000ac20:	61fb      	str	r3, [r7, #28]
   return(result);
9000ac22:	69fa      	ldr	r2, [r7, #28]
9000ac24:	4b1e      	ldr	r3, [pc, #120]	@ (9000aca0 <UART_EndRxTransfer+0xc8>)
9000ac26:	4013      	ands	r3, r2
9000ac28:	64bb      	str	r3, [r7, #72]	@ 0x48
9000ac2a:	687b      	ldr	r3, [r7, #4]
9000ac2c:	681b      	ldr	r3, [r3, #0]
9000ac2e:	3308      	adds	r3, #8
9000ac30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000ac32:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000ac34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ac36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000ac38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000ac3a:	e841 2300 	strex	r3, r2, [r1]
9000ac3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000ac42:	2b00      	cmp	r3, #0
9000ac44:	d1e5      	bne.n	9000ac12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000ac46:	687b      	ldr	r3, [r7, #4]
9000ac48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000ac4a:	2b01      	cmp	r3, #1
9000ac4c:	d118      	bne.n	9000ac80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000ac4e:	687b      	ldr	r3, [r7, #4]
9000ac50:	681b      	ldr	r3, [r3, #0]
9000ac52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ac54:	68fb      	ldr	r3, [r7, #12]
9000ac56:	e853 3f00 	ldrex	r3, [r3]
9000ac5a:	60bb      	str	r3, [r7, #8]
   return(result);
9000ac5c:	68bb      	ldr	r3, [r7, #8]
9000ac5e:	f023 0310 	bic.w	r3, r3, #16
9000ac62:	647b      	str	r3, [r7, #68]	@ 0x44
9000ac64:	687b      	ldr	r3, [r7, #4]
9000ac66:	681b      	ldr	r3, [r3, #0]
9000ac68:	461a      	mov	r2, r3
9000ac6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000ac6c:	61bb      	str	r3, [r7, #24]
9000ac6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ac70:	6979      	ldr	r1, [r7, #20]
9000ac72:	69ba      	ldr	r2, [r7, #24]
9000ac74:	e841 2300 	strex	r3, r2, [r1]
9000ac78:	613b      	str	r3, [r7, #16]
   return(result);
9000ac7a:	693b      	ldr	r3, [r7, #16]
9000ac7c:	2b00      	cmp	r3, #0
9000ac7e:	d1e6      	bne.n	9000ac4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000ac80:	687b      	ldr	r3, [r7, #4]
9000ac82:	2220      	movs	r2, #32
9000ac84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ac88:	687b      	ldr	r3, [r7, #4]
9000ac8a:	2200      	movs	r2, #0
9000ac8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000ac8e:	687b      	ldr	r3, [r7, #4]
9000ac90:	2200      	movs	r2, #0
9000ac92:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000ac94:	bf00      	nop
9000ac96:	3754      	adds	r7, #84	@ 0x54
9000ac98:	46bd      	mov	sp, r7
9000ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ac9e:	4770      	bx	lr
9000aca0:	effffffe 	.word	0xeffffffe

9000aca4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000aca4:	b480      	push	{r7}
9000aca6:	b085      	sub	sp, #20
9000aca8:	af00      	add	r7, sp, #0
9000acaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000acac:	687b      	ldr	r3, [r7, #4]
9000acae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000acb2:	2b01      	cmp	r3, #1
9000acb4:	d101      	bne.n	9000acba <HAL_UARTEx_DisableFifoMode+0x16>
9000acb6:	2302      	movs	r3, #2
9000acb8:	e027      	b.n	9000ad0a <HAL_UARTEx_DisableFifoMode+0x66>
9000acba:	687b      	ldr	r3, [r7, #4]
9000acbc:	2201      	movs	r2, #1
9000acbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000acc2:	687b      	ldr	r3, [r7, #4]
9000acc4:	2224      	movs	r2, #36	@ 0x24
9000acc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000acca:	687b      	ldr	r3, [r7, #4]
9000accc:	681b      	ldr	r3, [r3, #0]
9000acce:	681b      	ldr	r3, [r3, #0]
9000acd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000acd2:	687b      	ldr	r3, [r7, #4]
9000acd4:	681b      	ldr	r3, [r3, #0]
9000acd6:	681a      	ldr	r2, [r3, #0]
9000acd8:	687b      	ldr	r3, [r7, #4]
9000acda:	681b      	ldr	r3, [r3, #0]
9000acdc:	f022 0201 	bic.w	r2, r2, #1
9000ace0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000ace2:	68fb      	ldr	r3, [r7, #12]
9000ace4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000ace8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000acea:	687b      	ldr	r3, [r7, #4]
9000acec:	2200      	movs	r2, #0
9000acee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000acf0:	687b      	ldr	r3, [r7, #4]
9000acf2:	681b      	ldr	r3, [r3, #0]
9000acf4:	68fa      	ldr	r2, [r7, #12]
9000acf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000acf8:	687b      	ldr	r3, [r7, #4]
9000acfa:	2220      	movs	r2, #32
9000acfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ad00:	687b      	ldr	r3, [r7, #4]
9000ad02:	2200      	movs	r2, #0
9000ad04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ad08:	2300      	movs	r3, #0
}
9000ad0a:	4618      	mov	r0, r3
9000ad0c:	3714      	adds	r7, #20
9000ad0e:	46bd      	mov	sp, r7
9000ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad14:	4770      	bx	lr

9000ad16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ad16:	b580      	push	{r7, lr}
9000ad18:	b084      	sub	sp, #16
9000ad1a:	af00      	add	r7, sp, #0
9000ad1c:	6078      	str	r0, [r7, #4]
9000ad1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ad20:	687b      	ldr	r3, [r7, #4]
9000ad22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ad26:	2b01      	cmp	r3, #1
9000ad28:	d101      	bne.n	9000ad2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000ad2a:	2302      	movs	r3, #2
9000ad2c:	e02d      	b.n	9000ad8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000ad2e:	687b      	ldr	r3, [r7, #4]
9000ad30:	2201      	movs	r2, #1
9000ad32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ad36:	687b      	ldr	r3, [r7, #4]
9000ad38:	2224      	movs	r2, #36	@ 0x24
9000ad3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ad3e:	687b      	ldr	r3, [r7, #4]
9000ad40:	681b      	ldr	r3, [r3, #0]
9000ad42:	681b      	ldr	r3, [r3, #0]
9000ad44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ad46:	687b      	ldr	r3, [r7, #4]
9000ad48:	681b      	ldr	r3, [r3, #0]
9000ad4a:	681a      	ldr	r2, [r3, #0]
9000ad4c:	687b      	ldr	r3, [r7, #4]
9000ad4e:	681b      	ldr	r3, [r3, #0]
9000ad50:	f022 0201 	bic.w	r2, r2, #1
9000ad54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000ad56:	687b      	ldr	r3, [r7, #4]
9000ad58:	681b      	ldr	r3, [r3, #0]
9000ad5a:	689b      	ldr	r3, [r3, #8]
9000ad5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000ad60:	687b      	ldr	r3, [r7, #4]
9000ad62:	681b      	ldr	r3, [r3, #0]
9000ad64:	683a      	ldr	r2, [r7, #0]
9000ad66:	430a      	orrs	r2, r1
9000ad68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ad6a:	6878      	ldr	r0, [r7, #4]
9000ad6c:	f000 f850 	bl	9000ae10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ad70:	687b      	ldr	r3, [r7, #4]
9000ad72:	681b      	ldr	r3, [r3, #0]
9000ad74:	68fa      	ldr	r2, [r7, #12]
9000ad76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ad78:	687b      	ldr	r3, [r7, #4]
9000ad7a:	2220      	movs	r2, #32
9000ad7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ad80:	687b      	ldr	r3, [r7, #4]
9000ad82:	2200      	movs	r2, #0
9000ad84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ad88:	2300      	movs	r3, #0
}
9000ad8a:	4618      	mov	r0, r3
9000ad8c:	3710      	adds	r7, #16
9000ad8e:	46bd      	mov	sp, r7
9000ad90:	bd80      	pop	{r7, pc}

9000ad92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ad92:	b580      	push	{r7, lr}
9000ad94:	b084      	sub	sp, #16
9000ad96:	af00      	add	r7, sp, #0
9000ad98:	6078      	str	r0, [r7, #4]
9000ad9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ad9c:	687b      	ldr	r3, [r7, #4]
9000ad9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ada2:	2b01      	cmp	r3, #1
9000ada4:	d101      	bne.n	9000adaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000ada6:	2302      	movs	r3, #2
9000ada8:	e02d      	b.n	9000ae06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000adaa:	687b      	ldr	r3, [r7, #4]
9000adac:	2201      	movs	r2, #1
9000adae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000adb2:	687b      	ldr	r3, [r7, #4]
9000adb4:	2224      	movs	r2, #36	@ 0x24
9000adb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000adba:	687b      	ldr	r3, [r7, #4]
9000adbc:	681b      	ldr	r3, [r3, #0]
9000adbe:	681b      	ldr	r3, [r3, #0]
9000adc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000adc2:	687b      	ldr	r3, [r7, #4]
9000adc4:	681b      	ldr	r3, [r3, #0]
9000adc6:	681a      	ldr	r2, [r3, #0]
9000adc8:	687b      	ldr	r3, [r7, #4]
9000adca:	681b      	ldr	r3, [r3, #0]
9000adcc:	f022 0201 	bic.w	r2, r2, #1
9000add0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000add2:	687b      	ldr	r3, [r7, #4]
9000add4:	681b      	ldr	r3, [r3, #0]
9000add6:	689b      	ldr	r3, [r3, #8]
9000add8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000addc:	687b      	ldr	r3, [r7, #4]
9000adde:	681b      	ldr	r3, [r3, #0]
9000ade0:	683a      	ldr	r2, [r7, #0]
9000ade2:	430a      	orrs	r2, r1
9000ade4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ade6:	6878      	ldr	r0, [r7, #4]
9000ade8:	f000 f812 	bl	9000ae10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000adec:	687b      	ldr	r3, [r7, #4]
9000adee:	681b      	ldr	r3, [r3, #0]
9000adf0:	68fa      	ldr	r2, [r7, #12]
9000adf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000adf4:	687b      	ldr	r3, [r7, #4]
9000adf6:	2220      	movs	r2, #32
9000adf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000adfc:	687b      	ldr	r3, [r7, #4]
9000adfe:	2200      	movs	r2, #0
9000ae00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ae04:	2300      	movs	r3, #0
}
9000ae06:	4618      	mov	r0, r3
9000ae08:	3710      	adds	r7, #16
9000ae0a:	46bd      	mov	sp, r7
9000ae0c:	bd80      	pop	{r7, pc}
	...

9000ae10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000ae10:	b480      	push	{r7}
9000ae12:	b085      	sub	sp, #20
9000ae14:	af00      	add	r7, sp, #0
9000ae16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000ae18:	687b      	ldr	r3, [r7, #4]
9000ae1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000ae1c:	2b00      	cmp	r3, #0
9000ae1e:	d108      	bne.n	9000ae32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000ae20:	687b      	ldr	r3, [r7, #4]
9000ae22:	2201      	movs	r2, #1
9000ae24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000ae28:	687b      	ldr	r3, [r7, #4]
9000ae2a:	2201      	movs	r2, #1
9000ae2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000ae30:	e031      	b.n	9000ae96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000ae32:	2310      	movs	r3, #16
9000ae34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000ae36:	2310      	movs	r3, #16
9000ae38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000ae3a:	687b      	ldr	r3, [r7, #4]
9000ae3c:	681b      	ldr	r3, [r3, #0]
9000ae3e:	689b      	ldr	r3, [r3, #8]
9000ae40:	0e5b      	lsrs	r3, r3, #25
9000ae42:	b2db      	uxtb	r3, r3
9000ae44:	f003 0307 	and.w	r3, r3, #7
9000ae48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000ae4a:	687b      	ldr	r3, [r7, #4]
9000ae4c:	681b      	ldr	r3, [r3, #0]
9000ae4e:	689b      	ldr	r3, [r3, #8]
9000ae50:	0f5b      	lsrs	r3, r3, #29
9000ae52:	b2db      	uxtb	r3, r3
9000ae54:	f003 0307 	and.w	r3, r3, #7
9000ae58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000ae5a:	7bbb      	ldrb	r3, [r7, #14]
9000ae5c:	7b3a      	ldrb	r2, [r7, #12]
9000ae5e:	4911      	ldr	r1, [pc, #68]	@ (9000aea4 <UARTEx_SetNbDataToProcess+0x94>)
9000ae60:	5c8a      	ldrb	r2, [r1, r2]
9000ae62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000ae66:	7b3a      	ldrb	r2, [r7, #12]
9000ae68:	490f      	ldr	r1, [pc, #60]	@ (9000aea8 <UARTEx_SetNbDataToProcess+0x98>)
9000ae6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000ae6c:	fb93 f3f2 	sdiv	r3, r3, r2
9000ae70:	b29a      	uxth	r2, r3
9000ae72:	687b      	ldr	r3, [r7, #4]
9000ae74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000ae78:	7bfb      	ldrb	r3, [r7, #15]
9000ae7a:	7b7a      	ldrb	r2, [r7, #13]
9000ae7c:	4909      	ldr	r1, [pc, #36]	@ (9000aea4 <UARTEx_SetNbDataToProcess+0x94>)
9000ae7e:	5c8a      	ldrb	r2, [r1, r2]
9000ae80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000ae84:	7b7a      	ldrb	r2, [r7, #13]
9000ae86:	4908      	ldr	r1, [pc, #32]	@ (9000aea8 <UARTEx_SetNbDataToProcess+0x98>)
9000ae88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000ae8a:	fb93 f3f2 	sdiv	r3, r3, r2
9000ae8e:	b29a      	uxth	r2, r3
9000ae90:	687b      	ldr	r3, [r7, #4]
9000ae92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000ae96:	bf00      	nop
9000ae98:	3714      	adds	r7, #20
9000ae9a:	46bd      	mov	sp, r7
9000ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aea0:	4770      	bx	lr
9000aea2:	bf00      	nop
9000aea4:	9000d778 	.word	0x9000d778
9000aea8:	9000d780 	.word	0x9000d780

9000aeac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000aeac:	b480      	push	{r7}
9000aeae:	b083      	sub	sp, #12
9000aeb0:	af00      	add	r7, sp, #0
9000aeb2:	6078      	str	r0, [r7, #4]
9000aeb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000aeb6:	683b      	ldr	r3, [r7, #0]
9000aeb8:	681b      	ldr	r3, [r3, #0]
9000aeba:	2b00      	cmp	r3, #0
9000aebc:	d121      	bne.n	9000af02 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000aebe:	687b      	ldr	r3, [r7, #4]
9000aec0:	681a      	ldr	r2, [r3, #0]
9000aec2:	4b27      	ldr	r3, [pc, #156]	@ (9000af60 <FMC_SDRAM_Init+0xb4>)
9000aec4:	4013      	ands	r3, r2
9000aec6:	683a      	ldr	r2, [r7, #0]
9000aec8:	6851      	ldr	r1, [r2, #4]
9000aeca:	683a      	ldr	r2, [r7, #0]
9000aecc:	6892      	ldr	r2, [r2, #8]
9000aece:	4311      	orrs	r1, r2
9000aed0:	683a      	ldr	r2, [r7, #0]
9000aed2:	68d2      	ldr	r2, [r2, #12]
9000aed4:	4311      	orrs	r1, r2
9000aed6:	683a      	ldr	r2, [r7, #0]
9000aed8:	6912      	ldr	r2, [r2, #16]
9000aeda:	4311      	orrs	r1, r2
9000aedc:	683a      	ldr	r2, [r7, #0]
9000aede:	6952      	ldr	r2, [r2, #20]
9000aee0:	4311      	orrs	r1, r2
9000aee2:	683a      	ldr	r2, [r7, #0]
9000aee4:	6992      	ldr	r2, [r2, #24]
9000aee6:	4311      	orrs	r1, r2
9000aee8:	683a      	ldr	r2, [r7, #0]
9000aeea:	69d2      	ldr	r2, [r2, #28]
9000aeec:	4311      	orrs	r1, r2
9000aeee:	683a      	ldr	r2, [r7, #0]
9000aef0:	6a12      	ldr	r2, [r2, #32]
9000aef2:	4311      	orrs	r1, r2
9000aef4:	683a      	ldr	r2, [r7, #0]
9000aef6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000aef8:	430a      	orrs	r2, r1
9000aefa:	431a      	orrs	r2, r3
9000aefc:	687b      	ldr	r3, [r7, #4]
9000aefe:	601a      	str	r2, [r3, #0]
9000af00:	e026      	b.n	9000af50 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000af02:	687b      	ldr	r3, [r7, #4]
9000af04:	681b      	ldr	r3, [r3, #0]
9000af06:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000af0a:	683b      	ldr	r3, [r7, #0]
9000af0c:	69d9      	ldr	r1, [r3, #28]
9000af0e:	683b      	ldr	r3, [r7, #0]
9000af10:	6a1b      	ldr	r3, [r3, #32]
9000af12:	4319      	orrs	r1, r3
9000af14:	683b      	ldr	r3, [r7, #0]
9000af16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000af18:	430b      	orrs	r3, r1
9000af1a:	431a      	orrs	r2, r3
9000af1c:	687b      	ldr	r3, [r7, #4]
9000af1e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000af20:	687b      	ldr	r3, [r7, #4]
9000af22:	685a      	ldr	r2, [r3, #4]
9000af24:	4b0e      	ldr	r3, [pc, #56]	@ (9000af60 <FMC_SDRAM_Init+0xb4>)
9000af26:	4013      	ands	r3, r2
9000af28:	683a      	ldr	r2, [r7, #0]
9000af2a:	6851      	ldr	r1, [r2, #4]
9000af2c:	683a      	ldr	r2, [r7, #0]
9000af2e:	6892      	ldr	r2, [r2, #8]
9000af30:	4311      	orrs	r1, r2
9000af32:	683a      	ldr	r2, [r7, #0]
9000af34:	68d2      	ldr	r2, [r2, #12]
9000af36:	4311      	orrs	r1, r2
9000af38:	683a      	ldr	r2, [r7, #0]
9000af3a:	6912      	ldr	r2, [r2, #16]
9000af3c:	4311      	orrs	r1, r2
9000af3e:	683a      	ldr	r2, [r7, #0]
9000af40:	6952      	ldr	r2, [r2, #20]
9000af42:	4311      	orrs	r1, r2
9000af44:	683a      	ldr	r2, [r7, #0]
9000af46:	6992      	ldr	r2, [r2, #24]
9000af48:	430a      	orrs	r2, r1
9000af4a:	431a      	orrs	r2, r3
9000af4c:	687b      	ldr	r3, [r7, #4]
9000af4e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000af50:	2300      	movs	r3, #0
}
9000af52:	4618      	mov	r0, r3
9000af54:	370c      	adds	r7, #12
9000af56:	46bd      	mov	sp, r7
9000af58:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af5c:	4770      	bx	lr
9000af5e:	bf00      	nop
9000af60:	ffff8000 	.word	0xffff8000

9000af64 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000af64:	b480      	push	{r7}
9000af66:	b085      	sub	sp, #20
9000af68:	af00      	add	r7, sp, #0
9000af6a:	60f8      	str	r0, [r7, #12]
9000af6c:	60b9      	str	r1, [r7, #8]
9000af6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000af70:	687b      	ldr	r3, [r7, #4]
9000af72:	2b00      	cmp	r3, #0
9000af74:	d128      	bne.n	9000afc8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000af76:	68fb      	ldr	r3, [r7, #12]
9000af78:	689b      	ldr	r3, [r3, #8]
9000af7a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000af7e:	68bb      	ldr	r3, [r7, #8]
9000af80:	681b      	ldr	r3, [r3, #0]
9000af82:	1e59      	subs	r1, r3, #1
9000af84:	68bb      	ldr	r3, [r7, #8]
9000af86:	685b      	ldr	r3, [r3, #4]
9000af88:	3b01      	subs	r3, #1
9000af8a:	011b      	lsls	r3, r3, #4
9000af8c:	4319      	orrs	r1, r3
9000af8e:	68bb      	ldr	r3, [r7, #8]
9000af90:	689b      	ldr	r3, [r3, #8]
9000af92:	3b01      	subs	r3, #1
9000af94:	021b      	lsls	r3, r3, #8
9000af96:	4319      	orrs	r1, r3
9000af98:	68bb      	ldr	r3, [r7, #8]
9000af9a:	68db      	ldr	r3, [r3, #12]
9000af9c:	3b01      	subs	r3, #1
9000af9e:	031b      	lsls	r3, r3, #12
9000afa0:	4319      	orrs	r1, r3
9000afa2:	68bb      	ldr	r3, [r7, #8]
9000afa4:	691b      	ldr	r3, [r3, #16]
9000afa6:	3b01      	subs	r3, #1
9000afa8:	041b      	lsls	r3, r3, #16
9000afaa:	4319      	orrs	r1, r3
9000afac:	68bb      	ldr	r3, [r7, #8]
9000afae:	695b      	ldr	r3, [r3, #20]
9000afb0:	3b01      	subs	r3, #1
9000afb2:	051b      	lsls	r3, r3, #20
9000afb4:	4319      	orrs	r1, r3
9000afb6:	68bb      	ldr	r3, [r7, #8]
9000afb8:	699b      	ldr	r3, [r3, #24]
9000afba:	3b01      	subs	r3, #1
9000afbc:	061b      	lsls	r3, r3, #24
9000afbe:	430b      	orrs	r3, r1
9000afc0:	431a      	orrs	r2, r3
9000afc2:	68fb      	ldr	r3, [r7, #12]
9000afc4:	609a      	str	r2, [r3, #8]
9000afc6:	e02d      	b.n	9000b024 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000afc8:	68fb      	ldr	r3, [r7, #12]
9000afca:	689a      	ldr	r2, [r3, #8]
9000afcc:	4b19      	ldr	r3, [pc, #100]	@ (9000b034 <FMC_SDRAM_Timing_Init+0xd0>)
9000afce:	4013      	ands	r3, r2
9000afd0:	68ba      	ldr	r2, [r7, #8]
9000afd2:	68d2      	ldr	r2, [r2, #12]
9000afd4:	3a01      	subs	r2, #1
9000afd6:	0311      	lsls	r1, r2, #12
9000afd8:	68ba      	ldr	r2, [r7, #8]
9000afda:	6952      	ldr	r2, [r2, #20]
9000afdc:	3a01      	subs	r2, #1
9000afde:	0512      	lsls	r2, r2, #20
9000afe0:	430a      	orrs	r2, r1
9000afe2:	431a      	orrs	r2, r3
9000afe4:	68fb      	ldr	r3, [r7, #12]
9000afe6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000afe8:	68fb      	ldr	r3, [r7, #12]
9000afea:	68db      	ldr	r3, [r3, #12]
9000afec:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000aff0:	68bb      	ldr	r3, [r7, #8]
9000aff2:	681b      	ldr	r3, [r3, #0]
9000aff4:	1e59      	subs	r1, r3, #1
9000aff6:	68bb      	ldr	r3, [r7, #8]
9000aff8:	685b      	ldr	r3, [r3, #4]
9000affa:	3b01      	subs	r3, #1
9000affc:	011b      	lsls	r3, r3, #4
9000affe:	4319      	orrs	r1, r3
9000b000:	68bb      	ldr	r3, [r7, #8]
9000b002:	689b      	ldr	r3, [r3, #8]
9000b004:	3b01      	subs	r3, #1
9000b006:	021b      	lsls	r3, r3, #8
9000b008:	4319      	orrs	r1, r3
9000b00a:	68bb      	ldr	r3, [r7, #8]
9000b00c:	691b      	ldr	r3, [r3, #16]
9000b00e:	3b01      	subs	r3, #1
9000b010:	041b      	lsls	r3, r3, #16
9000b012:	4319      	orrs	r1, r3
9000b014:	68bb      	ldr	r3, [r7, #8]
9000b016:	699b      	ldr	r3, [r3, #24]
9000b018:	3b01      	subs	r3, #1
9000b01a:	061b      	lsls	r3, r3, #24
9000b01c:	430b      	orrs	r3, r1
9000b01e:	431a      	orrs	r2, r3
9000b020:	68fb      	ldr	r3, [r7, #12]
9000b022:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000b024:	2300      	movs	r3, #0
}
9000b026:	4618      	mov	r0, r3
9000b028:	3714      	adds	r7, #20
9000b02a:	46bd      	mov	sp, r7
9000b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b030:	4770      	bx	lr
9000b032:	bf00      	nop
9000b034:	ff0f0fff 	.word	0xff0f0fff

9000b038 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000b038:	b480      	push	{r7}
9000b03a:	b085      	sub	sp, #20
9000b03c:	af00      	add	r7, sp, #0
9000b03e:	60f8      	str	r0, [r7, #12]
9000b040:	60b9      	str	r1, [r7, #8]
9000b042:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000b044:	68fb      	ldr	r3, [r7, #12]
9000b046:	691a      	ldr	r2, [r3, #16]
9000b048:	4b0c      	ldr	r3, [pc, #48]	@ (9000b07c <FMC_SDRAM_SendCommand+0x44>)
9000b04a:	4013      	ands	r3, r2
9000b04c:	68ba      	ldr	r2, [r7, #8]
9000b04e:	6811      	ldr	r1, [r2, #0]
9000b050:	68ba      	ldr	r2, [r7, #8]
9000b052:	6852      	ldr	r2, [r2, #4]
9000b054:	4311      	orrs	r1, r2
9000b056:	68ba      	ldr	r2, [r7, #8]
9000b058:	6892      	ldr	r2, [r2, #8]
9000b05a:	3a01      	subs	r2, #1
9000b05c:	0152      	lsls	r2, r2, #5
9000b05e:	4311      	orrs	r1, r2
9000b060:	68ba      	ldr	r2, [r7, #8]
9000b062:	68d2      	ldr	r2, [r2, #12]
9000b064:	0252      	lsls	r2, r2, #9
9000b066:	430a      	orrs	r2, r1
9000b068:	431a      	orrs	r2, r3
9000b06a:	68fb      	ldr	r3, [r7, #12]
9000b06c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000b06e:	2300      	movs	r3, #0
}
9000b070:	4618      	mov	r0, r3
9000b072:	3714      	adds	r7, #20
9000b074:	46bd      	mov	sp, r7
9000b076:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b07a:	4770      	bx	lr
9000b07c:	ffc00000 	.word	0xffc00000

9000b080 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000b080:	b480      	push	{r7}
9000b082:	b083      	sub	sp, #12
9000b084:	af00      	add	r7, sp, #0
9000b086:	6078      	str	r0, [r7, #4]
9000b088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000b08a:	687b      	ldr	r3, [r7, #4]
9000b08c:	695a      	ldr	r2, [r3, #20]
9000b08e:	4b07      	ldr	r3, [pc, #28]	@ (9000b0ac <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000b090:	4013      	ands	r3, r2
9000b092:	683a      	ldr	r2, [r7, #0]
9000b094:	0052      	lsls	r2, r2, #1
9000b096:	431a      	orrs	r2, r3
9000b098:	687b      	ldr	r3, [r7, #4]
9000b09a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000b09c:	2300      	movs	r3, #0
}
9000b09e:	4618      	mov	r0, r3
9000b0a0:	370c      	adds	r7, #12
9000b0a2:	46bd      	mov	sp, r7
9000b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0a8:	4770      	bx	lr
9000b0aa:	bf00      	nop
9000b0ac:	ffffc001 	.word	0xffffc001

9000b0b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b0b0:	b480      	push	{r7}
9000b0b2:	b083      	sub	sp, #12
9000b0b4:	af00      	add	r7, sp, #0
9000b0b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000b0b8:	687b      	ldr	r3, [r7, #4]
9000b0ba:	689b      	ldr	r3, [r3, #8]
9000b0bc:	f043 0201 	orr.w	r2, r3, #1
9000b0c0:	687b      	ldr	r3, [r7, #4]
9000b0c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b0c4:	2300      	movs	r3, #0
}
9000b0c6:	4618      	mov	r0, r3
9000b0c8:	370c      	adds	r7, #12
9000b0ca:	46bd      	mov	sp, r7
9000b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0d0:	4770      	bx	lr

9000b0d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b0d2:	b480      	push	{r7}
9000b0d4:	b083      	sub	sp, #12
9000b0d6:	af00      	add	r7, sp, #0
9000b0d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000b0da:	687b      	ldr	r3, [r7, #4]
9000b0dc:	689b      	ldr	r3, [r3, #8]
9000b0de:	f023 0201 	bic.w	r2, r3, #1
9000b0e2:	687b      	ldr	r3, [r7, #4]
9000b0e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b0e6:	2300      	movs	r3, #0
}
9000b0e8:	4618      	mov	r0, r3
9000b0ea:	370c      	adds	r7, #12
9000b0ec:	46bd      	mov	sp, r7
9000b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0f2:	4770      	bx	lr

9000b0f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000b0f4:	b480      	push	{r7}
9000b0f6:	b085      	sub	sp, #20
9000b0f8:	af00      	add	r7, sp, #0
9000b0fa:	6078      	str	r0, [r7, #4]
9000b0fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000b0fe:	2300      	movs	r3, #0
9000b100:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b102:	68fb      	ldr	r3, [r7, #12]
9000b104:	3301      	adds	r3, #1
9000b106:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b108:	68fb      	ldr	r3, [r7, #12]
9000b10a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b10e:	d901      	bls.n	9000b114 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000b110:	2303      	movs	r3, #3
9000b112:	e01b      	b.n	9000b14c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b114:	687b      	ldr	r3, [r7, #4]
9000b116:	691b      	ldr	r3, [r3, #16]
9000b118:	2b00      	cmp	r3, #0
9000b11a:	daf2      	bge.n	9000b102 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000b11c:	2300      	movs	r3, #0
9000b11e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000b120:	683b      	ldr	r3, [r7, #0]
9000b122:	019b      	lsls	r3, r3, #6
9000b124:	f043 0220 	orr.w	r2, r3, #32
9000b128:	687b      	ldr	r3, [r7, #4]
9000b12a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b12c:	68fb      	ldr	r3, [r7, #12]
9000b12e:	3301      	adds	r3, #1
9000b130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b132:	68fb      	ldr	r3, [r7, #12]
9000b134:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b138:	d901      	bls.n	9000b13e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000b13a:	2303      	movs	r3, #3
9000b13c:	e006      	b.n	9000b14c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000b13e:	687b      	ldr	r3, [r7, #4]
9000b140:	691b      	ldr	r3, [r3, #16]
9000b142:	f003 0320 	and.w	r3, r3, #32
9000b146:	2b20      	cmp	r3, #32
9000b148:	d0f0      	beq.n	9000b12c <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000b14a:	2300      	movs	r3, #0
}
9000b14c:	4618      	mov	r0, r3
9000b14e:	3714      	adds	r7, #20
9000b150:	46bd      	mov	sp, r7
9000b152:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b156:	4770      	bx	lr

9000b158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000b158:	b480      	push	{r7}
9000b15a:	b085      	sub	sp, #20
9000b15c:	af00      	add	r7, sp, #0
9000b15e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000b160:	2300      	movs	r3, #0
9000b162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b164:	68fb      	ldr	r3, [r7, #12]
9000b166:	3301      	adds	r3, #1
9000b168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b16a:	68fb      	ldr	r3, [r7, #12]
9000b16c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b170:	d901      	bls.n	9000b176 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000b172:	2303      	movs	r3, #3
9000b174:	e018      	b.n	9000b1a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b176:	687b      	ldr	r3, [r7, #4]
9000b178:	691b      	ldr	r3, [r3, #16]
9000b17a:	2b00      	cmp	r3, #0
9000b17c:	daf2      	bge.n	9000b164 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000b17e:	2300      	movs	r3, #0
9000b180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000b182:	687b      	ldr	r3, [r7, #4]
9000b184:	2210      	movs	r2, #16
9000b186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b188:	68fb      	ldr	r3, [r7, #12]
9000b18a:	3301      	adds	r3, #1
9000b18c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b18e:	68fb      	ldr	r3, [r7, #12]
9000b190:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b194:	d901      	bls.n	9000b19a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000b196:	2303      	movs	r3, #3
9000b198:	e006      	b.n	9000b1a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b19a:	687b      	ldr	r3, [r7, #4]
9000b19c:	691b      	ldr	r3, [r3, #16]
9000b19e:	f003 0310 	and.w	r3, r3, #16
9000b1a2:	2b10      	cmp	r3, #16
9000b1a4:	d0f0      	beq.n	9000b188 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000b1a6:	2300      	movs	r3, #0
}
9000b1a8:	4618      	mov	r0, r3
9000b1aa:	3714      	adds	r7, #20
9000b1ac:	46bd      	mov	sp, r7
9000b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1b2:	4770      	bx	lr

9000b1b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000b1b4:	b480      	push	{r7}
9000b1b6:	b08b      	sub	sp, #44	@ 0x2c
9000b1b8:	af00      	add	r7, sp, #0
9000b1ba:	60f8      	str	r0, [r7, #12]
9000b1bc:	60b9      	str	r1, [r7, #8]
9000b1be:	4613      	mov	r3, r2
9000b1c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b1c2:	68fb      	ldr	r3, [r7, #12]
9000b1c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000b1c6:	68bb      	ldr	r3, [r7, #8]
9000b1c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000b1ca:	88fb      	ldrh	r3, [r7, #6]
9000b1cc:	089b      	lsrs	r3, r3, #2
9000b1ce:	b29b      	uxth	r3, r3
9000b1d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000b1d2:	88fb      	ldrh	r3, [r7, #6]
9000b1d4:	f003 0303 	and.w	r3, r3, #3
9000b1d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000b1da:	2300      	movs	r3, #0
9000b1dc:	623b      	str	r3, [r7, #32]
9000b1de:	e014      	b.n	9000b20a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000b1e0:	69bb      	ldr	r3, [r7, #24]
9000b1e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b1e6:	681a      	ldr	r2, [r3, #0]
9000b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1ea:	601a      	str	r2, [r3, #0]
    pDest++;
9000b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1ee:	3301      	adds	r3, #1
9000b1f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1f4:	3301      	adds	r3, #1
9000b1f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1fa:	3301      	adds	r3, #1
9000b1fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b200:	3301      	adds	r3, #1
9000b202:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000b204:	6a3b      	ldr	r3, [r7, #32]
9000b206:	3301      	adds	r3, #1
9000b208:	623b      	str	r3, [r7, #32]
9000b20a:	6a3a      	ldr	r2, [r7, #32]
9000b20c:	697b      	ldr	r3, [r7, #20]
9000b20e:	429a      	cmp	r2, r3
9000b210:	d3e6      	bcc.n	9000b1e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000b212:	8bfb      	ldrh	r3, [r7, #30]
9000b214:	2b00      	cmp	r3, #0
9000b216:	d01e      	beq.n	9000b256 <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000b218:	2300      	movs	r3, #0
9000b21a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000b21c:	69bb      	ldr	r3, [r7, #24]
9000b21e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b222:	461a      	mov	r2, r3
9000b224:	f107 0310 	add.w	r3, r7, #16
9000b228:	6812      	ldr	r2, [r2, #0]
9000b22a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000b22c:	693a      	ldr	r2, [r7, #16]
9000b22e:	6a3b      	ldr	r3, [r7, #32]
9000b230:	b2db      	uxtb	r3, r3
9000b232:	00db      	lsls	r3, r3, #3
9000b234:	fa22 f303 	lsr.w	r3, r2, r3
9000b238:	b2da      	uxtb	r2, r3
9000b23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b23c:	701a      	strb	r2, [r3, #0]
      i++;
9000b23e:	6a3b      	ldr	r3, [r7, #32]
9000b240:	3301      	adds	r3, #1
9000b242:	623b      	str	r3, [r7, #32]
      pDest++;
9000b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b246:	3301      	adds	r3, #1
9000b248:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000b24a:	8bfb      	ldrh	r3, [r7, #30]
9000b24c:	3b01      	subs	r3, #1
9000b24e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000b250:	8bfb      	ldrh	r3, [r7, #30]
9000b252:	2b00      	cmp	r3, #0
9000b254:	d1ea      	bne.n	9000b22c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000b256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000b258:	4618      	mov	r0, r3
9000b25a:	372c      	adds	r7, #44	@ 0x2c
9000b25c:	46bd      	mov	sp, r7
9000b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b262:	4770      	bx	lr

9000b264 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000b264:	b480      	push	{r7}
9000b266:	b085      	sub	sp, #20
9000b268:	af00      	add	r7, sp, #0
9000b26a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000b26c:	687b      	ldr	r3, [r7, #4]
9000b26e:	695b      	ldr	r3, [r3, #20]
9000b270:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000b272:	687b      	ldr	r3, [r7, #4]
9000b274:	699b      	ldr	r3, [r3, #24]
9000b276:	68fa      	ldr	r2, [r7, #12]
9000b278:	4013      	ands	r3, r2
9000b27a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000b27c:	68fb      	ldr	r3, [r7, #12]
}
9000b27e:	4618      	mov	r0, r3
9000b280:	3714      	adds	r7, #20
9000b282:	46bd      	mov	sp, r7
9000b284:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b288:	4770      	bx	lr

9000b28a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000b28a:	b480      	push	{r7}
9000b28c:	b085      	sub	sp, #20
9000b28e:	af00      	add	r7, sp, #0
9000b290:	6078      	str	r0, [r7, #4]
9000b292:	460b      	mov	r3, r1
9000b294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b296:	687b      	ldr	r3, [r7, #4]
9000b298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000b29a:	78fb      	ldrb	r3, [r7, #3]
9000b29c:	015a      	lsls	r2, r3, #5
9000b29e:	68fb      	ldr	r3, [r7, #12]
9000b2a0:	4413      	add	r3, r2
9000b2a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b2a6:	689b      	ldr	r3, [r3, #8]
9000b2a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000b2aa:	78fb      	ldrb	r3, [r7, #3]
9000b2ac:	015a      	lsls	r2, r3, #5
9000b2ae:	68fb      	ldr	r3, [r7, #12]
9000b2b0:	4413      	add	r3, r2
9000b2b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b2b6:	68db      	ldr	r3, [r3, #12]
9000b2b8:	68ba      	ldr	r2, [r7, #8]
9000b2ba:	4013      	ands	r3, r2
9000b2bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000b2be:	68bb      	ldr	r3, [r7, #8]
}
9000b2c0:	4618      	mov	r0, r3
9000b2c2:	3714      	adds	r7, #20
9000b2c4:	46bd      	mov	sp, r7
9000b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2ca:	4770      	bx	lr

9000b2cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000b2cc:	b480      	push	{r7}
9000b2ce:	b083      	sub	sp, #12
9000b2d0:	af00      	add	r7, sp, #0
9000b2d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000b2d4:	687b      	ldr	r3, [r7, #4]
9000b2d6:	695b      	ldr	r3, [r3, #20]
9000b2d8:	f003 0301 	and.w	r3, r3, #1
}
9000b2dc:	4618      	mov	r0, r3
9000b2de:	370c      	adds	r7, #12
9000b2e0:	46bd      	mov	sp, r7
9000b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2e6:	4770      	bx	lr

9000b2e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000b2e8:	b480      	push	{r7}
9000b2ea:	b085      	sub	sp, #20
9000b2ec:	af00      	add	r7, sp, #0
9000b2ee:	6078      	str	r0, [r7, #4]
9000b2f0:	460b      	mov	r3, r1
9000b2f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b2f4:	687b      	ldr	r3, [r7, #4]
9000b2f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000b2f8:	68fb      	ldr	r3, [r7, #12]
9000b2fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b2fe:	681b      	ldr	r3, [r3, #0]
9000b300:	68fa      	ldr	r2, [r7, #12]
9000b302:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000b306:	f023 0303 	bic.w	r3, r3, #3
9000b30a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000b30c:	68fb      	ldr	r3, [r7, #12]
9000b30e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b312:	681a      	ldr	r2, [r3, #0]
9000b314:	78fb      	ldrb	r3, [r7, #3]
9000b316:	f003 0303 	and.w	r3, r3, #3
9000b31a:	68f9      	ldr	r1, [r7, #12]
9000b31c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000b320:	4313      	orrs	r3, r2
9000b322:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000b324:	78fb      	ldrb	r3, [r7, #3]
9000b326:	2b01      	cmp	r3, #1
9000b328:	d107      	bne.n	9000b33a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000b32a:	68fb      	ldr	r3, [r7, #12]
9000b32c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b330:	461a      	mov	r2, r3
9000b332:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000b336:	6053      	str	r3, [r2, #4]
9000b338:	e00c      	b.n	9000b354 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000b33a:	78fb      	ldrb	r3, [r7, #3]
9000b33c:	2b02      	cmp	r3, #2
9000b33e:	d107      	bne.n	9000b350 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000b340:	68fb      	ldr	r3, [r7, #12]
9000b342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b346:	461a      	mov	r2, r3
9000b348:	f241 7370 	movw	r3, #6000	@ 0x1770
9000b34c:	6053      	str	r3, [r2, #4]
9000b34e:	e001      	b.n	9000b354 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000b350:	2301      	movs	r3, #1
9000b352:	e000      	b.n	9000b356 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000b354:	2300      	movs	r3, #0
}
9000b356:	4618      	mov	r0, r3
9000b358:	3714      	adds	r7, #20
9000b35a:	46bd      	mov	sp, r7
9000b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b360:	4770      	bx	lr

9000b362 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000b362:	b480      	push	{r7}
9000b364:	b085      	sub	sp, #20
9000b366:	af00      	add	r7, sp, #0
9000b368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b36a:	687b      	ldr	r3, [r7, #4]
9000b36c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000b36e:	68fb      	ldr	r3, [r7, #12]
9000b370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b374:	695b      	ldr	r3, [r3, #20]
9000b376:	b29b      	uxth	r3, r3
}
9000b378:	4618      	mov	r0, r3
9000b37a:	3714      	adds	r7, #20
9000b37c:	46bd      	mov	sp, r7
9000b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b382:	4770      	bx	lr

9000b384 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000b384:	b480      	push	{r7}
9000b386:	b089      	sub	sp, #36	@ 0x24
9000b388:	af00      	add	r7, sp, #0
9000b38a:	6078      	str	r0, [r7, #4]
9000b38c:	460b      	mov	r3, r1
9000b38e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b390:	687b      	ldr	r3, [r7, #4]
9000b392:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000b394:	78fb      	ldrb	r3, [r7, #3]
9000b396:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000b398:	2300      	movs	r3, #0
9000b39a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000b39c:	69bb      	ldr	r3, [r7, #24]
9000b39e:	015a      	lsls	r2, r3, #5
9000b3a0:	69fb      	ldr	r3, [r7, #28]
9000b3a2:	4413      	add	r3, r2
9000b3a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3a8:	681b      	ldr	r3, [r3, #0]
9000b3aa:	0c9b      	lsrs	r3, r3, #18
9000b3ac:	f003 0303 	and.w	r3, r3, #3
9000b3b0:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000b3b2:	69bb      	ldr	r3, [r7, #24]
9000b3b4:	015a      	lsls	r2, r3, #5
9000b3b6:	69fb      	ldr	r3, [r7, #28]
9000b3b8:	4413      	add	r3, r2
9000b3ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3be:	681b      	ldr	r3, [r3, #0]
9000b3c0:	0fdb      	lsrs	r3, r3, #31
9000b3c2:	f003 0301 	and.w	r3, r3, #1
9000b3c6:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000b3c8:	69bb      	ldr	r3, [r7, #24]
9000b3ca:	015a      	lsls	r2, r3, #5
9000b3cc:	69fb      	ldr	r3, [r7, #28]
9000b3ce:	4413      	add	r3, r2
9000b3d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3d4:	685b      	ldr	r3, [r3, #4]
9000b3d6:	0fdb      	lsrs	r3, r3, #31
9000b3d8:	f003 0301 	and.w	r3, r3, #1
9000b3dc:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000b3de:	687b      	ldr	r3, [r7, #4]
9000b3e0:	689b      	ldr	r3, [r3, #8]
9000b3e2:	f003 0320 	and.w	r3, r3, #32
9000b3e6:	2b20      	cmp	r3, #32
9000b3e8:	d10d      	bne.n	9000b406 <USB_HC_Halt+0x82>
9000b3ea:	68fb      	ldr	r3, [r7, #12]
9000b3ec:	2b00      	cmp	r3, #0
9000b3ee:	d10a      	bne.n	9000b406 <USB_HC_Halt+0x82>
9000b3f0:	693b      	ldr	r3, [r7, #16]
9000b3f2:	2b00      	cmp	r3, #0
9000b3f4:	d005      	beq.n	9000b402 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000b3f6:	697b      	ldr	r3, [r7, #20]
9000b3f8:	2b01      	cmp	r3, #1
9000b3fa:	d002      	beq.n	9000b402 <USB_HC_Halt+0x7e>
9000b3fc:	697b      	ldr	r3, [r7, #20]
9000b3fe:	2b03      	cmp	r3, #3
9000b400:	d101      	bne.n	9000b406 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000b402:	2300      	movs	r3, #0
9000b404:	e0d8      	b.n	9000b5b8 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000b406:	697b      	ldr	r3, [r7, #20]
9000b408:	2b00      	cmp	r3, #0
9000b40a:	d002      	beq.n	9000b412 <USB_HC_Halt+0x8e>
9000b40c:	697b      	ldr	r3, [r7, #20]
9000b40e:	2b02      	cmp	r3, #2
9000b410:	d173      	bne.n	9000b4fa <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b412:	69bb      	ldr	r3, [r7, #24]
9000b414:	015a      	lsls	r2, r3, #5
9000b416:	69fb      	ldr	r3, [r7, #28]
9000b418:	4413      	add	r3, r2
9000b41a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b41e:	681b      	ldr	r3, [r3, #0]
9000b420:	69ba      	ldr	r2, [r7, #24]
9000b422:	0151      	lsls	r1, r2, #5
9000b424:	69fa      	ldr	r2, [r7, #28]
9000b426:	440a      	add	r2, r1
9000b428:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b42c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b430:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b432:	687b      	ldr	r3, [r7, #4]
9000b434:	689b      	ldr	r3, [r3, #8]
9000b436:	f003 0320 	and.w	r3, r3, #32
9000b43a:	2b00      	cmp	r3, #0
9000b43c:	d14a      	bne.n	9000b4d4 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b43e:	687b      	ldr	r3, [r7, #4]
9000b440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b442:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b446:	2b00      	cmp	r3, #0
9000b448:	d133      	bne.n	9000b4b2 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b44a:	69bb      	ldr	r3, [r7, #24]
9000b44c:	015a      	lsls	r2, r3, #5
9000b44e:	69fb      	ldr	r3, [r7, #28]
9000b450:	4413      	add	r3, r2
9000b452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b456:	681b      	ldr	r3, [r3, #0]
9000b458:	69ba      	ldr	r2, [r7, #24]
9000b45a:	0151      	lsls	r1, r2, #5
9000b45c:	69fa      	ldr	r2, [r7, #28]
9000b45e:	440a      	add	r2, r1
9000b460:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b464:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b468:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b46a:	69bb      	ldr	r3, [r7, #24]
9000b46c:	015a      	lsls	r2, r3, #5
9000b46e:	69fb      	ldr	r3, [r7, #28]
9000b470:	4413      	add	r3, r2
9000b472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b476:	681b      	ldr	r3, [r3, #0]
9000b478:	69ba      	ldr	r2, [r7, #24]
9000b47a:	0151      	lsls	r1, r2, #5
9000b47c:	69fa      	ldr	r2, [r7, #28]
9000b47e:	440a      	add	r2, r1
9000b480:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b484:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b488:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b48a:	68bb      	ldr	r3, [r7, #8]
9000b48c:	3301      	adds	r3, #1
9000b48e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b490:	68bb      	ldr	r3, [r7, #8]
9000b492:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b496:	d82e      	bhi.n	9000b4f6 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b498:	69bb      	ldr	r3, [r7, #24]
9000b49a:	015a      	lsls	r2, r3, #5
9000b49c:	69fb      	ldr	r3, [r7, #28]
9000b49e:	4413      	add	r3, r2
9000b4a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4a4:	681b      	ldr	r3, [r3, #0]
9000b4a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b4aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b4ae:	d0ec      	beq.n	9000b48a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4b0:	e081      	b.n	9000b5b6 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b4b2:	69bb      	ldr	r3, [r7, #24]
9000b4b4:	015a      	lsls	r2, r3, #5
9000b4b6:	69fb      	ldr	r3, [r7, #28]
9000b4b8:	4413      	add	r3, r2
9000b4ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4be:	681b      	ldr	r3, [r3, #0]
9000b4c0:	69ba      	ldr	r2, [r7, #24]
9000b4c2:	0151      	lsls	r1, r2, #5
9000b4c4:	69fa      	ldr	r2, [r7, #28]
9000b4c6:	440a      	add	r2, r1
9000b4c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b4d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4d2:	e070      	b.n	9000b5b6 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b4d4:	69bb      	ldr	r3, [r7, #24]
9000b4d6:	015a      	lsls	r2, r3, #5
9000b4d8:	69fb      	ldr	r3, [r7, #28]
9000b4da:	4413      	add	r3, r2
9000b4dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4e0:	681b      	ldr	r3, [r3, #0]
9000b4e2:	69ba      	ldr	r2, [r7, #24]
9000b4e4:	0151      	lsls	r1, r2, #5
9000b4e6:	69fa      	ldr	r2, [r7, #28]
9000b4e8:	440a      	add	r2, r1
9000b4ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b4f2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4f4:	e05f      	b.n	9000b5b6 <USB_HC_Halt+0x232>
            break;
9000b4f6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4f8:	e05d      	b.n	9000b5b6 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b4fa:	69bb      	ldr	r3, [r7, #24]
9000b4fc:	015a      	lsls	r2, r3, #5
9000b4fe:	69fb      	ldr	r3, [r7, #28]
9000b500:	4413      	add	r3, r2
9000b502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b506:	681b      	ldr	r3, [r3, #0]
9000b508:	69ba      	ldr	r2, [r7, #24]
9000b50a:	0151      	lsls	r1, r2, #5
9000b50c:	69fa      	ldr	r2, [r7, #28]
9000b50e:	440a      	add	r2, r1
9000b510:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b514:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b518:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b51a:	69fb      	ldr	r3, [r7, #28]
9000b51c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b520:	691b      	ldr	r3, [r3, #16]
9000b522:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b526:	2b00      	cmp	r3, #0
9000b528:	d133      	bne.n	9000b592 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b52a:	69bb      	ldr	r3, [r7, #24]
9000b52c:	015a      	lsls	r2, r3, #5
9000b52e:	69fb      	ldr	r3, [r7, #28]
9000b530:	4413      	add	r3, r2
9000b532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b536:	681b      	ldr	r3, [r3, #0]
9000b538:	69ba      	ldr	r2, [r7, #24]
9000b53a:	0151      	lsls	r1, r2, #5
9000b53c:	69fa      	ldr	r2, [r7, #28]
9000b53e:	440a      	add	r2, r1
9000b540:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b544:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b548:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b54a:	69bb      	ldr	r3, [r7, #24]
9000b54c:	015a      	lsls	r2, r3, #5
9000b54e:	69fb      	ldr	r3, [r7, #28]
9000b550:	4413      	add	r3, r2
9000b552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b556:	681b      	ldr	r3, [r3, #0]
9000b558:	69ba      	ldr	r2, [r7, #24]
9000b55a:	0151      	lsls	r1, r2, #5
9000b55c:	69fa      	ldr	r2, [r7, #28]
9000b55e:	440a      	add	r2, r1
9000b560:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b564:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b568:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b56a:	68bb      	ldr	r3, [r7, #8]
9000b56c:	3301      	adds	r3, #1
9000b56e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b570:	68bb      	ldr	r3, [r7, #8]
9000b572:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b576:	d81d      	bhi.n	9000b5b4 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b578:	69bb      	ldr	r3, [r7, #24]
9000b57a:	015a      	lsls	r2, r3, #5
9000b57c:	69fb      	ldr	r3, [r7, #28]
9000b57e:	4413      	add	r3, r2
9000b580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b584:	681b      	ldr	r3, [r3, #0]
9000b586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b58a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b58e:	d0ec      	beq.n	9000b56a <USB_HC_Halt+0x1e6>
9000b590:	e011      	b.n	9000b5b6 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b592:	69bb      	ldr	r3, [r7, #24]
9000b594:	015a      	lsls	r2, r3, #5
9000b596:	69fb      	ldr	r3, [r7, #28]
9000b598:	4413      	add	r3, r2
9000b59a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b59e:	681b      	ldr	r3, [r3, #0]
9000b5a0:	69ba      	ldr	r2, [r7, #24]
9000b5a2:	0151      	lsls	r1, r2, #5
9000b5a4:	69fa      	ldr	r2, [r7, #28]
9000b5a6:	440a      	add	r2, r1
9000b5a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b5ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b5b0:	6013      	str	r3, [r2, #0]
9000b5b2:	e000      	b.n	9000b5b6 <USB_HC_Halt+0x232>
          break;
9000b5b4:	bf00      	nop
    }
  }

  return HAL_OK;
9000b5b6:	2300      	movs	r3, #0
}
9000b5b8:	4618      	mov	r0, r3
9000b5ba:	3724      	adds	r7, #36	@ 0x24
9000b5bc:	46bd      	mov	sp, r7
9000b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b5c2:	4770      	bx	lr

9000b5c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b5c4:	b580      	push	{r7, lr}
9000b5c6:	b088      	sub	sp, #32
9000b5c8:	af00      	add	r7, sp, #0
9000b5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b5cc:	2300      	movs	r3, #0
9000b5ce:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b5d0:	687b      	ldr	r3, [r7, #4]
9000b5d2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b5d4:	2300      	movs	r3, #0
9000b5d6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b5d8:	6878      	ldr	r0, [r7, #4]
9000b5da:	f7ff fd7a 	bl	9000b0d2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b5de:	2110      	movs	r1, #16
9000b5e0:	6878      	ldr	r0, [r7, #4]
9000b5e2:	f7ff fd87 	bl	9000b0f4 <USB_FlushTxFifo>
9000b5e6:	4603      	mov	r3, r0
9000b5e8:	2b00      	cmp	r3, #0
9000b5ea:	d001      	beq.n	9000b5f0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b5ec:	2301      	movs	r3, #1
9000b5ee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b5f0:	6878      	ldr	r0, [r7, #4]
9000b5f2:	f7ff fdb1 	bl	9000b158 <USB_FlushRxFifo>
9000b5f6:	4603      	mov	r3, r0
9000b5f8:	2b00      	cmp	r3, #0
9000b5fa:	d001      	beq.n	9000b600 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b5fc:	2301      	movs	r3, #1
9000b5fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b600:	2300      	movs	r3, #0
9000b602:	61bb      	str	r3, [r7, #24]
9000b604:	e01f      	b.n	9000b646 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b606:	69bb      	ldr	r3, [r7, #24]
9000b608:	015a      	lsls	r2, r3, #5
9000b60a:	697b      	ldr	r3, [r7, #20]
9000b60c:	4413      	add	r3, r2
9000b60e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b612:	681b      	ldr	r3, [r3, #0]
9000b614:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b616:	693b      	ldr	r3, [r7, #16]
9000b618:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b61c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b61e:	693b      	ldr	r3, [r7, #16]
9000b620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b624:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b626:	693b      	ldr	r3, [r7, #16]
9000b628:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b62c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b62e:	69bb      	ldr	r3, [r7, #24]
9000b630:	015a      	lsls	r2, r3, #5
9000b632:	697b      	ldr	r3, [r7, #20]
9000b634:	4413      	add	r3, r2
9000b636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b63a:	461a      	mov	r2, r3
9000b63c:	693b      	ldr	r3, [r7, #16]
9000b63e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b640:	69bb      	ldr	r3, [r7, #24]
9000b642:	3301      	adds	r3, #1
9000b644:	61bb      	str	r3, [r7, #24]
9000b646:	69bb      	ldr	r3, [r7, #24]
9000b648:	2b0f      	cmp	r3, #15
9000b64a:	d9dc      	bls.n	9000b606 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b64c:	2300      	movs	r3, #0
9000b64e:	61bb      	str	r3, [r7, #24]
9000b650:	e034      	b.n	9000b6bc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b652:	69bb      	ldr	r3, [r7, #24]
9000b654:	015a      	lsls	r2, r3, #5
9000b656:	697b      	ldr	r3, [r7, #20]
9000b658:	4413      	add	r3, r2
9000b65a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b65e:	681b      	ldr	r3, [r3, #0]
9000b660:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b662:	693b      	ldr	r3, [r7, #16]
9000b664:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b668:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b66a:	693b      	ldr	r3, [r7, #16]
9000b66c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b670:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b672:	693b      	ldr	r3, [r7, #16]
9000b674:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b678:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b67a:	69bb      	ldr	r3, [r7, #24]
9000b67c:	015a      	lsls	r2, r3, #5
9000b67e:	697b      	ldr	r3, [r7, #20]
9000b680:	4413      	add	r3, r2
9000b682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b686:	461a      	mov	r2, r3
9000b688:	693b      	ldr	r3, [r7, #16]
9000b68a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b68c:	68fb      	ldr	r3, [r7, #12]
9000b68e:	3301      	adds	r3, #1
9000b690:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b692:	68fb      	ldr	r3, [r7, #12]
9000b694:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b698:	d80c      	bhi.n	9000b6b4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b69a:	69bb      	ldr	r3, [r7, #24]
9000b69c:	015a      	lsls	r2, r3, #5
9000b69e:	697b      	ldr	r3, [r7, #20]
9000b6a0:	4413      	add	r3, r2
9000b6a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b6a6:	681b      	ldr	r3, [r3, #0]
9000b6a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b6ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b6b0:	d0ec      	beq.n	9000b68c <USB_StopHost+0xc8>
9000b6b2:	e000      	b.n	9000b6b6 <USB_StopHost+0xf2>
        break;
9000b6b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b6b6:	69bb      	ldr	r3, [r7, #24]
9000b6b8:	3301      	adds	r3, #1
9000b6ba:	61bb      	str	r3, [r7, #24]
9000b6bc:	69bb      	ldr	r3, [r7, #24]
9000b6be:	2b0f      	cmp	r3, #15
9000b6c0:	d9c7      	bls.n	9000b652 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b6c2:	697b      	ldr	r3, [r7, #20]
9000b6c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b6c8:	461a      	mov	r2, r3
9000b6ca:	f04f 33ff 	mov.w	r3, #4294967295
9000b6ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b6d0:	687b      	ldr	r3, [r7, #4]
9000b6d2:	f04f 32ff 	mov.w	r2, #4294967295
9000b6d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b6d8:	6878      	ldr	r0, [r7, #4]
9000b6da:	f7ff fce9 	bl	9000b0b0 <USB_EnableGlobalInt>

  return ret;
9000b6de:	7ffb      	ldrb	r3, [r7, #31]
}
9000b6e0:	4618      	mov	r0, r3
9000b6e2:	3720      	adds	r7, #32
9000b6e4:	46bd      	mov	sp, r7
9000b6e6:	bd80      	pop	{r7, pc}

9000b6e8 <setAllRowsInactive>:
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;
KeyboardButton receivedChar;

void setAllRowsInactive(void)
{
9000b6e8:	b580      	push	{r7, lr}
9000b6ea:	b082      	sub	sp, #8
9000b6ec:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000b6ee:	2300      	movs	r3, #0
9000b6f0:	607b      	str	r3, [r7, #4]
9000b6f2:	e00f      	b.n	9000b714 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000b6f4:	4a0b      	ldr	r2, [pc, #44]	@ (9000b724 <setAllRowsInactive+0x3c>)
9000b6f6:	687b      	ldr	r3, [r7, #4]
9000b6f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b6fc:	4a09      	ldr	r2, [pc, #36]	@ (9000b724 <setAllRowsInactive+0x3c>)
9000b6fe:	687b      	ldr	r3, [r7, #4]
9000b700:	00db      	lsls	r3, r3, #3
9000b702:	4413      	add	r3, r2
9000b704:	889b      	ldrh	r3, [r3, #4]
9000b706:	2200      	movs	r2, #0
9000b708:	4619      	mov	r1, r3
9000b70a:	f7f8 fc13 	bl	90003f34 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000b70e:	687b      	ldr	r3, [r7, #4]
9000b710:	3301      	adds	r3, #1
9000b712:	607b      	str	r3, [r7, #4]
9000b714:	687b      	ldr	r3, [r7, #4]
9000b716:	2b04      	cmp	r3, #4
9000b718:	ddec      	ble.n	9000b6f4 <setAllRowsInactive+0xc>
    }
}
9000b71a:	bf00      	nop
9000b71c:	bf00      	nop
9000b71e:	3708      	adds	r7, #8
9000b720:	46bd      	mov	sp, r7
9000b722:	bd80      	pop	{r7, pc}
9000b724:	20000010 	.word	0x20000010

9000b728 <setRowActive>:

void setRowActive(int row)
{
9000b728:	b580      	push	{r7, lr}
9000b72a:	b082      	sub	sp, #8
9000b72c:	af00      	add	r7, sp, #0
9000b72e:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000b730:	687b      	ldr	r3, [r7, #4]
9000b732:	2b00      	cmp	r3, #0
9000b734:	db12      	blt.n	9000b75c <setRowActive+0x34>
9000b736:	687b      	ldr	r3, [r7, #4]
9000b738:	2b04      	cmp	r3, #4
9000b73a:	dc0f      	bgt.n	9000b75c <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000b73c:	f7ff ffd4 	bl	9000b6e8 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000b740:	4a08      	ldr	r2, [pc, #32]	@ (9000b764 <setRowActive+0x3c>)
9000b742:	687b      	ldr	r3, [r7, #4]
9000b744:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b748:	4a06      	ldr	r2, [pc, #24]	@ (9000b764 <setRowActive+0x3c>)
9000b74a:	687b      	ldr	r3, [r7, #4]
9000b74c:	00db      	lsls	r3, r3, #3
9000b74e:	4413      	add	r3, r2
9000b750:	889b      	ldrh	r3, [r3, #4]
9000b752:	2201      	movs	r2, #1
9000b754:	4619      	mov	r1, r3
9000b756:	f7f8 fbed 	bl	90003f34 <HAL_GPIO_WritePin>
9000b75a:	e000      	b.n	9000b75e <setRowActive+0x36>
        return;
9000b75c:	bf00      	nop
}
9000b75e:	3708      	adds	r7, #8
9000b760:	46bd      	mov	sp, r7
9000b762:	bd80      	pop	{r7, pc}
9000b764:	20000010 	.word	0x20000010

9000b768 <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
9000b768:	b580      	push	{r7, lr}
9000b76a:	b084      	sub	sp, #16
9000b76c:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000b76e:	2300      	movs	r3, #0
9000b770:	60fb      	str	r3, [r7, #12]
9000b772:	e04e      	b.n	9000b812 <ReadFlexiKeyboard+0xaa>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000b774:	68f8      	ldr	r0, [r7, #12]
9000b776:	f7ff ffd7 	bl	9000b728 <setRowActive>
        HAL_Delay(10);         // Small delay for settling
9000b77a:	200a      	movs	r0, #10
9000b77c:	f7f7 fd74 	bl	90003268 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000b780:	2300      	movs	r3, #0
9000b782:	60bb      	str	r3, [r7, #8]
9000b784:	e03f      	b.n	9000b806 <ReadFlexiKeyboard+0x9e>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000b786:	4a27      	ldr	r2, [pc, #156]	@ (9000b824 <ReadFlexiKeyboard+0xbc>)
9000b788:	68bb      	ldr	r3, [r7, #8]
9000b78a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000b78e:	4925      	ldr	r1, [pc, #148]	@ (9000b824 <ReadFlexiKeyboard+0xbc>)
9000b790:	68bb      	ldr	r3, [r7, #8]
9000b792:	00db      	lsls	r3, r3, #3
9000b794:	440b      	add	r3, r1
9000b796:	889b      	ldrh	r3, [r3, #4]
9000b798:	4619      	mov	r1, r3
9000b79a:	4610      	mov	r0, r2
9000b79c:	f7f8 fbb2 	bl	90003f04 <HAL_GPIO_ReadPin>
9000b7a0:	4603      	mov	r3, r0
9000b7a2:	2b01      	cmp	r3, #1
9000b7a4:	d12c      	bne.n	9000b800 <ReadFlexiKeyboard+0x98>
            {
                uint32_t now = HAL_GetTick();
9000b7a6:	f7f7 fd53 	bl	90003250 <HAL_GetTick>
9000b7aa:	6078      	str	r0, [r7, #4]

                // Debounce/repeat suppression
                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) {
9000b7ac:	4b1e      	ldr	r3, [pc, #120]	@ (9000b828 <ReadFlexiKeyboard+0xc0>)
9000b7ae:	681b      	ldr	r3, [r3, #0]
9000b7b0:	68fa      	ldr	r2, [r7, #12]
9000b7b2:	429a      	cmp	r2, r3
9000b7b4:	d10d      	bne.n	9000b7d2 <ReadFlexiKeyboard+0x6a>
9000b7b6:	4b1d      	ldr	r3, [pc, #116]	@ (9000b82c <ReadFlexiKeyboard+0xc4>)
9000b7b8:	681b      	ldr	r3, [r3, #0]
9000b7ba:	68ba      	ldr	r2, [r7, #8]
9000b7bc:	429a      	cmp	r2, r3
9000b7be:	d108      	bne.n	9000b7d2 <ReadFlexiKeyboard+0x6a>
9000b7c0:	4b1b      	ldr	r3, [pc, #108]	@ (9000b830 <ReadFlexiKeyboard+0xc8>)
9000b7c2:	681b      	ldr	r3, [r3, #0]
9000b7c4:	687a      	ldr	r2, [r7, #4]
9000b7c6:	1ad3      	subs	r3, r2, r3
9000b7c8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
9000b7cc:	d201      	bcs.n	9000b7d2 <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
9000b7ce:	234e      	movs	r3, #78	@ 0x4e
9000b7d0:	e023      	b.n	9000b81a <ReadFlexiKeyboard+0xb2>
                }

                lastRow = row;
9000b7d2:	4a15      	ldr	r2, [pc, #84]	@ (9000b828 <ReadFlexiKeyboard+0xc0>)
9000b7d4:	68fb      	ldr	r3, [r7, #12]
9000b7d6:	6013      	str	r3, [r2, #0]
                lastCol = col;
9000b7d8:	4a14      	ldr	r2, [pc, #80]	@ (9000b82c <ReadFlexiKeyboard+0xc4>)
9000b7da:	68bb      	ldr	r3, [r7, #8]
9000b7dc:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
9000b7de:	4a14      	ldr	r2, [pc, #80]	@ (9000b830 <ReadFlexiKeyboard+0xc8>)
9000b7e0:	687b      	ldr	r3, [r7, #4]
9000b7e2:	6013      	str	r3, [r2, #0]

                receivedChar = keymap[row][col];
9000b7e4:	4913      	ldr	r1, [pc, #76]	@ (9000b834 <ReadFlexiKeyboard+0xcc>)
9000b7e6:	68fa      	ldr	r2, [r7, #12]
9000b7e8:	4613      	mov	r3, r2
9000b7ea:	009b      	lsls	r3, r3, #2
9000b7ec:	4413      	add	r3, r2
9000b7ee:	18ca      	adds	r2, r1, r3
9000b7f0:	68bb      	ldr	r3, [r7, #8]
9000b7f2:	4413      	add	r3, r2
9000b7f4:	781a      	ldrb	r2, [r3, #0]
9000b7f6:	4b10      	ldr	r3, [pc, #64]	@ (9000b838 <ReadFlexiKeyboard+0xd0>)
9000b7f8:	701a      	strb	r2, [r3, #0]
                //printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
                return receivedChar;
9000b7fa:	4b0f      	ldr	r3, [pc, #60]	@ (9000b838 <ReadFlexiKeyboard+0xd0>)
9000b7fc:	781b      	ldrb	r3, [r3, #0]
9000b7fe:	e00c      	b.n	9000b81a <ReadFlexiKeyboard+0xb2>
        for (int col = 0; col < NUM_COLS; col++)
9000b800:	68bb      	ldr	r3, [r7, #8]
9000b802:	3301      	adds	r3, #1
9000b804:	60bb      	str	r3, [r7, #8]
9000b806:	68bb      	ldr	r3, [r7, #8]
9000b808:	2b04      	cmp	r3, #4
9000b80a:	ddbc      	ble.n	9000b786 <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000b80c:	68fb      	ldr	r3, [r7, #12]
9000b80e:	3301      	adds	r3, #1
9000b810:	60fb      	str	r3, [r7, #12]
9000b812:	68fb      	ldr	r3, [r7, #12]
9000b814:	2b04      	cmp	r3, #4
9000b816:	ddad      	ble.n	9000b774 <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
9000b818:	234e      	movs	r3, #78	@ 0x4e
}
9000b81a:	4618      	mov	r0, r3
9000b81c:	3710      	adds	r7, #16
9000b81e:	46bd      	mov	sp, r7
9000b820:	bd80      	pop	{r7, pc}
9000b822:	bf00      	nop
9000b824:	20000038 	.word	0x20000038
9000b828:	20000060 	.word	0x20000060
9000b82c:	20000064 	.word	0x20000064
9000b830:	200012d8 	.word	0x200012d8
9000b834:	9000d788 	.word	0x9000d788
9000b838:	200012dc 	.word	0x200012dc

9000b83c <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000b83c:	b580      	push	{r7, lr}
9000b83e:	b090      	sub	sp, #64	@ 0x40
9000b840:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000b842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b846:	2200      	movs	r2, #0
9000b848:	601a      	str	r2, [r3, #0]
9000b84a:	605a      	str	r2, [r3, #4]
9000b84c:	609a      	str	r2, [r3, #8]
9000b84e:	60da      	str	r2, [r3, #12]
9000b850:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000b852:	4b5c      	ldr	r3, [pc, #368]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b858:	4a5a      	ldr	r2, [pc, #360]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b85a:	f043 0301 	orr.w	r3, r3, #1
9000b85e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b862:	4b58      	ldr	r3, [pc, #352]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b868:	f003 0301 	and.w	r3, r3, #1
9000b86c:	623b      	str	r3, [r7, #32]
9000b86e:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000b870:	4b54      	ldr	r3, [pc, #336]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b876:	4a53      	ldr	r2, [pc, #332]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b878:	f043 0302 	orr.w	r3, r3, #2
9000b87c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b880:	4b50      	ldr	r3, [pc, #320]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b886:	f003 0302 	and.w	r3, r3, #2
9000b88a:	61fb      	str	r3, [r7, #28]
9000b88c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000b88e:	4b4d      	ldr	r3, [pc, #308]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b894:	4a4b      	ldr	r2, [pc, #300]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b896:	f043 0308 	orr.w	r3, r3, #8
9000b89a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b89e:	4b49      	ldr	r3, [pc, #292]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8a4:	f003 0308 	and.w	r3, r3, #8
9000b8a8:	61bb      	str	r3, [r7, #24]
9000b8aa:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000b8ac:	4b45      	ldr	r3, [pc, #276]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8b2:	4a44      	ldr	r2, [pc, #272]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8b4:	f043 0310 	orr.w	r3, r3, #16
9000b8b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8bc:	4b41      	ldr	r3, [pc, #260]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8c2:	f003 0310 	and.w	r3, r3, #16
9000b8c6:	617b      	str	r3, [r7, #20]
9000b8c8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000b8ca:	4b3e      	ldr	r3, [pc, #248]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8d0:	4a3c      	ldr	r2, [pc, #240]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000b8d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8da:	4b3a      	ldr	r3, [pc, #232]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b8e4:	613b      	str	r3, [r7, #16]
9000b8e6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000b8e8:	4b36      	ldr	r3, [pc, #216]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8ee:	4a35      	ldr	r2, [pc, #212]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000b8f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8f8:	4b32      	ldr	r3, [pc, #200]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b8fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b902:	60fb      	str	r3, [r7, #12]
9000b904:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000b906:	4b2f      	ldr	r3, [pc, #188]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b90c:	4a2d      	ldr	r2, [pc, #180]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b90e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000b912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b916:	4b2b      	ldr	r3, [pc, #172]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b91c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000b920:	60bb      	str	r3, [r7, #8]
9000b922:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000b924:	4b27      	ldr	r3, [pc, #156]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b92a:	4a26      	ldr	r2, [pc, #152]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b92c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000b930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b934:	4b23      	ldr	r3, [pc, #140]	@ (9000b9c4 <InitFlexiKeyboard+0x188>)
9000b936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b93a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000b93e:	607b      	str	r3, [r7, #4]
9000b940:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000b942:	2301      	movs	r3, #1
9000b944:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000b946:	2300      	movs	r3, #0
9000b948:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000b94a:	2300      	movs	r3, #0
9000b94c:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000b94e:	2300      	movs	r3, #0
9000b950:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b952:	e012      	b.n	9000b97a <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000b954:	4a1c      	ldr	r2, [pc, #112]	@ (9000b9c8 <InitFlexiKeyboard+0x18c>)
9000b956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b958:	00db      	lsls	r3, r3, #3
9000b95a:	4413      	add	r3, r2
9000b95c:	889b      	ldrh	r3, [r3, #4]
9000b95e:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000b960:	4a19      	ldr	r2, [pc, #100]	@ (9000b9c8 <InitFlexiKeyboard+0x18c>)
9000b962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b968:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b96c:	4611      	mov	r1, r2
9000b96e:	4618      	mov	r0, r3
9000b970:	f7f8 f918 	bl	90003ba4 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000b974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b976:	3301      	adds	r3, #1
9000b978:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b97c:	2b04      	cmp	r3, #4
9000b97e:	dde9      	ble.n	9000b954 <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000b980:	2300      	movs	r3, #0
9000b982:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000b984:	2302      	movs	r3, #2
9000b986:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000b988:	2300      	movs	r3, #0
9000b98a:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b98c:	e012      	b.n	9000b9b4 <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000b98e:	4a0f      	ldr	r2, [pc, #60]	@ (9000b9cc <InitFlexiKeyboard+0x190>)
9000b990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b992:	00db      	lsls	r3, r3, #3
9000b994:	4413      	add	r3, r2
9000b996:	889b      	ldrh	r3, [r3, #4]
9000b998:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000b99a:	4a0c      	ldr	r2, [pc, #48]	@ (9000b9cc <InitFlexiKeyboard+0x190>)
9000b99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b99e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b9a2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b9a6:	4611      	mov	r1, r2
9000b9a8:	4618      	mov	r0, r3
9000b9aa:	f7f8 f8fb 	bl	90003ba4 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000b9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b9b0:	3301      	adds	r3, #1
9000b9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b9b6:	2b04      	cmp	r3, #4
9000b9b8:	dde9      	ble.n	9000b98e <InitFlexiKeyboard+0x152>
	}
}
9000b9ba:	bf00      	nop
9000b9bc:	bf00      	nop
9000b9be:	3740      	adds	r7, #64	@ 0x40
9000b9c0:	46bd      	mov	sp, r7
9000b9c2:	bd80      	pop	{r7, pc}
9000b9c4:	58024400 	.word	0x58024400
9000b9c8:	20000010 	.word	0x20000010
9000b9cc:	20000038 	.word	0x20000038

9000b9d0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000b9d0:	b580      	push	{r7, lr}
9000b9d2:	b082      	sub	sp, #8
9000b9d4:	af00      	add	r7, sp, #0
9000b9d6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000b9d8:	687b      	ldr	r3, [r7, #4]
9000b9da:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000b9de:	1c5a      	adds	r2, r3, #1
9000b9e0:	687b      	ldr	r3, [r7, #4]
9000b9e2:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000b9e6:	6878      	ldr	r0, [r7, #4]
9000b9e8:	f000 f804 	bl	9000b9f4 <USBH_HandleSof>
}
9000b9ec:	bf00      	nop
9000b9ee:	3708      	adds	r7, #8
9000b9f0:	46bd      	mov	sp, r7
9000b9f2:	bd80      	pop	{r7, pc}

9000b9f4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000b9f4:	b580      	push	{r7, lr}
9000b9f6:	b082      	sub	sp, #8
9000b9f8:	af00      	add	r7, sp, #0
9000b9fa:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000b9fc:	687b      	ldr	r3, [r7, #4]
9000b9fe:	781b      	ldrb	r3, [r3, #0]
9000ba00:	b2db      	uxtb	r3, r3
9000ba02:	2b0b      	cmp	r3, #11
9000ba04:	d10a      	bne.n	9000ba1c <USBH_HandleSof+0x28>
9000ba06:	687b      	ldr	r3, [r7, #4]
9000ba08:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000ba0c:	2b00      	cmp	r3, #0
9000ba0e:	d005      	beq.n	9000ba1c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000ba10:	687b      	ldr	r3, [r7, #4]
9000ba12:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000ba16:	699b      	ldr	r3, [r3, #24]
9000ba18:	6878      	ldr	r0, [r7, #4]
9000ba1a:	4798      	blx	r3
  }
}
9000ba1c:	bf00      	nop
9000ba1e:	3708      	adds	r7, #8
9000ba20:	46bd      	mov	sp, r7
9000ba22:	bd80      	pop	{r7, pc}

9000ba24 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000ba24:	b480      	push	{r7}
9000ba26:	b083      	sub	sp, #12
9000ba28:	af00      	add	r7, sp, #0
9000ba2a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000ba2c:	687b      	ldr	r3, [r7, #4]
9000ba2e:	2201      	movs	r2, #1
9000ba30:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000ba34:	bf00      	nop
}
9000ba36:	370c      	adds	r7, #12
9000ba38:	46bd      	mov	sp, r7
9000ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba3e:	4770      	bx	lr

9000ba40 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000ba40:	b480      	push	{r7}
9000ba42:	b083      	sub	sp, #12
9000ba44:	af00      	add	r7, sp, #0
9000ba46:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000ba48:	687b      	ldr	r3, [r7, #4]
9000ba4a:	2200      	movs	r2, #0
9000ba4c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000ba50:	687b      	ldr	r3, [r7, #4]
9000ba52:	2201      	movs	r2, #1
9000ba54:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000ba58:	bf00      	nop
}
9000ba5a:	370c      	adds	r7, #12
9000ba5c:	46bd      	mov	sp, r7
9000ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba62:	4770      	bx	lr

9000ba64 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000ba64:	b480      	push	{r7}
9000ba66:	b083      	sub	sp, #12
9000ba68:	af00      	add	r7, sp, #0
9000ba6a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000ba6c:	687b      	ldr	r3, [r7, #4]
9000ba6e:	2201      	movs	r2, #1
9000ba70:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000ba74:	687b      	ldr	r3, [r7, #4]
9000ba76:	2200      	movs	r2, #0
9000ba78:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000ba7c:	687b      	ldr	r3, [r7, #4]
9000ba7e:	2200      	movs	r2, #0
9000ba80:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000ba84:	2300      	movs	r3, #0
}
9000ba86:	4618      	mov	r0, r3
9000ba88:	370c      	adds	r7, #12
9000ba8a:	46bd      	mov	sp, r7
9000ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba90:	4770      	bx	lr

9000ba92 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000ba92:	b580      	push	{r7, lr}
9000ba94:	b082      	sub	sp, #8
9000ba96:	af00      	add	r7, sp, #0
9000ba98:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000ba9a:	687b      	ldr	r3, [r7, #4]
9000ba9c:	2201      	movs	r2, #1
9000ba9e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000baa2:	687b      	ldr	r3, [r7, #4]
9000baa4:	2200      	movs	r2, #0
9000baa6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000baaa:	687b      	ldr	r3, [r7, #4]
9000baac:	2200      	movs	r2, #0
9000baae:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000bab2:	6878      	ldr	r0, [r7, #4]
9000bab4:	f7f5 fb7c 	bl	900011b0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000bab8:	687b      	ldr	r3, [r7, #4]
9000baba:	791b      	ldrb	r3, [r3, #4]
9000babc:	4619      	mov	r1, r3
9000babe:	6878      	ldr	r0, [r7, #4]
9000bac0:	f000 f80b 	bl	9000bada <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000bac4:	687b      	ldr	r3, [r7, #4]
9000bac6:	795b      	ldrb	r3, [r3, #5]
9000bac8:	4619      	mov	r1, r3
9000baca:	6878      	ldr	r0, [r7, #4]
9000bacc:	f000 f805 	bl	9000bada <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000bad0:	2300      	movs	r3, #0
}
9000bad2:	4618      	mov	r0, r3
9000bad4:	3708      	adds	r7, #8
9000bad6:	46bd      	mov	sp, r7
9000bad8:	bd80      	pop	{r7, pc}

9000bada <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000bada:	b480      	push	{r7}
9000badc:	b083      	sub	sp, #12
9000bade:	af00      	add	r7, sp, #0
9000bae0:	6078      	str	r0, [r7, #4]
9000bae2:	460b      	mov	r3, r1
9000bae4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000bae6:	78fb      	ldrb	r3, [r7, #3]
9000bae8:	2b0f      	cmp	r3, #15
9000baea:	d80f      	bhi.n	9000bb0c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000baec:	78fb      	ldrb	r3, [r7, #3]
9000baee:	687a      	ldr	r2, [r7, #4]
9000baf0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000baf4:	009b      	lsls	r3, r3, #2
9000baf6:	4413      	add	r3, r2
9000baf8:	685a      	ldr	r2, [r3, #4]
9000bafa:	78fb      	ldrb	r3, [r7, #3]
9000bafc:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000bb00:	6879      	ldr	r1, [r7, #4]
9000bb02:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bb06:	009b      	lsls	r3, r3, #2
9000bb08:	440b      	add	r3, r1
9000bb0a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000bb0c:	2300      	movs	r3, #0
}
9000bb0e:	4618      	mov	r0, r3
9000bb10:	370c      	adds	r7, #12
9000bb12:	46bd      	mov	sp, r7
9000bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb18:	4770      	bx	lr
	...

9000bb1c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000bb1c:	b580      	push	{r7, lr}
9000bb1e:	b082      	sub	sp, #8
9000bb20:	af00      	add	r7, sp, #0
9000bb22:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000bb24:	687b      	ldr	r3, [r7, #4]
9000bb26:	681b      	ldr	r3, [r3, #0]
9000bb28:	4a22      	ldr	r2, [pc, #136]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb2a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000bb2c:	687b      	ldr	r3, [r7, #4]
9000bb2e:	685b      	ldr	r3, [r3, #4]
9000bb30:	4a20      	ldr	r2, [pc, #128]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb32:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000bb34:	687b      	ldr	r3, [r7, #4]
9000bb36:	689b      	ldr	r3, [r3, #8]
9000bb38:	4a1e      	ldr	r2, [pc, #120]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb3a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000bb3c:	687b      	ldr	r3, [r7, #4]
9000bb3e:	68db      	ldr	r3, [r3, #12]
9000bb40:	4a1c      	ldr	r2, [pc, #112]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb42:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000bb44:	687b      	ldr	r3, [r7, #4]
9000bb46:	691b      	ldr	r3, [r3, #16]
9000bb48:	4a1a      	ldr	r2, [pc, #104]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb4a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000bb4c:	687b      	ldr	r3, [r7, #4]
9000bb4e:	695b      	ldr	r3, [r3, #20]
9000bb50:	4a18      	ldr	r2, [pc, #96]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb52:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000bb54:	687b      	ldr	r3, [r7, #4]
9000bb56:	699b      	ldr	r3, [r3, #24]
9000bb58:	4a16      	ldr	r2, [pc, #88]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb5a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000bb5c:	687b      	ldr	r3, [r7, #4]
9000bb5e:	69db      	ldr	r3, [r3, #28]
9000bb60:	4a14      	ldr	r2, [pc, #80]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb62:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000bb64:	687b      	ldr	r3, [r7, #4]
9000bb66:	6a1b      	ldr	r3, [r3, #32]
9000bb68:	4a12      	ldr	r2, [pc, #72]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb6a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000bb6c:	687b      	ldr	r3, [r7, #4]
9000bb6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bb70:	4a10      	ldr	r2, [pc, #64]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb72:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000bb74:	687b      	ldr	r3, [r7, #4]
9000bb76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bb78:	4a0e      	ldr	r2, [pc, #56]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb7a:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000bb7c:	4b0e      	ldr	r3, [pc, #56]	@ (9000bbb8 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bb7e:	2200      	movs	r2, #0
9000bb80:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000bb82:	4b0d      	ldr	r3, [pc, #52]	@ (9000bbb8 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bb84:	2200      	movs	r2, #0
9000bb86:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000bb88:	4b0a      	ldr	r3, [pc, #40]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb8a:	69db      	ldr	r3, [r3, #28]
9000bb8c:	4a0b      	ldr	r2, [pc, #44]	@ (9000bbbc <UTIL_LCD_SetFuncDriver+0xa0>)
9000bb8e:	4611      	mov	r1, r2
9000bb90:	2000      	movs	r0, #0
9000bb92:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000bb94:	4b07      	ldr	r3, [pc, #28]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb96:	6a1b      	ldr	r3, [r3, #32]
9000bb98:	4a09      	ldr	r2, [pc, #36]	@ (9000bbc0 <UTIL_LCD_SetFuncDriver+0xa4>)
9000bb9a:	4611      	mov	r1, r2
9000bb9c:	2000      	movs	r0, #0
9000bb9e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000bba0:	4b04      	ldr	r3, [pc, #16]	@ (9000bbb4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bba4:	4a07      	ldr	r2, [pc, #28]	@ (9000bbc4 <UTIL_LCD_SetFuncDriver+0xa8>)
9000bba6:	4611      	mov	r1, r2
9000bba8:	2000      	movs	r0, #0
9000bbaa:	4798      	blx	r3
}
9000bbac:	bf00      	nop
9000bbae:	3708      	adds	r7, #8
9000bbb0:	46bd      	mov	sp, r7
9000bbb2:	bd80      	pop	{r7, pc}
9000bbb4:	20001320 	.word	0x20001320
9000bbb8:	200012e0 	.word	0x200012e0
9000bbbc:	200012f4 	.word	0x200012f4
9000bbc0:	200012f8 	.word	0x200012f8
9000bbc4:	200012fc 	.word	0x200012fc

9000bbc8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000bbc8:	b580      	push	{r7, lr}
9000bbca:	b082      	sub	sp, #8
9000bbcc:	af00      	add	r7, sp, #0
9000bbce:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000bbd0:	4b0a      	ldr	r3, [pc, #40]	@ (9000bbfc <UTIL_LCD_SetLayer+0x34>)
9000bbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bbd4:	2b00      	cmp	r3, #0
9000bbd6:	d00c      	beq.n	9000bbf2 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000bbd8:	4b08      	ldr	r3, [pc, #32]	@ (9000bbfc <UTIL_LCD_SetLayer+0x34>)
9000bbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bbdc:	4a08      	ldr	r2, [pc, #32]	@ (9000bc00 <UTIL_LCD_SetLayer+0x38>)
9000bbde:	6912      	ldr	r2, [r2, #16]
9000bbe0:	6879      	ldr	r1, [r7, #4]
9000bbe2:	4610      	mov	r0, r2
9000bbe4:	4798      	blx	r3
9000bbe6:	4603      	mov	r3, r0
9000bbe8:	2b00      	cmp	r3, #0
9000bbea:	d102      	bne.n	9000bbf2 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000bbec:	4a04      	ldr	r2, [pc, #16]	@ (9000bc00 <UTIL_LCD_SetLayer+0x38>)
9000bbee:	687b      	ldr	r3, [r7, #4]
9000bbf0:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000bbf2:	bf00      	nop
9000bbf4:	3708      	adds	r7, #8
9000bbf6:	46bd      	mov	sp, r7
9000bbf8:	bd80      	pop	{r7, pc}
9000bbfa:	bf00      	nop
9000bbfc:	20001320 	.word	0x20001320
9000bc00:	200012e0 	.word	0x200012e0

9000bc04 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000bc04:	b480      	push	{r7}
9000bc06:	b083      	sub	sp, #12
9000bc08:	af00      	add	r7, sp, #0
9000bc0a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000bc0c:	4b06      	ldr	r3, [pc, #24]	@ (9000bc28 <UTIL_LCD_SetTextColor+0x24>)
9000bc0e:	68db      	ldr	r3, [r3, #12]
9000bc10:	4a05      	ldr	r2, [pc, #20]	@ (9000bc28 <UTIL_LCD_SetTextColor+0x24>)
9000bc12:	015b      	lsls	r3, r3, #5
9000bc14:	4413      	add	r3, r2
9000bc16:	687a      	ldr	r2, [r7, #4]
9000bc18:	601a      	str	r2, [r3, #0]
}
9000bc1a:	bf00      	nop
9000bc1c:	370c      	adds	r7, #12
9000bc1e:	46bd      	mov	sp, r7
9000bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc24:	4770      	bx	lr
9000bc26:	bf00      	nop
9000bc28:	200012e0 	.word	0x200012e0

9000bc2c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000bc2c:	b480      	push	{r7}
9000bc2e:	b083      	sub	sp, #12
9000bc30:	af00      	add	r7, sp, #0
9000bc32:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000bc34:	4b06      	ldr	r3, [pc, #24]	@ (9000bc50 <UTIL_LCD_SetBackColor+0x24>)
9000bc36:	68db      	ldr	r3, [r3, #12]
9000bc38:	4a05      	ldr	r2, [pc, #20]	@ (9000bc50 <UTIL_LCD_SetBackColor+0x24>)
9000bc3a:	015b      	lsls	r3, r3, #5
9000bc3c:	4413      	add	r3, r2
9000bc3e:	3304      	adds	r3, #4
9000bc40:	687a      	ldr	r2, [r7, #4]
9000bc42:	601a      	str	r2, [r3, #0]
}
9000bc44:	bf00      	nop
9000bc46:	370c      	adds	r7, #12
9000bc48:	46bd      	mov	sp, r7
9000bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc4e:	4770      	bx	lr
9000bc50:	200012e0 	.word	0x200012e0

9000bc54 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000bc54:	b480      	push	{r7}
9000bc56:	b083      	sub	sp, #12
9000bc58:	af00      	add	r7, sp, #0
9000bc5a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000bc5c:	4b06      	ldr	r3, [pc, #24]	@ (9000bc78 <UTIL_LCD_SetFont+0x24>)
9000bc5e:	68db      	ldr	r3, [r3, #12]
9000bc60:	4a05      	ldr	r2, [pc, #20]	@ (9000bc78 <UTIL_LCD_SetFont+0x24>)
9000bc62:	015b      	lsls	r3, r3, #5
9000bc64:	4413      	add	r3, r2
9000bc66:	3308      	adds	r3, #8
9000bc68:	687a      	ldr	r2, [r7, #4]
9000bc6a:	601a      	str	r2, [r3, #0]
}
9000bc6c:	bf00      	nop
9000bc6e:	370c      	adds	r7, #12
9000bc70:	46bd      	mov	sp, r7
9000bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc76:	4770      	bx	lr
9000bc78:	200012e0 	.word	0x200012e0

9000bc7c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000bc7c:	b590      	push	{r4, r7, lr}
9000bc7e:	b087      	sub	sp, #28
9000bc80:	af02      	add	r7, sp, #8
9000bc82:	60f8      	str	r0, [r7, #12]
9000bc84:	60b9      	str	r1, [r7, #8]
9000bc86:	607a      	str	r2, [r7, #4]
9000bc88:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000bc8a:	4b08      	ldr	r3, [pc, #32]	@ (9000bcac <UTIL_LCD_FillRGBRect+0x30>)
9000bc8c:	685c      	ldr	r4, [r3, #4]
9000bc8e:	4b08      	ldr	r3, [pc, #32]	@ (9000bcb0 <UTIL_LCD_FillRGBRect+0x34>)
9000bc90:	6918      	ldr	r0, [r3, #16]
9000bc92:	6a3b      	ldr	r3, [r7, #32]
9000bc94:	9301      	str	r3, [sp, #4]
9000bc96:	683b      	ldr	r3, [r7, #0]
9000bc98:	9300      	str	r3, [sp, #0]
9000bc9a:	687b      	ldr	r3, [r7, #4]
9000bc9c:	68ba      	ldr	r2, [r7, #8]
9000bc9e:	68f9      	ldr	r1, [r7, #12]
9000bca0:	47a0      	blx	r4
}
9000bca2:	bf00      	nop
9000bca4:	3714      	adds	r7, #20
9000bca6:	46bd      	mov	sp, r7
9000bca8:	bd90      	pop	{r4, r7, pc}
9000bcaa:	bf00      	nop
9000bcac:	20001320 	.word	0x20001320
9000bcb0:	200012e0 	.word	0x200012e0

9000bcb4 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000bcb4:	b580      	push	{r7, lr}
9000bcb6:	b084      	sub	sp, #16
9000bcb8:	af02      	add	r7, sp, #8
9000bcba:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000bcbc:	4b07      	ldr	r3, [pc, #28]	@ (9000bcdc <UTIL_LCD_Clear+0x28>)
9000bcbe:	695a      	ldr	r2, [r3, #20]
9000bcc0:	4b06      	ldr	r3, [pc, #24]	@ (9000bcdc <UTIL_LCD_Clear+0x28>)
9000bcc2:	6999      	ldr	r1, [r3, #24]
9000bcc4:	687b      	ldr	r3, [r7, #4]
9000bcc6:	9300      	str	r3, [sp, #0]
9000bcc8:	460b      	mov	r3, r1
9000bcca:	2100      	movs	r1, #0
9000bccc:	2000      	movs	r0, #0
9000bcce:	f000 f8eb 	bl	9000bea8 <UTIL_LCD_FillRect>
}
9000bcd2:	bf00      	nop
9000bcd4:	3708      	adds	r7, #8
9000bcd6:	46bd      	mov	sp, r7
9000bcd8:	bd80      	pop	{r7, pc}
9000bcda:	bf00      	nop
9000bcdc:	200012e0 	.word	0x200012e0

9000bce0 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000bce0:	b580      	push	{r7, lr}
9000bce2:	b084      	sub	sp, #16
9000bce4:	af00      	add	r7, sp, #0
9000bce6:	60f8      	str	r0, [r7, #12]
9000bce8:	60b9      	str	r1, [r7, #8]
9000bcea:	4613      	mov	r3, r2
9000bcec:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bcee:	4b16      	ldr	r3, [pc, #88]	@ (9000bd48 <UTIL_LCD_DisplayChar+0x68>)
9000bcf0:	68db      	ldr	r3, [r3, #12]
9000bcf2:	4a15      	ldr	r2, [pc, #84]	@ (9000bd48 <UTIL_LCD_DisplayChar+0x68>)
9000bcf4:	015b      	lsls	r3, r3, #5
9000bcf6:	4413      	add	r3, r2
9000bcf8:	3308      	adds	r3, #8
9000bcfa:	681b      	ldr	r3, [r3, #0]
9000bcfc:	681a      	ldr	r2, [r3, #0]
9000bcfe:	79fb      	ldrb	r3, [r7, #7]
9000bd00:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bd02:	4911      	ldr	r1, [pc, #68]	@ (9000bd48 <UTIL_LCD_DisplayChar+0x68>)
9000bd04:	68c9      	ldr	r1, [r1, #12]
9000bd06:	4810      	ldr	r0, [pc, #64]	@ (9000bd48 <UTIL_LCD_DisplayChar+0x68>)
9000bd08:	0149      	lsls	r1, r1, #5
9000bd0a:	4401      	add	r1, r0
9000bd0c:	3108      	adds	r1, #8
9000bd0e:	6809      	ldr	r1, [r1, #0]
9000bd10:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bd12:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bd16:	4b0c      	ldr	r3, [pc, #48]	@ (9000bd48 <UTIL_LCD_DisplayChar+0x68>)
9000bd18:	68db      	ldr	r3, [r3, #12]
9000bd1a:	480b      	ldr	r0, [pc, #44]	@ (9000bd48 <UTIL_LCD_DisplayChar+0x68>)
9000bd1c:	015b      	lsls	r3, r3, #5
9000bd1e:	4403      	add	r3, r0
9000bd20:	3308      	adds	r3, #8
9000bd22:	681b      	ldr	r3, [r3, #0]
9000bd24:	889b      	ldrh	r3, [r3, #4]
9000bd26:	3307      	adds	r3, #7
9000bd28:	2b00      	cmp	r3, #0
9000bd2a:	da00      	bge.n	9000bd2e <UTIL_LCD_DisplayChar+0x4e>
9000bd2c:	3307      	adds	r3, #7
9000bd2e:	10db      	asrs	r3, r3, #3
9000bd30:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bd34:	4413      	add	r3, r2
9000bd36:	461a      	mov	r2, r3
9000bd38:	68b9      	ldr	r1, [r7, #8]
9000bd3a:	68f8      	ldr	r0, [r7, #12]
9000bd3c:	f000 f8ee 	bl	9000bf1c <DrawChar>
}
9000bd40:	bf00      	nop
9000bd42:	3710      	adds	r7, #16
9000bd44:	46bd      	mov	sp, r7
9000bd46:	bd80      	pop	{r7, pc}
9000bd48:	200012e0 	.word	0x200012e0

9000bd4c <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000bd4c:	b580      	push	{r7, lr}
9000bd4e:	b08a      	sub	sp, #40	@ 0x28
9000bd50:	af00      	add	r7, sp, #0
9000bd52:	60f8      	str	r0, [r7, #12]
9000bd54:	60b9      	str	r1, [r7, #8]
9000bd56:	607a      	str	r2, [r7, #4]
9000bd58:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000bd5a:	2301      	movs	r3, #1
9000bd5c:	627b      	str	r3, [r7, #36]	@ 0x24
9000bd5e:	2300      	movs	r3, #0
9000bd60:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000bd62:	2300      	movs	r3, #0
9000bd64:	61fb      	str	r3, [r7, #28]
9000bd66:	2300      	movs	r3, #0
9000bd68:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000bd6a:	687b      	ldr	r3, [r7, #4]
9000bd6c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000bd6e:	e002      	b.n	9000bd76 <UTIL_LCD_DisplayStringAt+0x2a>
9000bd70:	69fb      	ldr	r3, [r7, #28]
9000bd72:	3301      	adds	r3, #1
9000bd74:	61fb      	str	r3, [r7, #28]
9000bd76:	69bb      	ldr	r3, [r7, #24]
9000bd78:	1c5a      	adds	r2, r3, #1
9000bd7a:	61ba      	str	r2, [r7, #24]
9000bd7c:	781b      	ldrb	r3, [r3, #0]
9000bd7e:	2b00      	cmp	r3, #0
9000bd80:	d1f6      	bne.n	9000bd70 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000bd82:	4b48      	ldr	r3, [pc, #288]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd84:	695b      	ldr	r3, [r3, #20]
9000bd86:	4a47      	ldr	r2, [pc, #284]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd88:	68d2      	ldr	r2, [r2, #12]
9000bd8a:	4946      	ldr	r1, [pc, #280]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd8c:	0152      	lsls	r2, r2, #5
9000bd8e:	440a      	add	r2, r1
9000bd90:	3208      	adds	r2, #8
9000bd92:	6812      	ldr	r2, [r2, #0]
9000bd94:	8892      	ldrh	r2, [r2, #4]
9000bd96:	fbb3 f3f2 	udiv	r3, r3, r2
9000bd9a:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000bd9c:	78fb      	ldrb	r3, [r7, #3]
9000bd9e:	2b03      	cmp	r3, #3
9000bda0:	d018      	beq.n	9000bdd4 <UTIL_LCD_DisplayStringAt+0x88>
9000bda2:	2b03      	cmp	r3, #3
9000bda4:	dc2a      	bgt.n	9000bdfc <UTIL_LCD_DisplayStringAt+0xb0>
9000bda6:	2b01      	cmp	r3, #1
9000bda8:	d002      	beq.n	9000bdb0 <UTIL_LCD_DisplayStringAt+0x64>
9000bdaa:	2b02      	cmp	r3, #2
9000bdac:	d015      	beq.n	9000bdda <UTIL_LCD_DisplayStringAt+0x8e>
9000bdae:	e025      	b.n	9000bdfc <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000bdb0:	697a      	ldr	r2, [r7, #20]
9000bdb2:	69fb      	ldr	r3, [r7, #28]
9000bdb4:	1ad3      	subs	r3, r2, r3
9000bdb6:	4a3b      	ldr	r2, [pc, #236]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdb8:	68d2      	ldr	r2, [r2, #12]
9000bdba:	493a      	ldr	r1, [pc, #232]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdbc:	0152      	lsls	r2, r2, #5
9000bdbe:	440a      	add	r2, r1
9000bdc0:	3208      	adds	r2, #8
9000bdc2:	6812      	ldr	r2, [r2, #0]
9000bdc4:	8892      	ldrh	r2, [r2, #4]
9000bdc6:	fb02 f303 	mul.w	r3, r2, r3
9000bdca:	085b      	lsrs	r3, r3, #1
9000bdcc:	68fa      	ldr	r2, [r7, #12]
9000bdce:	4413      	add	r3, r2
9000bdd0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bdd2:	e016      	b.n	9000be02 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000bdd4:	68fb      	ldr	r3, [r7, #12]
9000bdd6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bdd8:	e013      	b.n	9000be02 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000bdda:	697a      	ldr	r2, [r7, #20]
9000bddc:	69fb      	ldr	r3, [r7, #28]
9000bdde:	1ad3      	subs	r3, r2, r3
9000bde0:	4a30      	ldr	r2, [pc, #192]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bde2:	68d2      	ldr	r2, [r2, #12]
9000bde4:	492f      	ldr	r1, [pc, #188]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bde6:	0152      	lsls	r2, r2, #5
9000bde8:	440a      	add	r2, r1
9000bdea:	3208      	adds	r2, #8
9000bdec:	6812      	ldr	r2, [r2, #0]
9000bdee:	8892      	ldrh	r2, [r2, #4]
9000bdf0:	fb03 f202 	mul.w	r2, r3, r2
9000bdf4:	68fb      	ldr	r3, [r7, #12]
9000bdf6:	1ad3      	subs	r3, r2, r3
9000bdf8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bdfa:	e002      	b.n	9000be02 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000bdfc:	68fb      	ldr	r3, [r7, #12]
9000bdfe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be00:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000be02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000be04:	2b00      	cmp	r3, #0
9000be06:	d003      	beq.n	9000be10 <UTIL_LCD_DisplayStringAt+0xc4>
9000be08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000be0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000be0e:	d31b      	bcc.n	9000be48 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000be10:	2301      	movs	r3, #1
9000be12:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000be14:	e018      	b.n	9000be48 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000be16:	687b      	ldr	r3, [r7, #4]
9000be18:	781b      	ldrb	r3, [r3, #0]
9000be1a:	461a      	mov	r2, r3
9000be1c:	68b9      	ldr	r1, [r7, #8]
9000be1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000be20:	f7ff ff5e 	bl	9000bce0 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000be24:	4b1f      	ldr	r3, [pc, #124]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000be26:	68db      	ldr	r3, [r3, #12]
9000be28:	4a1e      	ldr	r2, [pc, #120]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000be2a:	015b      	lsls	r3, r3, #5
9000be2c:	4413      	add	r3, r2
9000be2e:	3308      	adds	r3, #8
9000be30:	681b      	ldr	r3, [r3, #0]
9000be32:	889b      	ldrh	r3, [r3, #4]
9000be34:	461a      	mov	r2, r3
9000be36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000be38:	4413      	add	r3, r2
9000be3a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000be3c:	687b      	ldr	r3, [r7, #4]
9000be3e:	3301      	adds	r3, #1
9000be40:	607b      	str	r3, [r7, #4]
    i++;
9000be42:	6a3b      	ldr	r3, [r7, #32]
9000be44:	3301      	adds	r3, #1
9000be46:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000be48:	687b      	ldr	r3, [r7, #4]
9000be4a:	781b      	ldrb	r3, [r3, #0]
9000be4c:	2b00      	cmp	r3, #0
9000be4e:	bf14      	ite	ne
9000be50:	2301      	movne	r3, #1
9000be52:	2300      	moveq	r3, #0
9000be54:	b2da      	uxtb	r2, r3
9000be56:	4b13      	ldr	r3, [pc, #76]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000be58:	6959      	ldr	r1, [r3, #20]
9000be5a:	4b12      	ldr	r3, [pc, #72]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000be5c:	68db      	ldr	r3, [r3, #12]
9000be5e:	4811      	ldr	r0, [pc, #68]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000be60:	015b      	lsls	r3, r3, #5
9000be62:	4403      	add	r3, r0
9000be64:	3308      	adds	r3, #8
9000be66:	681b      	ldr	r3, [r3, #0]
9000be68:	889b      	ldrh	r3, [r3, #4]
9000be6a:	4618      	mov	r0, r3
9000be6c:	6a3b      	ldr	r3, [r7, #32]
9000be6e:	fb00 f303 	mul.w	r3, r0, r3
9000be72:	1acb      	subs	r3, r1, r3
9000be74:	b29b      	uxth	r3, r3
9000be76:	490b      	ldr	r1, [pc, #44]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000be78:	68c9      	ldr	r1, [r1, #12]
9000be7a:	480a      	ldr	r0, [pc, #40]	@ (9000bea4 <UTIL_LCD_DisplayStringAt+0x158>)
9000be7c:	0149      	lsls	r1, r1, #5
9000be7e:	4401      	add	r1, r0
9000be80:	3108      	adds	r1, #8
9000be82:	6809      	ldr	r1, [r1, #0]
9000be84:	8889      	ldrh	r1, [r1, #4]
9000be86:	428b      	cmp	r3, r1
9000be88:	bf2c      	ite	cs
9000be8a:	2301      	movcs	r3, #1
9000be8c:	2300      	movcc	r3, #0
9000be8e:	b2db      	uxtb	r3, r3
9000be90:	4013      	ands	r3, r2
9000be92:	b2db      	uxtb	r3, r3
9000be94:	2b00      	cmp	r3, #0
9000be96:	d1be      	bne.n	9000be16 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000be98:	bf00      	nop
9000be9a:	bf00      	nop
9000be9c:	3728      	adds	r7, #40	@ 0x28
9000be9e:	46bd      	mov	sp, r7
9000bea0:	bd80      	pop	{r7, pc}
9000bea2:	bf00      	nop
9000bea4:	200012e0 	.word	0x200012e0

9000bea8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000bea8:	b590      	push	{r4, r7, lr}
9000beaa:	b087      	sub	sp, #28
9000beac:	af02      	add	r7, sp, #8
9000beae:	60f8      	str	r0, [r7, #12]
9000beb0:	60b9      	str	r1, [r7, #8]
9000beb2:	607a      	str	r2, [r7, #4]
9000beb4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000beb6:	4b17      	ldr	r3, [pc, #92]	@ (9000bf14 <UTIL_LCD_FillRect+0x6c>)
9000beb8:	69db      	ldr	r3, [r3, #28]
9000beba:	2b02      	cmp	r3, #2
9000bebc:	d11a      	bne.n	9000bef4 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000bebe:	4b16      	ldr	r3, [pc, #88]	@ (9000bf18 <UTIL_LCD_FillRect+0x70>)
9000bec0:	691c      	ldr	r4, [r3, #16]
9000bec2:	4b14      	ldr	r3, [pc, #80]	@ (9000bf14 <UTIL_LCD_FillRect+0x6c>)
9000bec4:	6918      	ldr	r0, [r3, #16]
9000bec6:	6a3b      	ldr	r3, [r7, #32]
9000bec8:	08db      	lsrs	r3, r3, #3
9000beca:	f003 021f 	and.w	r2, r3, #31
9000bece:	6a3b      	ldr	r3, [r7, #32]
9000bed0:	0a9b      	lsrs	r3, r3, #10
9000bed2:	015b      	lsls	r3, r3, #5
9000bed4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bed8:	431a      	orrs	r2, r3
9000beda:	6a3b      	ldr	r3, [r7, #32]
9000bedc:	0cdb      	lsrs	r3, r3, #19
9000bede:	02db      	lsls	r3, r3, #11
9000bee0:	b29b      	uxth	r3, r3
9000bee2:	4313      	orrs	r3, r2
9000bee4:	9301      	str	r3, [sp, #4]
9000bee6:	683b      	ldr	r3, [r7, #0]
9000bee8:	9300      	str	r3, [sp, #0]
9000beea:	687b      	ldr	r3, [r7, #4]
9000beec:	68ba      	ldr	r2, [r7, #8]
9000beee:	68f9      	ldr	r1, [r7, #12]
9000bef0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000bef2:	e00b      	b.n	9000bf0c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000bef4:	4b08      	ldr	r3, [pc, #32]	@ (9000bf18 <UTIL_LCD_FillRect+0x70>)
9000bef6:	691c      	ldr	r4, [r3, #16]
9000bef8:	4b06      	ldr	r3, [pc, #24]	@ (9000bf14 <UTIL_LCD_FillRect+0x6c>)
9000befa:	6918      	ldr	r0, [r3, #16]
9000befc:	6a3b      	ldr	r3, [r7, #32]
9000befe:	9301      	str	r3, [sp, #4]
9000bf00:	683b      	ldr	r3, [r7, #0]
9000bf02:	9300      	str	r3, [sp, #0]
9000bf04:	687b      	ldr	r3, [r7, #4]
9000bf06:	68ba      	ldr	r2, [r7, #8]
9000bf08:	68f9      	ldr	r1, [r7, #12]
9000bf0a:	47a0      	blx	r4
}
9000bf0c:	bf00      	nop
9000bf0e:	3714      	adds	r7, #20
9000bf10:	46bd      	mov	sp, r7
9000bf12:	bd90      	pop	{r4, r7, pc}
9000bf14:	200012e0 	.word	0x200012e0
9000bf18:	20001320 	.word	0x20001320

9000bf1c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000bf1c:	b580      	push	{r7, lr}
9000bf1e:	b0b2      	sub	sp, #200	@ 0xc8
9000bf20:	af02      	add	r7, sp, #8
9000bf22:	60f8      	str	r0, [r7, #12]
9000bf24:	60b9      	str	r1, [r7, #8]
9000bf26:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000bf28:	2300      	movs	r3, #0
9000bf2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bf2e:	2300      	movs	r3, #0
9000bf30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000bf34:	4ba5      	ldr	r3, [pc, #660]	@ (9000c1cc <DrawChar+0x2b0>)
9000bf36:	68db      	ldr	r3, [r3, #12]
9000bf38:	4aa4      	ldr	r2, [pc, #656]	@ (9000c1cc <DrawChar+0x2b0>)
9000bf3a:	015b      	lsls	r3, r3, #5
9000bf3c:	4413      	add	r3, r2
9000bf3e:	3308      	adds	r3, #8
9000bf40:	681b      	ldr	r3, [r3, #0]
9000bf42:	88db      	ldrh	r3, [r3, #6]
9000bf44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bf48:	4ba0      	ldr	r3, [pc, #640]	@ (9000c1cc <DrawChar+0x2b0>)
9000bf4a:	68db      	ldr	r3, [r3, #12]
9000bf4c:	4a9f      	ldr	r2, [pc, #636]	@ (9000c1cc <DrawChar+0x2b0>)
9000bf4e:	015b      	lsls	r3, r3, #5
9000bf50:	4413      	add	r3, r2
9000bf52:	3308      	adds	r3, #8
9000bf54:	681b      	ldr	r3, [r3, #0]
9000bf56:	889b      	ldrh	r3, [r3, #4]
9000bf58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000bf5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf60:	3307      	adds	r3, #7
9000bf62:	f023 0207 	bic.w	r2, r3, #7
9000bf66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf6a:	1ad3      	subs	r3, r2, r3
9000bf6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000bf70:	2300      	movs	r3, #0
9000bf72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bf76:	e11c      	b.n	9000c1b2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000bf78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf7c:	3307      	adds	r3, #7
9000bf7e:	08db      	lsrs	r3, r3, #3
9000bf80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bf84:	fb02 f303 	mul.w	r3, r2, r3
9000bf88:	687a      	ldr	r2, [r7, #4]
9000bf8a:	4413      	add	r3, r2
9000bf8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000bf90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf94:	3307      	adds	r3, #7
9000bf96:	08db      	lsrs	r3, r3, #3
9000bf98:	2b01      	cmp	r3, #1
9000bf9a:	d002      	beq.n	9000bfa2 <DrawChar+0x86>
9000bf9c:	2b02      	cmp	r3, #2
9000bf9e:	d006      	beq.n	9000bfae <DrawChar+0x92>
9000bfa0:	e011      	b.n	9000bfc6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000bfa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bfa6:	781b      	ldrb	r3, [r3, #0]
9000bfa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bfac:	e01d      	b.n	9000bfea <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000bfae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bfb2:	781b      	ldrb	r3, [r3, #0]
9000bfb4:	021b      	lsls	r3, r3, #8
9000bfb6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bfba:	3201      	adds	r2, #1
9000bfbc:	7812      	ldrb	r2, [r2, #0]
9000bfbe:	4313      	orrs	r3, r2
9000bfc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bfc4:	e011      	b.n	9000bfea <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000bfc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bfca:	781b      	ldrb	r3, [r3, #0]
9000bfcc:	041a      	lsls	r2, r3, #16
9000bfce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bfd2:	3301      	adds	r3, #1
9000bfd4:	781b      	ldrb	r3, [r3, #0]
9000bfd6:	021b      	lsls	r3, r3, #8
9000bfd8:	4313      	orrs	r3, r2
9000bfda:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bfde:	3202      	adds	r2, #2
9000bfe0:	7812      	ldrb	r2, [r2, #0]
9000bfe2:	4313      	orrs	r3, r2
9000bfe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bfe8:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bfea:	4b78      	ldr	r3, [pc, #480]	@ (9000c1cc <DrawChar+0x2b0>)
9000bfec:	68db      	ldr	r3, [r3, #12]
9000bfee:	4a77      	ldr	r2, [pc, #476]	@ (9000c1cc <DrawChar+0x2b0>)
9000bff0:	015b      	lsls	r3, r3, #5
9000bff2:	4413      	add	r3, r2
9000bff4:	331c      	adds	r3, #28
9000bff6:	681b      	ldr	r3, [r3, #0]
9000bff8:	2b02      	cmp	r3, #2
9000bffa:	f040 808c 	bne.w	9000c116 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000bffe:	2300      	movs	r3, #0
9000c000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c004:	e074      	b.n	9000c0f0 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c006:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c00a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c00e:	1ad2      	subs	r2, r2, r3
9000c010:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c014:	4413      	add	r3, r2
9000c016:	3b01      	subs	r3, #1
9000c018:	2201      	movs	r2, #1
9000c01a:	fa02 f303 	lsl.w	r3, r2, r3
9000c01e:	461a      	mov	r2, r3
9000c020:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c024:	4013      	ands	r3, r2
9000c026:	2b00      	cmp	r3, #0
9000c028:	d02d      	beq.n	9000c086 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000c02a:	4b68      	ldr	r3, [pc, #416]	@ (9000c1cc <DrawChar+0x2b0>)
9000c02c:	68db      	ldr	r3, [r3, #12]
9000c02e:	4a67      	ldr	r2, [pc, #412]	@ (9000c1cc <DrawChar+0x2b0>)
9000c030:	015b      	lsls	r3, r3, #5
9000c032:	4413      	add	r3, r2
9000c034:	681b      	ldr	r3, [r3, #0]
9000c036:	08db      	lsrs	r3, r3, #3
9000c038:	b29b      	uxth	r3, r3
9000c03a:	f003 031f 	and.w	r3, r3, #31
9000c03e:	b29a      	uxth	r2, r3
9000c040:	4b62      	ldr	r3, [pc, #392]	@ (9000c1cc <DrawChar+0x2b0>)
9000c042:	68db      	ldr	r3, [r3, #12]
9000c044:	4961      	ldr	r1, [pc, #388]	@ (9000c1cc <DrawChar+0x2b0>)
9000c046:	015b      	lsls	r3, r3, #5
9000c048:	440b      	add	r3, r1
9000c04a:	681b      	ldr	r3, [r3, #0]
9000c04c:	0a9b      	lsrs	r3, r3, #10
9000c04e:	b29b      	uxth	r3, r3
9000c050:	015b      	lsls	r3, r3, #5
9000c052:	b29b      	uxth	r3, r3
9000c054:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c058:	b29b      	uxth	r3, r3
9000c05a:	4313      	orrs	r3, r2
9000c05c:	b29a      	uxth	r2, r3
9000c05e:	4b5b      	ldr	r3, [pc, #364]	@ (9000c1cc <DrawChar+0x2b0>)
9000c060:	68db      	ldr	r3, [r3, #12]
9000c062:	495a      	ldr	r1, [pc, #360]	@ (9000c1cc <DrawChar+0x2b0>)
9000c064:	015b      	lsls	r3, r3, #5
9000c066:	440b      	add	r3, r1
9000c068:	681b      	ldr	r3, [r3, #0]
9000c06a:	0cdb      	lsrs	r3, r3, #19
9000c06c:	b29b      	uxth	r3, r3
9000c06e:	02db      	lsls	r3, r3, #11
9000c070:	b29b      	uxth	r3, r3
9000c072:	4313      	orrs	r3, r2
9000c074:	b29a      	uxth	r2, r3
9000c076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c07a:	005b      	lsls	r3, r3, #1
9000c07c:	33c0      	adds	r3, #192	@ 0xc0
9000c07e:	443b      	add	r3, r7
9000c080:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000c084:	e02f      	b.n	9000c0e6 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000c086:	4b51      	ldr	r3, [pc, #324]	@ (9000c1cc <DrawChar+0x2b0>)
9000c088:	68db      	ldr	r3, [r3, #12]
9000c08a:	4a50      	ldr	r2, [pc, #320]	@ (9000c1cc <DrawChar+0x2b0>)
9000c08c:	015b      	lsls	r3, r3, #5
9000c08e:	4413      	add	r3, r2
9000c090:	3304      	adds	r3, #4
9000c092:	681b      	ldr	r3, [r3, #0]
9000c094:	08db      	lsrs	r3, r3, #3
9000c096:	b29b      	uxth	r3, r3
9000c098:	f003 031f 	and.w	r3, r3, #31
9000c09c:	b29a      	uxth	r2, r3
9000c09e:	4b4b      	ldr	r3, [pc, #300]	@ (9000c1cc <DrawChar+0x2b0>)
9000c0a0:	68db      	ldr	r3, [r3, #12]
9000c0a2:	494a      	ldr	r1, [pc, #296]	@ (9000c1cc <DrawChar+0x2b0>)
9000c0a4:	015b      	lsls	r3, r3, #5
9000c0a6:	440b      	add	r3, r1
9000c0a8:	3304      	adds	r3, #4
9000c0aa:	681b      	ldr	r3, [r3, #0]
9000c0ac:	0a9b      	lsrs	r3, r3, #10
9000c0ae:	b29b      	uxth	r3, r3
9000c0b0:	015b      	lsls	r3, r3, #5
9000c0b2:	b29b      	uxth	r3, r3
9000c0b4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c0b8:	b29b      	uxth	r3, r3
9000c0ba:	4313      	orrs	r3, r2
9000c0bc:	b29a      	uxth	r2, r3
9000c0be:	4b43      	ldr	r3, [pc, #268]	@ (9000c1cc <DrawChar+0x2b0>)
9000c0c0:	68db      	ldr	r3, [r3, #12]
9000c0c2:	4942      	ldr	r1, [pc, #264]	@ (9000c1cc <DrawChar+0x2b0>)
9000c0c4:	015b      	lsls	r3, r3, #5
9000c0c6:	440b      	add	r3, r1
9000c0c8:	3304      	adds	r3, #4
9000c0ca:	681b      	ldr	r3, [r3, #0]
9000c0cc:	0cdb      	lsrs	r3, r3, #19
9000c0ce:	b29b      	uxth	r3, r3
9000c0d0:	02db      	lsls	r3, r3, #11
9000c0d2:	b29b      	uxth	r3, r3
9000c0d4:	4313      	orrs	r3, r2
9000c0d6:	b29a      	uxth	r2, r3
9000c0d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c0dc:	005b      	lsls	r3, r3, #1
9000c0de:	33c0      	adds	r3, #192	@ 0xc0
9000c0e0:	443b      	add	r3, r7
9000c0e2:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000c0e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c0ea:	3301      	adds	r3, #1
9000c0ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c0f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c0f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c0f8:	429a      	cmp	r2, r3
9000c0fa:	d384      	bcc.n	9000c006 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000c0fc:	68b9      	ldr	r1, [r7, #8]
9000c0fe:	1c4b      	adds	r3, r1, #1
9000c100:	60bb      	str	r3, [r7, #8]
9000c102:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000c106:	2301      	movs	r3, #1
9000c108:	9300      	str	r3, [sp, #0]
9000c10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c10e:	68f8      	ldr	r0, [r7, #12]
9000c110:	f7ff fdb4 	bl	9000bc7c <UTIL_LCD_FillRGBRect>
9000c114:	e048      	b.n	9000c1a8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000c116:	2300      	movs	r3, #0
9000c118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c11c:	e032      	b.n	9000c184 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c11e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c126:	1ad2      	subs	r2, r2, r3
9000c128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c12c:	4413      	add	r3, r2
9000c12e:	3b01      	subs	r3, #1
9000c130:	2201      	movs	r2, #1
9000c132:	fa02 f303 	lsl.w	r3, r2, r3
9000c136:	461a      	mov	r2, r3
9000c138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c13c:	4013      	ands	r3, r2
9000c13e:	2b00      	cmp	r3, #0
9000c140:	d00d      	beq.n	9000c15e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000c142:	4b22      	ldr	r3, [pc, #136]	@ (9000c1cc <DrawChar+0x2b0>)
9000c144:	68db      	ldr	r3, [r3, #12]
9000c146:	4a21      	ldr	r2, [pc, #132]	@ (9000c1cc <DrawChar+0x2b0>)
9000c148:	015b      	lsls	r3, r3, #5
9000c14a:	4413      	add	r3, r2
9000c14c:	681a      	ldr	r2, [r3, #0]
9000c14e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c152:	009b      	lsls	r3, r3, #2
9000c154:	33c0      	adds	r3, #192	@ 0xc0
9000c156:	443b      	add	r3, r7
9000c158:	f843 2cac 	str.w	r2, [r3, #-172]
9000c15c:	e00d      	b.n	9000c17a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000c15e:	4b1b      	ldr	r3, [pc, #108]	@ (9000c1cc <DrawChar+0x2b0>)
9000c160:	68db      	ldr	r3, [r3, #12]
9000c162:	4a1a      	ldr	r2, [pc, #104]	@ (9000c1cc <DrawChar+0x2b0>)
9000c164:	015b      	lsls	r3, r3, #5
9000c166:	4413      	add	r3, r2
9000c168:	3304      	adds	r3, #4
9000c16a:	681a      	ldr	r2, [r3, #0]
9000c16c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c170:	009b      	lsls	r3, r3, #2
9000c172:	33c0      	adds	r3, #192	@ 0xc0
9000c174:	443b      	add	r3, r7
9000c176:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000c17a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c17e:	3301      	adds	r3, #1
9000c180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c184:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c18c:	429a      	cmp	r2, r3
9000c18e:	d3c6      	bcc.n	9000c11e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000c190:	68b9      	ldr	r1, [r7, #8]
9000c192:	1c4b      	adds	r3, r1, #1
9000c194:	60bb      	str	r3, [r7, #8]
9000c196:	f107 0214 	add.w	r2, r7, #20
9000c19a:	2301      	movs	r3, #1
9000c19c:	9300      	str	r3, [sp, #0]
9000c19e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c1a2:	68f8      	ldr	r0, [r7, #12]
9000c1a4:	f7ff fd6a 	bl	9000bc7c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000c1a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000c1ac:	3301      	adds	r3, #1
9000c1ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c1b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c1b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000c1ba:	429a      	cmp	r2, r3
9000c1bc:	f4ff aedc 	bcc.w	9000bf78 <DrawChar+0x5c>
    }
  }
}
9000c1c0:	bf00      	nop
9000c1c2:	bf00      	nop
9000c1c4:	37c0      	adds	r7, #192	@ 0xc0
9000c1c6:	46bd      	mov	sp, r7
9000c1c8:	bd80      	pop	{r7, pc}
9000c1ca:	bf00      	nop
9000c1cc:	200012e0 	.word	0x200012e0

9000c1d0 <sbrk_aligned>:
9000c1d0:	b570      	push	{r4, r5, r6, lr}
9000c1d2:	4e0f      	ldr	r6, [pc, #60]	@ (9000c210 <sbrk_aligned+0x40>)
9000c1d4:	460c      	mov	r4, r1
9000c1d6:	6831      	ldr	r1, [r6, #0]
9000c1d8:	4605      	mov	r5, r0
9000c1da:	b911      	cbnz	r1, 9000c1e2 <sbrk_aligned+0x12>
9000c1dc:	f000 fb0e 	bl	9000c7fc <_sbrk_r>
9000c1e0:	6030      	str	r0, [r6, #0]
9000c1e2:	4621      	mov	r1, r4
9000c1e4:	4628      	mov	r0, r5
9000c1e6:	f000 fb09 	bl	9000c7fc <_sbrk_r>
9000c1ea:	1c43      	adds	r3, r0, #1
9000c1ec:	d103      	bne.n	9000c1f6 <sbrk_aligned+0x26>
9000c1ee:	f04f 34ff 	mov.w	r4, #4294967295
9000c1f2:	4620      	mov	r0, r4
9000c1f4:	bd70      	pop	{r4, r5, r6, pc}
9000c1f6:	1cc4      	adds	r4, r0, #3
9000c1f8:	f024 0403 	bic.w	r4, r4, #3
9000c1fc:	42a0      	cmp	r0, r4
9000c1fe:	d0f8      	beq.n	9000c1f2 <sbrk_aligned+0x22>
9000c200:	1a21      	subs	r1, r4, r0
9000c202:	4628      	mov	r0, r5
9000c204:	f000 fafa 	bl	9000c7fc <_sbrk_r>
9000c208:	3001      	adds	r0, #1
9000c20a:	d1f2      	bne.n	9000c1f2 <sbrk_aligned+0x22>
9000c20c:	e7ef      	b.n	9000c1ee <sbrk_aligned+0x1e>
9000c20e:	bf00      	nop
9000c210:	2000134c 	.word	0x2000134c

9000c214 <_malloc_r>:
9000c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c218:	1ccd      	adds	r5, r1, #3
9000c21a:	f025 0503 	bic.w	r5, r5, #3
9000c21e:	3508      	adds	r5, #8
9000c220:	2d0c      	cmp	r5, #12
9000c222:	bf38      	it	cc
9000c224:	250c      	movcc	r5, #12
9000c226:	2d00      	cmp	r5, #0
9000c228:	4606      	mov	r6, r0
9000c22a:	db01      	blt.n	9000c230 <_malloc_r+0x1c>
9000c22c:	42a9      	cmp	r1, r5
9000c22e:	d904      	bls.n	9000c23a <_malloc_r+0x26>
9000c230:	230c      	movs	r3, #12
9000c232:	6033      	str	r3, [r6, #0]
9000c234:	2000      	movs	r0, #0
9000c236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c23a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000c310 <_malloc_r+0xfc>
9000c23e:	f000 f869 	bl	9000c314 <__malloc_lock>
9000c242:	f8d8 3000 	ldr.w	r3, [r8]
9000c246:	461c      	mov	r4, r3
9000c248:	bb44      	cbnz	r4, 9000c29c <_malloc_r+0x88>
9000c24a:	4629      	mov	r1, r5
9000c24c:	4630      	mov	r0, r6
9000c24e:	f7ff ffbf 	bl	9000c1d0 <sbrk_aligned>
9000c252:	1c43      	adds	r3, r0, #1
9000c254:	4604      	mov	r4, r0
9000c256:	d158      	bne.n	9000c30a <_malloc_r+0xf6>
9000c258:	f8d8 4000 	ldr.w	r4, [r8]
9000c25c:	4627      	mov	r7, r4
9000c25e:	2f00      	cmp	r7, #0
9000c260:	d143      	bne.n	9000c2ea <_malloc_r+0xd6>
9000c262:	2c00      	cmp	r4, #0
9000c264:	d04b      	beq.n	9000c2fe <_malloc_r+0xea>
9000c266:	6823      	ldr	r3, [r4, #0]
9000c268:	4639      	mov	r1, r7
9000c26a:	4630      	mov	r0, r6
9000c26c:	eb04 0903 	add.w	r9, r4, r3
9000c270:	f000 fac4 	bl	9000c7fc <_sbrk_r>
9000c274:	4581      	cmp	r9, r0
9000c276:	d142      	bne.n	9000c2fe <_malloc_r+0xea>
9000c278:	6821      	ldr	r1, [r4, #0]
9000c27a:	1a6d      	subs	r5, r5, r1
9000c27c:	4629      	mov	r1, r5
9000c27e:	4630      	mov	r0, r6
9000c280:	f7ff ffa6 	bl	9000c1d0 <sbrk_aligned>
9000c284:	3001      	adds	r0, #1
9000c286:	d03a      	beq.n	9000c2fe <_malloc_r+0xea>
9000c288:	6823      	ldr	r3, [r4, #0]
9000c28a:	442b      	add	r3, r5
9000c28c:	6023      	str	r3, [r4, #0]
9000c28e:	f8d8 3000 	ldr.w	r3, [r8]
9000c292:	685a      	ldr	r2, [r3, #4]
9000c294:	bb62      	cbnz	r2, 9000c2f0 <_malloc_r+0xdc>
9000c296:	f8c8 7000 	str.w	r7, [r8]
9000c29a:	e00f      	b.n	9000c2bc <_malloc_r+0xa8>
9000c29c:	6822      	ldr	r2, [r4, #0]
9000c29e:	1b52      	subs	r2, r2, r5
9000c2a0:	d420      	bmi.n	9000c2e4 <_malloc_r+0xd0>
9000c2a2:	2a0b      	cmp	r2, #11
9000c2a4:	d917      	bls.n	9000c2d6 <_malloc_r+0xc2>
9000c2a6:	1961      	adds	r1, r4, r5
9000c2a8:	42a3      	cmp	r3, r4
9000c2aa:	6025      	str	r5, [r4, #0]
9000c2ac:	bf18      	it	ne
9000c2ae:	6059      	strne	r1, [r3, #4]
9000c2b0:	6863      	ldr	r3, [r4, #4]
9000c2b2:	bf08      	it	eq
9000c2b4:	f8c8 1000 	streq.w	r1, [r8]
9000c2b8:	5162      	str	r2, [r4, r5]
9000c2ba:	604b      	str	r3, [r1, #4]
9000c2bc:	4630      	mov	r0, r6
9000c2be:	f000 f82f 	bl	9000c320 <__malloc_unlock>
9000c2c2:	f104 000b 	add.w	r0, r4, #11
9000c2c6:	1d23      	adds	r3, r4, #4
9000c2c8:	f020 0007 	bic.w	r0, r0, #7
9000c2cc:	1ac2      	subs	r2, r0, r3
9000c2ce:	bf1c      	itt	ne
9000c2d0:	1a1b      	subne	r3, r3, r0
9000c2d2:	50a3      	strne	r3, [r4, r2]
9000c2d4:	e7af      	b.n	9000c236 <_malloc_r+0x22>
9000c2d6:	6862      	ldr	r2, [r4, #4]
9000c2d8:	42a3      	cmp	r3, r4
9000c2da:	bf0c      	ite	eq
9000c2dc:	f8c8 2000 	streq.w	r2, [r8]
9000c2e0:	605a      	strne	r2, [r3, #4]
9000c2e2:	e7eb      	b.n	9000c2bc <_malloc_r+0xa8>
9000c2e4:	4623      	mov	r3, r4
9000c2e6:	6864      	ldr	r4, [r4, #4]
9000c2e8:	e7ae      	b.n	9000c248 <_malloc_r+0x34>
9000c2ea:	463c      	mov	r4, r7
9000c2ec:	687f      	ldr	r7, [r7, #4]
9000c2ee:	e7b6      	b.n	9000c25e <_malloc_r+0x4a>
9000c2f0:	461a      	mov	r2, r3
9000c2f2:	685b      	ldr	r3, [r3, #4]
9000c2f4:	42a3      	cmp	r3, r4
9000c2f6:	d1fb      	bne.n	9000c2f0 <_malloc_r+0xdc>
9000c2f8:	2300      	movs	r3, #0
9000c2fa:	6053      	str	r3, [r2, #4]
9000c2fc:	e7de      	b.n	9000c2bc <_malloc_r+0xa8>
9000c2fe:	230c      	movs	r3, #12
9000c300:	6033      	str	r3, [r6, #0]
9000c302:	4630      	mov	r0, r6
9000c304:	f000 f80c 	bl	9000c320 <__malloc_unlock>
9000c308:	e794      	b.n	9000c234 <_malloc_r+0x20>
9000c30a:	6005      	str	r5, [r0, #0]
9000c30c:	e7d6      	b.n	9000c2bc <_malloc_r+0xa8>
9000c30e:	bf00      	nop
9000c310:	20001350 	.word	0x20001350

9000c314 <__malloc_lock>:
9000c314:	4801      	ldr	r0, [pc, #4]	@ (9000c31c <__malloc_lock+0x8>)
9000c316:	f000 babe 	b.w	9000c896 <__retarget_lock_acquire_recursive>
9000c31a:	bf00      	nop
9000c31c:	20001494 	.word	0x20001494

9000c320 <__malloc_unlock>:
9000c320:	4801      	ldr	r0, [pc, #4]	@ (9000c328 <__malloc_unlock+0x8>)
9000c322:	f000 bab9 	b.w	9000c898 <__retarget_lock_release_recursive>
9000c326:	bf00      	nop
9000c328:	20001494 	.word	0x20001494

9000c32c <std>:
9000c32c:	2300      	movs	r3, #0
9000c32e:	b510      	push	{r4, lr}
9000c330:	4604      	mov	r4, r0
9000c332:	e9c0 3300 	strd	r3, r3, [r0]
9000c336:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000c33a:	6083      	str	r3, [r0, #8]
9000c33c:	8181      	strh	r1, [r0, #12]
9000c33e:	6643      	str	r3, [r0, #100]	@ 0x64
9000c340:	81c2      	strh	r2, [r0, #14]
9000c342:	6183      	str	r3, [r0, #24]
9000c344:	4619      	mov	r1, r3
9000c346:	2208      	movs	r2, #8
9000c348:	305c      	adds	r0, #92	@ 0x5c
9000c34a:	f000 fa1b 	bl	9000c784 <memset>
9000c34e:	4b0d      	ldr	r3, [pc, #52]	@ (9000c384 <std+0x58>)
9000c350:	6263      	str	r3, [r4, #36]	@ 0x24
9000c352:	4b0d      	ldr	r3, [pc, #52]	@ (9000c388 <std+0x5c>)
9000c354:	62a3      	str	r3, [r4, #40]	@ 0x28
9000c356:	4b0d      	ldr	r3, [pc, #52]	@ (9000c38c <std+0x60>)
9000c358:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000c35a:	4b0d      	ldr	r3, [pc, #52]	@ (9000c390 <std+0x64>)
9000c35c:	6323      	str	r3, [r4, #48]	@ 0x30
9000c35e:	4b0d      	ldr	r3, [pc, #52]	@ (9000c394 <std+0x68>)
9000c360:	6224      	str	r4, [r4, #32]
9000c362:	429c      	cmp	r4, r3
9000c364:	d006      	beq.n	9000c374 <std+0x48>
9000c366:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000c36a:	4294      	cmp	r4, r2
9000c36c:	d002      	beq.n	9000c374 <std+0x48>
9000c36e:	33d0      	adds	r3, #208	@ 0xd0
9000c370:	429c      	cmp	r4, r3
9000c372:	d105      	bne.n	9000c380 <std+0x54>
9000c374:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000c378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c37c:	f000 ba8a 	b.w	9000c894 <__retarget_lock_init_recursive>
9000c380:	bd10      	pop	{r4, pc}
9000c382:	bf00      	nop
9000c384:	9000c5d5 	.word	0x9000c5d5
9000c388:	9000c5f7 	.word	0x9000c5f7
9000c38c:	9000c62f 	.word	0x9000c62f
9000c390:	9000c653 	.word	0x9000c653
9000c394:	20001354 	.word	0x20001354

9000c398 <stdio_exit_handler>:
9000c398:	4a02      	ldr	r2, [pc, #8]	@ (9000c3a4 <stdio_exit_handler+0xc>)
9000c39a:	4903      	ldr	r1, [pc, #12]	@ (9000c3a8 <stdio_exit_handler+0x10>)
9000c39c:	4803      	ldr	r0, [pc, #12]	@ (9000c3ac <stdio_exit_handler+0x14>)
9000c39e:	f000 b869 	b.w	9000c474 <_fwalk_sglue>
9000c3a2:	bf00      	nop
9000c3a4:	20000070 	.word	0x20000070
9000c3a8:	9000d2a1 	.word	0x9000d2a1
9000c3ac:	20000080 	.word	0x20000080

9000c3b0 <cleanup_stdio>:
9000c3b0:	6841      	ldr	r1, [r0, #4]
9000c3b2:	4b0c      	ldr	r3, [pc, #48]	@ (9000c3e4 <cleanup_stdio+0x34>)
9000c3b4:	4299      	cmp	r1, r3
9000c3b6:	b510      	push	{r4, lr}
9000c3b8:	4604      	mov	r4, r0
9000c3ba:	d001      	beq.n	9000c3c0 <cleanup_stdio+0x10>
9000c3bc:	f000 ff70 	bl	9000d2a0 <_fflush_r>
9000c3c0:	68a1      	ldr	r1, [r4, #8]
9000c3c2:	4b09      	ldr	r3, [pc, #36]	@ (9000c3e8 <cleanup_stdio+0x38>)
9000c3c4:	4299      	cmp	r1, r3
9000c3c6:	d002      	beq.n	9000c3ce <cleanup_stdio+0x1e>
9000c3c8:	4620      	mov	r0, r4
9000c3ca:	f000 ff69 	bl	9000d2a0 <_fflush_r>
9000c3ce:	68e1      	ldr	r1, [r4, #12]
9000c3d0:	4b06      	ldr	r3, [pc, #24]	@ (9000c3ec <cleanup_stdio+0x3c>)
9000c3d2:	4299      	cmp	r1, r3
9000c3d4:	d004      	beq.n	9000c3e0 <cleanup_stdio+0x30>
9000c3d6:	4620      	mov	r0, r4
9000c3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c3dc:	f000 bf60 	b.w	9000d2a0 <_fflush_r>
9000c3e0:	bd10      	pop	{r4, pc}
9000c3e2:	bf00      	nop
9000c3e4:	20001354 	.word	0x20001354
9000c3e8:	200013bc 	.word	0x200013bc
9000c3ec:	20001424 	.word	0x20001424

9000c3f0 <global_stdio_init.part.0>:
9000c3f0:	b510      	push	{r4, lr}
9000c3f2:	4b0b      	ldr	r3, [pc, #44]	@ (9000c420 <global_stdio_init.part.0+0x30>)
9000c3f4:	4c0b      	ldr	r4, [pc, #44]	@ (9000c424 <global_stdio_init.part.0+0x34>)
9000c3f6:	4a0c      	ldr	r2, [pc, #48]	@ (9000c428 <global_stdio_init.part.0+0x38>)
9000c3f8:	601a      	str	r2, [r3, #0]
9000c3fa:	4620      	mov	r0, r4
9000c3fc:	2200      	movs	r2, #0
9000c3fe:	2104      	movs	r1, #4
9000c400:	f7ff ff94 	bl	9000c32c <std>
9000c404:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000c408:	2201      	movs	r2, #1
9000c40a:	2109      	movs	r1, #9
9000c40c:	f7ff ff8e 	bl	9000c32c <std>
9000c410:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000c414:	2202      	movs	r2, #2
9000c416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c41a:	2112      	movs	r1, #18
9000c41c:	f7ff bf86 	b.w	9000c32c <std>
9000c420:	2000148c 	.word	0x2000148c
9000c424:	20001354 	.word	0x20001354
9000c428:	9000c399 	.word	0x9000c399

9000c42c <__sfp_lock_acquire>:
9000c42c:	4801      	ldr	r0, [pc, #4]	@ (9000c434 <__sfp_lock_acquire+0x8>)
9000c42e:	f000 ba32 	b.w	9000c896 <__retarget_lock_acquire_recursive>
9000c432:	bf00      	nop
9000c434:	20001495 	.word	0x20001495

9000c438 <__sfp_lock_release>:
9000c438:	4801      	ldr	r0, [pc, #4]	@ (9000c440 <__sfp_lock_release+0x8>)
9000c43a:	f000 ba2d 	b.w	9000c898 <__retarget_lock_release_recursive>
9000c43e:	bf00      	nop
9000c440:	20001495 	.word	0x20001495

9000c444 <__sinit>:
9000c444:	b510      	push	{r4, lr}
9000c446:	4604      	mov	r4, r0
9000c448:	f7ff fff0 	bl	9000c42c <__sfp_lock_acquire>
9000c44c:	6a23      	ldr	r3, [r4, #32]
9000c44e:	b11b      	cbz	r3, 9000c458 <__sinit+0x14>
9000c450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c454:	f7ff bff0 	b.w	9000c438 <__sfp_lock_release>
9000c458:	4b04      	ldr	r3, [pc, #16]	@ (9000c46c <__sinit+0x28>)
9000c45a:	6223      	str	r3, [r4, #32]
9000c45c:	4b04      	ldr	r3, [pc, #16]	@ (9000c470 <__sinit+0x2c>)
9000c45e:	681b      	ldr	r3, [r3, #0]
9000c460:	2b00      	cmp	r3, #0
9000c462:	d1f5      	bne.n	9000c450 <__sinit+0xc>
9000c464:	f7ff ffc4 	bl	9000c3f0 <global_stdio_init.part.0>
9000c468:	e7f2      	b.n	9000c450 <__sinit+0xc>
9000c46a:	bf00      	nop
9000c46c:	9000c3b1 	.word	0x9000c3b1
9000c470:	2000148c 	.word	0x2000148c

9000c474 <_fwalk_sglue>:
9000c474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c478:	4607      	mov	r7, r0
9000c47a:	4688      	mov	r8, r1
9000c47c:	4614      	mov	r4, r2
9000c47e:	2600      	movs	r6, #0
9000c480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c484:	f1b9 0901 	subs.w	r9, r9, #1
9000c488:	d505      	bpl.n	9000c496 <_fwalk_sglue+0x22>
9000c48a:	6824      	ldr	r4, [r4, #0]
9000c48c:	2c00      	cmp	r4, #0
9000c48e:	d1f7      	bne.n	9000c480 <_fwalk_sglue+0xc>
9000c490:	4630      	mov	r0, r6
9000c492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c496:	89ab      	ldrh	r3, [r5, #12]
9000c498:	2b01      	cmp	r3, #1
9000c49a:	d907      	bls.n	9000c4ac <_fwalk_sglue+0x38>
9000c49c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c4a0:	3301      	adds	r3, #1
9000c4a2:	d003      	beq.n	9000c4ac <_fwalk_sglue+0x38>
9000c4a4:	4629      	mov	r1, r5
9000c4a6:	4638      	mov	r0, r7
9000c4a8:	47c0      	blx	r8
9000c4aa:	4306      	orrs	r6, r0
9000c4ac:	3568      	adds	r5, #104	@ 0x68
9000c4ae:	e7e9      	b.n	9000c484 <_fwalk_sglue+0x10>

9000c4b0 <iprintf>:
9000c4b0:	b40f      	push	{r0, r1, r2, r3}
9000c4b2:	b507      	push	{r0, r1, r2, lr}
9000c4b4:	4906      	ldr	r1, [pc, #24]	@ (9000c4d0 <iprintf+0x20>)
9000c4b6:	ab04      	add	r3, sp, #16
9000c4b8:	6808      	ldr	r0, [r1, #0]
9000c4ba:	f853 2b04 	ldr.w	r2, [r3], #4
9000c4be:	6881      	ldr	r1, [r0, #8]
9000c4c0:	9301      	str	r3, [sp, #4]
9000c4c2:	f000 fbc5 	bl	9000cc50 <_vfiprintf_r>
9000c4c6:	b003      	add	sp, #12
9000c4c8:	f85d eb04 	ldr.w	lr, [sp], #4
9000c4cc:	b004      	add	sp, #16
9000c4ce:	4770      	bx	lr
9000c4d0:	2000007c 	.word	0x2000007c

9000c4d4 <_puts_r>:
9000c4d4:	6a03      	ldr	r3, [r0, #32]
9000c4d6:	b570      	push	{r4, r5, r6, lr}
9000c4d8:	6884      	ldr	r4, [r0, #8]
9000c4da:	4605      	mov	r5, r0
9000c4dc:	460e      	mov	r6, r1
9000c4de:	b90b      	cbnz	r3, 9000c4e4 <_puts_r+0x10>
9000c4e0:	f7ff ffb0 	bl	9000c444 <__sinit>
9000c4e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c4e6:	07db      	lsls	r3, r3, #31
9000c4e8:	d405      	bmi.n	9000c4f6 <_puts_r+0x22>
9000c4ea:	89a3      	ldrh	r3, [r4, #12]
9000c4ec:	0598      	lsls	r0, r3, #22
9000c4ee:	d402      	bmi.n	9000c4f6 <_puts_r+0x22>
9000c4f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c4f2:	f000 f9d0 	bl	9000c896 <__retarget_lock_acquire_recursive>
9000c4f6:	89a3      	ldrh	r3, [r4, #12]
9000c4f8:	0719      	lsls	r1, r3, #28
9000c4fa:	d502      	bpl.n	9000c502 <_puts_r+0x2e>
9000c4fc:	6923      	ldr	r3, [r4, #16]
9000c4fe:	2b00      	cmp	r3, #0
9000c500:	d135      	bne.n	9000c56e <_puts_r+0x9a>
9000c502:	4621      	mov	r1, r4
9000c504:	4628      	mov	r0, r5
9000c506:	f000 f8e7 	bl	9000c6d8 <__swsetup_r>
9000c50a:	b380      	cbz	r0, 9000c56e <_puts_r+0x9a>
9000c50c:	f04f 35ff 	mov.w	r5, #4294967295
9000c510:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c512:	07da      	lsls	r2, r3, #31
9000c514:	d405      	bmi.n	9000c522 <_puts_r+0x4e>
9000c516:	89a3      	ldrh	r3, [r4, #12]
9000c518:	059b      	lsls	r3, r3, #22
9000c51a:	d402      	bmi.n	9000c522 <_puts_r+0x4e>
9000c51c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c51e:	f000 f9bb 	bl	9000c898 <__retarget_lock_release_recursive>
9000c522:	4628      	mov	r0, r5
9000c524:	bd70      	pop	{r4, r5, r6, pc}
9000c526:	2b00      	cmp	r3, #0
9000c528:	da04      	bge.n	9000c534 <_puts_r+0x60>
9000c52a:	69a2      	ldr	r2, [r4, #24]
9000c52c:	429a      	cmp	r2, r3
9000c52e:	dc17      	bgt.n	9000c560 <_puts_r+0x8c>
9000c530:	290a      	cmp	r1, #10
9000c532:	d015      	beq.n	9000c560 <_puts_r+0x8c>
9000c534:	6823      	ldr	r3, [r4, #0]
9000c536:	1c5a      	adds	r2, r3, #1
9000c538:	6022      	str	r2, [r4, #0]
9000c53a:	7019      	strb	r1, [r3, #0]
9000c53c:	68a3      	ldr	r3, [r4, #8]
9000c53e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c542:	3b01      	subs	r3, #1
9000c544:	60a3      	str	r3, [r4, #8]
9000c546:	2900      	cmp	r1, #0
9000c548:	d1ed      	bne.n	9000c526 <_puts_r+0x52>
9000c54a:	2b00      	cmp	r3, #0
9000c54c:	da11      	bge.n	9000c572 <_puts_r+0x9e>
9000c54e:	4622      	mov	r2, r4
9000c550:	210a      	movs	r1, #10
9000c552:	4628      	mov	r0, r5
9000c554:	f000 f881 	bl	9000c65a <__swbuf_r>
9000c558:	3001      	adds	r0, #1
9000c55a:	d0d7      	beq.n	9000c50c <_puts_r+0x38>
9000c55c:	250a      	movs	r5, #10
9000c55e:	e7d7      	b.n	9000c510 <_puts_r+0x3c>
9000c560:	4622      	mov	r2, r4
9000c562:	4628      	mov	r0, r5
9000c564:	f000 f879 	bl	9000c65a <__swbuf_r>
9000c568:	3001      	adds	r0, #1
9000c56a:	d1e7      	bne.n	9000c53c <_puts_r+0x68>
9000c56c:	e7ce      	b.n	9000c50c <_puts_r+0x38>
9000c56e:	3e01      	subs	r6, #1
9000c570:	e7e4      	b.n	9000c53c <_puts_r+0x68>
9000c572:	6823      	ldr	r3, [r4, #0]
9000c574:	1c5a      	adds	r2, r3, #1
9000c576:	6022      	str	r2, [r4, #0]
9000c578:	220a      	movs	r2, #10
9000c57a:	701a      	strb	r2, [r3, #0]
9000c57c:	e7ee      	b.n	9000c55c <_puts_r+0x88>
	...

9000c580 <puts>:
9000c580:	4b02      	ldr	r3, [pc, #8]	@ (9000c58c <puts+0xc>)
9000c582:	4601      	mov	r1, r0
9000c584:	6818      	ldr	r0, [r3, #0]
9000c586:	f7ff bfa5 	b.w	9000c4d4 <_puts_r>
9000c58a:	bf00      	nop
9000c58c:	2000007c 	.word	0x2000007c

9000c590 <siprintf>:
9000c590:	b40e      	push	{r1, r2, r3}
9000c592:	b510      	push	{r4, lr}
9000c594:	b09d      	sub	sp, #116	@ 0x74
9000c596:	ab1f      	add	r3, sp, #124	@ 0x7c
9000c598:	9002      	str	r0, [sp, #8]
9000c59a:	9006      	str	r0, [sp, #24]
9000c59c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
9000c5a0:	480a      	ldr	r0, [pc, #40]	@ (9000c5cc <siprintf+0x3c>)
9000c5a2:	9107      	str	r1, [sp, #28]
9000c5a4:	9104      	str	r1, [sp, #16]
9000c5a6:	490a      	ldr	r1, [pc, #40]	@ (9000c5d0 <siprintf+0x40>)
9000c5a8:	f853 2b04 	ldr.w	r2, [r3], #4
9000c5ac:	9105      	str	r1, [sp, #20]
9000c5ae:	2400      	movs	r4, #0
9000c5b0:	a902      	add	r1, sp, #8
9000c5b2:	6800      	ldr	r0, [r0, #0]
9000c5b4:	9301      	str	r3, [sp, #4]
9000c5b6:	941b      	str	r4, [sp, #108]	@ 0x6c
9000c5b8:	f000 fa24 	bl	9000ca04 <_svfiprintf_r>
9000c5bc:	9b02      	ldr	r3, [sp, #8]
9000c5be:	701c      	strb	r4, [r3, #0]
9000c5c0:	b01d      	add	sp, #116	@ 0x74
9000c5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c5c6:	b003      	add	sp, #12
9000c5c8:	4770      	bx	lr
9000c5ca:	bf00      	nop
9000c5cc:	2000007c 	.word	0x2000007c
9000c5d0:	ffff0208 	.word	0xffff0208

9000c5d4 <__sread>:
9000c5d4:	b510      	push	{r4, lr}
9000c5d6:	460c      	mov	r4, r1
9000c5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c5dc:	f000 f8fc 	bl	9000c7d8 <_read_r>
9000c5e0:	2800      	cmp	r0, #0
9000c5e2:	bfab      	itete	ge
9000c5e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c5e6:	89a3      	ldrhlt	r3, [r4, #12]
9000c5e8:	181b      	addge	r3, r3, r0
9000c5ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c5ee:	bfac      	ite	ge
9000c5f0:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c5f2:	81a3      	strhlt	r3, [r4, #12]
9000c5f4:	bd10      	pop	{r4, pc}

9000c5f6 <__swrite>:
9000c5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c5fa:	461f      	mov	r7, r3
9000c5fc:	898b      	ldrh	r3, [r1, #12]
9000c5fe:	05db      	lsls	r3, r3, #23
9000c600:	4605      	mov	r5, r0
9000c602:	460c      	mov	r4, r1
9000c604:	4616      	mov	r6, r2
9000c606:	d505      	bpl.n	9000c614 <__swrite+0x1e>
9000c608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c60c:	2302      	movs	r3, #2
9000c60e:	2200      	movs	r2, #0
9000c610:	f000 f8d0 	bl	9000c7b4 <_lseek_r>
9000c614:	89a3      	ldrh	r3, [r4, #12]
9000c616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c61a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c61e:	81a3      	strh	r3, [r4, #12]
9000c620:	4632      	mov	r2, r6
9000c622:	463b      	mov	r3, r7
9000c624:	4628      	mov	r0, r5
9000c626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c62a:	f000 b8f7 	b.w	9000c81c <_write_r>

9000c62e <__sseek>:
9000c62e:	b510      	push	{r4, lr}
9000c630:	460c      	mov	r4, r1
9000c632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c636:	f000 f8bd 	bl	9000c7b4 <_lseek_r>
9000c63a:	1c43      	adds	r3, r0, #1
9000c63c:	89a3      	ldrh	r3, [r4, #12]
9000c63e:	bf15      	itete	ne
9000c640:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c642:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c646:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c64a:	81a3      	strheq	r3, [r4, #12]
9000c64c:	bf18      	it	ne
9000c64e:	81a3      	strhne	r3, [r4, #12]
9000c650:	bd10      	pop	{r4, pc}

9000c652 <__sclose>:
9000c652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c656:	f000 b89d 	b.w	9000c794 <_close_r>

9000c65a <__swbuf_r>:
9000c65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c65c:	460e      	mov	r6, r1
9000c65e:	4614      	mov	r4, r2
9000c660:	4605      	mov	r5, r0
9000c662:	b118      	cbz	r0, 9000c66c <__swbuf_r+0x12>
9000c664:	6a03      	ldr	r3, [r0, #32]
9000c666:	b90b      	cbnz	r3, 9000c66c <__swbuf_r+0x12>
9000c668:	f7ff feec 	bl	9000c444 <__sinit>
9000c66c:	69a3      	ldr	r3, [r4, #24]
9000c66e:	60a3      	str	r3, [r4, #8]
9000c670:	89a3      	ldrh	r3, [r4, #12]
9000c672:	071a      	lsls	r2, r3, #28
9000c674:	d501      	bpl.n	9000c67a <__swbuf_r+0x20>
9000c676:	6923      	ldr	r3, [r4, #16]
9000c678:	b943      	cbnz	r3, 9000c68c <__swbuf_r+0x32>
9000c67a:	4621      	mov	r1, r4
9000c67c:	4628      	mov	r0, r5
9000c67e:	f000 f82b 	bl	9000c6d8 <__swsetup_r>
9000c682:	b118      	cbz	r0, 9000c68c <__swbuf_r+0x32>
9000c684:	f04f 37ff 	mov.w	r7, #4294967295
9000c688:	4638      	mov	r0, r7
9000c68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c68c:	6823      	ldr	r3, [r4, #0]
9000c68e:	6922      	ldr	r2, [r4, #16]
9000c690:	1a98      	subs	r0, r3, r2
9000c692:	6963      	ldr	r3, [r4, #20]
9000c694:	b2f6      	uxtb	r6, r6
9000c696:	4283      	cmp	r3, r0
9000c698:	4637      	mov	r7, r6
9000c69a:	dc05      	bgt.n	9000c6a8 <__swbuf_r+0x4e>
9000c69c:	4621      	mov	r1, r4
9000c69e:	4628      	mov	r0, r5
9000c6a0:	f000 fdfe 	bl	9000d2a0 <_fflush_r>
9000c6a4:	2800      	cmp	r0, #0
9000c6a6:	d1ed      	bne.n	9000c684 <__swbuf_r+0x2a>
9000c6a8:	68a3      	ldr	r3, [r4, #8]
9000c6aa:	3b01      	subs	r3, #1
9000c6ac:	60a3      	str	r3, [r4, #8]
9000c6ae:	6823      	ldr	r3, [r4, #0]
9000c6b0:	1c5a      	adds	r2, r3, #1
9000c6b2:	6022      	str	r2, [r4, #0]
9000c6b4:	701e      	strb	r6, [r3, #0]
9000c6b6:	6962      	ldr	r2, [r4, #20]
9000c6b8:	1c43      	adds	r3, r0, #1
9000c6ba:	429a      	cmp	r2, r3
9000c6bc:	d004      	beq.n	9000c6c8 <__swbuf_r+0x6e>
9000c6be:	89a3      	ldrh	r3, [r4, #12]
9000c6c0:	07db      	lsls	r3, r3, #31
9000c6c2:	d5e1      	bpl.n	9000c688 <__swbuf_r+0x2e>
9000c6c4:	2e0a      	cmp	r6, #10
9000c6c6:	d1df      	bne.n	9000c688 <__swbuf_r+0x2e>
9000c6c8:	4621      	mov	r1, r4
9000c6ca:	4628      	mov	r0, r5
9000c6cc:	f000 fde8 	bl	9000d2a0 <_fflush_r>
9000c6d0:	2800      	cmp	r0, #0
9000c6d2:	d0d9      	beq.n	9000c688 <__swbuf_r+0x2e>
9000c6d4:	e7d6      	b.n	9000c684 <__swbuf_r+0x2a>
	...

9000c6d8 <__swsetup_r>:
9000c6d8:	b538      	push	{r3, r4, r5, lr}
9000c6da:	4b29      	ldr	r3, [pc, #164]	@ (9000c780 <__swsetup_r+0xa8>)
9000c6dc:	4605      	mov	r5, r0
9000c6de:	6818      	ldr	r0, [r3, #0]
9000c6e0:	460c      	mov	r4, r1
9000c6e2:	b118      	cbz	r0, 9000c6ec <__swsetup_r+0x14>
9000c6e4:	6a03      	ldr	r3, [r0, #32]
9000c6e6:	b90b      	cbnz	r3, 9000c6ec <__swsetup_r+0x14>
9000c6e8:	f7ff feac 	bl	9000c444 <__sinit>
9000c6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c6f0:	0719      	lsls	r1, r3, #28
9000c6f2:	d422      	bmi.n	9000c73a <__swsetup_r+0x62>
9000c6f4:	06da      	lsls	r2, r3, #27
9000c6f6:	d407      	bmi.n	9000c708 <__swsetup_r+0x30>
9000c6f8:	2209      	movs	r2, #9
9000c6fa:	602a      	str	r2, [r5, #0]
9000c6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c700:	81a3      	strh	r3, [r4, #12]
9000c702:	f04f 30ff 	mov.w	r0, #4294967295
9000c706:	e033      	b.n	9000c770 <__swsetup_r+0x98>
9000c708:	0758      	lsls	r0, r3, #29
9000c70a:	d512      	bpl.n	9000c732 <__swsetup_r+0x5a>
9000c70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c70e:	b141      	cbz	r1, 9000c722 <__swsetup_r+0x4a>
9000c710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c714:	4299      	cmp	r1, r3
9000c716:	d002      	beq.n	9000c71e <__swsetup_r+0x46>
9000c718:	4628      	mov	r0, r5
9000c71a:	f000 f8cd 	bl	9000c8b8 <_free_r>
9000c71e:	2300      	movs	r3, #0
9000c720:	6363      	str	r3, [r4, #52]	@ 0x34
9000c722:	89a3      	ldrh	r3, [r4, #12]
9000c724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c728:	81a3      	strh	r3, [r4, #12]
9000c72a:	2300      	movs	r3, #0
9000c72c:	6063      	str	r3, [r4, #4]
9000c72e:	6923      	ldr	r3, [r4, #16]
9000c730:	6023      	str	r3, [r4, #0]
9000c732:	89a3      	ldrh	r3, [r4, #12]
9000c734:	f043 0308 	orr.w	r3, r3, #8
9000c738:	81a3      	strh	r3, [r4, #12]
9000c73a:	6923      	ldr	r3, [r4, #16]
9000c73c:	b94b      	cbnz	r3, 9000c752 <__swsetup_r+0x7a>
9000c73e:	89a3      	ldrh	r3, [r4, #12]
9000c740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c748:	d003      	beq.n	9000c752 <__swsetup_r+0x7a>
9000c74a:	4621      	mov	r1, r4
9000c74c:	4628      	mov	r0, r5
9000c74e:	f000 fdf5 	bl	9000d33c <__smakebuf_r>
9000c752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c756:	f013 0201 	ands.w	r2, r3, #1
9000c75a:	d00a      	beq.n	9000c772 <__swsetup_r+0x9a>
9000c75c:	2200      	movs	r2, #0
9000c75e:	60a2      	str	r2, [r4, #8]
9000c760:	6962      	ldr	r2, [r4, #20]
9000c762:	4252      	negs	r2, r2
9000c764:	61a2      	str	r2, [r4, #24]
9000c766:	6922      	ldr	r2, [r4, #16]
9000c768:	b942      	cbnz	r2, 9000c77c <__swsetup_r+0xa4>
9000c76a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c76e:	d1c5      	bne.n	9000c6fc <__swsetup_r+0x24>
9000c770:	bd38      	pop	{r3, r4, r5, pc}
9000c772:	0799      	lsls	r1, r3, #30
9000c774:	bf58      	it	pl
9000c776:	6962      	ldrpl	r2, [r4, #20]
9000c778:	60a2      	str	r2, [r4, #8]
9000c77a:	e7f4      	b.n	9000c766 <__swsetup_r+0x8e>
9000c77c:	2000      	movs	r0, #0
9000c77e:	e7f7      	b.n	9000c770 <__swsetup_r+0x98>
9000c780:	2000007c 	.word	0x2000007c

9000c784 <memset>:
9000c784:	4402      	add	r2, r0
9000c786:	4603      	mov	r3, r0
9000c788:	4293      	cmp	r3, r2
9000c78a:	d100      	bne.n	9000c78e <memset+0xa>
9000c78c:	4770      	bx	lr
9000c78e:	f803 1b01 	strb.w	r1, [r3], #1
9000c792:	e7f9      	b.n	9000c788 <memset+0x4>

9000c794 <_close_r>:
9000c794:	b538      	push	{r3, r4, r5, lr}
9000c796:	4d06      	ldr	r5, [pc, #24]	@ (9000c7b0 <_close_r+0x1c>)
9000c798:	2300      	movs	r3, #0
9000c79a:	4604      	mov	r4, r0
9000c79c:	4608      	mov	r0, r1
9000c79e:	602b      	str	r3, [r5, #0]
9000c7a0:	f7f4 fc47 	bl	90001032 <_close>
9000c7a4:	1c43      	adds	r3, r0, #1
9000c7a6:	d102      	bne.n	9000c7ae <_close_r+0x1a>
9000c7a8:	682b      	ldr	r3, [r5, #0]
9000c7aa:	b103      	cbz	r3, 9000c7ae <_close_r+0x1a>
9000c7ac:	6023      	str	r3, [r4, #0]
9000c7ae:	bd38      	pop	{r3, r4, r5, pc}
9000c7b0:	20001490 	.word	0x20001490

9000c7b4 <_lseek_r>:
9000c7b4:	b538      	push	{r3, r4, r5, lr}
9000c7b6:	4d07      	ldr	r5, [pc, #28]	@ (9000c7d4 <_lseek_r+0x20>)
9000c7b8:	4604      	mov	r4, r0
9000c7ba:	4608      	mov	r0, r1
9000c7bc:	4611      	mov	r1, r2
9000c7be:	2200      	movs	r2, #0
9000c7c0:	602a      	str	r2, [r5, #0]
9000c7c2:	461a      	mov	r2, r3
9000c7c4:	f7f4 fc5c 	bl	90001080 <_lseek>
9000c7c8:	1c43      	adds	r3, r0, #1
9000c7ca:	d102      	bne.n	9000c7d2 <_lseek_r+0x1e>
9000c7cc:	682b      	ldr	r3, [r5, #0]
9000c7ce:	b103      	cbz	r3, 9000c7d2 <_lseek_r+0x1e>
9000c7d0:	6023      	str	r3, [r4, #0]
9000c7d2:	bd38      	pop	{r3, r4, r5, pc}
9000c7d4:	20001490 	.word	0x20001490

9000c7d8 <_read_r>:
9000c7d8:	b538      	push	{r3, r4, r5, lr}
9000c7da:	4d07      	ldr	r5, [pc, #28]	@ (9000c7f8 <_read_r+0x20>)
9000c7dc:	4604      	mov	r4, r0
9000c7de:	4608      	mov	r0, r1
9000c7e0:	4611      	mov	r1, r2
9000c7e2:	2200      	movs	r2, #0
9000c7e4:	602a      	str	r2, [r5, #0]
9000c7e6:	461a      	mov	r2, r3
9000c7e8:	f7f4 fbea 	bl	90000fc0 <_read>
9000c7ec:	1c43      	adds	r3, r0, #1
9000c7ee:	d102      	bne.n	9000c7f6 <_read_r+0x1e>
9000c7f0:	682b      	ldr	r3, [r5, #0]
9000c7f2:	b103      	cbz	r3, 9000c7f6 <_read_r+0x1e>
9000c7f4:	6023      	str	r3, [r4, #0]
9000c7f6:	bd38      	pop	{r3, r4, r5, pc}
9000c7f8:	20001490 	.word	0x20001490

9000c7fc <_sbrk_r>:
9000c7fc:	b538      	push	{r3, r4, r5, lr}
9000c7fe:	4d06      	ldr	r5, [pc, #24]	@ (9000c818 <_sbrk_r+0x1c>)
9000c800:	2300      	movs	r3, #0
9000c802:	4604      	mov	r4, r0
9000c804:	4608      	mov	r0, r1
9000c806:	602b      	str	r3, [r5, #0]
9000c808:	f7f4 fc48 	bl	9000109c <_sbrk>
9000c80c:	1c43      	adds	r3, r0, #1
9000c80e:	d102      	bne.n	9000c816 <_sbrk_r+0x1a>
9000c810:	682b      	ldr	r3, [r5, #0]
9000c812:	b103      	cbz	r3, 9000c816 <_sbrk_r+0x1a>
9000c814:	6023      	str	r3, [r4, #0]
9000c816:	bd38      	pop	{r3, r4, r5, pc}
9000c818:	20001490 	.word	0x20001490

9000c81c <_write_r>:
9000c81c:	b538      	push	{r3, r4, r5, lr}
9000c81e:	4d07      	ldr	r5, [pc, #28]	@ (9000c83c <_write_r+0x20>)
9000c820:	4604      	mov	r4, r0
9000c822:	4608      	mov	r0, r1
9000c824:	4611      	mov	r1, r2
9000c826:	2200      	movs	r2, #0
9000c828:	602a      	str	r2, [r5, #0]
9000c82a:	461a      	mov	r2, r3
9000c82c:	f7f4 fbe5 	bl	90000ffa <_write>
9000c830:	1c43      	adds	r3, r0, #1
9000c832:	d102      	bne.n	9000c83a <_write_r+0x1e>
9000c834:	682b      	ldr	r3, [r5, #0]
9000c836:	b103      	cbz	r3, 9000c83a <_write_r+0x1e>
9000c838:	6023      	str	r3, [r4, #0]
9000c83a:	bd38      	pop	{r3, r4, r5, pc}
9000c83c:	20001490 	.word	0x20001490

9000c840 <__errno>:
9000c840:	4b01      	ldr	r3, [pc, #4]	@ (9000c848 <__errno+0x8>)
9000c842:	6818      	ldr	r0, [r3, #0]
9000c844:	4770      	bx	lr
9000c846:	bf00      	nop
9000c848:	2000007c 	.word	0x2000007c

9000c84c <__libc_init_array>:
9000c84c:	b570      	push	{r4, r5, r6, lr}
9000c84e:	4d0d      	ldr	r5, [pc, #52]	@ (9000c884 <__libc_init_array+0x38>)
9000c850:	4c0d      	ldr	r4, [pc, #52]	@ (9000c888 <__libc_init_array+0x3c>)
9000c852:	1b64      	subs	r4, r4, r5
9000c854:	10a4      	asrs	r4, r4, #2
9000c856:	2600      	movs	r6, #0
9000c858:	42a6      	cmp	r6, r4
9000c85a:	d109      	bne.n	9000c870 <__libc_init_array+0x24>
9000c85c:	4d0b      	ldr	r5, [pc, #44]	@ (9000c88c <__libc_init_array+0x40>)
9000c85e:	4c0c      	ldr	r4, [pc, #48]	@ (9000c890 <__libc_init_array+0x44>)
9000c860:	f000 fe1a 	bl	9000d498 <_init>
9000c864:	1b64      	subs	r4, r4, r5
9000c866:	10a4      	asrs	r4, r4, #2
9000c868:	2600      	movs	r6, #0
9000c86a:	42a6      	cmp	r6, r4
9000c86c:	d105      	bne.n	9000c87a <__libc_init_array+0x2e>
9000c86e:	bd70      	pop	{r4, r5, r6, pc}
9000c870:	f855 3b04 	ldr.w	r3, [r5], #4
9000c874:	4798      	blx	r3
9000c876:	3601      	adds	r6, #1
9000c878:	e7ee      	b.n	9000c858 <__libc_init_array+0xc>
9000c87a:	f855 3b04 	ldr.w	r3, [r5], #4
9000c87e:	4798      	blx	r3
9000c880:	3601      	adds	r6, #1
9000c882:	e7f2      	b.n	9000c86a <__libc_init_array+0x1e>
9000c884:	9000fb80 	.word	0x9000fb80
9000c888:	9000fb80 	.word	0x9000fb80
9000c88c:	9000fb80 	.word	0x9000fb80
9000c890:	9000fb84 	.word	0x9000fb84

9000c894 <__retarget_lock_init_recursive>:
9000c894:	4770      	bx	lr

9000c896 <__retarget_lock_acquire_recursive>:
9000c896:	4770      	bx	lr

9000c898 <__retarget_lock_release_recursive>:
9000c898:	4770      	bx	lr

9000c89a <memcpy>:
9000c89a:	440a      	add	r2, r1
9000c89c:	4291      	cmp	r1, r2
9000c89e:	f100 33ff 	add.w	r3, r0, #4294967295
9000c8a2:	d100      	bne.n	9000c8a6 <memcpy+0xc>
9000c8a4:	4770      	bx	lr
9000c8a6:	b510      	push	{r4, lr}
9000c8a8:	f811 4b01 	ldrb.w	r4, [r1], #1
9000c8ac:	f803 4f01 	strb.w	r4, [r3, #1]!
9000c8b0:	4291      	cmp	r1, r2
9000c8b2:	d1f9      	bne.n	9000c8a8 <memcpy+0xe>
9000c8b4:	bd10      	pop	{r4, pc}
	...

9000c8b8 <_free_r>:
9000c8b8:	b538      	push	{r3, r4, r5, lr}
9000c8ba:	4605      	mov	r5, r0
9000c8bc:	2900      	cmp	r1, #0
9000c8be:	d041      	beq.n	9000c944 <_free_r+0x8c>
9000c8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c8c4:	1f0c      	subs	r4, r1, #4
9000c8c6:	2b00      	cmp	r3, #0
9000c8c8:	bfb8      	it	lt
9000c8ca:	18e4      	addlt	r4, r4, r3
9000c8cc:	f7ff fd22 	bl	9000c314 <__malloc_lock>
9000c8d0:	4a1d      	ldr	r2, [pc, #116]	@ (9000c948 <_free_r+0x90>)
9000c8d2:	6813      	ldr	r3, [r2, #0]
9000c8d4:	b933      	cbnz	r3, 9000c8e4 <_free_r+0x2c>
9000c8d6:	6063      	str	r3, [r4, #4]
9000c8d8:	6014      	str	r4, [r2, #0]
9000c8da:	4628      	mov	r0, r5
9000c8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000c8e0:	f7ff bd1e 	b.w	9000c320 <__malloc_unlock>
9000c8e4:	42a3      	cmp	r3, r4
9000c8e6:	d908      	bls.n	9000c8fa <_free_r+0x42>
9000c8e8:	6820      	ldr	r0, [r4, #0]
9000c8ea:	1821      	adds	r1, r4, r0
9000c8ec:	428b      	cmp	r3, r1
9000c8ee:	bf01      	itttt	eq
9000c8f0:	6819      	ldreq	r1, [r3, #0]
9000c8f2:	685b      	ldreq	r3, [r3, #4]
9000c8f4:	1809      	addeq	r1, r1, r0
9000c8f6:	6021      	streq	r1, [r4, #0]
9000c8f8:	e7ed      	b.n	9000c8d6 <_free_r+0x1e>
9000c8fa:	461a      	mov	r2, r3
9000c8fc:	685b      	ldr	r3, [r3, #4]
9000c8fe:	b10b      	cbz	r3, 9000c904 <_free_r+0x4c>
9000c900:	42a3      	cmp	r3, r4
9000c902:	d9fa      	bls.n	9000c8fa <_free_r+0x42>
9000c904:	6811      	ldr	r1, [r2, #0]
9000c906:	1850      	adds	r0, r2, r1
9000c908:	42a0      	cmp	r0, r4
9000c90a:	d10b      	bne.n	9000c924 <_free_r+0x6c>
9000c90c:	6820      	ldr	r0, [r4, #0]
9000c90e:	4401      	add	r1, r0
9000c910:	1850      	adds	r0, r2, r1
9000c912:	4283      	cmp	r3, r0
9000c914:	6011      	str	r1, [r2, #0]
9000c916:	d1e0      	bne.n	9000c8da <_free_r+0x22>
9000c918:	6818      	ldr	r0, [r3, #0]
9000c91a:	685b      	ldr	r3, [r3, #4]
9000c91c:	6053      	str	r3, [r2, #4]
9000c91e:	4408      	add	r0, r1
9000c920:	6010      	str	r0, [r2, #0]
9000c922:	e7da      	b.n	9000c8da <_free_r+0x22>
9000c924:	d902      	bls.n	9000c92c <_free_r+0x74>
9000c926:	230c      	movs	r3, #12
9000c928:	602b      	str	r3, [r5, #0]
9000c92a:	e7d6      	b.n	9000c8da <_free_r+0x22>
9000c92c:	6820      	ldr	r0, [r4, #0]
9000c92e:	1821      	adds	r1, r4, r0
9000c930:	428b      	cmp	r3, r1
9000c932:	bf04      	itt	eq
9000c934:	6819      	ldreq	r1, [r3, #0]
9000c936:	685b      	ldreq	r3, [r3, #4]
9000c938:	6063      	str	r3, [r4, #4]
9000c93a:	bf04      	itt	eq
9000c93c:	1809      	addeq	r1, r1, r0
9000c93e:	6021      	streq	r1, [r4, #0]
9000c940:	6054      	str	r4, [r2, #4]
9000c942:	e7ca      	b.n	9000c8da <_free_r+0x22>
9000c944:	bd38      	pop	{r3, r4, r5, pc}
9000c946:	bf00      	nop
9000c948:	20001350 	.word	0x20001350

9000c94c <__ssputs_r>:
9000c94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c950:	688e      	ldr	r6, [r1, #8]
9000c952:	461f      	mov	r7, r3
9000c954:	42be      	cmp	r6, r7
9000c956:	680b      	ldr	r3, [r1, #0]
9000c958:	4682      	mov	sl, r0
9000c95a:	460c      	mov	r4, r1
9000c95c:	4690      	mov	r8, r2
9000c95e:	d82d      	bhi.n	9000c9bc <__ssputs_r+0x70>
9000c960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000c964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
9000c968:	d026      	beq.n	9000c9b8 <__ssputs_r+0x6c>
9000c96a:	6965      	ldr	r5, [r4, #20]
9000c96c:	6909      	ldr	r1, [r1, #16]
9000c96e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000c972:	eba3 0901 	sub.w	r9, r3, r1
9000c976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000c97a:	1c7b      	adds	r3, r7, #1
9000c97c:	444b      	add	r3, r9
9000c97e:	106d      	asrs	r5, r5, #1
9000c980:	429d      	cmp	r5, r3
9000c982:	bf38      	it	cc
9000c984:	461d      	movcc	r5, r3
9000c986:	0553      	lsls	r3, r2, #21
9000c988:	d527      	bpl.n	9000c9da <__ssputs_r+0x8e>
9000c98a:	4629      	mov	r1, r5
9000c98c:	f7ff fc42 	bl	9000c214 <_malloc_r>
9000c990:	4606      	mov	r6, r0
9000c992:	b360      	cbz	r0, 9000c9ee <__ssputs_r+0xa2>
9000c994:	6921      	ldr	r1, [r4, #16]
9000c996:	464a      	mov	r2, r9
9000c998:	f7ff ff7f 	bl	9000c89a <memcpy>
9000c99c:	89a3      	ldrh	r3, [r4, #12]
9000c99e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
9000c9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000c9a6:	81a3      	strh	r3, [r4, #12]
9000c9a8:	6126      	str	r6, [r4, #16]
9000c9aa:	6165      	str	r5, [r4, #20]
9000c9ac:	444e      	add	r6, r9
9000c9ae:	eba5 0509 	sub.w	r5, r5, r9
9000c9b2:	6026      	str	r6, [r4, #0]
9000c9b4:	60a5      	str	r5, [r4, #8]
9000c9b6:	463e      	mov	r6, r7
9000c9b8:	42be      	cmp	r6, r7
9000c9ba:	d900      	bls.n	9000c9be <__ssputs_r+0x72>
9000c9bc:	463e      	mov	r6, r7
9000c9be:	6820      	ldr	r0, [r4, #0]
9000c9c0:	4632      	mov	r2, r6
9000c9c2:	4641      	mov	r1, r8
9000c9c4:	f000 fcf6 	bl	9000d3b4 <memmove>
9000c9c8:	68a3      	ldr	r3, [r4, #8]
9000c9ca:	1b9b      	subs	r3, r3, r6
9000c9cc:	60a3      	str	r3, [r4, #8]
9000c9ce:	6823      	ldr	r3, [r4, #0]
9000c9d0:	4433      	add	r3, r6
9000c9d2:	6023      	str	r3, [r4, #0]
9000c9d4:	2000      	movs	r0, #0
9000c9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c9da:	462a      	mov	r2, r5
9000c9dc:	f000 fd26 	bl	9000d42c <_realloc_r>
9000c9e0:	4606      	mov	r6, r0
9000c9e2:	2800      	cmp	r0, #0
9000c9e4:	d1e0      	bne.n	9000c9a8 <__ssputs_r+0x5c>
9000c9e6:	6921      	ldr	r1, [r4, #16]
9000c9e8:	4650      	mov	r0, sl
9000c9ea:	f7ff ff65 	bl	9000c8b8 <_free_r>
9000c9ee:	230c      	movs	r3, #12
9000c9f0:	f8ca 3000 	str.w	r3, [sl]
9000c9f4:	89a3      	ldrh	r3, [r4, #12]
9000c9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c9fa:	81a3      	strh	r3, [r4, #12]
9000c9fc:	f04f 30ff 	mov.w	r0, #4294967295
9000ca00:	e7e9      	b.n	9000c9d6 <__ssputs_r+0x8a>
	...

9000ca04 <_svfiprintf_r>:
9000ca04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ca08:	4698      	mov	r8, r3
9000ca0a:	898b      	ldrh	r3, [r1, #12]
9000ca0c:	061b      	lsls	r3, r3, #24
9000ca0e:	b09d      	sub	sp, #116	@ 0x74
9000ca10:	4607      	mov	r7, r0
9000ca12:	460d      	mov	r5, r1
9000ca14:	4614      	mov	r4, r2
9000ca16:	d510      	bpl.n	9000ca3a <_svfiprintf_r+0x36>
9000ca18:	690b      	ldr	r3, [r1, #16]
9000ca1a:	b973      	cbnz	r3, 9000ca3a <_svfiprintf_r+0x36>
9000ca1c:	2140      	movs	r1, #64	@ 0x40
9000ca1e:	f7ff fbf9 	bl	9000c214 <_malloc_r>
9000ca22:	6028      	str	r0, [r5, #0]
9000ca24:	6128      	str	r0, [r5, #16]
9000ca26:	b930      	cbnz	r0, 9000ca36 <_svfiprintf_r+0x32>
9000ca28:	230c      	movs	r3, #12
9000ca2a:	603b      	str	r3, [r7, #0]
9000ca2c:	f04f 30ff 	mov.w	r0, #4294967295
9000ca30:	b01d      	add	sp, #116	@ 0x74
9000ca32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000ca36:	2340      	movs	r3, #64	@ 0x40
9000ca38:	616b      	str	r3, [r5, #20]
9000ca3a:	2300      	movs	r3, #0
9000ca3c:	9309      	str	r3, [sp, #36]	@ 0x24
9000ca3e:	2320      	movs	r3, #32
9000ca40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000ca44:	f8cd 800c 	str.w	r8, [sp, #12]
9000ca48:	2330      	movs	r3, #48	@ 0x30
9000ca4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 9000cbe8 <_svfiprintf_r+0x1e4>
9000ca4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000ca52:	f04f 0901 	mov.w	r9, #1
9000ca56:	4623      	mov	r3, r4
9000ca58:	469a      	mov	sl, r3
9000ca5a:	f813 2b01 	ldrb.w	r2, [r3], #1
9000ca5e:	b10a      	cbz	r2, 9000ca64 <_svfiprintf_r+0x60>
9000ca60:	2a25      	cmp	r2, #37	@ 0x25
9000ca62:	d1f9      	bne.n	9000ca58 <_svfiprintf_r+0x54>
9000ca64:	ebba 0b04 	subs.w	fp, sl, r4
9000ca68:	d00b      	beq.n	9000ca82 <_svfiprintf_r+0x7e>
9000ca6a:	465b      	mov	r3, fp
9000ca6c:	4622      	mov	r2, r4
9000ca6e:	4629      	mov	r1, r5
9000ca70:	4638      	mov	r0, r7
9000ca72:	f7ff ff6b 	bl	9000c94c <__ssputs_r>
9000ca76:	3001      	adds	r0, #1
9000ca78:	f000 80a7 	beq.w	9000cbca <_svfiprintf_r+0x1c6>
9000ca7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000ca7e:	445a      	add	r2, fp
9000ca80:	9209      	str	r2, [sp, #36]	@ 0x24
9000ca82:	f89a 3000 	ldrb.w	r3, [sl]
9000ca86:	2b00      	cmp	r3, #0
9000ca88:	f000 809f 	beq.w	9000cbca <_svfiprintf_r+0x1c6>
9000ca8c:	2300      	movs	r3, #0
9000ca8e:	f04f 32ff 	mov.w	r2, #4294967295
9000ca92:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000ca96:	f10a 0a01 	add.w	sl, sl, #1
9000ca9a:	9304      	str	r3, [sp, #16]
9000ca9c:	9307      	str	r3, [sp, #28]
9000ca9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000caa2:	931a      	str	r3, [sp, #104]	@ 0x68
9000caa4:	4654      	mov	r4, sl
9000caa6:	2205      	movs	r2, #5
9000caa8:	f814 1b01 	ldrb.w	r1, [r4], #1
9000caac:	484e      	ldr	r0, [pc, #312]	@ (9000cbe8 <_svfiprintf_r+0x1e4>)
9000caae:	f7f3 fc17 	bl	900002e0 <memchr>
9000cab2:	9a04      	ldr	r2, [sp, #16]
9000cab4:	b9d8      	cbnz	r0, 9000caee <_svfiprintf_r+0xea>
9000cab6:	06d0      	lsls	r0, r2, #27
9000cab8:	bf44      	itt	mi
9000caba:	2320      	movmi	r3, #32
9000cabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cac0:	0711      	lsls	r1, r2, #28
9000cac2:	bf44      	itt	mi
9000cac4:	232b      	movmi	r3, #43	@ 0x2b
9000cac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000caca:	f89a 3000 	ldrb.w	r3, [sl]
9000cace:	2b2a      	cmp	r3, #42	@ 0x2a
9000cad0:	d015      	beq.n	9000cafe <_svfiprintf_r+0xfa>
9000cad2:	9a07      	ldr	r2, [sp, #28]
9000cad4:	4654      	mov	r4, sl
9000cad6:	2000      	movs	r0, #0
9000cad8:	f04f 0c0a 	mov.w	ip, #10
9000cadc:	4621      	mov	r1, r4
9000cade:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cae2:	3b30      	subs	r3, #48	@ 0x30
9000cae4:	2b09      	cmp	r3, #9
9000cae6:	d94b      	bls.n	9000cb80 <_svfiprintf_r+0x17c>
9000cae8:	b1b0      	cbz	r0, 9000cb18 <_svfiprintf_r+0x114>
9000caea:	9207      	str	r2, [sp, #28]
9000caec:	e014      	b.n	9000cb18 <_svfiprintf_r+0x114>
9000caee:	eba0 0308 	sub.w	r3, r0, r8
9000caf2:	fa09 f303 	lsl.w	r3, r9, r3
9000caf6:	4313      	orrs	r3, r2
9000caf8:	9304      	str	r3, [sp, #16]
9000cafa:	46a2      	mov	sl, r4
9000cafc:	e7d2      	b.n	9000caa4 <_svfiprintf_r+0xa0>
9000cafe:	9b03      	ldr	r3, [sp, #12]
9000cb00:	1d19      	adds	r1, r3, #4
9000cb02:	681b      	ldr	r3, [r3, #0]
9000cb04:	9103      	str	r1, [sp, #12]
9000cb06:	2b00      	cmp	r3, #0
9000cb08:	bfbb      	ittet	lt
9000cb0a:	425b      	neglt	r3, r3
9000cb0c:	f042 0202 	orrlt.w	r2, r2, #2
9000cb10:	9307      	strge	r3, [sp, #28]
9000cb12:	9307      	strlt	r3, [sp, #28]
9000cb14:	bfb8      	it	lt
9000cb16:	9204      	strlt	r2, [sp, #16]
9000cb18:	7823      	ldrb	r3, [r4, #0]
9000cb1a:	2b2e      	cmp	r3, #46	@ 0x2e
9000cb1c:	d10a      	bne.n	9000cb34 <_svfiprintf_r+0x130>
9000cb1e:	7863      	ldrb	r3, [r4, #1]
9000cb20:	2b2a      	cmp	r3, #42	@ 0x2a
9000cb22:	d132      	bne.n	9000cb8a <_svfiprintf_r+0x186>
9000cb24:	9b03      	ldr	r3, [sp, #12]
9000cb26:	1d1a      	adds	r2, r3, #4
9000cb28:	681b      	ldr	r3, [r3, #0]
9000cb2a:	9203      	str	r2, [sp, #12]
9000cb2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cb30:	3402      	adds	r4, #2
9000cb32:	9305      	str	r3, [sp, #20]
9000cb34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 9000cbf8 <_svfiprintf_r+0x1f4>
9000cb38:	7821      	ldrb	r1, [r4, #0]
9000cb3a:	2203      	movs	r2, #3
9000cb3c:	4650      	mov	r0, sl
9000cb3e:	f7f3 fbcf 	bl	900002e0 <memchr>
9000cb42:	b138      	cbz	r0, 9000cb54 <_svfiprintf_r+0x150>
9000cb44:	9b04      	ldr	r3, [sp, #16]
9000cb46:	eba0 000a 	sub.w	r0, r0, sl
9000cb4a:	2240      	movs	r2, #64	@ 0x40
9000cb4c:	4082      	lsls	r2, r0
9000cb4e:	4313      	orrs	r3, r2
9000cb50:	3401      	adds	r4, #1
9000cb52:	9304      	str	r3, [sp, #16]
9000cb54:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cb58:	4824      	ldr	r0, [pc, #144]	@ (9000cbec <_svfiprintf_r+0x1e8>)
9000cb5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cb5e:	2206      	movs	r2, #6
9000cb60:	f7f3 fbbe 	bl	900002e0 <memchr>
9000cb64:	2800      	cmp	r0, #0
9000cb66:	d036      	beq.n	9000cbd6 <_svfiprintf_r+0x1d2>
9000cb68:	4b21      	ldr	r3, [pc, #132]	@ (9000cbf0 <_svfiprintf_r+0x1ec>)
9000cb6a:	bb1b      	cbnz	r3, 9000cbb4 <_svfiprintf_r+0x1b0>
9000cb6c:	9b03      	ldr	r3, [sp, #12]
9000cb6e:	3307      	adds	r3, #7
9000cb70:	f023 0307 	bic.w	r3, r3, #7
9000cb74:	3308      	adds	r3, #8
9000cb76:	9303      	str	r3, [sp, #12]
9000cb78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cb7a:	4433      	add	r3, r6
9000cb7c:	9309      	str	r3, [sp, #36]	@ 0x24
9000cb7e:	e76a      	b.n	9000ca56 <_svfiprintf_r+0x52>
9000cb80:	fb0c 3202 	mla	r2, ip, r2, r3
9000cb84:	460c      	mov	r4, r1
9000cb86:	2001      	movs	r0, #1
9000cb88:	e7a8      	b.n	9000cadc <_svfiprintf_r+0xd8>
9000cb8a:	2300      	movs	r3, #0
9000cb8c:	3401      	adds	r4, #1
9000cb8e:	9305      	str	r3, [sp, #20]
9000cb90:	4619      	mov	r1, r3
9000cb92:	f04f 0c0a 	mov.w	ip, #10
9000cb96:	4620      	mov	r0, r4
9000cb98:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cb9c:	3a30      	subs	r2, #48	@ 0x30
9000cb9e:	2a09      	cmp	r2, #9
9000cba0:	d903      	bls.n	9000cbaa <_svfiprintf_r+0x1a6>
9000cba2:	2b00      	cmp	r3, #0
9000cba4:	d0c6      	beq.n	9000cb34 <_svfiprintf_r+0x130>
9000cba6:	9105      	str	r1, [sp, #20]
9000cba8:	e7c4      	b.n	9000cb34 <_svfiprintf_r+0x130>
9000cbaa:	fb0c 2101 	mla	r1, ip, r1, r2
9000cbae:	4604      	mov	r4, r0
9000cbb0:	2301      	movs	r3, #1
9000cbb2:	e7f0      	b.n	9000cb96 <_svfiprintf_r+0x192>
9000cbb4:	ab03      	add	r3, sp, #12
9000cbb6:	9300      	str	r3, [sp, #0]
9000cbb8:	462a      	mov	r2, r5
9000cbba:	4b0e      	ldr	r3, [pc, #56]	@ (9000cbf4 <_svfiprintf_r+0x1f0>)
9000cbbc:	a904      	add	r1, sp, #16
9000cbbe:	4638      	mov	r0, r7
9000cbc0:	f3af 8000 	nop.w
9000cbc4:	1c42      	adds	r2, r0, #1
9000cbc6:	4606      	mov	r6, r0
9000cbc8:	d1d6      	bne.n	9000cb78 <_svfiprintf_r+0x174>
9000cbca:	89ab      	ldrh	r3, [r5, #12]
9000cbcc:	065b      	lsls	r3, r3, #25
9000cbce:	f53f af2d 	bmi.w	9000ca2c <_svfiprintf_r+0x28>
9000cbd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cbd4:	e72c      	b.n	9000ca30 <_svfiprintf_r+0x2c>
9000cbd6:	ab03      	add	r3, sp, #12
9000cbd8:	9300      	str	r3, [sp, #0]
9000cbda:	462a      	mov	r2, r5
9000cbdc:	4b05      	ldr	r3, [pc, #20]	@ (9000cbf4 <_svfiprintf_r+0x1f0>)
9000cbde:	a904      	add	r1, sp, #16
9000cbe0:	4638      	mov	r0, r7
9000cbe2:	f000 f9bb 	bl	9000cf5c <_printf_i>
9000cbe6:	e7ed      	b.n	9000cbc4 <_svfiprintf_r+0x1c0>
9000cbe8:	9000fb44 	.word	0x9000fb44
9000cbec:	9000fb4e 	.word	0x9000fb4e
9000cbf0:	00000000 	.word	0x00000000
9000cbf4:	9000c94d 	.word	0x9000c94d
9000cbf8:	9000fb4a 	.word	0x9000fb4a

9000cbfc <__sfputc_r>:
9000cbfc:	6893      	ldr	r3, [r2, #8]
9000cbfe:	3b01      	subs	r3, #1
9000cc00:	2b00      	cmp	r3, #0
9000cc02:	b410      	push	{r4}
9000cc04:	6093      	str	r3, [r2, #8]
9000cc06:	da08      	bge.n	9000cc1a <__sfputc_r+0x1e>
9000cc08:	6994      	ldr	r4, [r2, #24]
9000cc0a:	42a3      	cmp	r3, r4
9000cc0c:	db01      	blt.n	9000cc12 <__sfputc_r+0x16>
9000cc0e:	290a      	cmp	r1, #10
9000cc10:	d103      	bne.n	9000cc1a <__sfputc_r+0x1e>
9000cc12:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cc16:	f7ff bd20 	b.w	9000c65a <__swbuf_r>
9000cc1a:	6813      	ldr	r3, [r2, #0]
9000cc1c:	1c58      	adds	r0, r3, #1
9000cc1e:	6010      	str	r0, [r2, #0]
9000cc20:	7019      	strb	r1, [r3, #0]
9000cc22:	4608      	mov	r0, r1
9000cc24:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cc28:	4770      	bx	lr

9000cc2a <__sfputs_r>:
9000cc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cc2c:	4606      	mov	r6, r0
9000cc2e:	460f      	mov	r7, r1
9000cc30:	4614      	mov	r4, r2
9000cc32:	18d5      	adds	r5, r2, r3
9000cc34:	42ac      	cmp	r4, r5
9000cc36:	d101      	bne.n	9000cc3c <__sfputs_r+0x12>
9000cc38:	2000      	movs	r0, #0
9000cc3a:	e007      	b.n	9000cc4c <__sfputs_r+0x22>
9000cc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cc40:	463a      	mov	r2, r7
9000cc42:	4630      	mov	r0, r6
9000cc44:	f7ff ffda 	bl	9000cbfc <__sfputc_r>
9000cc48:	1c43      	adds	r3, r0, #1
9000cc4a:	d1f3      	bne.n	9000cc34 <__sfputs_r+0xa>
9000cc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000cc50 <_vfiprintf_r>:
9000cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000cc54:	460d      	mov	r5, r1
9000cc56:	b09d      	sub	sp, #116	@ 0x74
9000cc58:	4614      	mov	r4, r2
9000cc5a:	4698      	mov	r8, r3
9000cc5c:	4606      	mov	r6, r0
9000cc5e:	b118      	cbz	r0, 9000cc68 <_vfiprintf_r+0x18>
9000cc60:	6a03      	ldr	r3, [r0, #32]
9000cc62:	b90b      	cbnz	r3, 9000cc68 <_vfiprintf_r+0x18>
9000cc64:	f7ff fbee 	bl	9000c444 <__sinit>
9000cc68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cc6a:	07d9      	lsls	r1, r3, #31
9000cc6c:	d405      	bmi.n	9000cc7a <_vfiprintf_r+0x2a>
9000cc6e:	89ab      	ldrh	r3, [r5, #12]
9000cc70:	059a      	lsls	r2, r3, #22
9000cc72:	d402      	bmi.n	9000cc7a <_vfiprintf_r+0x2a>
9000cc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cc76:	f7ff fe0e 	bl	9000c896 <__retarget_lock_acquire_recursive>
9000cc7a:	89ab      	ldrh	r3, [r5, #12]
9000cc7c:	071b      	lsls	r3, r3, #28
9000cc7e:	d501      	bpl.n	9000cc84 <_vfiprintf_r+0x34>
9000cc80:	692b      	ldr	r3, [r5, #16]
9000cc82:	b99b      	cbnz	r3, 9000ccac <_vfiprintf_r+0x5c>
9000cc84:	4629      	mov	r1, r5
9000cc86:	4630      	mov	r0, r6
9000cc88:	f7ff fd26 	bl	9000c6d8 <__swsetup_r>
9000cc8c:	b170      	cbz	r0, 9000ccac <_vfiprintf_r+0x5c>
9000cc8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cc90:	07dc      	lsls	r4, r3, #31
9000cc92:	d504      	bpl.n	9000cc9e <_vfiprintf_r+0x4e>
9000cc94:	f04f 30ff 	mov.w	r0, #4294967295
9000cc98:	b01d      	add	sp, #116	@ 0x74
9000cc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000cc9e:	89ab      	ldrh	r3, [r5, #12]
9000cca0:	0598      	lsls	r0, r3, #22
9000cca2:	d4f7      	bmi.n	9000cc94 <_vfiprintf_r+0x44>
9000cca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cca6:	f7ff fdf7 	bl	9000c898 <__retarget_lock_release_recursive>
9000ccaa:	e7f3      	b.n	9000cc94 <_vfiprintf_r+0x44>
9000ccac:	2300      	movs	r3, #0
9000ccae:	9309      	str	r3, [sp, #36]	@ 0x24
9000ccb0:	2320      	movs	r3, #32
9000ccb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000ccb6:	f8cd 800c 	str.w	r8, [sp, #12]
9000ccba:	2330      	movs	r3, #48	@ 0x30
9000ccbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000ce6c <_vfiprintf_r+0x21c>
9000ccc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000ccc4:	f04f 0901 	mov.w	r9, #1
9000ccc8:	4623      	mov	r3, r4
9000ccca:	469a      	mov	sl, r3
9000cccc:	f813 2b01 	ldrb.w	r2, [r3], #1
9000ccd0:	b10a      	cbz	r2, 9000ccd6 <_vfiprintf_r+0x86>
9000ccd2:	2a25      	cmp	r2, #37	@ 0x25
9000ccd4:	d1f9      	bne.n	9000ccca <_vfiprintf_r+0x7a>
9000ccd6:	ebba 0b04 	subs.w	fp, sl, r4
9000ccda:	d00b      	beq.n	9000ccf4 <_vfiprintf_r+0xa4>
9000ccdc:	465b      	mov	r3, fp
9000ccde:	4622      	mov	r2, r4
9000cce0:	4629      	mov	r1, r5
9000cce2:	4630      	mov	r0, r6
9000cce4:	f7ff ffa1 	bl	9000cc2a <__sfputs_r>
9000cce8:	3001      	adds	r0, #1
9000ccea:	f000 80a7 	beq.w	9000ce3c <_vfiprintf_r+0x1ec>
9000ccee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000ccf0:	445a      	add	r2, fp
9000ccf2:	9209      	str	r2, [sp, #36]	@ 0x24
9000ccf4:	f89a 3000 	ldrb.w	r3, [sl]
9000ccf8:	2b00      	cmp	r3, #0
9000ccfa:	f000 809f 	beq.w	9000ce3c <_vfiprintf_r+0x1ec>
9000ccfe:	2300      	movs	r3, #0
9000cd00:	f04f 32ff 	mov.w	r2, #4294967295
9000cd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000cd08:	f10a 0a01 	add.w	sl, sl, #1
9000cd0c:	9304      	str	r3, [sp, #16]
9000cd0e:	9307      	str	r3, [sp, #28]
9000cd10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000cd14:	931a      	str	r3, [sp, #104]	@ 0x68
9000cd16:	4654      	mov	r4, sl
9000cd18:	2205      	movs	r2, #5
9000cd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cd1e:	4853      	ldr	r0, [pc, #332]	@ (9000ce6c <_vfiprintf_r+0x21c>)
9000cd20:	f7f3 fade 	bl	900002e0 <memchr>
9000cd24:	9a04      	ldr	r2, [sp, #16]
9000cd26:	b9d8      	cbnz	r0, 9000cd60 <_vfiprintf_r+0x110>
9000cd28:	06d1      	lsls	r1, r2, #27
9000cd2a:	bf44      	itt	mi
9000cd2c:	2320      	movmi	r3, #32
9000cd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cd32:	0713      	lsls	r3, r2, #28
9000cd34:	bf44      	itt	mi
9000cd36:	232b      	movmi	r3, #43	@ 0x2b
9000cd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cd3c:	f89a 3000 	ldrb.w	r3, [sl]
9000cd40:	2b2a      	cmp	r3, #42	@ 0x2a
9000cd42:	d015      	beq.n	9000cd70 <_vfiprintf_r+0x120>
9000cd44:	9a07      	ldr	r2, [sp, #28]
9000cd46:	4654      	mov	r4, sl
9000cd48:	2000      	movs	r0, #0
9000cd4a:	f04f 0c0a 	mov.w	ip, #10
9000cd4e:	4621      	mov	r1, r4
9000cd50:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cd54:	3b30      	subs	r3, #48	@ 0x30
9000cd56:	2b09      	cmp	r3, #9
9000cd58:	d94b      	bls.n	9000cdf2 <_vfiprintf_r+0x1a2>
9000cd5a:	b1b0      	cbz	r0, 9000cd8a <_vfiprintf_r+0x13a>
9000cd5c:	9207      	str	r2, [sp, #28]
9000cd5e:	e014      	b.n	9000cd8a <_vfiprintf_r+0x13a>
9000cd60:	eba0 0308 	sub.w	r3, r0, r8
9000cd64:	fa09 f303 	lsl.w	r3, r9, r3
9000cd68:	4313      	orrs	r3, r2
9000cd6a:	9304      	str	r3, [sp, #16]
9000cd6c:	46a2      	mov	sl, r4
9000cd6e:	e7d2      	b.n	9000cd16 <_vfiprintf_r+0xc6>
9000cd70:	9b03      	ldr	r3, [sp, #12]
9000cd72:	1d19      	adds	r1, r3, #4
9000cd74:	681b      	ldr	r3, [r3, #0]
9000cd76:	9103      	str	r1, [sp, #12]
9000cd78:	2b00      	cmp	r3, #0
9000cd7a:	bfbb      	ittet	lt
9000cd7c:	425b      	neglt	r3, r3
9000cd7e:	f042 0202 	orrlt.w	r2, r2, #2
9000cd82:	9307      	strge	r3, [sp, #28]
9000cd84:	9307      	strlt	r3, [sp, #28]
9000cd86:	bfb8      	it	lt
9000cd88:	9204      	strlt	r2, [sp, #16]
9000cd8a:	7823      	ldrb	r3, [r4, #0]
9000cd8c:	2b2e      	cmp	r3, #46	@ 0x2e
9000cd8e:	d10a      	bne.n	9000cda6 <_vfiprintf_r+0x156>
9000cd90:	7863      	ldrb	r3, [r4, #1]
9000cd92:	2b2a      	cmp	r3, #42	@ 0x2a
9000cd94:	d132      	bne.n	9000cdfc <_vfiprintf_r+0x1ac>
9000cd96:	9b03      	ldr	r3, [sp, #12]
9000cd98:	1d1a      	adds	r2, r3, #4
9000cd9a:	681b      	ldr	r3, [r3, #0]
9000cd9c:	9203      	str	r2, [sp, #12]
9000cd9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cda2:	3402      	adds	r4, #2
9000cda4:	9305      	str	r3, [sp, #20]
9000cda6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000ce7c <_vfiprintf_r+0x22c>
9000cdaa:	7821      	ldrb	r1, [r4, #0]
9000cdac:	2203      	movs	r2, #3
9000cdae:	4650      	mov	r0, sl
9000cdb0:	f7f3 fa96 	bl	900002e0 <memchr>
9000cdb4:	b138      	cbz	r0, 9000cdc6 <_vfiprintf_r+0x176>
9000cdb6:	9b04      	ldr	r3, [sp, #16]
9000cdb8:	eba0 000a 	sub.w	r0, r0, sl
9000cdbc:	2240      	movs	r2, #64	@ 0x40
9000cdbe:	4082      	lsls	r2, r0
9000cdc0:	4313      	orrs	r3, r2
9000cdc2:	3401      	adds	r4, #1
9000cdc4:	9304      	str	r3, [sp, #16]
9000cdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cdca:	4829      	ldr	r0, [pc, #164]	@ (9000ce70 <_vfiprintf_r+0x220>)
9000cdcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cdd0:	2206      	movs	r2, #6
9000cdd2:	f7f3 fa85 	bl	900002e0 <memchr>
9000cdd6:	2800      	cmp	r0, #0
9000cdd8:	d03f      	beq.n	9000ce5a <_vfiprintf_r+0x20a>
9000cdda:	4b26      	ldr	r3, [pc, #152]	@ (9000ce74 <_vfiprintf_r+0x224>)
9000cddc:	bb1b      	cbnz	r3, 9000ce26 <_vfiprintf_r+0x1d6>
9000cdde:	9b03      	ldr	r3, [sp, #12]
9000cde0:	3307      	adds	r3, #7
9000cde2:	f023 0307 	bic.w	r3, r3, #7
9000cde6:	3308      	adds	r3, #8
9000cde8:	9303      	str	r3, [sp, #12]
9000cdea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cdec:	443b      	add	r3, r7
9000cdee:	9309      	str	r3, [sp, #36]	@ 0x24
9000cdf0:	e76a      	b.n	9000ccc8 <_vfiprintf_r+0x78>
9000cdf2:	fb0c 3202 	mla	r2, ip, r2, r3
9000cdf6:	460c      	mov	r4, r1
9000cdf8:	2001      	movs	r0, #1
9000cdfa:	e7a8      	b.n	9000cd4e <_vfiprintf_r+0xfe>
9000cdfc:	2300      	movs	r3, #0
9000cdfe:	3401      	adds	r4, #1
9000ce00:	9305      	str	r3, [sp, #20]
9000ce02:	4619      	mov	r1, r3
9000ce04:	f04f 0c0a 	mov.w	ip, #10
9000ce08:	4620      	mov	r0, r4
9000ce0a:	f810 2b01 	ldrb.w	r2, [r0], #1
9000ce0e:	3a30      	subs	r2, #48	@ 0x30
9000ce10:	2a09      	cmp	r2, #9
9000ce12:	d903      	bls.n	9000ce1c <_vfiprintf_r+0x1cc>
9000ce14:	2b00      	cmp	r3, #0
9000ce16:	d0c6      	beq.n	9000cda6 <_vfiprintf_r+0x156>
9000ce18:	9105      	str	r1, [sp, #20]
9000ce1a:	e7c4      	b.n	9000cda6 <_vfiprintf_r+0x156>
9000ce1c:	fb0c 2101 	mla	r1, ip, r1, r2
9000ce20:	4604      	mov	r4, r0
9000ce22:	2301      	movs	r3, #1
9000ce24:	e7f0      	b.n	9000ce08 <_vfiprintf_r+0x1b8>
9000ce26:	ab03      	add	r3, sp, #12
9000ce28:	9300      	str	r3, [sp, #0]
9000ce2a:	462a      	mov	r2, r5
9000ce2c:	4b12      	ldr	r3, [pc, #72]	@ (9000ce78 <_vfiprintf_r+0x228>)
9000ce2e:	a904      	add	r1, sp, #16
9000ce30:	4630      	mov	r0, r6
9000ce32:	f3af 8000 	nop.w
9000ce36:	4607      	mov	r7, r0
9000ce38:	1c78      	adds	r0, r7, #1
9000ce3a:	d1d6      	bne.n	9000cdea <_vfiprintf_r+0x19a>
9000ce3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000ce3e:	07d9      	lsls	r1, r3, #31
9000ce40:	d405      	bmi.n	9000ce4e <_vfiprintf_r+0x1fe>
9000ce42:	89ab      	ldrh	r3, [r5, #12]
9000ce44:	059a      	lsls	r2, r3, #22
9000ce46:	d402      	bmi.n	9000ce4e <_vfiprintf_r+0x1fe>
9000ce48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000ce4a:	f7ff fd25 	bl	9000c898 <__retarget_lock_release_recursive>
9000ce4e:	89ab      	ldrh	r3, [r5, #12]
9000ce50:	065b      	lsls	r3, r3, #25
9000ce52:	f53f af1f 	bmi.w	9000cc94 <_vfiprintf_r+0x44>
9000ce56:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000ce58:	e71e      	b.n	9000cc98 <_vfiprintf_r+0x48>
9000ce5a:	ab03      	add	r3, sp, #12
9000ce5c:	9300      	str	r3, [sp, #0]
9000ce5e:	462a      	mov	r2, r5
9000ce60:	4b05      	ldr	r3, [pc, #20]	@ (9000ce78 <_vfiprintf_r+0x228>)
9000ce62:	a904      	add	r1, sp, #16
9000ce64:	4630      	mov	r0, r6
9000ce66:	f000 f879 	bl	9000cf5c <_printf_i>
9000ce6a:	e7e4      	b.n	9000ce36 <_vfiprintf_r+0x1e6>
9000ce6c:	9000fb44 	.word	0x9000fb44
9000ce70:	9000fb4e 	.word	0x9000fb4e
9000ce74:	00000000 	.word	0x00000000
9000ce78:	9000cc2b 	.word	0x9000cc2b
9000ce7c:	9000fb4a 	.word	0x9000fb4a

9000ce80 <_printf_common>:
9000ce80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ce84:	4616      	mov	r6, r2
9000ce86:	4698      	mov	r8, r3
9000ce88:	688a      	ldr	r2, [r1, #8]
9000ce8a:	690b      	ldr	r3, [r1, #16]
9000ce8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000ce90:	4293      	cmp	r3, r2
9000ce92:	bfb8      	it	lt
9000ce94:	4613      	movlt	r3, r2
9000ce96:	6033      	str	r3, [r6, #0]
9000ce98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000ce9c:	4607      	mov	r7, r0
9000ce9e:	460c      	mov	r4, r1
9000cea0:	b10a      	cbz	r2, 9000cea6 <_printf_common+0x26>
9000cea2:	3301      	adds	r3, #1
9000cea4:	6033      	str	r3, [r6, #0]
9000cea6:	6823      	ldr	r3, [r4, #0]
9000cea8:	0699      	lsls	r1, r3, #26
9000ceaa:	bf42      	ittt	mi
9000ceac:	6833      	ldrmi	r3, [r6, #0]
9000ceae:	3302      	addmi	r3, #2
9000ceb0:	6033      	strmi	r3, [r6, #0]
9000ceb2:	6825      	ldr	r5, [r4, #0]
9000ceb4:	f015 0506 	ands.w	r5, r5, #6
9000ceb8:	d106      	bne.n	9000cec8 <_printf_common+0x48>
9000ceba:	f104 0a19 	add.w	sl, r4, #25
9000cebe:	68e3      	ldr	r3, [r4, #12]
9000cec0:	6832      	ldr	r2, [r6, #0]
9000cec2:	1a9b      	subs	r3, r3, r2
9000cec4:	42ab      	cmp	r3, r5
9000cec6:	dc26      	bgt.n	9000cf16 <_printf_common+0x96>
9000cec8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000cecc:	6822      	ldr	r2, [r4, #0]
9000cece:	3b00      	subs	r3, #0
9000ced0:	bf18      	it	ne
9000ced2:	2301      	movne	r3, #1
9000ced4:	0692      	lsls	r2, r2, #26
9000ced6:	d42b      	bmi.n	9000cf30 <_printf_common+0xb0>
9000ced8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000cedc:	4641      	mov	r1, r8
9000cede:	4638      	mov	r0, r7
9000cee0:	47c8      	blx	r9
9000cee2:	3001      	adds	r0, #1
9000cee4:	d01e      	beq.n	9000cf24 <_printf_common+0xa4>
9000cee6:	6823      	ldr	r3, [r4, #0]
9000cee8:	6922      	ldr	r2, [r4, #16]
9000ceea:	f003 0306 	and.w	r3, r3, #6
9000ceee:	2b04      	cmp	r3, #4
9000cef0:	bf02      	ittt	eq
9000cef2:	68e5      	ldreq	r5, [r4, #12]
9000cef4:	6833      	ldreq	r3, [r6, #0]
9000cef6:	1aed      	subeq	r5, r5, r3
9000cef8:	68a3      	ldr	r3, [r4, #8]
9000cefa:	bf0c      	ite	eq
9000cefc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000cf00:	2500      	movne	r5, #0
9000cf02:	4293      	cmp	r3, r2
9000cf04:	bfc4      	itt	gt
9000cf06:	1a9b      	subgt	r3, r3, r2
9000cf08:	18ed      	addgt	r5, r5, r3
9000cf0a:	2600      	movs	r6, #0
9000cf0c:	341a      	adds	r4, #26
9000cf0e:	42b5      	cmp	r5, r6
9000cf10:	d11a      	bne.n	9000cf48 <_printf_common+0xc8>
9000cf12:	2000      	movs	r0, #0
9000cf14:	e008      	b.n	9000cf28 <_printf_common+0xa8>
9000cf16:	2301      	movs	r3, #1
9000cf18:	4652      	mov	r2, sl
9000cf1a:	4641      	mov	r1, r8
9000cf1c:	4638      	mov	r0, r7
9000cf1e:	47c8      	blx	r9
9000cf20:	3001      	adds	r0, #1
9000cf22:	d103      	bne.n	9000cf2c <_printf_common+0xac>
9000cf24:	f04f 30ff 	mov.w	r0, #4294967295
9000cf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000cf2c:	3501      	adds	r5, #1
9000cf2e:	e7c6      	b.n	9000cebe <_printf_common+0x3e>
9000cf30:	18e1      	adds	r1, r4, r3
9000cf32:	1c5a      	adds	r2, r3, #1
9000cf34:	2030      	movs	r0, #48	@ 0x30
9000cf36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000cf3a:	4422      	add	r2, r4
9000cf3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000cf40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000cf44:	3302      	adds	r3, #2
9000cf46:	e7c7      	b.n	9000ced8 <_printf_common+0x58>
9000cf48:	2301      	movs	r3, #1
9000cf4a:	4622      	mov	r2, r4
9000cf4c:	4641      	mov	r1, r8
9000cf4e:	4638      	mov	r0, r7
9000cf50:	47c8      	blx	r9
9000cf52:	3001      	adds	r0, #1
9000cf54:	d0e6      	beq.n	9000cf24 <_printf_common+0xa4>
9000cf56:	3601      	adds	r6, #1
9000cf58:	e7d9      	b.n	9000cf0e <_printf_common+0x8e>
	...

9000cf5c <_printf_i>:
9000cf5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000cf60:	7e0f      	ldrb	r7, [r1, #24]
9000cf62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000cf64:	2f78      	cmp	r7, #120	@ 0x78
9000cf66:	4691      	mov	r9, r2
9000cf68:	4680      	mov	r8, r0
9000cf6a:	460c      	mov	r4, r1
9000cf6c:	469a      	mov	sl, r3
9000cf6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000cf72:	d807      	bhi.n	9000cf84 <_printf_i+0x28>
9000cf74:	2f62      	cmp	r7, #98	@ 0x62
9000cf76:	d80a      	bhi.n	9000cf8e <_printf_i+0x32>
9000cf78:	2f00      	cmp	r7, #0
9000cf7a:	f000 80d1 	beq.w	9000d120 <_printf_i+0x1c4>
9000cf7e:	2f58      	cmp	r7, #88	@ 0x58
9000cf80:	f000 80b8 	beq.w	9000d0f4 <_printf_i+0x198>
9000cf84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000cf88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000cf8c:	e03a      	b.n	9000d004 <_printf_i+0xa8>
9000cf8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000cf92:	2b15      	cmp	r3, #21
9000cf94:	d8f6      	bhi.n	9000cf84 <_printf_i+0x28>
9000cf96:	a101      	add	r1, pc, #4	@ (adr r1, 9000cf9c <_printf_i+0x40>)
9000cf98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000cf9c:	9000cff5 	.word	0x9000cff5
9000cfa0:	9000d009 	.word	0x9000d009
9000cfa4:	9000cf85 	.word	0x9000cf85
9000cfa8:	9000cf85 	.word	0x9000cf85
9000cfac:	9000cf85 	.word	0x9000cf85
9000cfb0:	9000cf85 	.word	0x9000cf85
9000cfb4:	9000d009 	.word	0x9000d009
9000cfb8:	9000cf85 	.word	0x9000cf85
9000cfbc:	9000cf85 	.word	0x9000cf85
9000cfc0:	9000cf85 	.word	0x9000cf85
9000cfc4:	9000cf85 	.word	0x9000cf85
9000cfc8:	9000d107 	.word	0x9000d107
9000cfcc:	9000d033 	.word	0x9000d033
9000cfd0:	9000d0c1 	.word	0x9000d0c1
9000cfd4:	9000cf85 	.word	0x9000cf85
9000cfd8:	9000cf85 	.word	0x9000cf85
9000cfdc:	9000d129 	.word	0x9000d129
9000cfe0:	9000cf85 	.word	0x9000cf85
9000cfe4:	9000d033 	.word	0x9000d033
9000cfe8:	9000cf85 	.word	0x9000cf85
9000cfec:	9000cf85 	.word	0x9000cf85
9000cff0:	9000d0c9 	.word	0x9000d0c9
9000cff4:	6833      	ldr	r3, [r6, #0]
9000cff6:	1d1a      	adds	r2, r3, #4
9000cff8:	681b      	ldr	r3, [r3, #0]
9000cffa:	6032      	str	r2, [r6, #0]
9000cffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000d004:	2301      	movs	r3, #1
9000d006:	e09c      	b.n	9000d142 <_printf_i+0x1e6>
9000d008:	6833      	ldr	r3, [r6, #0]
9000d00a:	6820      	ldr	r0, [r4, #0]
9000d00c:	1d19      	adds	r1, r3, #4
9000d00e:	6031      	str	r1, [r6, #0]
9000d010:	0606      	lsls	r6, r0, #24
9000d012:	d501      	bpl.n	9000d018 <_printf_i+0xbc>
9000d014:	681d      	ldr	r5, [r3, #0]
9000d016:	e003      	b.n	9000d020 <_printf_i+0xc4>
9000d018:	0645      	lsls	r5, r0, #25
9000d01a:	d5fb      	bpl.n	9000d014 <_printf_i+0xb8>
9000d01c:	f9b3 5000 	ldrsh.w	r5, [r3]
9000d020:	2d00      	cmp	r5, #0
9000d022:	da03      	bge.n	9000d02c <_printf_i+0xd0>
9000d024:	232d      	movs	r3, #45	@ 0x2d
9000d026:	426d      	negs	r5, r5
9000d028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d02c:	4858      	ldr	r0, [pc, #352]	@ (9000d190 <_printf_i+0x234>)
9000d02e:	230a      	movs	r3, #10
9000d030:	e011      	b.n	9000d056 <_printf_i+0xfa>
9000d032:	6821      	ldr	r1, [r4, #0]
9000d034:	6833      	ldr	r3, [r6, #0]
9000d036:	0608      	lsls	r0, r1, #24
9000d038:	f853 5b04 	ldr.w	r5, [r3], #4
9000d03c:	d402      	bmi.n	9000d044 <_printf_i+0xe8>
9000d03e:	0649      	lsls	r1, r1, #25
9000d040:	bf48      	it	mi
9000d042:	b2ad      	uxthmi	r5, r5
9000d044:	2f6f      	cmp	r7, #111	@ 0x6f
9000d046:	4852      	ldr	r0, [pc, #328]	@ (9000d190 <_printf_i+0x234>)
9000d048:	6033      	str	r3, [r6, #0]
9000d04a:	bf14      	ite	ne
9000d04c:	230a      	movne	r3, #10
9000d04e:	2308      	moveq	r3, #8
9000d050:	2100      	movs	r1, #0
9000d052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000d056:	6866      	ldr	r6, [r4, #4]
9000d058:	60a6      	str	r6, [r4, #8]
9000d05a:	2e00      	cmp	r6, #0
9000d05c:	db05      	blt.n	9000d06a <_printf_i+0x10e>
9000d05e:	6821      	ldr	r1, [r4, #0]
9000d060:	432e      	orrs	r6, r5
9000d062:	f021 0104 	bic.w	r1, r1, #4
9000d066:	6021      	str	r1, [r4, #0]
9000d068:	d04b      	beq.n	9000d102 <_printf_i+0x1a6>
9000d06a:	4616      	mov	r6, r2
9000d06c:	fbb5 f1f3 	udiv	r1, r5, r3
9000d070:	fb03 5711 	mls	r7, r3, r1, r5
9000d074:	5dc7      	ldrb	r7, [r0, r7]
9000d076:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000d07a:	462f      	mov	r7, r5
9000d07c:	42bb      	cmp	r3, r7
9000d07e:	460d      	mov	r5, r1
9000d080:	d9f4      	bls.n	9000d06c <_printf_i+0x110>
9000d082:	2b08      	cmp	r3, #8
9000d084:	d10b      	bne.n	9000d09e <_printf_i+0x142>
9000d086:	6823      	ldr	r3, [r4, #0]
9000d088:	07df      	lsls	r7, r3, #31
9000d08a:	d508      	bpl.n	9000d09e <_printf_i+0x142>
9000d08c:	6923      	ldr	r3, [r4, #16]
9000d08e:	6861      	ldr	r1, [r4, #4]
9000d090:	4299      	cmp	r1, r3
9000d092:	bfde      	ittt	le
9000d094:	2330      	movle	r3, #48	@ 0x30
9000d096:	f806 3c01 	strble.w	r3, [r6, #-1]
9000d09a:	f106 36ff 	addle.w	r6, r6, #4294967295
9000d09e:	1b92      	subs	r2, r2, r6
9000d0a0:	6122      	str	r2, [r4, #16]
9000d0a2:	f8cd a000 	str.w	sl, [sp]
9000d0a6:	464b      	mov	r3, r9
9000d0a8:	aa03      	add	r2, sp, #12
9000d0aa:	4621      	mov	r1, r4
9000d0ac:	4640      	mov	r0, r8
9000d0ae:	f7ff fee7 	bl	9000ce80 <_printf_common>
9000d0b2:	3001      	adds	r0, #1
9000d0b4:	d14a      	bne.n	9000d14c <_printf_i+0x1f0>
9000d0b6:	f04f 30ff 	mov.w	r0, #4294967295
9000d0ba:	b004      	add	sp, #16
9000d0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d0c0:	6823      	ldr	r3, [r4, #0]
9000d0c2:	f043 0320 	orr.w	r3, r3, #32
9000d0c6:	6023      	str	r3, [r4, #0]
9000d0c8:	4832      	ldr	r0, [pc, #200]	@ (9000d194 <_printf_i+0x238>)
9000d0ca:	2778      	movs	r7, #120	@ 0x78
9000d0cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000d0d0:	6823      	ldr	r3, [r4, #0]
9000d0d2:	6831      	ldr	r1, [r6, #0]
9000d0d4:	061f      	lsls	r7, r3, #24
9000d0d6:	f851 5b04 	ldr.w	r5, [r1], #4
9000d0da:	d402      	bmi.n	9000d0e2 <_printf_i+0x186>
9000d0dc:	065f      	lsls	r7, r3, #25
9000d0de:	bf48      	it	mi
9000d0e0:	b2ad      	uxthmi	r5, r5
9000d0e2:	6031      	str	r1, [r6, #0]
9000d0e4:	07d9      	lsls	r1, r3, #31
9000d0e6:	bf44      	itt	mi
9000d0e8:	f043 0320 	orrmi.w	r3, r3, #32
9000d0ec:	6023      	strmi	r3, [r4, #0]
9000d0ee:	b11d      	cbz	r5, 9000d0f8 <_printf_i+0x19c>
9000d0f0:	2310      	movs	r3, #16
9000d0f2:	e7ad      	b.n	9000d050 <_printf_i+0xf4>
9000d0f4:	4826      	ldr	r0, [pc, #152]	@ (9000d190 <_printf_i+0x234>)
9000d0f6:	e7e9      	b.n	9000d0cc <_printf_i+0x170>
9000d0f8:	6823      	ldr	r3, [r4, #0]
9000d0fa:	f023 0320 	bic.w	r3, r3, #32
9000d0fe:	6023      	str	r3, [r4, #0]
9000d100:	e7f6      	b.n	9000d0f0 <_printf_i+0x194>
9000d102:	4616      	mov	r6, r2
9000d104:	e7bd      	b.n	9000d082 <_printf_i+0x126>
9000d106:	6833      	ldr	r3, [r6, #0]
9000d108:	6825      	ldr	r5, [r4, #0]
9000d10a:	6961      	ldr	r1, [r4, #20]
9000d10c:	1d18      	adds	r0, r3, #4
9000d10e:	6030      	str	r0, [r6, #0]
9000d110:	062e      	lsls	r6, r5, #24
9000d112:	681b      	ldr	r3, [r3, #0]
9000d114:	d501      	bpl.n	9000d11a <_printf_i+0x1be>
9000d116:	6019      	str	r1, [r3, #0]
9000d118:	e002      	b.n	9000d120 <_printf_i+0x1c4>
9000d11a:	0668      	lsls	r0, r5, #25
9000d11c:	d5fb      	bpl.n	9000d116 <_printf_i+0x1ba>
9000d11e:	8019      	strh	r1, [r3, #0]
9000d120:	2300      	movs	r3, #0
9000d122:	6123      	str	r3, [r4, #16]
9000d124:	4616      	mov	r6, r2
9000d126:	e7bc      	b.n	9000d0a2 <_printf_i+0x146>
9000d128:	6833      	ldr	r3, [r6, #0]
9000d12a:	1d1a      	adds	r2, r3, #4
9000d12c:	6032      	str	r2, [r6, #0]
9000d12e:	681e      	ldr	r6, [r3, #0]
9000d130:	6862      	ldr	r2, [r4, #4]
9000d132:	2100      	movs	r1, #0
9000d134:	4630      	mov	r0, r6
9000d136:	f7f3 f8d3 	bl	900002e0 <memchr>
9000d13a:	b108      	cbz	r0, 9000d140 <_printf_i+0x1e4>
9000d13c:	1b80      	subs	r0, r0, r6
9000d13e:	6060      	str	r0, [r4, #4]
9000d140:	6863      	ldr	r3, [r4, #4]
9000d142:	6123      	str	r3, [r4, #16]
9000d144:	2300      	movs	r3, #0
9000d146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d14a:	e7aa      	b.n	9000d0a2 <_printf_i+0x146>
9000d14c:	6923      	ldr	r3, [r4, #16]
9000d14e:	4632      	mov	r2, r6
9000d150:	4649      	mov	r1, r9
9000d152:	4640      	mov	r0, r8
9000d154:	47d0      	blx	sl
9000d156:	3001      	adds	r0, #1
9000d158:	d0ad      	beq.n	9000d0b6 <_printf_i+0x15a>
9000d15a:	6823      	ldr	r3, [r4, #0]
9000d15c:	079b      	lsls	r3, r3, #30
9000d15e:	d413      	bmi.n	9000d188 <_printf_i+0x22c>
9000d160:	68e0      	ldr	r0, [r4, #12]
9000d162:	9b03      	ldr	r3, [sp, #12]
9000d164:	4298      	cmp	r0, r3
9000d166:	bfb8      	it	lt
9000d168:	4618      	movlt	r0, r3
9000d16a:	e7a6      	b.n	9000d0ba <_printf_i+0x15e>
9000d16c:	2301      	movs	r3, #1
9000d16e:	4632      	mov	r2, r6
9000d170:	4649      	mov	r1, r9
9000d172:	4640      	mov	r0, r8
9000d174:	47d0      	blx	sl
9000d176:	3001      	adds	r0, #1
9000d178:	d09d      	beq.n	9000d0b6 <_printf_i+0x15a>
9000d17a:	3501      	adds	r5, #1
9000d17c:	68e3      	ldr	r3, [r4, #12]
9000d17e:	9903      	ldr	r1, [sp, #12]
9000d180:	1a5b      	subs	r3, r3, r1
9000d182:	42ab      	cmp	r3, r5
9000d184:	dcf2      	bgt.n	9000d16c <_printf_i+0x210>
9000d186:	e7eb      	b.n	9000d160 <_printf_i+0x204>
9000d188:	2500      	movs	r5, #0
9000d18a:	f104 0619 	add.w	r6, r4, #25
9000d18e:	e7f5      	b.n	9000d17c <_printf_i+0x220>
9000d190:	9000fb55 	.word	0x9000fb55
9000d194:	9000fb66 	.word	0x9000fb66

9000d198 <__sflush_r>:
9000d198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000d19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d1a0:	0716      	lsls	r6, r2, #28
9000d1a2:	4605      	mov	r5, r0
9000d1a4:	460c      	mov	r4, r1
9000d1a6:	d454      	bmi.n	9000d252 <__sflush_r+0xba>
9000d1a8:	684b      	ldr	r3, [r1, #4]
9000d1aa:	2b00      	cmp	r3, #0
9000d1ac:	dc02      	bgt.n	9000d1b4 <__sflush_r+0x1c>
9000d1ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000d1b0:	2b00      	cmp	r3, #0
9000d1b2:	dd48      	ble.n	9000d246 <__sflush_r+0xae>
9000d1b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d1b6:	2e00      	cmp	r6, #0
9000d1b8:	d045      	beq.n	9000d246 <__sflush_r+0xae>
9000d1ba:	2300      	movs	r3, #0
9000d1bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000d1c0:	682f      	ldr	r7, [r5, #0]
9000d1c2:	6a21      	ldr	r1, [r4, #32]
9000d1c4:	602b      	str	r3, [r5, #0]
9000d1c6:	d030      	beq.n	9000d22a <__sflush_r+0x92>
9000d1c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000d1ca:	89a3      	ldrh	r3, [r4, #12]
9000d1cc:	0759      	lsls	r1, r3, #29
9000d1ce:	d505      	bpl.n	9000d1dc <__sflush_r+0x44>
9000d1d0:	6863      	ldr	r3, [r4, #4]
9000d1d2:	1ad2      	subs	r2, r2, r3
9000d1d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000d1d6:	b10b      	cbz	r3, 9000d1dc <__sflush_r+0x44>
9000d1d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000d1da:	1ad2      	subs	r2, r2, r3
9000d1dc:	2300      	movs	r3, #0
9000d1de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d1e0:	6a21      	ldr	r1, [r4, #32]
9000d1e2:	4628      	mov	r0, r5
9000d1e4:	47b0      	blx	r6
9000d1e6:	1c43      	adds	r3, r0, #1
9000d1e8:	89a3      	ldrh	r3, [r4, #12]
9000d1ea:	d106      	bne.n	9000d1fa <__sflush_r+0x62>
9000d1ec:	6829      	ldr	r1, [r5, #0]
9000d1ee:	291d      	cmp	r1, #29
9000d1f0:	d82b      	bhi.n	9000d24a <__sflush_r+0xb2>
9000d1f2:	4a2a      	ldr	r2, [pc, #168]	@ (9000d29c <__sflush_r+0x104>)
9000d1f4:	40ca      	lsrs	r2, r1
9000d1f6:	07d6      	lsls	r6, r2, #31
9000d1f8:	d527      	bpl.n	9000d24a <__sflush_r+0xb2>
9000d1fa:	2200      	movs	r2, #0
9000d1fc:	6062      	str	r2, [r4, #4]
9000d1fe:	04d9      	lsls	r1, r3, #19
9000d200:	6922      	ldr	r2, [r4, #16]
9000d202:	6022      	str	r2, [r4, #0]
9000d204:	d504      	bpl.n	9000d210 <__sflush_r+0x78>
9000d206:	1c42      	adds	r2, r0, #1
9000d208:	d101      	bne.n	9000d20e <__sflush_r+0x76>
9000d20a:	682b      	ldr	r3, [r5, #0]
9000d20c:	b903      	cbnz	r3, 9000d210 <__sflush_r+0x78>
9000d20e:	6560      	str	r0, [r4, #84]	@ 0x54
9000d210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d212:	602f      	str	r7, [r5, #0]
9000d214:	b1b9      	cbz	r1, 9000d246 <__sflush_r+0xae>
9000d216:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d21a:	4299      	cmp	r1, r3
9000d21c:	d002      	beq.n	9000d224 <__sflush_r+0x8c>
9000d21e:	4628      	mov	r0, r5
9000d220:	f7ff fb4a 	bl	9000c8b8 <_free_r>
9000d224:	2300      	movs	r3, #0
9000d226:	6363      	str	r3, [r4, #52]	@ 0x34
9000d228:	e00d      	b.n	9000d246 <__sflush_r+0xae>
9000d22a:	2301      	movs	r3, #1
9000d22c:	4628      	mov	r0, r5
9000d22e:	47b0      	blx	r6
9000d230:	4602      	mov	r2, r0
9000d232:	1c50      	adds	r0, r2, #1
9000d234:	d1c9      	bne.n	9000d1ca <__sflush_r+0x32>
9000d236:	682b      	ldr	r3, [r5, #0]
9000d238:	2b00      	cmp	r3, #0
9000d23a:	d0c6      	beq.n	9000d1ca <__sflush_r+0x32>
9000d23c:	2b1d      	cmp	r3, #29
9000d23e:	d001      	beq.n	9000d244 <__sflush_r+0xac>
9000d240:	2b16      	cmp	r3, #22
9000d242:	d11e      	bne.n	9000d282 <__sflush_r+0xea>
9000d244:	602f      	str	r7, [r5, #0]
9000d246:	2000      	movs	r0, #0
9000d248:	e022      	b.n	9000d290 <__sflush_r+0xf8>
9000d24a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d24e:	b21b      	sxth	r3, r3
9000d250:	e01b      	b.n	9000d28a <__sflush_r+0xf2>
9000d252:	690f      	ldr	r7, [r1, #16]
9000d254:	2f00      	cmp	r7, #0
9000d256:	d0f6      	beq.n	9000d246 <__sflush_r+0xae>
9000d258:	0793      	lsls	r3, r2, #30
9000d25a:	680e      	ldr	r6, [r1, #0]
9000d25c:	bf08      	it	eq
9000d25e:	694b      	ldreq	r3, [r1, #20]
9000d260:	600f      	str	r7, [r1, #0]
9000d262:	bf18      	it	ne
9000d264:	2300      	movne	r3, #0
9000d266:	eba6 0807 	sub.w	r8, r6, r7
9000d26a:	608b      	str	r3, [r1, #8]
9000d26c:	f1b8 0f00 	cmp.w	r8, #0
9000d270:	dde9      	ble.n	9000d246 <__sflush_r+0xae>
9000d272:	6a21      	ldr	r1, [r4, #32]
9000d274:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000d276:	4643      	mov	r3, r8
9000d278:	463a      	mov	r2, r7
9000d27a:	4628      	mov	r0, r5
9000d27c:	47b0      	blx	r6
9000d27e:	2800      	cmp	r0, #0
9000d280:	dc08      	bgt.n	9000d294 <__sflush_r+0xfc>
9000d282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d28a:	81a3      	strh	r3, [r4, #12]
9000d28c:	f04f 30ff 	mov.w	r0, #4294967295
9000d290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d294:	4407      	add	r7, r0
9000d296:	eba8 0800 	sub.w	r8, r8, r0
9000d29a:	e7e7      	b.n	9000d26c <__sflush_r+0xd4>
9000d29c:	20400001 	.word	0x20400001

9000d2a0 <_fflush_r>:
9000d2a0:	b538      	push	{r3, r4, r5, lr}
9000d2a2:	690b      	ldr	r3, [r1, #16]
9000d2a4:	4605      	mov	r5, r0
9000d2a6:	460c      	mov	r4, r1
9000d2a8:	b913      	cbnz	r3, 9000d2b0 <_fflush_r+0x10>
9000d2aa:	2500      	movs	r5, #0
9000d2ac:	4628      	mov	r0, r5
9000d2ae:	bd38      	pop	{r3, r4, r5, pc}
9000d2b0:	b118      	cbz	r0, 9000d2ba <_fflush_r+0x1a>
9000d2b2:	6a03      	ldr	r3, [r0, #32]
9000d2b4:	b90b      	cbnz	r3, 9000d2ba <_fflush_r+0x1a>
9000d2b6:	f7ff f8c5 	bl	9000c444 <__sinit>
9000d2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d2be:	2b00      	cmp	r3, #0
9000d2c0:	d0f3      	beq.n	9000d2aa <_fflush_r+0xa>
9000d2c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000d2c4:	07d0      	lsls	r0, r2, #31
9000d2c6:	d404      	bmi.n	9000d2d2 <_fflush_r+0x32>
9000d2c8:	0599      	lsls	r1, r3, #22
9000d2ca:	d402      	bmi.n	9000d2d2 <_fflush_r+0x32>
9000d2cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d2ce:	f7ff fae2 	bl	9000c896 <__retarget_lock_acquire_recursive>
9000d2d2:	4628      	mov	r0, r5
9000d2d4:	4621      	mov	r1, r4
9000d2d6:	f7ff ff5f 	bl	9000d198 <__sflush_r>
9000d2da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d2dc:	07da      	lsls	r2, r3, #31
9000d2de:	4605      	mov	r5, r0
9000d2e0:	d4e4      	bmi.n	9000d2ac <_fflush_r+0xc>
9000d2e2:	89a3      	ldrh	r3, [r4, #12]
9000d2e4:	059b      	lsls	r3, r3, #22
9000d2e6:	d4e1      	bmi.n	9000d2ac <_fflush_r+0xc>
9000d2e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d2ea:	f7ff fad5 	bl	9000c898 <__retarget_lock_release_recursive>
9000d2ee:	e7dd      	b.n	9000d2ac <_fflush_r+0xc>

9000d2f0 <__swhatbuf_r>:
9000d2f0:	b570      	push	{r4, r5, r6, lr}
9000d2f2:	460c      	mov	r4, r1
9000d2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d2f8:	2900      	cmp	r1, #0
9000d2fa:	b096      	sub	sp, #88	@ 0x58
9000d2fc:	4615      	mov	r5, r2
9000d2fe:	461e      	mov	r6, r3
9000d300:	da0d      	bge.n	9000d31e <__swhatbuf_r+0x2e>
9000d302:	89a3      	ldrh	r3, [r4, #12]
9000d304:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000d308:	f04f 0100 	mov.w	r1, #0
9000d30c:	bf14      	ite	ne
9000d30e:	2340      	movne	r3, #64	@ 0x40
9000d310:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000d314:	2000      	movs	r0, #0
9000d316:	6031      	str	r1, [r6, #0]
9000d318:	602b      	str	r3, [r5, #0]
9000d31a:	b016      	add	sp, #88	@ 0x58
9000d31c:	bd70      	pop	{r4, r5, r6, pc}
9000d31e:	466a      	mov	r2, sp
9000d320:	f000 f862 	bl	9000d3e8 <_fstat_r>
9000d324:	2800      	cmp	r0, #0
9000d326:	dbec      	blt.n	9000d302 <__swhatbuf_r+0x12>
9000d328:	9901      	ldr	r1, [sp, #4]
9000d32a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000d32e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000d332:	4259      	negs	r1, r3
9000d334:	4159      	adcs	r1, r3
9000d336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000d33a:	e7eb      	b.n	9000d314 <__swhatbuf_r+0x24>

9000d33c <__smakebuf_r>:
9000d33c:	898b      	ldrh	r3, [r1, #12]
9000d33e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000d340:	079d      	lsls	r5, r3, #30
9000d342:	4606      	mov	r6, r0
9000d344:	460c      	mov	r4, r1
9000d346:	d507      	bpl.n	9000d358 <__smakebuf_r+0x1c>
9000d348:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000d34c:	6023      	str	r3, [r4, #0]
9000d34e:	6123      	str	r3, [r4, #16]
9000d350:	2301      	movs	r3, #1
9000d352:	6163      	str	r3, [r4, #20]
9000d354:	b003      	add	sp, #12
9000d356:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000d358:	ab01      	add	r3, sp, #4
9000d35a:	466a      	mov	r2, sp
9000d35c:	f7ff ffc8 	bl	9000d2f0 <__swhatbuf_r>
9000d360:	9f00      	ldr	r7, [sp, #0]
9000d362:	4605      	mov	r5, r0
9000d364:	4639      	mov	r1, r7
9000d366:	4630      	mov	r0, r6
9000d368:	f7fe ff54 	bl	9000c214 <_malloc_r>
9000d36c:	b948      	cbnz	r0, 9000d382 <__smakebuf_r+0x46>
9000d36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d372:	059a      	lsls	r2, r3, #22
9000d374:	d4ee      	bmi.n	9000d354 <__smakebuf_r+0x18>
9000d376:	f023 0303 	bic.w	r3, r3, #3
9000d37a:	f043 0302 	orr.w	r3, r3, #2
9000d37e:	81a3      	strh	r3, [r4, #12]
9000d380:	e7e2      	b.n	9000d348 <__smakebuf_r+0xc>
9000d382:	89a3      	ldrh	r3, [r4, #12]
9000d384:	6020      	str	r0, [r4, #0]
9000d386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000d38a:	81a3      	strh	r3, [r4, #12]
9000d38c:	9b01      	ldr	r3, [sp, #4]
9000d38e:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000d392:	b15b      	cbz	r3, 9000d3ac <__smakebuf_r+0x70>
9000d394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000d398:	4630      	mov	r0, r6
9000d39a:	f000 f837 	bl	9000d40c <_isatty_r>
9000d39e:	b128      	cbz	r0, 9000d3ac <__smakebuf_r+0x70>
9000d3a0:	89a3      	ldrh	r3, [r4, #12]
9000d3a2:	f023 0303 	bic.w	r3, r3, #3
9000d3a6:	f043 0301 	orr.w	r3, r3, #1
9000d3aa:	81a3      	strh	r3, [r4, #12]
9000d3ac:	89a3      	ldrh	r3, [r4, #12]
9000d3ae:	431d      	orrs	r5, r3
9000d3b0:	81a5      	strh	r5, [r4, #12]
9000d3b2:	e7cf      	b.n	9000d354 <__smakebuf_r+0x18>

9000d3b4 <memmove>:
9000d3b4:	4288      	cmp	r0, r1
9000d3b6:	b510      	push	{r4, lr}
9000d3b8:	eb01 0402 	add.w	r4, r1, r2
9000d3bc:	d902      	bls.n	9000d3c4 <memmove+0x10>
9000d3be:	4284      	cmp	r4, r0
9000d3c0:	4623      	mov	r3, r4
9000d3c2:	d807      	bhi.n	9000d3d4 <memmove+0x20>
9000d3c4:	1e43      	subs	r3, r0, #1
9000d3c6:	42a1      	cmp	r1, r4
9000d3c8:	d008      	beq.n	9000d3dc <memmove+0x28>
9000d3ca:	f811 2b01 	ldrb.w	r2, [r1], #1
9000d3ce:	f803 2f01 	strb.w	r2, [r3, #1]!
9000d3d2:	e7f8      	b.n	9000d3c6 <memmove+0x12>
9000d3d4:	4402      	add	r2, r0
9000d3d6:	4601      	mov	r1, r0
9000d3d8:	428a      	cmp	r2, r1
9000d3da:	d100      	bne.n	9000d3de <memmove+0x2a>
9000d3dc:	bd10      	pop	{r4, pc}
9000d3de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000d3e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000d3e6:	e7f7      	b.n	9000d3d8 <memmove+0x24>

9000d3e8 <_fstat_r>:
9000d3e8:	b538      	push	{r3, r4, r5, lr}
9000d3ea:	4d07      	ldr	r5, [pc, #28]	@ (9000d408 <_fstat_r+0x20>)
9000d3ec:	2300      	movs	r3, #0
9000d3ee:	4604      	mov	r4, r0
9000d3f0:	4608      	mov	r0, r1
9000d3f2:	4611      	mov	r1, r2
9000d3f4:	602b      	str	r3, [r5, #0]
9000d3f6:	f7f3 fe28 	bl	9000104a <_fstat>
9000d3fa:	1c43      	adds	r3, r0, #1
9000d3fc:	d102      	bne.n	9000d404 <_fstat_r+0x1c>
9000d3fe:	682b      	ldr	r3, [r5, #0]
9000d400:	b103      	cbz	r3, 9000d404 <_fstat_r+0x1c>
9000d402:	6023      	str	r3, [r4, #0]
9000d404:	bd38      	pop	{r3, r4, r5, pc}
9000d406:	bf00      	nop
9000d408:	20001490 	.word	0x20001490

9000d40c <_isatty_r>:
9000d40c:	b538      	push	{r3, r4, r5, lr}
9000d40e:	4d06      	ldr	r5, [pc, #24]	@ (9000d428 <_isatty_r+0x1c>)
9000d410:	2300      	movs	r3, #0
9000d412:	4604      	mov	r4, r0
9000d414:	4608      	mov	r0, r1
9000d416:	602b      	str	r3, [r5, #0]
9000d418:	f7f3 fe27 	bl	9000106a <_isatty>
9000d41c:	1c43      	adds	r3, r0, #1
9000d41e:	d102      	bne.n	9000d426 <_isatty_r+0x1a>
9000d420:	682b      	ldr	r3, [r5, #0]
9000d422:	b103      	cbz	r3, 9000d426 <_isatty_r+0x1a>
9000d424:	6023      	str	r3, [r4, #0]
9000d426:	bd38      	pop	{r3, r4, r5, pc}
9000d428:	20001490 	.word	0x20001490

9000d42c <_realloc_r>:
9000d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d430:	4607      	mov	r7, r0
9000d432:	4614      	mov	r4, r2
9000d434:	460d      	mov	r5, r1
9000d436:	b921      	cbnz	r1, 9000d442 <_realloc_r+0x16>
9000d438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000d43c:	4611      	mov	r1, r2
9000d43e:	f7fe bee9 	b.w	9000c214 <_malloc_r>
9000d442:	b92a      	cbnz	r2, 9000d450 <_realloc_r+0x24>
9000d444:	f7ff fa38 	bl	9000c8b8 <_free_r>
9000d448:	4625      	mov	r5, r4
9000d44a:	4628      	mov	r0, r5
9000d44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d450:	f000 f81a 	bl	9000d488 <_malloc_usable_size_r>
9000d454:	4284      	cmp	r4, r0
9000d456:	4606      	mov	r6, r0
9000d458:	d802      	bhi.n	9000d460 <_realloc_r+0x34>
9000d45a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000d45e:	d8f4      	bhi.n	9000d44a <_realloc_r+0x1e>
9000d460:	4621      	mov	r1, r4
9000d462:	4638      	mov	r0, r7
9000d464:	f7fe fed6 	bl	9000c214 <_malloc_r>
9000d468:	4680      	mov	r8, r0
9000d46a:	b908      	cbnz	r0, 9000d470 <_realloc_r+0x44>
9000d46c:	4645      	mov	r5, r8
9000d46e:	e7ec      	b.n	9000d44a <_realloc_r+0x1e>
9000d470:	42b4      	cmp	r4, r6
9000d472:	4622      	mov	r2, r4
9000d474:	4629      	mov	r1, r5
9000d476:	bf28      	it	cs
9000d478:	4632      	movcs	r2, r6
9000d47a:	f7ff fa0e 	bl	9000c89a <memcpy>
9000d47e:	4629      	mov	r1, r5
9000d480:	4638      	mov	r0, r7
9000d482:	f7ff fa19 	bl	9000c8b8 <_free_r>
9000d486:	e7f1      	b.n	9000d46c <_realloc_r+0x40>

9000d488 <_malloc_usable_size_r>:
9000d488:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000d48c:	1f18      	subs	r0, r3, #4
9000d48e:	2b00      	cmp	r3, #0
9000d490:	bfbc      	itt	lt
9000d492:	580b      	ldrlt	r3, [r1, r0]
9000d494:	18c0      	addlt	r0, r0, r3
9000d496:	4770      	bx	lr

9000d498 <_init>:
9000d498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d49a:	bf00      	nop
9000d49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d49e:	bc08      	pop	{r3}
9000d4a0:	469e      	mov	lr, r3
9000d4a2:	4770      	bx	lr

9000d4a4 <_fini>:
9000d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d4a6:	bf00      	nop
9000d4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d4aa:	bc08      	pop	{r3}
9000d4ac:	469e      	mov	lr, r3
9000d4ae:	4770      	bx	lr
