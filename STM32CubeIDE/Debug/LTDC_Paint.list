
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc98  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026c0  9000bf38  9000bf38  0000cf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000e5f8  9000e5f8  000100cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000e5f8  9000e5f8  0000f5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000e600  9000e600  000100cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000e600  9000e600  0000f600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000e604  9000e604  0000f604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9000e608  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001034  200000d0  9000e6d4  000100d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  20001104  9000e6d4  00010104  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000100cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000240a3  00000000  00000000  000100fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004468  00000000  00000000  0003419d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  00038608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000165e  00000000  00000000  0003a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f25e  00000000  00000000  0003b916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b08  00000000  00000000  0007ab74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189b97  00000000  00000000  000a067c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022a213  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008460  00000000  00000000  0022a258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002326b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000bf20 	.word	0x9000bf20

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000bf20 	.word	0x9000bf20

900002e0 <strlen>:
900002e0:	4603      	mov	r3, r0
900002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
900002e6:	2a00      	cmp	r2, #0
900002e8:	d1fb      	bne.n	900002e2 <strlen+0x2>
900002ea:	1a18      	subs	r0, r3, r0
900002ec:	3801      	subs	r0, #1
900002ee:	4770      	bx	lr

900002f0 <memchr>:
900002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002f4:	2a10      	cmp	r2, #16
900002f6:	db2b      	blt.n	90000350 <memchr+0x60>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	d008      	beq.n	90000310 <memchr+0x20>
900002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
90000302:	3a01      	subs	r2, #1
90000304:	428b      	cmp	r3, r1
90000306:	d02d      	beq.n	90000364 <memchr+0x74>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	b342      	cbz	r2, 90000360 <memchr+0x70>
9000030e:	d1f6      	bne.n	900002fe <memchr+0xe>
90000310:	b4f0      	push	{r4, r5, r6, r7}
90000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000031a:	f022 0407 	bic.w	r4, r2, #7
9000031e:	f07f 0700 	mvns.w	r7, #0
90000322:	2300      	movs	r3, #0
90000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000328:	3c08      	subs	r4, #8
9000032a:	ea85 0501 	eor.w	r5, r5, r1
9000032e:	ea86 0601 	eor.w	r6, r6, r1
90000332:	fa85 f547 	uadd8	r5, r5, r7
90000336:	faa3 f587 	sel	r5, r3, r7
9000033a:	fa86 f647 	uadd8	r6, r6, r7
9000033e:	faa5 f687 	sel	r6, r5, r7
90000342:	b98e      	cbnz	r6, 90000368 <memchr+0x78>
90000344:	d1ee      	bne.n	90000324 <memchr+0x34>
90000346:	bcf0      	pop	{r4, r5, r6, r7}
90000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000034c:	f002 0207 	and.w	r2, r2, #7
90000350:	b132      	cbz	r2, 90000360 <memchr+0x70>
90000352:	f810 3b01 	ldrb.w	r3, [r0], #1
90000356:	3a01      	subs	r2, #1
90000358:	ea83 0301 	eor.w	r3, r3, r1
9000035c:	b113      	cbz	r3, 90000364 <memchr+0x74>
9000035e:	d1f8      	bne.n	90000352 <memchr+0x62>
90000360:	2000      	movs	r0, #0
90000362:	4770      	bx	lr
90000364:	3801      	subs	r0, #1
90000366:	4770      	bx	lr
90000368:	2d00      	cmp	r5, #0
9000036a:	bf06      	itte	eq
9000036c:	4635      	moveq	r5, r6
9000036e:	3803      	subeq	r0, #3
90000370:	3807      	subne	r0, #7
90000372:	f015 0f01 	tst.w	r5, #1
90000376:	d107      	bne.n	90000388 <memchr+0x98>
90000378:	3001      	adds	r0, #1
9000037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000037e:	bf02      	ittt	eq
90000380:	3001      	addeq	r0, #1
90000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000386:	3001      	addeq	r0, #1
90000388:	bcf0      	pop	{r4, r5, r6, r7}
9000038a:	3801      	subs	r0, #1
9000038c:	4770      	bx	lr
9000038e:	bf00      	nop

90000390 <__aeabi_uldivmod>:
90000390:	b953      	cbnz	r3, 900003a8 <__aeabi_uldivmod+0x18>
90000392:	b94a      	cbnz	r2, 900003a8 <__aeabi_uldivmod+0x18>
90000394:	2900      	cmp	r1, #0
90000396:	bf08      	it	eq
90000398:	2800      	cmpeq	r0, #0
9000039a:	bf1c      	itt	ne
9000039c:	f04f 31ff 	movne.w	r1, #4294967295
900003a0:	f04f 30ff 	movne.w	r0, #4294967295
900003a4:	f000 b988 	b.w	900006b8 <__aeabi_idiv0>
900003a8:	f1ad 0c08 	sub.w	ip, sp, #8
900003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003b0:	f000 f806 	bl	900003c0 <__udivmoddi4>
900003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003bc:	b004      	add	sp, #16
900003be:	4770      	bx	lr

900003c0 <__udivmoddi4>:
900003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003c4:	9d08      	ldr	r5, [sp, #32]
900003c6:	468e      	mov	lr, r1
900003c8:	4604      	mov	r4, r0
900003ca:	4688      	mov	r8, r1
900003cc:	2b00      	cmp	r3, #0
900003ce:	d14a      	bne.n	90000466 <__udivmoddi4+0xa6>
900003d0:	428a      	cmp	r2, r1
900003d2:	4617      	mov	r7, r2
900003d4:	d962      	bls.n	9000049c <__udivmoddi4+0xdc>
900003d6:	fab2 f682 	clz	r6, r2
900003da:	b14e      	cbz	r6, 900003f0 <__udivmoddi4+0x30>
900003dc:	f1c6 0320 	rsb	r3, r6, #32
900003e0:	fa01 f806 	lsl.w	r8, r1, r6
900003e4:	fa20 f303 	lsr.w	r3, r0, r3
900003e8:	40b7      	lsls	r7, r6
900003ea:	ea43 0808 	orr.w	r8, r3, r8
900003ee:	40b4      	lsls	r4, r6
900003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003f4:	fa1f fc87 	uxth.w	ip, r7
900003f8:	fbb8 f1fe 	udiv	r1, r8, lr
900003fc:	0c23      	lsrs	r3, r4, #16
900003fe:	fb0e 8811 	mls	r8, lr, r1, r8
90000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
90000406:	fb01 f20c 	mul.w	r2, r1, ip
9000040a:	429a      	cmp	r2, r3
9000040c:	d909      	bls.n	90000422 <__udivmoddi4+0x62>
9000040e:	18fb      	adds	r3, r7, r3
90000410:	f101 30ff 	add.w	r0, r1, #4294967295
90000414:	f080 80ea 	bcs.w	900005ec <__udivmoddi4+0x22c>
90000418:	429a      	cmp	r2, r3
9000041a:	f240 80e7 	bls.w	900005ec <__udivmoddi4+0x22c>
9000041e:	3902      	subs	r1, #2
90000420:	443b      	add	r3, r7
90000422:	1a9a      	subs	r2, r3, r2
90000424:	b2a3      	uxth	r3, r4
90000426:	fbb2 f0fe 	udiv	r0, r2, lr
9000042a:	fb0e 2210 	mls	r2, lr, r0, r2
9000042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000432:	fb00 fc0c 	mul.w	ip, r0, ip
90000436:	459c      	cmp	ip, r3
90000438:	d909      	bls.n	9000044e <__udivmoddi4+0x8e>
9000043a:	18fb      	adds	r3, r7, r3
9000043c:	f100 32ff 	add.w	r2, r0, #4294967295
90000440:	f080 80d6 	bcs.w	900005f0 <__udivmoddi4+0x230>
90000444:	459c      	cmp	ip, r3
90000446:	f240 80d3 	bls.w	900005f0 <__udivmoddi4+0x230>
9000044a:	443b      	add	r3, r7
9000044c:	3802      	subs	r0, #2
9000044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000452:	eba3 030c 	sub.w	r3, r3, ip
90000456:	2100      	movs	r1, #0
90000458:	b11d      	cbz	r5, 90000462 <__udivmoddi4+0xa2>
9000045a:	40f3      	lsrs	r3, r6
9000045c:	2200      	movs	r2, #0
9000045e:	e9c5 3200 	strd	r3, r2, [r5]
90000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000466:	428b      	cmp	r3, r1
90000468:	d905      	bls.n	90000476 <__udivmoddi4+0xb6>
9000046a:	b10d      	cbz	r5, 90000470 <__udivmoddi4+0xb0>
9000046c:	e9c5 0100 	strd	r0, r1, [r5]
90000470:	2100      	movs	r1, #0
90000472:	4608      	mov	r0, r1
90000474:	e7f5      	b.n	90000462 <__udivmoddi4+0xa2>
90000476:	fab3 f183 	clz	r1, r3
9000047a:	2900      	cmp	r1, #0
9000047c:	d146      	bne.n	9000050c <__udivmoddi4+0x14c>
9000047e:	4573      	cmp	r3, lr
90000480:	d302      	bcc.n	90000488 <__udivmoddi4+0xc8>
90000482:	4282      	cmp	r2, r0
90000484:	f200 8105 	bhi.w	90000692 <__udivmoddi4+0x2d2>
90000488:	1a84      	subs	r4, r0, r2
9000048a:	eb6e 0203 	sbc.w	r2, lr, r3
9000048e:	2001      	movs	r0, #1
90000490:	4690      	mov	r8, r2
90000492:	2d00      	cmp	r5, #0
90000494:	d0e5      	beq.n	90000462 <__udivmoddi4+0xa2>
90000496:	e9c5 4800 	strd	r4, r8, [r5]
9000049a:	e7e2      	b.n	90000462 <__udivmoddi4+0xa2>
9000049c:	2a00      	cmp	r2, #0
9000049e:	f000 8090 	beq.w	900005c2 <__udivmoddi4+0x202>
900004a2:	fab2 f682 	clz	r6, r2
900004a6:	2e00      	cmp	r6, #0
900004a8:	f040 80a4 	bne.w	900005f4 <__udivmoddi4+0x234>
900004ac:	1a8a      	subs	r2, r1, r2
900004ae:	0c03      	lsrs	r3, r0, #16
900004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004b4:	b280      	uxth	r0, r0
900004b6:	b2bc      	uxth	r4, r7
900004b8:	2101      	movs	r1, #1
900004ba:	fbb2 fcfe 	udiv	ip, r2, lr
900004be:	fb0e 221c 	mls	r2, lr, ip, r2
900004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004c6:	fb04 f20c 	mul.w	r2, r4, ip
900004ca:	429a      	cmp	r2, r3
900004cc:	d907      	bls.n	900004de <__udivmoddi4+0x11e>
900004ce:	18fb      	adds	r3, r7, r3
900004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004d4:	d202      	bcs.n	900004dc <__udivmoddi4+0x11c>
900004d6:	429a      	cmp	r2, r3
900004d8:	f200 80e0 	bhi.w	9000069c <__udivmoddi4+0x2dc>
900004dc:	46c4      	mov	ip, r8
900004de:	1a9b      	subs	r3, r3, r2
900004e0:	fbb3 f2fe 	udiv	r2, r3, lr
900004e4:	fb0e 3312 	mls	r3, lr, r2, r3
900004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004ec:	fb02 f404 	mul.w	r4, r2, r4
900004f0:	429c      	cmp	r4, r3
900004f2:	d907      	bls.n	90000504 <__udivmoddi4+0x144>
900004f4:	18fb      	adds	r3, r7, r3
900004f6:	f102 30ff 	add.w	r0, r2, #4294967295
900004fa:	d202      	bcs.n	90000502 <__udivmoddi4+0x142>
900004fc:	429c      	cmp	r4, r3
900004fe:	f200 80ca 	bhi.w	90000696 <__udivmoddi4+0x2d6>
90000502:	4602      	mov	r2, r0
90000504:	1b1b      	subs	r3, r3, r4
90000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
9000050a:	e7a5      	b.n	90000458 <__udivmoddi4+0x98>
9000050c:	f1c1 0620 	rsb	r6, r1, #32
90000510:	408b      	lsls	r3, r1
90000512:	fa22 f706 	lsr.w	r7, r2, r6
90000516:	431f      	orrs	r7, r3
90000518:	fa0e f401 	lsl.w	r4, lr, r1
9000051c:	fa20 f306 	lsr.w	r3, r0, r6
90000520:	fa2e fe06 	lsr.w	lr, lr, r6
90000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000528:	4323      	orrs	r3, r4
9000052a:	fa00 f801 	lsl.w	r8, r0, r1
9000052e:	fa1f fc87 	uxth.w	ip, r7
90000532:	fbbe f0f9 	udiv	r0, lr, r9
90000536:	0c1c      	lsrs	r4, r3, #16
90000538:	fb09 ee10 	mls	lr, r9, r0, lr
9000053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000540:	fb00 fe0c 	mul.w	lr, r0, ip
90000544:	45a6      	cmp	lr, r4
90000546:	fa02 f201 	lsl.w	r2, r2, r1
9000054a:	d909      	bls.n	90000560 <__udivmoddi4+0x1a0>
9000054c:	193c      	adds	r4, r7, r4
9000054e:	f100 3aff 	add.w	sl, r0, #4294967295
90000552:	f080 809c 	bcs.w	9000068e <__udivmoddi4+0x2ce>
90000556:	45a6      	cmp	lr, r4
90000558:	f240 8099 	bls.w	9000068e <__udivmoddi4+0x2ce>
9000055c:	3802      	subs	r0, #2
9000055e:	443c      	add	r4, r7
90000560:	eba4 040e 	sub.w	r4, r4, lr
90000564:	fa1f fe83 	uxth.w	lr, r3
90000568:	fbb4 f3f9 	udiv	r3, r4, r9
9000056c:	fb09 4413 	mls	r4, r9, r3, r4
90000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000574:	fb03 fc0c 	mul.w	ip, r3, ip
90000578:	45a4      	cmp	ip, r4
9000057a:	d908      	bls.n	9000058e <__udivmoddi4+0x1ce>
9000057c:	193c      	adds	r4, r7, r4
9000057e:	f103 3eff 	add.w	lr, r3, #4294967295
90000582:	f080 8082 	bcs.w	9000068a <__udivmoddi4+0x2ca>
90000586:	45a4      	cmp	ip, r4
90000588:	d97f      	bls.n	9000068a <__udivmoddi4+0x2ca>
9000058a:	3b02      	subs	r3, #2
9000058c:	443c      	add	r4, r7
9000058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000592:	eba4 040c 	sub.w	r4, r4, ip
90000596:	fba0 ec02 	umull	lr, ip, r0, r2
9000059a:	4564      	cmp	r4, ip
9000059c:	4673      	mov	r3, lr
9000059e:	46e1      	mov	r9, ip
900005a0:	d362      	bcc.n	90000668 <__udivmoddi4+0x2a8>
900005a2:	d05f      	beq.n	90000664 <__udivmoddi4+0x2a4>
900005a4:	b15d      	cbz	r5, 900005be <__udivmoddi4+0x1fe>
900005a6:	ebb8 0203 	subs.w	r2, r8, r3
900005aa:	eb64 0409 	sbc.w	r4, r4, r9
900005ae:	fa04 f606 	lsl.w	r6, r4, r6
900005b2:	fa22 f301 	lsr.w	r3, r2, r1
900005b6:	431e      	orrs	r6, r3
900005b8:	40cc      	lsrs	r4, r1
900005ba:	e9c5 6400 	strd	r6, r4, [r5]
900005be:	2100      	movs	r1, #0
900005c0:	e74f      	b.n	90000462 <__udivmoddi4+0xa2>
900005c2:	fbb1 fcf2 	udiv	ip, r1, r2
900005c6:	0c01      	lsrs	r1, r0, #16
900005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005cc:	b280      	uxth	r0, r0
900005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005d2:	463b      	mov	r3, r7
900005d4:	4638      	mov	r0, r7
900005d6:	463c      	mov	r4, r7
900005d8:	46b8      	mov	r8, r7
900005da:	46be      	mov	lr, r7
900005dc:	2620      	movs	r6, #32
900005de:	fbb1 f1f7 	udiv	r1, r1, r7
900005e2:	eba2 0208 	sub.w	r2, r2, r8
900005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005ea:	e766      	b.n	900004ba <__udivmoddi4+0xfa>
900005ec:	4601      	mov	r1, r0
900005ee:	e718      	b.n	90000422 <__udivmoddi4+0x62>
900005f0:	4610      	mov	r0, r2
900005f2:	e72c      	b.n	9000044e <__udivmoddi4+0x8e>
900005f4:	f1c6 0220 	rsb	r2, r6, #32
900005f8:	fa2e f302 	lsr.w	r3, lr, r2
900005fc:	40b7      	lsls	r7, r6
900005fe:	40b1      	lsls	r1, r6
90000600:	fa20 f202 	lsr.w	r2, r0, r2
90000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000608:	430a      	orrs	r2, r1
9000060a:	fbb3 f8fe 	udiv	r8, r3, lr
9000060e:	b2bc      	uxth	r4, r7
90000610:	fb0e 3318 	mls	r3, lr, r8, r3
90000614:	0c11      	lsrs	r1, r2, #16
90000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000061a:	fb08 f904 	mul.w	r9, r8, r4
9000061e:	40b0      	lsls	r0, r6
90000620:	4589      	cmp	r9, r1
90000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000626:	b280      	uxth	r0, r0
90000628:	d93e      	bls.n	900006a8 <__udivmoddi4+0x2e8>
9000062a:	1879      	adds	r1, r7, r1
9000062c:	f108 3cff 	add.w	ip, r8, #4294967295
90000630:	d201      	bcs.n	90000636 <__udivmoddi4+0x276>
90000632:	4589      	cmp	r9, r1
90000634:	d81f      	bhi.n	90000676 <__udivmoddi4+0x2b6>
90000636:	eba1 0109 	sub.w	r1, r1, r9
9000063a:	fbb1 f9fe 	udiv	r9, r1, lr
9000063e:	fb09 f804 	mul.w	r8, r9, r4
90000642:	fb0e 1119 	mls	r1, lr, r9, r1
90000646:	b292      	uxth	r2, r2
90000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000064c:	4542      	cmp	r2, r8
9000064e:	d229      	bcs.n	900006a4 <__udivmoddi4+0x2e4>
90000650:	18ba      	adds	r2, r7, r2
90000652:	f109 31ff 	add.w	r1, r9, #4294967295
90000656:	d2c4      	bcs.n	900005e2 <__udivmoddi4+0x222>
90000658:	4542      	cmp	r2, r8
9000065a:	d2c2      	bcs.n	900005e2 <__udivmoddi4+0x222>
9000065c:	f1a9 0102 	sub.w	r1, r9, #2
90000660:	443a      	add	r2, r7
90000662:	e7be      	b.n	900005e2 <__udivmoddi4+0x222>
90000664:	45f0      	cmp	r8, lr
90000666:	d29d      	bcs.n	900005a4 <__udivmoddi4+0x1e4>
90000668:	ebbe 0302 	subs.w	r3, lr, r2
9000066c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000670:	3801      	subs	r0, #1
90000672:	46e1      	mov	r9, ip
90000674:	e796      	b.n	900005a4 <__udivmoddi4+0x1e4>
90000676:	eba7 0909 	sub.w	r9, r7, r9
9000067a:	4449      	add	r1, r9
9000067c:	f1a8 0c02 	sub.w	ip, r8, #2
90000680:	fbb1 f9fe 	udiv	r9, r1, lr
90000684:	fb09 f804 	mul.w	r8, r9, r4
90000688:	e7db      	b.n	90000642 <__udivmoddi4+0x282>
9000068a:	4673      	mov	r3, lr
9000068c:	e77f      	b.n	9000058e <__udivmoddi4+0x1ce>
9000068e:	4650      	mov	r0, sl
90000690:	e766      	b.n	90000560 <__udivmoddi4+0x1a0>
90000692:	4608      	mov	r0, r1
90000694:	e6fd      	b.n	90000492 <__udivmoddi4+0xd2>
90000696:	443b      	add	r3, r7
90000698:	3a02      	subs	r2, #2
9000069a:	e733      	b.n	90000504 <__udivmoddi4+0x144>
9000069c:	f1ac 0c02 	sub.w	ip, ip, #2
900006a0:	443b      	add	r3, r7
900006a2:	e71c      	b.n	900004de <__udivmoddi4+0x11e>
900006a4:	4649      	mov	r1, r9
900006a6:	e79c      	b.n	900005e2 <__udivmoddi4+0x222>
900006a8:	eba1 0109 	sub.w	r1, r1, r9
900006ac:	46c4      	mov	ip, r8
900006ae:	fbb1 f9fe 	udiv	r9, r1, lr
900006b2:	fb09 f804 	mul.w	r8, r9, r4
900006b6:	e7c4      	b.n	90000642 <__udivmoddi4+0x282>

900006b8 <__aeabi_idiv0>:
900006b8:	4770      	bx	lr
900006ba:	bf00      	nop

900006bc <clearInput>:
#include "appLogic.h"

uint32_t lastCursorTime = 0;

void clearInput(AppContext *ctx) {
900006bc:	b480      	push	{r7}
900006be:	b083      	sub	sp, #12
900006c0:	af00      	add	r7, sp, #0
900006c2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
900006c4:	687b      	ldr	r3, [r7, #4]
900006c6:	2200      	movs	r2, #0
900006c8:	809a      	strh	r2, [r3, #4]
}
900006ca:	bf00      	nop
900006cc:	370c      	adds	r7, #12
900006ce:	46bd      	mov	sp, r7
900006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006d4:	4770      	bx	lr

900006d6 <clearVoltage>:

void clearVoltage(AppContext *ctx) {
900006d6:	b480      	push	{r7}
900006d8:	b083      	sub	sp, #12
900006da:	af00      	add	r7, sp, #0
900006dc:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
900006de:	687b      	ldr	r3, [r7, #4]
900006e0:	2200      	movs	r2, #0
900006e2:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
900006e4:	687b      	ldr	r3, [r7, #4]
900006e6:	2200      	movs	r2, #0
900006e8:	719a      	strb	r2, [r3, #6]
}
900006ea:	bf00      	nop
900006ec:	370c      	adds	r7, #12
900006ee:	46bd      	mov	sp, r7
900006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006f4:	4770      	bx	lr
	...

900006f8 <backspace>:

void backspace(AppContext *ctx) {
900006f8:	b480      	push	{r7}
900006fa:	b083      	sub	sp, #12
900006fc:	af00      	add	r7, sp, #0
900006fe:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
90000700:	687b      	ldr	r3, [r7, #4]
90000702:	889b      	ldrh	r3, [r3, #4]
90000704:	4a06      	ldr	r2, [pc, #24]	@ (90000720 <backspace+0x28>)
90000706:	fba2 2303 	umull	r2, r3, r2, r3
9000070a:	08db      	lsrs	r3, r3, #3
9000070c:	b29a      	uxth	r2, r3
9000070e:	687b      	ldr	r3, [r7, #4]
90000710:	809a      	strh	r2, [r3, #4]
}
90000712:	bf00      	nop
90000714:	370c      	adds	r7, #12
90000716:	46bd      	mov	sp, r7
90000718:	f85d 7b04 	ldr.w	r7, [sp], #4
9000071c:	4770      	bx	lr
9000071e:	bf00      	nop
90000720:	cccccccd 	.word	0xcccccccd

90000724 <stopPWM>:

void stopPWM(AppContext *ctx, CallbackFunction stopPwmCallback) {
90000724:	b580      	push	{r7, lr}
90000726:	b082      	sub	sp, #8
90000728:	af00      	add	r7, sp, #0
9000072a:	6078      	str	r0, [r7, #4]
9000072c:	6039      	str	r1, [r7, #0]
  ctx->isPwmRunning = false;
9000072e:	687b      	ldr	r3, [r7, #4]
90000730:	2200      	movs	r2, #0
90000732:	71da      	strb	r2, [r3, #7]
  stopPwmCallback();
90000734:	683b      	ldr	r3, [r7, #0]
90000736:	4798      	blx	r3
}
90000738:	bf00      	nop
9000073a:	3708      	adds	r7, #8
9000073c:	46bd      	mov	sp, r7
9000073e:	bd80      	pop	{r7, pc}

90000740 <startPWM>:

void startPWM(AppContext *ctx, CallbackWithParam startPwmCallback) {
90000740:	b580      	push	{r7, lr}
90000742:	b082      	sub	sp, #8
90000744:	af00      	add	r7, sp, #0
90000746:	6078      	str	r0, [r7, #4]
90000748:	6039      	str	r1, [r7, #0]
  ctx->isPwmRunning = true;
9000074a:	687b      	ldr	r3, [r7, #4]
9000074c:	2201      	movs	r2, #1
9000074e:	71da      	strb	r2, [r3, #7]
  startPwmCallback(ctx->voltage / 4);
90000750:	687b      	ldr	r3, [r7, #4]
90000752:	885b      	ldrh	r3, [r3, #2]
90000754:	089b      	lsrs	r3, r3, #2
90000756:	b29b      	uxth	r3, r3
90000758:	461a      	mov	r2, r3
9000075a:	683b      	ldr	r3, [r7, #0]
9000075c:	4610      	mov	r0, r2
9000075e:	4798      	blx	r3
}
90000760:	bf00      	nop
90000762:	3708      	adds	r7, #8
90000764:	46bd      	mov	sp, r7
90000766:	bd80      	pop	{r7, pc}

90000768 <setSTATE_F3>:

void setSTATE_F3(AppContext *ctx) {
90000768:	b480      	push	{r7}
9000076a:	b083      	sub	sp, #12
9000076c:	af00      	add	r7, sp, #0
9000076e:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F3;
90000770:	687b      	ldr	r3, [r7, #4]
90000772:	2202      	movs	r2, #2
90000774:	701a      	strb	r2, [r3, #0]
}
90000776:	bf00      	nop
90000778:	370c      	adds	r7, #12
9000077a:	46bd      	mov	sp, r7
9000077c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000780:	4770      	bx	lr

90000782 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
90000782:	b480      	push	{r7}
90000784:	b083      	sub	sp, #12
90000786:	af00      	add	r7, sp, #0
90000788:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
9000078a:	687b      	ldr	r3, [r7, #4]
9000078c:	2201      	movs	r2, #1
9000078e:	701a      	strb	r2, [r3, #0]
}
90000790:	bf00      	nop
90000792:	370c      	adds	r7, #12
90000794:	46bd      	mov	sp, r7
90000796:	f85d 7b04 	ldr.w	r7, [sp], #4
9000079a:	4770      	bx	lr

9000079c <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
9000079c:	b480      	push	{r7}
9000079e:	b083      	sub	sp, #12
900007a0:	af00      	add	r7, sp, #0
900007a2:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F1;
900007a4:	687b      	ldr	r3, [r7, #4]
900007a6:	2200      	movs	r2, #0
900007a8:	701a      	strb	r2, [r3, #0]
}
900007aa:	bf00      	nop
900007ac:	370c      	adds	r7, #12
900007ae:	46bd      	mov	sp, r7
900007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900007b4:	4770      	bx	lr
	...

900007b8 <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
900007b8:	b5b0      	push	{r4, r5, r7, lr}
900007ba:	b082      	sub	sp, #8
900007bc:	af00      	add	r7, sp, #0
900007be:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
900007c0:	687b      	ldr	r3, [r7, #4]
900007c2:	889b      	ldrh	r3, [r3, #4]
900007c4:	2b4f      	cmp	r3, #79	@ 0x4f
900007c6:	d904      	bls.n	900007d2 <validateAndSetVoltage+0x1a>
900007c8:	687b      	ldr	r3, [r7, #4]
900007ca:	889b      	ldrh	r3, [r3, #4]
900007cc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
900007d0:	d914      	bls.n	900007fc <validateAndSetVoltage+0x44>
  {
    strcpy(ctx->message, "Not in range 80 - 400!");
900007d2:	687b      	ldr	r3, [r7, #4]
900007d4:	3309      	adds	r3, #9
900007d6:	4a10      	ldr	r2, [pc, #64]	@ (90000818 <validateAndSetVoltage+0x60>)
900007d8:	461c      	mov	r4, r3
900007da:	4615      	mov	r5, r2
900007dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900007de:	6020      	str	r0, [r4, #0]
900007e0:	6061      	str	r1, [r4, #4]
900007e2:	60a2      	str	r2, [r4, #8]
900007e4:	60e3      	str	r3, [r4, #12]
900007e6:	6828      	ldr	r0, [r5, #0]
900007e8:	6120      	str	r0, [r4, #16]
900007ea:	88ab      	ldrh	r3, [r5, #4]
900007ec:	79aa      	ldrb	r2, [r5, #6]
900007ee:	82a3      	strh	r3, [r4, #20]
900007f0:	4613      	mov	r3, r2
900007f2:	75a3      	strb	r3, [r4, #22]
    clearInput(ctx);
900007f4:	6878      	ldr	r0, [r7, #4]
900007f6:	f7ff ff61 	bl	900006bc <clearInput>
    return;
900007fa:	e009      	b.n	90000810 <validateAndSetVoltage+0x58>
  }
  ctx->isVoltageEntered = true;
900007fc:	687b      	ldr	r3, [r7, #4]
900007fe:	2201      	movs	r2, #1
90000800:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
90000802:	687b      	ldr	r3, [r7, #4]
90000804:	889a      	ldrh	r2, [r3, #4]
90000806:	687b      	ldr	r3, [r7, #4]
90000808:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
9000080a:	687b      	ldr	r3, [r7, #4]
9000080c:	2200      	movs	r2, #0
9000080e:	809a      	strh	r2, [r3, #4]
}
90000810:	3708      	adds	r7, #8
90000812:	46bd      	mov	sp, r7
90000814:	bdb0      	pop	{r4, r5, r7, pc}
90000816:	bf00      	nop
90000818:	9000bf38 	.word	0x9000bf38

9000081c <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key) {
9000081c:	b4b0      	push	{r4, r5, r7}
9000081e:	b085      	sub	sp, #20
90000820:	af00      	add	r7, sp, #0
90000822:	6078      	str	r0, [r7, #4]
90000824:	460b      	mov	r3, r1
90000826:	70fb      	strb	r3, [r7, #3]
  uint8_t digit = key - '0';
90000828:	78fb      	ldrb	r3, [r7, #3]
9000082a:	3b30      	subs	r3, #48	@ 0x30
9000082c:	73fb      	strb	r3, [r7, #15]
  if (ctx->inputValue > 40) {
9000082e:	687b      	ldr	r3, [r7, #4]
90000830:	889b      	ldrh	r3, [r3, #4]
90000832:	2b28      	cmp	r3, #40	@ 0x28
90000834:	d90a      	bls.n	9000084c <updateInput+0x30>
    strcpy(ctx->message, "Input too high!");
90000836:	687b      	ldr	r3, [r7, #4]
90000838:	3309      	adds	r3, #9
9000083a:	4a0d      	ldr	r2, [pc, #52]	@ (90000870 <updateInput+0x54>)
9000083c:	461c      	mov	r4, r3
9000083e:	4615      	mov	r5, r2
90000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90000842:	6020      	str	r0, [r4, #0]
90000844:	6061      	str	r1, [r4, #4]
90000846:	60a2      	str	r2, [r4, #8]
90000848:	60e3      	str	r3, [r4, #12]
    return;
9000084a:	e00c      	b.n	90000866 <updateInput+0x4a>
  }
  ctx->inputValue = ctx->inputValue * 10 + digit;
9000084c:	687b      	ldr	r3, [r7, #4]
9000084e:	889b      	ldrh	r3, [r3, #4]
90000850:	461a      	mov	r2, r3
90000852:	0092      	lsls	r2, r2, #2
90000854:	4413      	add	r3, r2
90000856:	005b      	lsls	r3, r3, #1
90000858:	b29a      	uxth	r2, r3
9000085a:	7bfb      	ldrb	r3, [r7, #15]
9000085c:	b29b      	uxth	r3, r3
9000085e:	4413      	add	r3, r2
90000860:	b29a      	uxth	r2, r3
90000862:	687b      	ldr	r3, [r7, #4]
90000864:	809a      	strh	r2, [r3, #4]
}
90000866:	3714      	adds	r7, #20
90000868:	46bd      	mov	sp, r7
9000086a:	bcb0      	pop	{r4, r5, r7}
9000086c:	4770      	bx	lr
9000086e:	bf00      	nop
90000870:	9000bf50 	.word	0x9000bf50

90000874 <handle_event>:

bool handle_event(AppContext *ctx, KeyboardButton key, CallbackWithParam startPwmCallback, CallbackFunction stopPwmCallback)
{
90000874:	b580      	push	{r7, lr}
90000876:	b086      	sub	sp, #24
90000878:	af00      	add	r7, sp, #0
9000087a:	60f8      	str	r0, [r7, #12]
9000087c:	607a      	str	r2, [r7, #4]
9000087e:	603b      	str	r3, [r7, #0]
90000880:	460b      	mov	r3, r1
90000882:	72fb      	strb	r3, [r7, #11]
  if (key == KEY_NULL)
90000884:	7afb      	ldrb	r3, [r7, #11]
90000886:	2b4e      	cmp	r3, #78	@ 0x4e
90000888:	d11f      	bne.n	900008ca <handle_event+0x56>
  {
	  // cursor logic
	  uint32_t now = HAL_GetTick();
9000088a:	f002 fddd 	bl	90003448 <HAL_GetTick>
9000088e:	6178      	str	r0, [r7, #20]
	  if (now - lastCursorTime > 500)
90000890:	4b48      	ldr	r3, [pc, #288]	@ (900009b4 <handle_event+0x140>)
90000892:	681b      	ldr	r3, [r3, #0]
90000894:	697a      	ldr	r2, [r7, #20]
90000896:	1ad3      	subs	r3, r2, r3
90000898:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
9000089c:	d913      	bls.n	900008c6 <handle_event+0x52>
	  {
		  ctx->displayCursor = !ctx->displayCursor;
9000089e:	68fb      	ldr	r3, [r7, #12]
900008a0:	7a1b      	ldrb	r3, [r3, #8]
900008a2:	2b00      	cmp	r3, #0
900008a4:	bf14      	ite	ne
900008a6:	2301      	movne	r3, #1
900008a8:	2300      	moveq	r3, #0
900008aa:	b2db      	uxtb	r3, r3
900008ac:	f083 0301 	eor.w	r3, r3, #1
900008b0:	b2db      	uxtb	r3, r3
900008b2:	f003 0301 	and.w	r3, r3, #1
900008b6:	b2da      	uxtb	r2, r3
900008b8:	68fb      	ldr	r3, [r7, #12]
900008ba:	721a      	strb	r2, [r3, #8]
		  lastCursorTime = now;
900008bc:	4a3d      	ldr	r2, [pc, #244]	@ (900009b4 <handle_event+0x140>)
900008be:	697b      	ldr	r3, [r7, #20]
900008c0:	6013      	str	r3, [r2, #0]
		  return true;
900008c2:	2301      	movs	r3, #1
900008c4:	e072      	b.n	900009ac <handle_event+0x138>
	  }
	  return false;
900008c6:	2300      	movs	r3, #0
900008c8:	e070      	b.n	900009ac <handle_event+0x138>
  }
  strcpy(ctx->message, "");
900008ca:	68fb      	ldr	r3, [r7, #12]
900008cc:	3309      	adds	r3, #9
900008ce:	2200      	movs	r2, #0
900008d0:	701a      	strb	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
900008d2:	68fb      	ldr	r3, [r7, #12]
900008d4:	781b      	ldrb	r3, [r3, #0]
900008d6:	2b00      	cmp	r3, #0
900008d8:	d147      	bne.n	9000096a <handle_event+0xf6>
	if (ctx->isPwmRunning == true)
900008da:	68fb      	ldr	r3, [r7, #12]
900008dc:	79db      	ldrb	r3, [r3, #7]
900008de:	2b00      	cmp	r3, #0
900008e0:	d008      	beq.n	900008f4 <handle_event+0x80>
	{
	  if (key == KEY_Stop) stopPWM(ctx, stopPwmCallback);
900008e2:	7afb      	ldrb	r3, [r7, #11]
900008e4:	2b73      	cmp	r3, #115	@ 0x73
900008e6:	d103      	bne.n	900008f0 <handle_event+0x7c>
900008e8:	6839      	ldr	r1, [r7, #0]
900008ea:	68f8      	ldr	r0, [r7, #12]
900008ec:	f7ff ff1a 	bl	90000724 <stopPWM>
	  return false; // when PWM is running, we can only press the "STOP" button
900008f0:	2300      	movs	r3, #0
900008f2:	e05b      	b.n	900009ac <handle_event+0x138>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
900008f4:	68fb      	ldr	r3, [r7, #12]
900008f6:	799b      	ldrb	r3, [r3, #6]
900008f8:	2b00      	cmp	r3, #0
900008fa:	d00d      	beq.n	90000918 <handle_event+0xa4>
	{
	  if (key == KEY_Start) {
900008fc:	7afb      	ldrb	r3, [r7, #11]
900008fe:	2b53      	cmp	r3, #83	@ 0x53
90000900:	d103      	bne.n	9000090a <handle_event+0x96>
		  startPWM(ctx, startPwmCallback);
90000902:	6879      	ldr	r1, [r7, #4]
90000904:	68f8      	ldr	r0, [r7, #12]
90000906:	f7ff ff1b 	bl	90000740 <startPWM>
	  }
      if (key == KEY_Clear) clearVoltage(ctx);
9000090a:	7afb      	ldrb	r3, [r7, #11]
9000090c:	2b63      	cmp	r3, #99	@ 0x63
9000090e:	d120      	bne.n	90000952 <handle_event+0xde>
90000910:	68f8      	ldr	r0, [r7, #12]
90000912:	f7ff fee0 	bl	900006d6 <clearVoltage>
90000916:	e01c      	b.n	90000952 <handle_event+0xde>
	} else
	{
	  if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key);
90000918:	7afb      	ldrb	r3, [r7, #11]
9000091a:	2b2f      	cmp	r3, #47	@ 0x2f
9000091c:	d907      	bls.n	9000092e <handle_event+0xba>
9000091e:	7afb      	ldrb	r3, [r7, #11]
90000920:	2b39      	cmp	r3, #57	@ 0x39
90000922:	d804      	bhi.n	9000092e <handle_event+0xba>
90000924:	7afb      	ldrb	r3, [r7, #11]
90000926:	4619      	mov	r1, r3
90000928:	68f8      	ldr	r0, [r7, #12]
9000092a:	f7ff ff77 	bl	9000081c <updateInput>
	  if (key == KEY_Enter) validateAndSetVoltage(ctx);
9000092e:	7afb      	ldrb	r3, [r7, #11]
90000930:	2b65      	cmp	r3, #101	@ 0x65
90000932:	d102      	bne.n	9000093a <handle_event+0xc6>
90000934:	68f8      	ldr	r0, [r7, #12]
90000936:	f7ff ff3f 	bl	900007b8 <validateAndSetVoltage>
	  if (key == KEY_BkSp) backspace(ctx);
9000093a:	7afb      	ldrb	r3, [r7, #11]
9000093c:	2b62      	cmp	r3, #98	@ 0x62
9000093e:	d102      	bne.n	90000946 <handle_event+0xd2>
90000940:	68f8      	ldr	r0, [r7, #12]
90000942:	f7ff fed9 	bl	900006f8 <backspace>
	  if (key == KEY_ESC) clearInput(ctx);
90000946:	7afb      	ldrb	r3, [r7, #11]
90000948:	2b60      	cmp	r3, #96	@ 0x60
9000094a:	d102      	bne.n	90000952 <handle_event+0xde>
9000094c:	68f8      	ldr	r0, [r7, #12]
9000094e:	f7ff feb5 	bl	900006bc <clearInput>
	}

    if (key == KEY_F2) setSTATE_F2(ctx);
90000952:	7afb      	ldrb	r3, [r7, #11]
90000954:	2b40      	cmp	r3, #64	@ 0x40
90000956:	d102      	bne.n	9000095e <handle_event+0xea>
90000958:	68f8      	ldr	r0, [r7, #12]
9000095a:	f7ff ff12 	bl	90000782 <setSTATE_F2>
    if (key == KEY_F3) setSTATE_F3(ctx);
9000095e:	7afb      	ldrb	r3, [r7, #11]
90000960:	2b23      	cmp	r3, #35	@ 0x23
90000962:	d102      	bne.n	9000096a <handle_event+0xf6>
90000964:	68f8      	ldr	r0, [r7, #12]
90000966:	f7ff feff 	bl	90000768 <setSTATE_F3>
  }

  if (ctx->currentState == STATE_F2) {
9000096a:	68fb      	ldr	r3, [r7, #12]
9000096c:	781b      	ldrb	r3, [r3, #0]
9000096e:	2b01      	cmp	r3, #1
90000970:	d10b      	bne.n	9000098a <handle_event+0x116>
	if (key == KEY_F1) setSTATE_F1(ctx);
90000972:	7afb      	ldrb	r3, [r7, #11]
90000974:	2b21      	cmp	r3, #33	@ 0x21
90000976:	d102      	bne.n	9000097e <handle_event+0x10a>
90000978:	68f8      	ldr	r0, [r7, #12]
9000097a:	f7ff ff0f 	bl	9000079c <setSTATE_F1>
	if (key == KEY_F3) setSTATE_F3(ctx);
9000097e:	7afb      	ldrb	r3, [r7, #11]
90000980:	2b23      	cmp	r3, #35	@ 0x23
90000982:	d102      	bne.n	9000098a <handle_event+0x116>
90000984:	68f8      	ldr	r0, [r7, #12]
90000986:	f7ff feef 	bl	90000768 <setSTATE_F3>
  }

  if (ctx->currentState == STATE_F3) {
9000098a:	68fb      	ldr	r3, [r7, #12]
9000098c:	781b      	ldrb	r3, [r3, #0]
9000098e:	2b02      	cmp	r3, #2
90000990:	d10b      	bne.n	900009aa <handle_event+0x136>
	if (key == KEY_F1) setSTATE_F1(ctx);
90000992:	7afb      	ldrb	r3, [r7, #11]
90000994:	2b21      	cmp	r3, #33	@ 0x21
90000996:	d102      	bne.n	9000099e <handle_event+0x12a>
90000998:	68f8      	ldr	r0, [r7, #12]
9000099a:	f7ff feff 	bl	9000079c <setSTATE_F1>
	if (key == KEY_F2) setSTATE_F2(ctx);
9000099e:	7afb      	ldrb	r3, [r7, #11]
900009a0:	2b40      	cmp	r3, #64	@ 0x40
900009a2:	d102      	bne.n	900009aa <handle_event+0x136>
900009a4:	68f8      	ldr	r0, [r7, #12]
900009a6:	f7ff feec 	bl	90000782 <setSTATE_F2>
  }
return true;
900009aa:	2301      	movs	r3, #1
}
900009ac:	4618      	mov	r0, r3
900009ae:	3718      	adds	r7, #24
900009b0:	46bd      	mov	sp, r7
900009b2:	bd80      	pop	{r7, pc}
900009b4:	200000ec 	.word	0x200000ec

900009b8 <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx) {
900009b8:	b480      	push	{r7}
900009ba:	b083      	sub	sp, #12
900009bc:	af00      	add	r7, sp, #0
900009be:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_F1;
900009c0:	687b      	ldr	r3, [r7, #4]
900009c2:	2200      	movs	r2, #0
900009c4:	701a      	strb	r2, [r3, #0]
	ctx->isVoltageEntered = false;
900009c6:	687b      	ldr	r3, [r7, #4]
900009c8:	2200      	movs	r2, #0
900009ca:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
900009cc:	687b      	ldr	r3, [r7, #4]
900009ce:	2200      	movs	r2, #0
900009d0:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
900009d2:	687b      	ldr	r3, [r7, #4]
900009d4:	2200      	movs	r2, #0
900009d6:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
900009d8:	687b      	ldr	r3, [r7, #4]
900009da:	2200      	movs	r2, #0
900009dc:	809a      	strh	r2, [r3, #4]
}
900009de:	bf00      	nop
900009e0:	370c      	adds	r7, #12
900009e2:	46bd      	mov	sp, r7
900009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900009e8:	4770      	bx	lr
	...

900009ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900009ec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000a28 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900009f0:	f002 fc84 	bl	900032fc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900009f4:	f002 fc20 	bl	90003238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900009f8:	480c      	ldr	r0, [pc, #48]	@ (90000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900009fa:	490d      	ldr	r1, [pc, #52]	@ (90000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900009fc:	4a0d      	ldr	r2, [pc, #52]	@ (90000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
900009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000a00:	e002      	b.n	90000a08 <LoopCopyDataInit>

90000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000a06:	3304      	adds	r3, #4

90000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000a0c:	d3f9      	bcc.n	90000a02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (90000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000a10:	4c0a      	ldr	r4, [pc, #40]	@ (90000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
90000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
90000a14:	e001      	b.n	90000a1a <LoopFillZerobss>

90000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000a18:	3204      	adds	r2, #4

90000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000a1c:	d3fb      	bcc.n	90000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000a1e:	f00a fb9b 	bl	9000b158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000a22:	f000 f80f 	bl	90000a44 <main>
  bx  lr
90000a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000a30:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
90000a34:	9000e608 	.word	0x9000e608
  ldr r2, =_sbss
90000a38:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
90000a3c:	20001104 	.word	0x20001104

90000a40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000a40:	e7fe      	b.n	90000a40 <ADC3_IRQHandler>
	...

90000a44 <main>:
void TIM8_Stop();
void TIM8_Start(uint32_t percent);
void MX_TIM8_PWM_Init();

int main(void)
{
90000a44:	b580      	push	{r7, lr}
90000a46:	b096      	sub	sp, #88	@ 0x58
90000a48:	af00      	add	r7, sp, #0
  MPU_Config(); // Configure the MPU attributes as Write Through for SDRAM
90000a4a:	f000 fb63 	bl	90001114 <MPU_Config>
  CPU_CACHE_Enable();
90000a4e:	f000 facf 	bl	90000ff0 <CPU_CACHE_Enable>
  HAL_Init();
90000a52:	f002 fc6b 	bl	9000332c <HAL_Init>
  SystemClock_Config();
90000a56:	f000 f9c7 	bl	90000de8 <SystemClock_Config>
  MX_USART3_UART_Init();
90000a5a:	f000 f90b 	bl	90000c74 <MX_USART3_UART_Init>

  printf("Starting fresh...\r\n");
90000a5e:	4818      	ldr	r0, [pc, #96]	@ (90000ac0 <main+0x7c>)
90000a60:	f00a fa24 	bl	9000aeac <puts>

  AppContext ctx;
  InitializeAppContext(&ctx);
90000a64:	1d3b      	adds	r3, r7, #4
90000a66:	4618      	mov	r0, r3
90000a68:	f7ff ffa6 	bl	900009b8 <InitializeAppContext>
  InitializeLcd();
90000a6c:	f000 fc82 	bl	90001374 <InitializeLcd>
  UartClearScreen();
90000a70:	f000 fcbe 	bl	900013f0 <UartClearScreen>
  InitFlexiKeyboard(); // has to be AFTER InitializeLcd, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000a74:	f009 fccc 	bl	9000a410 <InitFlexiKeyboard>
  MX_TIM8_PWM_Init(); // initialize PWM output on pin PI2
90000a78:	f000 f828 	bl	90000acc <MX_TIM8_PWM_Init>

  while (1)
  {
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 5ms blocking code to scan the keyboard
90000a7c:	f009 fc62 	bl	9000a344 <ReadFlexiKeyboard>
90000a80:	4603      	mov	r3, r0
90000a82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  bool ctxChanged = handle_event(&ctx, key, TIM8_Start, TIM8_Stop);
90000a86:	f897 1057 	ldrb.w	r1, [r7, #87]	@ 0x57
90000a8a:	1d38      	adds	r0, r7, #4
90000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (90000ac4 <main+0x80>)
90000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (90000ac8 <main+0x84>)
90000a90:	f7ff fef0 	bl	90000874 <handle_event>
90000a94:	4603      	mov	r3, r0
90000a96:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	  if (!ctxChanged) continue; // no need to redraw display
90000a9a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
90000a9e:	f083 0301 	eor.w	r3, r3, #1
90000aa2:	b2db      	uxtb	r3, r3
90000aa4:	2b00      	cmp	r3, #0
90000aa6:	d108      	bne.n	90000aba <main+0x76>
	  UartRenderState(&ctx);
90000aa8:	1d3b      	adds	r3, r7, #4
90000aaa:	4618      	mov	r0, r3
90000aac:	f000 fcae 	bl	9000140c <UartRenderState>
	  DisplayRenderState(&ctx);
90000ab0:	1d3b      	adds	r3, r7, #4
90000ab2:	4618      	mov	r0, r3
90000ab4:	f000 fd2e 	bl	90001514 <DisplayRenderState>
90000ab8:	e7e0      	b.n	90000a7c <main+0x38>
	  if (!ctxChanged) continue; // no need to redraw display
90000aba:	bf00      	nop
  {
90000abc:	e7de      	b.n	90000a7c <main+0x38>
90000abe:	bf00      	nop
90000ac0:	9000bf60 	.word	0x9000bf60
90000ac4:	90000c31 	.word	0x90000c31
90000ac8:	90000bed 	.word	0x90000bed

90000acc <MX_TIM8_PWM_Init>:
  }
}

void MX_TIM8_PWM_Init()
{
90000acc:	b580      	push	{r7, lr}
90000ace:	b092      	sub	sp, #72	@ 0x48
90000ad0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOI_CLK_ENABLE();
90000ad2:	4b42      	ldr	r3, [pc, #264]	@ (90000bdc <MX_TIM8_PWM_Init+0x110>)
90000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000ad8:	4a40      	ldr	r2, [pc, #256]	@ (90000bdc <MX_TIM8_PWM_Init+0x110>)
90000ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000ae2:	4b3e      	ldr	r3, [pc, #248]	@ (90000bdc <MX_TIM8_PWM_Init+0x110>)
90000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90000aec:	60bb      	str	r3, [r7, #8]
90000aee:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM8_CLK_ENABLE();
90000af0:	4b3a      	ldr	r3, [pc, #232]	@ (90000bdc <MX_TIM8_PWM_Init+0x110>)
90000af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90000af6:	4a39      	ldr	r2, [pc, #228]	@ (90000bdc <MX_TIM8_PWM_Init+0x110>)
90000af8:	f043 0302 	orr.w	r3, r3, #2
90000afc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90000b00:	4b36      	ldr	r3, [pc, #216]	@ (90000bdc <MX_TIM8_PWM_Init+0x110>)
90000b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90000b06:	f003 0302 	and.w	r3, r3, #2
90000b0a:	607b      	str	r3, [r7, #4]
90000b0c:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
90000b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
90000b12:	2200      	movs	r2, #0
90000b14:	601a      	str	r2, [r3, #0]
90000b16:	605a      	str	r2, [r3, #4]
90000b18:	609a      	str	r2, [r3, #8]
90000b1a:	60da      	str	r2, [r3, #12]
90000b1c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
90000b1e:	2304      	movs	r3, #4
90000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b22:	2302      	movs	r3, #2
90000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b26:	2300      	movs	r3, #0
90000b28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b2a:	2300      	movs	r3, #0
90000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
90000b2e:	2303      	movs	r3, #3
90000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000b32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
90000b36:	4619      	mov	r1, r3
90000b38:	4829      	ldr	r0, [pc, #164]	@ (90000be0 <MX_TIM8_PWM_Init+0x114>)
90000b3a:	f003 f92f 	bl	90003d9c <HAL_GPIO_Init>

    uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // TIM8 is on APB2
90000b3e:	f005 fb55 	bl	900061ec <HAL_RCC_GetPCLK2Freq>
90000b42:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = 9;
90000b44:	2309      	movs	r3, #9
90000b46:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t period = (timerClock / ((prescaler + 1) * 5000)) - 1; // 10kHz - magic, I need to look at this deeper
90000b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
90000b4a:	3301      	adds	r3, #1
90000b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
90000b50:	fb02 f303 	mul.w	r3, r2, r3
90000b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90000b56:	fbb2 f3f3 	udiv	r3, r2, r3
90000b5a:	3b01      	subs	r3, #1
90000b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    htim8.Instance = TIM8;
90000b5e:	4b21      	ldr	r3, [pc, #132]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000b60:	4a21      	ldr	r2, [pc, #132]	@ (90000be8 <MX_TIM8_PWM_Init+0x11c>)
90000b62:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler = prescaler;
90000b64:	4a1f      	ldr	r2, [pc, #124]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
90000b68:	6053      	str	r3, [r2, #4]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
90000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000b6c:	2200      	movs	r2, #0
90000b6e:	609a      	str	r2, [r3, #8]
    htim8.Init.Period = period;
90000b70:	4a1c      	ldr	r2, [pc, #112]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90000b74:	60d3      	str	r3, [r2, #12]
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
90000b76:	4b1b      	ldr	r3, [pc, #108]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000b78:	2200      	movs	r2, #0
90000b7a:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
90000b7c:	4b19      	ldr	r3, [pc, #100]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000b7e:	2200      	movs	r2, #0
90000b80:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90000b82:	4b18      	ldr	r3, [pc, #96]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000b84:	2200      	movs	r2, #0
90000b86:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) Error_Handler();
90000b88:	4816      	ldr	r0, [pc, #88]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000b8a:	f007 fa14 	bl	90007fb6 <HAL_TIM_PWM_Init>
90000b8e:	4603      	mov	r3, r0
90000b90:	2b00      	cmp	r3, #0
90000b92:	d001      	beq.n	90000b98 <MX_TIM8_PWM_Init+0xcc>
90000b94:	f000 f924 	bl	90000de0 <Error_Handler>

    TIM_OC_InitTypeDef sConfigOC = {0};
90000b98:	f107 030c 	add.w	r3, r7, #12
90000b9c:	2200      	movs	r2, #0
90000b9e:	601a      	str	r2, [r3, #0]
90000ba0:	605a      	str	r2, [r3, #4]
90000ba2:	609a      	str	r2, [r3, #8]
90000ba4:	60da      	str	r2, [r3, #12]
90000ba6:	611a      	str	r2, [r3, #16]
90000ba8:	615a      	str	r2, [r3, #20]
90000baa:	619a      	str	r2, [r3, #24]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
90000bac:	2360      	movs	r3, #96	@ 0x60
90000bae:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = 0; // (period + 1) * duty / 100;
90000bb0:	2300      	movs	r3, #0
90000bb2:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
90000bb4:	2300      	movs	r3, #0
90000bb6:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
90000bb8:	2300      	movs	r3, #0
90000bba:	61fb      	str	r3, [r7, #28]

    if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) Error_Handler();
90000bbc:	f107 030c 	add.w	r3, r7, #12
90000bc0:	220c      	movs	r2, #12
90000bc2:	4619      	mov	r1, r3
90000bc4:	4807      	ldr	r0, [pc, #28]	@ (90000be4 <MX_TIM8_PWM_Init+0x118>)
90000bc6:	f007 fc61 	bl	9000848c <HAL_TIM_PWM_ConfigChannel>
90000bca:	4603      	mov	r3, r0
90000bcc:	2b00      	cmp	r3, #0
90000bce:	d001      	beq.n	90000bd4 <MX_TIM8_PWM_Init+0x108>
90000bd0:	f000 f906 	bl	90000de0 <Error_Handler>
}
90000bd4:	bf00      	nop
90000bd6:	3748      	adds	r7, #72	@ 0x48
90000bd8:	46bd      	mov	sp, r7
90000bda:	bd80      	pop	{r7, pc}
90000bdc:	58024400 	.word	0x58024400
90000be0:	58022000 	.word	0x58022000
90000be4:	200000f0 	.word	0x200000f0
90000be8:	40010400 	.word	0x40010400

90000bec <TIM8_Start>:

void TIM8_Start(uint32_t percent)
{
90000bec:	b580      	push	{r7, lr}
90000bee:	b084      	sub	sp, #16
90000bf0:	af00      	add	r7, sp, #0
90000bf2:	6078      	str	r0, [r7, #4]
    uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim8);
90000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (90000c28 <TIM8_Start+0x3c>)
90000bf6:	681b      	ldr	r3, [r3, #0]
90000bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000bfa:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = (period + 1) * percent / 100;
90000bfc:	68fb      	ldr	r3, [r7, #12]
90000bfe:	3301      	adds	r3, #1
90000c00:	687a      	ldr	r2, [r7, #4]
90000c02:	fb02 f303 	mul.w	r3, r2, r3
90000c06:	4a09      	ldr	r2, [pc, #36]	@ (90000c2c <TIM8_Start+0x40>)
90000c08:	fba2 2303 	umull	r2, r3, r2, r3
90000c0c:	095b      	lsrs	r3, r3, #5
90000c0e:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pulse);
90000c10:	4b05      	ldr	r3, [pc, #20]	@ (90000c28 <TIM8_Start+0x3c>)
90000c12:	681b      	ldr	r3, [r3, #0]
90000c14:	68ba      	ldr	r2, [r7, #8]
90000c16:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
90000c18:	210c      	movs	r1, #12
90000c1a:	4803      	ldr	r0, [pc, #12]	@ (90000c28 <TIM8_Start+0x3c>)
90000c1c:	f007 fa92 	bl	90008144 <HAL_TIM_PWM_Start>
}
90000c20:	bf00      	nop
90000c22:	3710      	adds	r7, #16
90000c24:	46bd      	mov	sp, r7
90000c26:	bd80      	pop	{r7, pc}
90000c28:	200000f0 	.word	0x200000f0
90000c2c:	51eb851f 	.word	0x51eb851f

90000c30 <TIM8_Stop>:

void TIM8_Stop()
{
90000c30:	b580      	push	{r7, lr}
90000c32:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
90000c34:	210c      	movs	r1, #12
90000c36:	4802      	ldr	r0, [pc, #8]	@ (90000c40 <TIM8_Stop+0x10>)
90000c38:	f007 fb92 	bl	90008360 <HAL_TIM_PWM_Stop>
}
90000c3c:	bf00      	nop
90000c3e:	bd80      	pop	{r7, pc}
90000c40:	200000f0 	.word	0x200000f0

90000c44 <__io_putchar>:

int __io_putchar(int ch) {
90000c44:	b580      	push	{r7, lr}
90000c46:	b082      	sub	sp, #8
90000c48:	af00      	add	r7, sp, #0
90000c4a:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
90000c4c:	1d39      	adds	r1, r7, #4
90000c4e:	f04f 33ff 	mov.w	r3, #4294967295
90000c52:	2201      	movs	r2, #1
90000c54:	4806      	ldr	r0, [pc, #24]	@ (90000c70 <__io_putchar+0x2c>)
90000c56:	f008 f918 	bl	90008e8a <HAL_UART_Transmit>
90000c5a:	4603      	mov	r3, r0
90000c5c:	2b00      	cmp	r3, #0
90000c5e:	d002      	beq.n	90000c66 <__io_putchar+0x22>
    return -1;
90000c60:	f04f 33ff 	mov.w	r3, #4294967295
90000c64:	e000      	b.n	90000c68 <__io_putchar+0x24>
  }
  return ch;
90000c66:	687b      	ldr	r3, [r7, #4]
}
90000c68:	4618      	mov	r0, r3
90000c6a:	3708      	adds	r7, #8
90000c6c:	46bd      	mov	sp, r7
90000c6e:	bd80      	pop	{r7, pc}
90000c70:	2000013c 	.word	0x2000013c

90000c74 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
90000c74:	b580      	push	{r7, lr}
90000c76:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000c78:	4b22      	ldr	r3, [pc, #136]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000c7a:	4a23      	ldr	r2, [pc, #140]	@ (90000d08 <MX_USART3_UART_Init+0x94>)
90000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000c7e:	4b21      	ldr	r3, [pc, #132]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000c86:	4b1f      	ldr	r3, [pc, #124]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000c88:	2200      	movs	r2, #0
90000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000c8c:	4b1d      	ldr	r3, [pc, #116]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000c8e:	2200      	movs	r2, #0
90000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000c92:	4b1c      	ldr	r3, [pc, #112]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000c94:	2200      	movs	r2, #0
90000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000c98:	4b1a      	ldr	r3, [pc, #104]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000c9a:	220c      	movs	r2, #12
90000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000c9e:	4b19      	ldr	r3, [pc, #100]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000ca0:	2200      	movs	r2, #0
90000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000ca4:	4b17      	ldr	r3, [pc, #92]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000ca6:	2200      	movs	r2, #0
90000ca8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000caa:	4b16      	ldr	r3, [pc, #88]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000cac:	2200      	movs	r2, #0
90000cae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000cb0:	4b14      	ldr	r3, [pc, #80]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000cb2:	2200      	movs	r2, #0
90000cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000cb6:	4b13      	ldr	r3, [pc, #76]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000cb8:	2200      	movs	r2, #0
90000cba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000cbc:	4811      	ldr	r0, [pc, #68]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000cbe:	f008 f894 	bl	90008dea <HAL_UART_Init>
90000cc2:	4603      	mov	r3, r0
90000cc4:	2b00      	cmp	r3, #0
90000cc6:	d001      	beq.n	90000ccc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000cc8:	f000 f88a 	bl	90000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ccc:	2100      	movs	r1, #0
90000cce:	480d      	ldr	r0, [pc, #52]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000cd0:	f009 f92b 	bl	90009f2a <HAL_UARTEx_SetTxFifoThreshold>
90000cd4:	4603      	mov	r3, r0
90000cd6:	2b00      	cmp	r3, #0
90000cd8:	d001      	beq.n	90000cde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000cda:	f000 f881 	bl	90000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000cde:	2100      	movs	r1, #0
90000ce0:	4808      	ldr	r0, [pc, #32]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000ce2:	f009 f960 	bl	90009fa6 <HAL_UARTEx_SetRxFifoThreshold>
90000ce6:	4603      	mov	r3, r0
90000ce8:	2b00      	cmp	r3, #0
90000cea:	d001      	beq.n	90000cf0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000cec:	f000 f878 	bl	90000de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000cf0:	4804      	ldr	r0, [pc, #16]	@ (90000d04 <MX_USART3_UART_Init+0x90>)
90000cf2:	f009 f8e1 	bl	90009eb8 <HAL_UARTEx_DisableFifoMode>
90000cf6:	4603      	mov	r3, r0
90000cf8:	2b00      	cmp	r3, #0
90000cfa:	d001      	beq.n	90000d00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000cfc:	f000 f870 	bl	90000de0 <Error_Handler>
  }
}
90000d00:	bf00      	nop
90000d02:	bd80      	pop	{r7, pc}
90000d04:	2000013c 	.word	0x2000013c
90000d08:	40004800 	.word	0x40004800

90000d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000d0c:	b580      	push	{r7, lr}
90000d0e:	b0ba      	sub	sp, #232	@ 0xe8
90000d10:	af00      	add	r7, sp, #0
90000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000d14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000d18:	2200      	movs	r2, #0
90000d1a:	601a      	str	r2, [r3, #0]
90000d1c:	605a      	str	r2, [r3, #4]
90000d1e:	609a      	str	r2, [r3, #8]
90000d20:	60da      	str	r2, [r3, #12]
90000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000d24:	f107 0310 	add.w	r3, r7, #16
90000d28:	22c0      	movs	r2, #192	@ 0xc0
90000d2a:	2100      	movs	r1, #0
90000d2c:	4618      	mov	r0, r3
90000d2e:	f00a f9bf 	bl	9000b0b0 <memset>
  if(huart->Instance==USART3)
90000d32:	687b      	ldr	r3, [r7, #4]
90000d34:	681b      	ldr	r3, [r3, #0]
90000d36:	4a27      	ldr	r2, [pc, #156]	@ (90000dd4 <HAL_UART_MspInit+0xc8>)
90000d38:	4293      	cmp	r3, r2
90000d3a:	d146      	bne.n	90000dca <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000d3c:	f04f 0202 	mov.w	r2, #2
90000d40:	f04f 0300 	mov.w	r3, #0
90000d44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000d48:	2300      	movs	r3, #0
90000d4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000d4e:	f107 0310 	add.w	r3, r7, #16
90000d52:	4618      	mov	r0, r3
90000d54:	f005 fa60 	bl	90006218 <HAL_RCCEx_PeriphCLKConfig>
90000d58:	4603      	mov	r3, r0
90000d5a:	2b00      	cmp	r3, #0
90000d5c:	d001      	beq.n	90000d62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000d5e:	f000 f83f 	bl	90000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000d62:	4b1d      	ldr	r3, [pc, #116]	@ (90000dd8 <HAL_UART_MspInit+0xcc>)
90000d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000d68:	4a1b      	ldr	r2, [pc, #108]	@ (90000dd8 <HAL_UART_MspInit+0xcc>)
90000d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000d72:	4b19      	ldr	r3, [pc, #100]	@ (90000dd8 <HAL_UART_MspInit+0xcc>)
90000d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000d7c:	60fb      	str	r3, [r7, #12]
90000d7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000d80:	4b15      	ldr	r3, [pc, #84]	@ (90000dd8 <HAL_UART_MspInit+0xcc>)
90000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000d86:	4a14      	ldr	r2, [pc, #80]	@ (90000dd8 <HAL_UART_MspInit+0xcc>)
90000d88:	f043 0302 	orr.w	r3, r3, #2
90000d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000d90:	4b11      	ldr	r3, [pc, #68]	@ (90000dd8 <HAL_UART_MspInit+0xcc>)
90000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000d96:	f003 0302 	and.w	r3, r3, #2
90000d9a:	60bb      	str	r3, [r7, #8]
90000d9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000d9e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000da2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000da6:	2302      	movs	r3, #2
90000da8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000dac:	2300      	movs	r3, #0
90000dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000db2:	2300      	movs	r3, #0
90000db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000db8:	2307      	movs	r3, #7
90000dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000dbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000dc2:	4619      	mov	r1, r3
90000dc4:	4805      	ldr	r0, [pc, #20]	@ (90000ddc <HAL_UART_MspInit+0xd0>)
90000dc6:	f002 ffe9 	bl	90003d9c <HAL_GPIO_Init>
  }
}
90000dca:	bf00      	nop
90000dcc:	37e8      	adds	r7, #232	@ 0xe8
90000dce:	46bd      	mov	sp, r7
90000dd0:	bd80      	pop	{r7, pc}
90000dd2:	bf00      	nop
90000dd4:	40004800 	.word	0x40004800
90000dd8:	58024400 	.word	0x58024400
90000ddc:	58020400 	.word	0x58020400

90000de0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000de0:	b480      	push	{r7}
90000de2:	af00      	add	r7, sp, #0
  while(1)
90000de4:	bf00      	nop
90000de6:	e7fd      	b.n	90000de4 <Error_Handler+0x4>

90000de8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000de8:	b580      	push	{r7, lr}
90000dea:	b0ce      	sub	sp, #312	@ 0x138
90000dec:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000dee:	2300      	movs	r3, #0
90000df0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000df4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000df8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000dfc:	2200      	movs	r2, #0
90000dfe:	601a      	str	r2, [r3, #0]
90000e00:	4b78      	ldr	r3, [pc, #480]	@ (90000fe4 <SystemClock_Config+0x1fc>)
90000e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000e04:	4a77      	ldr	r2, [pc, #476]	@ (90000fe4 <SystemClock_Config+0x1fc>)
90000e06:	f023 0301 	bic.w	r3, r3, #1
90000e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000e0c:	4b75      	ldr	r3, [pc, #468]	@ (90000fe4 <SystemClock_Config+0x1fc>)
90000e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000e10:	f003 0201 	and.w	r2, r3, #1
90000e14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000e1c:	601a      	str	r2, [r3, #0]
90000e1e:	4b72      	ldr	r3, [pc, #456]	@ (90000fe8 <SystemClock_Config+0x200>)
90000e20:	699b      	ldr	r3, [r3, #24]
90000e22:	4a71      	ldr	r2, [pc, #452]	@ (90000fe8 <SystemClock_Config+0x200>)
90000e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000e28:	6193      	str	r3, [r2, #24]
90000e2a:	4b6f      	ldr	r3, [pc, #444]	@ (90000fe8 <SystemClock_Config+0x200>)
90000e2c:	699b      	ldr	r3, [r3, #24]
90000e2e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000e32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e36:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000e3a:	601a      	str	r2, [r3, #0]
90000e3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000e44:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000e46:	bf00      	nop
90000e48:	4b67      	ldr	r3, [pc, #412]	@ (90000fe8 <SystemClock_Config+0x200>)
90000e4a:	699b      	ldr	r3, [r3, #24]
90000e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000e54:	d1f8      	bne.n	90000e48 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000e56:	2301      	movs	r3, #1
90000e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000e5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000e60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000e64:	2300      	movs	r3, #0
90000e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000e6a:	2300      	movs	r3, #0
90000e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000e70:	2302      	movs	r3, #2
90000e72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000e76:	2302      	movs	r3, #2
90000e78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000e7c:	2305      	movs	r3, #5
90000e7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000e82:	23a0      	movs	r3, #160	@ 0xa0
90000e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000e88:	2300      	movs	r3, #0
90000e8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000e8e:	2302      	movs	r3, #2
90000e90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000e94:	2302      	movs	r3, #2
90000e96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000e9a:	2304      	movs	r3, #4
90000e9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000ea0:	2300      	movs	r3, #0
90000ea2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000ea6:	2308      	movs	r3, #8
90000ea8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000eac:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000eb0:	4618      	mov	r0, r3
90000eb2:	f004 f9cb 	bl	9000524c <HAL_RCC_OscConfig>
90000eb6:	4603      	mov	r3, r0
90000eb8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000ebc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000ec0:	2b00      	cmp	r3, #0
90000ec2:	d001      	beq.n	90000ec8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000ec4:	f7ff ff8c 	bl	90000de0 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000ec8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ecc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ed0:	2205      	movs	r2, #5
90000ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000ed4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ed8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000edc:	2260      	movs	r2, #96	@ 0x60
90000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000ee0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ee4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ee8:	2202      	movs	r2, #2
90000eea:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000eec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ef0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ef4:	220a      	movs	r2, #10
90000ef6:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000efc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000f00:	2212      	movs	r2, #18
90000f02:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000f04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f08:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000f0c:	2200      	movs	r2, #0
90000f0e:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000f10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f14:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000f18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000f1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f22:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000f26:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000f2a:	f04f 0300 	mov.w	r3, #0
90000f2e:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000f3a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000f42:	f107 0308 	add.w	r3, r7, #8
90000f46:	4618      	mov	r0, r3
90000f48:	f005 f966 	bl	90006218 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000f4c:	233f      	movs	r3, #63	@ 0x3f
90000f4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000f52:	2303      	movs	r3, #3
90000f54:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000f58:	2300      	movs	r3, #0
90000f5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000f5e:	2308      	movs	r3, #8
90000f60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000f64:	2340      	movs	r3, #64	@ 0x40
90000f66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000f6a:	2340      	movs	r3, #64	@ 0x40
90000f6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000f74:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000f78:	2340      	movs	r3, #64	@ 0x40
90000f7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000f7e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000f82:	2104      	movs	r1, #4
90000f84:	4618      	mov	r0, r3
90000f86:	f004 fdbb 	bl	90005b00 <HAL_RCC_ClockConfig>
90000f8a:	4603      	mov	r3, r0
90000f8c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000f90:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000f94:	2b00      	cmp	r3, #0
90000f96:	d001      	beq.n	90000f9c <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000f98:	f7ff ff22 	bl	90000de0 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000f9c:	4b13      	ldr	r3, [pc, #76]	@ (90000fec <SystemClock_Config+0x204>)
90000f9e:	681b      	ldr	r3, [r3, #0]
90000fa0:	4a12      	ldr	r2, [pc, #72]	@ (90000fec <SystemClock_Config+0x204>)
90000fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000fa6:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000fa8:	4b10      	ldr	r3, [pc, #64]	@ (90000fec <SystemClock_Config+0x204>)
90000faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000fae:	4a0f      	ldr	r2, [pc, #60]	@ (90000fec <SystemClock_Config+0x204>)
90000fb0:	f043 0302 	orr.w	r3, r3, #2
90000fb4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (90000fec <SystemClock_Config+0x204>)
90000fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000fbe:	f003 0202 	and.w	r2, r3, #2
90000fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000fc6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000fca:	601a      	str	r2, [r3, #0]
90000fcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000fd0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000fd4:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000fd6:	f002 fa73 	bl	900034c0 <HAL_EnableCompensationCell>
}
90000fda:	bf00      	nop
90000fdc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000fe0:	46bd      	mov	sp, r7
90000fe2:	bd80      	pop	{r7, pc}
90000fe4:	58000400 	.word	0x58000400
90000fe8:	58024800 	.word	0x58024800
90000fec:	58024400 	.word	0x58024400

90000ff0 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000ff0:	b480      	push	{r7}
90000ff2:	b085      	sub	sp, #20
90000ff4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000ff6:	4b34      	ldr	r3, [pc, #208]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
90000ff8:	695b      	ldr	r3, [r3, #20]
90000ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000ffe:	2b00      	cmp	r3, #0
90001000:	d11b      	bne.n	9000103a <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90001002:	f3bf 8f4f 	dsb	sy
}
90001006:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001008:	f3bf 8f6f 	isb	sy
}
9000100c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
9000100e:	4b2e      	ldr	r3, [pc, #184]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
90001010:	2200      	movs	r2, #0
90001012:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90001016:	f3bf 8f4f 	dsb	sy
}
9000101a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000101c:	f3bf 8f6f 	isb	sy
}
90001020:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90001022:	4b29      	ldr	r3, [pc, #164]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
90001024:	695b      	ldr	r3, [r3, #20]
90001026:	4a28      	ldr	r2, [pc, #160]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
90001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000102c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
9000102e:	f3bf 8f4f 	dsb	sy
}
90001032:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001034:	f3bf 8f6f 	isb	sy
}
90001038:	e000      	b.n	9000103c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000103a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000103c:	4b22      	ldr	r3, [pc, #136]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
9000103e:	695b      	ldr	r3, [r3, #20]
90001040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90001044:	2b00      	cmp	r3, #0
90001046:	d138      	bne.n	900010ba <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90001048:	4b1f      	ldr	r3, [pc, #124]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
9000104a:	2200      	movs	r2, #0
9000104c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90001050:	f3bf 8f4f 	dsb	sy
}
90001054:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90001056:	4b1c      	ldr	r3, [pc, #112]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
90001058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
9000105c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000105e:	68fb      	ldr	r3, [r7, #12]
90001060:	0b5b      	lsrs	r3, r3, #13
90001062:	f3c3 030e 	ubfx	r3, r3, #0, #15
90001066:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90001068:	68fb      	ldr	r3, [r7, #12]
9000106a:	08db      	lsrs	r3, r3, #3
9000106c:	f3c3 0309 	ubfx	r3, r3, #0, #10
90001070:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001072:	68bb      	ldr	r3, [r7, #8]
90001074:	015a      	lsls	r2, r3, #5
90001076:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
9000107a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
9000107c:	687a      	ldr	r2, [r7, #4]
9000107e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001080:	4911      	ldr	r1, [pc, #68]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
90001082:	4313      	orrs	r3, r2
90001084:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90001088:	687b      	ldr	r3, [r7, #4]
9000108a:	1e5a      	subs	r2, r3, #1
9000108c:	607a      	str	r2, [r7, #4]
9000108e:	2b00      	cmp	r3, #0
90001090:	d1ef      	bne.n	90001072 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90001092:	68bb      	ldr	r3, [r7, #8]
90001094:	1e5a      	subs	r2, r3, #1
90001096:	60ba      	str	r2, [r7, #8]
90001098:	2b00      	cmp	r3, #0
9000109a:	d1e5      	bne.n	90001068 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
9000109c:	f3bf 8f4f 	dsb	sy
}
900010a0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900010a2:	4b09      	ldr	r3, [pc, #36]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
900010a4:	695b      	ldr	r3, [r3, #20]
900010a6:	4a08      	ldr	r2, [pc, #32]	@ (900010c8 <CPU_CACHE_Enable+0xd8>)
900010a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900010ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900010ae:	f3bf 8f4f 	dsb	sy
}
900010b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900010b4:	f3bf 8f6f 	isb	sy
}
900010b8:	e000      	b.n	900010bc <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900010ba:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
900010bc:	bf00      	nop
900010be:	3714      	adds	r7, #20
900010c0:	46bd      	mov	sp, r7
900010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900010c6:	4770      	bx	lr
900010c8:	e000ed00 	.word	0xe000ed00

900010cc <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
900010cc:	b580      	push	{r7, lr}
900010ce:	b082      	sub	sp, #8
900010d0:	af00      	add	r7, sp, #0
900010d2:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900010d4:	490e      	ldr	r1, [pc, #56]	@ (90001110 <MX_LTDC_ClockConfig+0x44>)
900010d6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
900010da:	f04f 0300 	mov.w	r3, #0
900010de:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
900010e2:	4b0b      	ldr	r3, [pc, #44]	@ (90001110 <MX_LTDC_ClockConfig+0x44>)
900010e4:	2205      	movs	r2, #5
900010e6:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
900010e8:	4b09      	ldr	r3, [pc, #36]	@ (90001110 <MX_LTDC_ClockConfig+0x44>)
900010ea:	22c0      	movs	r2, #192	@ 0xc0
900010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
900010ee:	4b08      	ldr	r3, [pc, #32]	@ (90001110 <MX_LTDC_ClockConfig+0x44>)
900010f0:	2202      	movs	r2, #2
900010f2:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
900010f4:	4b06      	ldr	r3, [pc, #24]	@ (90001110 <MX_LTDC_ClockConfig+0x44>)
900010f6:	2214      	movs	r2, #20
900010f8:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
900010fa:	4b05      	ldr	r3, [pc, #20]	@ (90001110 <MX_LTDC_ClockConfig+0x44>)
900010fc:	2263      	movs	r2, #99	@ 0x63
900010fe:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90001100:	4803      	ldr	r0, [pc, #12]	@ (90001110 <MX_LTDC_ClockConfig+0x44>)
90001102:	f005 f889 	bl	90006218 <HAL_RCCEx_PeriphCLKConfig>
90001106:	4603      	mov	r3, r0
}
90001108:	4618      	mov	r0, r3
9000110a:	3708      	adds	r7, #8
9000110c:	46bd      	mov	sp, r7
9000110e:	bd80      	pop	{r7, pc}
90001110:	200001d0 	.word	0x200001d0

90001114 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90001114:	b580      	push	{r7, lr}
90001116:	b084      	sub	sp, #16
90001118:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
9000111a:	f002 faf1 	bl	90003700 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000111e:	2301      	movs	r3, #1
90001120:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90001122:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001126:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90001128:	2318      	movs	r3, #24
9000112a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
9000112c:	2303      	movs	r3, #3
9000112e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90001130:	2300      	movs	r3, #0
90001132:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90001134:	2301      	movs	r3, #1
90001136:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90001138:	2300      	movs	r3, #0
9000113a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
9000113c:	2301      	movs	r3, #1
9000113e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90001140:	2300      	movs	r3, #0
90001142:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90001144:	2300      	movs	r3, #0
90001146:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90001148:	2300      	movs	r3, #0
9000114a:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000114c:	463b      	mov	r3, r7
9000114e:	4618      	mov	r0, r3
90001150:	f002 fb0e 	bl	90003770 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90001154:	2004      	movs	r0, #4
90001156:	f002 faeb 	bl	90003730 <HAL_MPU_Enable>
}
9000115a:	bf00      	nop
9000115c:	3710      	adds	r7, #16
9000115e:	46bd      	mov	sp, r7
90001160:	bd80      	pop	{r7, pc}

90001162 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90001162:	b480      	push	{r7}
90001164:	af00      	add	r7, sp, #0
}
90001166:	bf00      	nop
90001168:	46bd      	mov	sp, r7
9000116a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000116e:	4770      	bx	lr

90001170 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90001170:	b480      	push	{r7}
90001172:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90001174:	bf00      	nop
90001176:	e7fd      	b.n	90001174 <HardFault_Handler+0x4>

90001178 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90001178:	b480      	push	{r7}
9000117a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
9000117c:	bf00      	nop
9000117e:	e7fd      	b.n	9000117c <MemManage_Handler+0x4>

90001180 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90001180:	b480      	push	{r7}
90001182:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90001184:	bf00      	nop
90001186:	e7fd      	b.n	90001184 <BusFault_Handler+0x4>

90001188 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90001188:	b480      	push	{r7}
9000118a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
9000118c:	bf00      	nop
9000118e:	e7fd      	b.n	9000118c <UsageFault_Handler+0x4>

90001190 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90001190:	b480      	push	{r7}
90001192:	af00      	add	r7, sp, #0
}
90001194:	bf00      	nop
90001196:	46bd      	mov	sp, r7
90001198:	f85d 7b04 	ldr.w	r7, [sp], #4
9000119c:	4770      	bx	lr

9000119e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
9000119e:	b480      	push	{r7}
900011a0:	af00      	add	r7, sp, #0
}
900011a2:	bf00      	nop
900011a4:	46bd      	mov	sp, r7
900011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900011aa:	4770      	bx	lr

900011ac <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
900011ac:	b480      	push	{r7}
900011ae:	af00      	add	r7, sp, #0
}
900011b0:	bf00      	nop
900011b2:	46bd      	mov	sp, r7
900011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900011b8:	4770      	bx	lr

900011ba <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
900011ba:	b580      	push	{r7, lr}
900011bc:	af00      	add	r7, sp, #0
  HAL_IncTick();
900011be:	f002 f92f 	bl	90003420 <HAL_IncTick>
}
900011c2:	bf00      	nop
900011c4:	bd80      	pop	{r7, pc}

900011c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
900011c6:	b580      	push	{r7, lr}
900011c8:	b086      	sub	sp, #24
900011ca:	af00      	add	r7, sp, #0
900011cc:	60f8      	str	r0, [r7, #12]
900011ce:	60b9      	str	r1, [r7, #8]
900011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
900011d2:	2300      	movs	r3, #0
900011d4:	617b      	str	r3, [r7, #20]
900011d6:	e00a      	b.n	900011ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
900011d8:	f3af 8000 	nop.w
900011dc:	4601      	mov	r1, r0
900011de:	68bb      	ldr	r3, [r7, #8]
900011e0:	1c5a      	adds	r2, r3, #1
900011e2:	60ba      	str	r2, [r7, #8]
900011e4:	b2ca      	uxtb	r2, r1
900011e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
900011e8:	697b      	ldr	r3, [r7, #20]
900011ea:	3301      	adds	r3, #1
900011ec:	617b      	str	r3, [r7, #20]
900011ee:	697a      	ldr	r2, [r7, #20]
900011f0:	687b      	ldr	r3, [r7, #4]
900011f2:	429a      	cmp	r2, r3
900011f4:	dbf0      	blt.n	900011d8 <_read+0x12>
  }

  return len;
900011f6:	687b      	ldr	r3, [r7, #4]
}
900011f8:	4618      	mov	r0, r3
900011fa:	3718      	adds	r7, #24
900011fc:	46bd      	mov	sp, r7
900011fe:	bd80      	pop	{r7, pc}

90001200 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90001200:	b580      	push	{r7, lr}
90001202:	b086      	sub	sp, #24
90001204:	af00      	add	r7, sp, #0
90001206:	60f8      	str	r0, [r7, #12]
90001208:	60b9      	str	r1, [r7, #8]
9000120a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000120c:	2300      	movs	r3, #0
9000120e:	617b      	str	r3, [r7, #20]
90001210:	e009      	b.n	90001226 <_write+0x26>
  {
    __io_putchar(*ptr++);
90001212:	68bb      	ldr	r3, [r7, #8]
90001214:	1c5a      	adds	r2, r3, #1
90001216:	60ba      	str	r2, [r7, #8]
90001218:	781b      	ldrb	r3, [r3, #0]
9000121a:	4618      	mov	r0, r3
9000121c:	f7ff fd12 	bl	90000c44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001220:	697b      	ldr	r3, [r7, #20]
90001222:	3301      	adds	r3, #1
90001224:	617b      	str	r3, [r7, #20]
90001226:	697a      	ldr	r2, [r7, #20]
90001228:	687b      	ldr	r3, [r7, #4]
9000122a:	429a      	cmp	r2, r3
9000122c:	dbf1      	blt.n	90001212 <_write+0x12>
  }
  return len;
9000122e:	687b      	ldr	r3, [r7, #4]
}
90001230:	4618      	mov	r0, r3
90001232:	3718      	adds	r7, #24
90001234:	46bd      	mov	sp, r7
90001236:	bd80      	pop	{r7, pc}

90001238 <_close>:

int _close(int file)
{
90001238:	b480      	push	{r7}
9000123a:	b083      	sub	sp, #12
9000123c:	af00      	add	r7, sp, #0
9000123e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
90001240:	f04f 33ff 	mov.w	r3, #4294967295
}
90001244:	4618      	mov	r0, r3
90001246:	370c      	adds	r7, #12
90001248:	46bd      	mov	sp, r7
9000124a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000124e:	4770      	bx	lr

90001250 <_fstat>:


int _fstat(int file, struct stat *st)
{
90001250:	b480      	push	{r7}
90001252:	b083      	sub	sp, #12
90001254:	af00      	add	r7, sp, #0
90001256:	6078      	str	r0, [r7, #4]
90001258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
9000125a:	683b      	ldr	r3, [r7, #0]
9000125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
90001260:	605a      	str	r2, [r3, #4]
  return 0;
90001262:	2300      	movs	r3, #0
}
90001264:	4618      	mov	r0, r3
90001266:	370c      	adds	r7, #12
90001268:	46bd      	mov	sp, r7
9000126a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000126e:	4770      	bx	lr

90001270 <_isatty>:

int _isatty(int file)
{
90001270:	b480      	push	{r7}
90001272:	b083      	sub	sp, #12
90001274:	af00      	add	r7, sp, #0
90001276:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
90001278:	2301      	movs	r3, #1
}
9000127a:	4618      	mov	r0, r3
9000127c:	370c      	adds	r7, #12
9000127e:	46bd      	mov	sp, r7
90001280:	f85d 7b04 	ldr.w	r7, [sp], #4
90001284:	4770      	bx	lr

90001286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001286:	b480      	push	{r7}
90001288:	b085      	sub	sp, #20
9000128a:	af00      	add	r7, sp, #0
9000128c:	60f8      	str	r0, [r7, #12]
9000128e:	60b9      	str	r1, [r7, #8]
90001290:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90001292:	2300      	movs	r3, #0
}
90001294:	4618      	mov	r0, r3
90001296:	3714      	adds	r7, #20
90001298:	46bd      	mov	sp, r7
9000129a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000129e:	4770      	bx	lr

900012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
900012a0:	b580      	push	{r7, lr}
900012a2:	b086      	sub	sp, #24
900012a4:	af00      	add	r7, sp, #0
900012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900012a8:	4a14      	ldr	r2, [pc, #80]	@ (900012fc <_sbrk+0x5c>)
900012aa:	4b15      	ldr	r3, [pc, #84]	@ (90001300 <_sbrk+0x60>)
900012ac:	1ad3      	subs	r3, r2, r3
900012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
900012b0:	697b      	ldr	r3, [r7, #20]
900012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
900012b4:	4b13      	ldr	r3, [pc, #76]	@ (90001304 <_sbrk+0x64>)
900012b6:	681b      	ldr	r3, [r3, #0]
900012b8:	2b00      	cmp	r3, #0
900012ba:	d102      	bne.n	900012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900012bc:	4b11      	ldr	r3, [pc, #68]	@ (90001304 <_sbrk+0x64>)
900012be:	4a12      	ldr	r2, [pc, #72]	@ (90001308 <_sbrk+0x68>)
900012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900012c2:	4b10      	ldr	r3, [pc, #64]	@ (90001304 <_sbrk+0x64>)
900012c4:	681a      	ldr	r2, [r3, #0]
900012c6:	687b      	ldr	r3, [r7, #4]
900012c8:	4413      	add	r3, r2
900012ca:	693a      	ldr	r2, [r7, #16]
900012cc:	429a      	cmp	r2, r3
900012ce:	d207      	bcs.n	900012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
900012d0:	f009 ff3c 	bl	9000b14c <__errno>
900012d4:	4603      	mov	r3, r0
900012d6:	220c      	movs	r2, #12
900012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900012da:	f04f 33ff 	mov.w	r3, #4294967295
900012de:	e009      	b.n	900012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900012e0:	4b08      	ldr	r3, [pc, #32]	@ (90001304 <_sbrk+0x64>)
900012e2:	681b      	ldr	r3, [r3, #0]
900012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900012e6:	4b07      	ldr	r3, [pc, #28]	@ (90001304 <_sbrk+0x64>)
900012e8:	681a      	ldr	r2, [r3, #0]
900012ea:	687b      	ldr	r3, [r7, #4]
900012ec:	4413      	add	r3, r2
900012ee:	4a05      	ldr	r2, [pc, #20]	@ (90001304 <_sbrk+0x64>)
900012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
900012f2:	68fb      	ldr	r3, [r7, #12]
}
900012f4:	4618      	mov	r0, r3
900012f6:	3718      	adds	r7, #24
900012f8:	46bd      	mov	sp, r7
900012fa:	bd80      	pop	{r7, pc}
900012fc:	20020000 	.word	0x20020000
90001300:	00001000 	.word	0x00001000
90001304:	20000290 	.word	0x20000290
90001308:	20001108 	.word	0x20001108

9000130c <ClearCache>:

uint32_t x_size, y_size;
#define LCD_LINE_WIDTH 24

void ClearCache()
{
9000130c:	b480      	push	{r7}
9000130e:	b085      	sub	sp, #20
90001310:	af00      	add	r7, sp, #0
90001312:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001316:	60fb      	str	r3, [r7, #12]
90001318:	f44f 23ff 	mov.w	r3, #522240	@ 0x7f800
9000131c:	60bb      	str	r3, [r7, #8]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
9000131e:	68bb      	ldr	r3, [r7, #8]
90001320:	2b00      	cmp	r3, #0
90001322:	dd1d      	ble.n	90001360 <ClearCache+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
90001324:	68fb      	ldr	r3, [r7, #12]
90001326:	f003 021f 	and.w	r2, r3, #31
9000132a:	68bb      	ldr	r3, [r7, #8]
9000132c:	4413      	add	r3, r2
9000132e:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
90001330:	68fb      	ldr	r3, [r7, #12]
90001332:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
90001334:	f3bf 8f4f 	dsb	sy
}
90001338:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
9000133a:	4a0d      	ldr	r2, [pc, #52]	@ (90001370 <ClearCache+0x64>)
9000133c:	683b      	ldr	r3, [r7, #0]
9000133e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
90001342:	683b      	ldr	r3, [r7, #0]
90001344:	3320      	adds	r3, #32
90001346:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
90001348:	687b      	ldr	r3, [r7, #4]
9000134a:	3b20      	subs	r3, #32
9000134c:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
9000134e:	687b      	ldr	r3, [r7, #4]
90001350:	2b00      	cmp	r3, #0
90001352:	dcf2      	bgt.n	9000133a <ClearCache+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
90001354:	f3bf 8f4f 	dsb	sy
}
90001358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000135a:	f3bf 8f6f 	isb	sy
}
9000135e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
90001360:	bf00      	nop
	// otherwise I get LCD artefacts
	SCB_CleanDCache_by_Addr((void *)SDRAM_DEVICE_ADDR, 480*272*4);
}
90001362:	bf00      	nop
90001364:	3714      	adds	r7, #20
90001366:	46bd      	mov	sp, r7
90001368:	f85d 7b04 	ldr.w	r7, [sp], #4
9000136c:	4770      	bx	lr
9000136e:	bf00      	nop
90001370:	e000ed00 	.word	0xe000ed00

90001374 <InitializeLcd>:

void InitializeLcd(void)
{
90001374:	b580      	push	{r7, lr}
90001376:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
90001378:	2101      	movs	r1, #1
9000137a:	2000      	movs	r0, #0
9000137c:	f000 fefc 	bl	90002178 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90001380:	480f      	ldr	r0, [pc, #60]	@ (900013c0 <InitializeLcd+0x4c>)
90001382:	f009 f90f 	bl	9000a5a4 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90001386:	2000      	movs	r0, #0
90001388:	f009 f962 	bl	9000a650 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
9000138c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001390:	f009 f9d4 	bl	9000a73c <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90001394:	490b      	ldr	r1, [pc, #44]	@ (900013c4 <InitializeLcd+0x50>)
90001396:	2000      	movs	r0, #0
90001398:	f001 f8a8 	bl	900024ec <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
9000139c:	490a      	ldr	r1, [pc, #40]	@ (900013c8 <InitializeLcd+0x54>)
9000139e:	2000      	movs	r0, #0
900013a0:	f001 f8c2 	bl	90002528 <BSP_LCD_GetYSize>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
900013a4:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
900013a8:	f009 f970 	bl	9000a68c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
900013ac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900013b0:	f009 f980 	bl	9000a6b4 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
900013b4:	4805      	ldr	r0, [pc, #20]	@ (900013cc <InitializeLcd+0x58>)
900013b6:	f009 f991 	bl	9000a6dc <UTIL_LCD_SetFont>
}
900013ba:	bf00      	nop
900013bc:	bd80      	pop	{r7, pc}
900013be:	bf00      	nop
900013c0:	9000c1a4 	.word	0x9000c1a4
900013c4:	20000294 	.word	0x20000294
900013c8:	20000298 	.word	0x20000298
900013cc:	20000068 	.word	0x20000068

900013d0 <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
900013d0:	b580      	push	{r7, lr}
900013d2:	b082      	sub	sp, #8
900013d4:	af00      	add	r7, sp, #0
900013d6:	6078      	str	r0, [r7, #4]
900013d8:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
900013da:	683a      	ldr	r2, [r7, #0]
900013dc:	6879      	ldr	r1, [r7, #4]
900013de:	4803      	ldr	r0, [pc, #12]	@ (900013ec <uartSetCursorPosition+0x1c>)
900013e0:	f009 fcfc 	bl	9000addc <iprintf>
}
900013e4:	bf00      	nop
900013e6:	3708      	adds	r7, #8
900013e8:	46bd      	mov	sp, r7
900013ea:	bd80      	pop	{r7, pc}
900013ec:	9000bf74 	.word	0x9000bf74

900013f0 <UartClearScreen>:

void UartClearScreen() {
900013f0:	b580      	push	{r7, lr}
900013f2:	af00      	add	r7, sp, #0
  printf("\033[2J");
900013f4:	4803      	ldr	r0, [pc, #12]	@ (90001404 <UartClearScreen+0x14>)
900013f6:	f009 fcf1 	bl	9000addc <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
900013fa:	4803      	ldr	r0, [pc, #12]	@ (90001408 <UartClearScreen+0x18>)
900013fc:	f009 fcee 	bl	9000addc <iprintf>
}
90001400:	bf00      	nop
90001402:	bd80      	pop	{r7, pc}
90001404:	9000bf80 	.word	0x9000bf80
90001408:	9000bf88 	.word	0x9000bf88

9000140c <UartRenderState>:

void UartRenderState(AppContext *ctx) {
9000140c:	b580      	push	{r7, lr}
9000140e:	b082      	sub	sp, #8
90001410:	af00      	add	r7, sp, #0
90001412:	6078      	str	r0, [r7, #4]
  uartSetCursorPosition(1, 1);
90001414:	2101      	movs	r1, #1
90001416:	2001      	movs	r0, #1
90001418:	f7ff ffda 	bl	900013d0 <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
9000141c:	687b      	ldr	r3, [r7, #4]
9000141e:	781b      	ldrb	r3, [r3, #0]
90001420:	2b00      	cmp	r3, #0
90001422:	d13a      	bne.n	9000149a <UartRenderState+0x8e>
    printf("F1: Voltage control    ");
90001424:	481f      	ldr	r0, [pc, #124]	@ (900014a4 <UartRenderState+0x98>)
90001426:	f009 fcd9 	bl	9000addc <iprintf>
    uartSetCursorPosition(2, 1);
9000142a:	2101      	movs	r1, #1
9000142c:	2002      	movs	r0, #2
9000142e:	f7ff ffcf 	bl	900013d0 <uartSetCursorPosition>
    printf("Current input: %d     ", ctx->inputValue);
90001432:	687b      	ldr	r3, [r7, #4]
90001434:	889b      	ldrh	r3, [r3, #4]
90001436:	4619      	mov	r1, r3
90001438:	481b      	ldr	r0, [pc, #108]	@ (900014a8 <UartRenderState+0x9c>)
9000143a:	f009 fccf 	bl	9000addc <iprintf>
    uartSetCursorPosition(3, 1);
9000143e:	2101      	movs	r1, #1
90001440:	2003      	movs	r0, #3
90001442:	f7ff ffc5 	bl	900013d0 <uartSetCursorPosition>
    if (ctx->voltage > 0) {
90001446:	687b      	ldr	r3, [r7, #4]
90001448:	885b      	ldrh	r3, [r3, #2]
9000144a:	2b00      	cmp	r3, #0
9000144c:	d006      	beq.n	9000145c <UartRenderState+0x50>
      printf("Voltage: %dV     ", ctx->voltage);
9000144e:	687b      	ldr	r3, [r7, #4]
90001450:	885b      	ldrh	r3, [r3, #2]
90001452:	4619      	mov	r1, r3
90001454:	4815      	ldr	r0, [pc, #84]	@ (900014ac <UartRenderState+0xa0>)
90001456:	f009 fcc1 	bl	9000addc <iprintf>
9000145a:	e002      	b.n	90001462 <UartRenderState+0x56>
    } else {
      printf("Voltage: N/A     ");
9000145c:	4814      	ldr	r0, [pc, #80]	@ (900014b0 <UartRenderState+0xa4>)
9000145e:	f009 fcbd 	bl	9000addc <iprintf>
    }
    uartSetCursorPosition(4, 1);
90001462:	2101      	movs	r1, #1
90001464:	2004      	movs	r0, #4
90001466:	f7ff ffb3 	bl	900013d0 <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
9000146a:	687b      	ldr	r3, [r7, #4]
9000146c:	79db      	ldrb	r3, [r3, #7]
9000146e:	2b00      	cmp	r3, #0
90001470:	d006      	beq.n	90001480 <UartRenderState+0x74>
      printf("PWM is running at %dV   ", ctx->voltage);
90001472:	687b      	ldr	r3, [r7, #4]
90001474:	885b      	ldrh	r3, [r3, #2]
90001476:	4619      	mov	r1, r3
90001478:	480e      	ldr	r0, [pc, #56]	@ (900014b4 <UartRenderState+0xa8>)
9000147a:	f009 fcaf 	bl	9000addc <iprintf>
9000147e:	e002      	b.n	90001486 <UartRenderState+0x7a>
    } else {
      printf("PWM is OFF              ");
90001480:	480d      	ldr	r0, [pc, #52]	@ (900014b8 <UartRenderState+0xac>)
90001482:	f009 fcab 	bl	9000addc <iprintf>
    }
    uartSetCursorPosition(5, 1);
90001486:	2101      	movs	r1, #1
90001488:	2005      	movs	r0, #5
9000148a:	f7ff ffa1 	bl	900013d0 <uartSetCursorPosition>
    printf("%s                                                               \r\n", ctx->message);
9000148e:	687b      	ldr	r3, [r7, #4]
90001490:	3309      	adds	r3, #9
90001492:	4619      	mov	r1, r3
90001494:	4809      	ldr	r0, [pc, #36]	@ (900014bc <UartRenderState+0xb0>)
90001496:	f009 fca1 	bl	9000addc <iprintf>
  }
}
9000149a:	bf00      	nop
9000149c:	3708      	adds	r7, #8
9000149e:	46bd      	mov	sp, r7
900014a0:	bd80      	pop	{r7, pc}
900014a2:	bf00      	nop
900014a4:	9000bf8c 	.word	0x9000bf8c
900014a8:	9000bfa4 	.word	0x9000bfa4
900014ac:	9000bfbc 	.word	0x9000bfbc
900014b0:	9000bfd0 	.word	0x9000bfd0
900014b4:	9000bfe4 	.word	0x9000bfe4
900014b8:	9000c000 	.word	0x9000c000
900014bc:	9000c01c 	.word	0x9000c01c

900014c0 <displayPaddedLine>:

void displayPaddedLine(uint16_t y, const char *text)
{
900014c0:	b580      	push	{r7, lr}
900014c2:	b08a      	sub	sp, #40	@ 0x28
900014c4:	af00      	add	r7, sp, #0
900014c6:	4603      	mov	r3, r0
900014c8:	6039      	str	r1, [r7, #0]
900014ca:	80fb      	strh	r3, [r7, #6]
	// the sole purpose of this helper method is to overwrite the whole row so that we do not need to rely on clear screen

    char padded[LCD_LINE_WIDTH];
    memset(padded, ' ', LCD_LINE_WIDTH);
900014cc:	f107 030c 	add.w	r3, r7, #12
900014d0:	2218      	movs	r2, #24
900014d2:	2120      	movs	r1, #32
900014d4:	4618      	mov	r0, r3
900014d6:	f009 fdeb 	bl	9000b0b0 <memset>

    // Copy up to 24 characters from text
    size_t len = strlen(text);
900014da:	6838      	ldr	r0, [r7, #0]
900014dc:	f7fe ff00 	bl	900002e0 <strlen>
900014e0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (len > LCD_LINE_WIDTH) len = LCD_LINE_WIDTH;
900014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900014e4:	2b18      	cmp	r3, #24
900014e6:	d901      	bls.n	900014ec <displayPaddedLine+0x2c>
900014e8:	2318      	movs	r3, #24
900014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(padded, text, len);
900014ec:	f107 030c 	add.w	r3, r7, #12
900014f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900014f2:	6839      	ldr	r1, [r7, #0]
900014f4:	4618      	mov	r0, r3
900014f6:	f009 fe56 	bl	9000b1a6 <memcpy>

    // Display the padded string
    UTIL_LCD_DisplayStringAt(0, y*32, (uint8_t *)padded, LEFT_MODE);
900014fa:	88fb      	ldrh	r3, [r7, #6]
900014fc:	015b      	lsls	r3, r3, #5
900014fe:	4619      	mov	r1, r3
90001500:	f107 020c 	add.w	r2, r7, #12
90001504:	2303      	movs	r3, #3
90001506:	2000      	movs	r0, #0
90001508:	f009 f964 	bl	9000a7d4 <UTIL_LCD_DisplayStringAt>
}
9000150c:	bf00      	nop
9000150e:	3728      	adds	r7, #40	@ 0x28
90001510:	46bd      	mov	sp, r7
90001512:	bd80      	pop	{r7, pc}

90001514 <DisplayRenderState>:

void DisplayRenderState(AppContext *ctx)
{
90001514:	b580      	push	{r7, lr}
90001516:	b08a      	sub	sp, #40	@ 0x28
90001518:	af00      	add	r7, sp, #0
9000151a:	6078      	str	r0, [r7, #4]
  char buffer[LCD_LINE_WIDTH+1];

  if (ctx->currentState == STATE_F1) {
9000151c:	687b      	ldr	r3, [r7, #4]
9000151e:	781b      	ldrb	r3, [r3, #0]
90001520:	2b00      	cmp	r3, #0
90001522:	d15f      	bne.n	900015e4 <DisplayRenderState+0xd0>
	displayPaddedLine(0, "F1: Voltage control");
90001524:	494d      	ldr	r1, [pc, #308]	@ (9000165c <DisplayRenderState+0x148>)
90001526:	2000      	movs	r0, #0
90001528:	f7ff ffca 	bl	900014c0 <displayPaddedLine>
    if (ctx->isPwmRunning == true) {
9000152c:	687b      	ldr	r3, [r7, #4]
9000152e:	79db      	ldrb	r3, [r3, #7]
90001530:	2b00      	cmp	r3, #0
90001532:	d013      	beq.n	9000155c <DisplayRenderState+0x48>
      sprintf(buffer, "PWM is running at %dV", ctx->voltage);
90001534:	687b      	ldr	r3, [r7, #4]
90001536:	885b      	ldrh	r3, [r3, #2]
90001538:	461a      	mov	r2, r3
9000153a:	f107 030c 	add.w	r3, r7, #12
9000153e:	4948      	ldr	r1, [pc, #288]	@ (90001660 <DisplayRenderState+0x14c>)
90001540:	4618      	mov	r0, r3
90001542:	f009 fcbb 	bl	9000aebc <siprintf>
      displayPaddedLine(2, buffer);
90001546:	f107 030c 	add.w	r3, r7, #12
9000154a:	4619      	mov	r1, r3
9000154c:	2002      	movs	r0, #2
9000154e:	f7ff ffb7 	bl	900014c0 <displayPaddedLine>
      displayPaddedLine(3, "Press STOP");
90001552:	4944      	ldr	r1, [pc, #272]	@ (90001664 <DisplayRenderState+0x150>)
90001554:	2003      	movs	r0, #3
90001556:	f7ff ffb3 	bl	900014c0 <displayPaddedLine>
9000155a:	e06c      	b.n	90001636 <DisplayRenderState+0x122>
    }
    else if (ctx->isVoltageEntered)
9000155c:	687b      	ldr	r3, [r7, #4]
9000155e:	799b      	ldrb	r3, [r3, #6]
90001560:	2b00      	cmp	r3, #0
90001562:	d013      	beq.n	9000158c <DisplayRenderState+0x78>
    {
	  sprintf(buffer, "Voltage: %dV", ctx->voltage);
90001564:	687b      	ldr	r3, [r7, #4]
90001566:	885b      	ldrh	r3, [r3, #2]
90001568:	461a      	mov	r2, r3
9000156a:	f107 030c 	add.w	r3, r7, #12
9000156e:	493e      	ldr	r1, [pc, #248]	@ (90001668 <DisplayRenderState+0x154>)
90001570:	4618      	mov	r0, r3
90001572:	f009 fca3 	bl	9000aebc <siprintf>
      displayPaddedLine(2, buffer);
90001576:	f107 030c 	add.w	r3, r7, #12
9000157a:	4619      	mov	r1, r3
9000157c:	2002      	movs	r0, #2
9000157e:	f7ff ff9f 	bl	900014c0 <displayPaddedLine>
      displayPaddedLine(3, "Press START or Clear");
90001582:	493a      	ldr	r1, [pc, #232]	@ (9000166c <DisplayRenderState+0x158>)
90001584:	2003      	movs	r0, #3
90001586:	f7ff ff9b 	bl	900014c0 <displayPaddedLine>
9000158a:	e054      	b.n	90001636 <DisplayRenderState+0x122>
    }
    else
    {
	  char cursor = ' ';
9000158c:	2320      	movs	r3, #32
9000158e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if (ctx->displayCursor) cursor = '_';
90001592:	687b      	ldr	r3, [r7, #4]
90001594:	7a1b      	ldrb	r3, [r3, #8]
90001596:	2b00      	cmp	r3, #0
90001598:	d002      	beq.n	900015a0 <DisplayRenderState+0x8c>
9000159a:	235f      	movs	r3, #95	@ 0x5f
9000159c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if (ctx->inputValue != 0)
900015a0:	687b      	ldr	r3, [r7, #4]
900015a2:	889b      	ldrh	r3, [r3, #4]
900015a4:	2b00      	cmp	r3, #0
900015a6:	d00a      	beq.n	900015be <DisplayRenderState+0xaa>
		  sprintf(buffer, "Enter voltage: %d%c", ctx->inputValue, cursor);
900015a8:	687b      	ldr	r3, [r7, #4]
900015aa:	889b      	ldrh	r3, [r3, #4]
900015ac:	461a      	mov	r2, r3
900015ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900015b2:	f107 000c 	add.w	r0, r7, #12
900015b6:	492e      	ldr	r1, [pc, #184]	@ (90001670 <DisplayRenderState+0x15c>)
900015b8:	f009 fc80 	bl	9000aebc <siprintf>
900015bc:	e007      	b.n	900015ce <DisplayRenderState+0xba>
	  else
		  sprintf(buffer, "Enter voltage: %c", cursor);
900015be:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
900015c2:	f107 030c 	add.w	r3, r7, #12
900015c6:	492b      	ldr	r1, [pc, #172]	@ (90001674 <DisplayRenderState+0x160>)
900015c8:	4618      	mov	r0, r3
900015ca:	f009 fc77 	bl	9000aebc <siprintf>

      displayPaddedLine(2, buffer);
900015ce:	f107 030c 	add.w	r3, r7, #12
900015d2:	4619      	mov	r1, r3
900015d4:	2002      	movs	r0, #2
900015d6:	f7ff ff73 	bl	900014c0 <displayPaddedLine>
      displayPaddedLine(3, "Press Enter");
900015da:	4927      	ldr	r1, [pc, #156]	@ (90001678 <DisplayRenderState+0x164>)
900015dc:	2003      	movs	r0, #3
900015de:	f7ff ff6f 	bl	900014c0 <displayPaddedLine>
900015e2:	e028      	b.n	90001636 <DisplayRenderState+0x122>
    }
  }
  else if (ctx->currentState == STATE_F2)
900015e4:	687b      	ldr	r3, [r7, #4]
900015e6:	781b      	ldrb	r3, [r3, #0]
900015e8:	2b01      	cmp	r3, #1
900015ea:	d110      	bne.n	9000160e <DisplayRenderState+0xfa>
  {
    displayPaddedLine(0, "F2: Voltage and current");
900015ec:	4923      	ldr	r1, [pc, #140]	@ (9000167c <DisplayRenderState+0x168>)
900015ee:	2000      	movs	r0, #0
900015f0:	f7ff ff66 	bl	900014c0 <displayPaddedLine>
    displayPaddedLine(1, "");
900015f4:	4922      	ldr	r1, [pc, #136]	@ (90001680 <DisplayRenderState+0x16c>)
900015f6:	2001      	movs	r0, #1
900015f8:	f7ff ff62 	bl	900014c0 <displayPaddedLine>
    displayPaddedLine(2, "");
900015fc:	4920      	ldr	r1, [pc, #128]	@ (90001680 <DisplayRenderState+0x16c>)
900015fe:	2002      	movs	r0, #2
90001600:	f7ff ff5e 	bl	900014c0 <displayPaddedLine>
    displayPaddedLine(3, "");
90001604:	491e      	ldr	r1, [pc, #120]	@ (90001680 <DisplayRenderState+0x16c>)
90001606:	2003      	movs	r0, #3
90001608:	f7ff ff5a 	bl	900014c0 <displayPaddedLine>
9000160c:	e013      	b.n	90001636 <DisplayRenderState+0x122>
  }
  else if (ctx->currentState == STATE_F3)
9000160e:	687b      	ldr	r3, [r7, #4]
90001610:	781b      	ldrb	r3, [r3, #0]
90001612:	2b02      	cmp	r3, #2
90001614:	d10f      	bne.n	90001636 <DisplayRenderState+0x122>
  {
	displayPaddedLine(0, "F3: Calibration");
90001616:	491b      	ldr	r1, [pc, #108]	@ (90001684 <DisplayRenderState+0x170>)
90001618:	2000      	movs	r0, #0
9000161a:	f7ff ff51 	bl	900014c0 <displayPaddedLine>
    displayPaddedLine(1, "");
9000161e:	4918      	ldr	r1, [pc, #96]	@ (90001680 <DisplayRenderState+0x16c>)
90001620:	2001      	movs	r0, #1
90001622:	f7ff ff4d 	bl	900014c0 <displayPaddedLine>
    displayPaddedLine(2, "");
90001626:	4916      	ldr	r1, [pc, #88]	@ (90001680 <DisplayRenderState+0x16c>)
90001628:	2002      	movs	r0, #2
9000162a:	f7ff ff49 	bl	900014c0 <displayPaddedLine>
    displayPaddedLine(3, "");
9000162e:	4914      	ldr	r1, [pc, #80]	@ (90001680 <DisplayRenderState+0x16c>)
90001630:	2003      	movs	r0, #3
90001632:	f7ff ff45 	bl	900014c0 <displayPaddedLine>
  }

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
90001636:	4814      	ldr	r0, [pc, #80]	@ (90001688 <DisplayRenderState+0x174>)
90001638:	f009 f828 	bl	9000a68c <UTIL_LCD_SetTextColor>
  displayPaddedLine(4, ctx->message);
9000163c:	687b      	ldr	r3, [r7, #4]
9000163e:	3309      	adds	r3, #9
90001640:	4619      	mov	r1, r3
90001642:	2004      	movs	r0, #4
90001644:	f7ff ff3c 	bl	900014c0 <displayPaddedLine>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90001648:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
9000164c:	f009 f81e 	bl	9000a68c <UTIL_LCD_SetTextColor>

  ClearCache();
90001650:	f7ff fe5c 	bl	9000130c <ClearCache>
}
90001654:	bf00      	nop
90001656:	3728      	adds	r7, #40	@ 0x28
90001658:	46bd      	mov	sp, r7
9000165a:	bd80      	pop	{r7, pc}
9000165c:	9000c060 	.word	0x9000c060
90001660:	9000c074 	.word	0x9000c074
90001664:	9000c08c 	.word	0x9000c08c
90001668:	9000c098 	.word	0x9000c098
9000166c:	9000c0a8 	.word	0x9000c0a8
90001670:	9000c0c0 	.word	0x9000c0c0
90001674:	9000c0d4 	.word	0x9000c0d4
90001678:	9000c0e8 	.word	0x9000c0e8
9000167c:	9000c0f4 	.word	0x9000c0f4
90001680:	9000c10c 	.word	0x9000c10c
90001684:	9000c110 	.word	0x9000c110
90001688:	ffff0000 	.word	0xffff0000

9000168c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
9000168c:	b580      	push	{r7, lr}
9000168e:	b084      	sub	sp, #16
90001690:	af00      	add	r7, sp, #0
90001692:	6078      	str	r0, [r7, #4]
90001694:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
90001696:	687b      	ldr	r3, [r7, #4]
90001698:	2b00      	cmp	r3, #0
9000169a:	d103      	bne.n	900016a4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
9000169c:	f04f 33ff 	mov.w	r3, #4294967295
900016a0:	60fb      	str	r3, [r7, #12]
900016a2:	e02c      	b.n	900016fe <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
900016a4:	683b      	ldr	r3, [r7, #0]
900016a6:	681a      	ldr	r2, [r3, #0]
900016a8:	687b      	ldr	r3, [r7, #4]
900016aa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
900016ac:	683b      	ldr	r3, [r7, #0]
900016ae:	685a      	ldr	r2, [r3, #4]
900016b0:	687b      	ldr	r3, [r7, #4]
900016b2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
900016b4:	683b      	ldr	r3, [r7, #0]
900016b6:	891a      	ldrh	r2, [r3, #8]
900016b8:	687b      	ldr	r3, [r7, #4]
900016ba:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
900016bc:	683b      	ldr	r3, [r7, #0]
900016be:	68da      	ldr	r2, [r3, #12]
900016c0:	687b      	ldr	r3, [r7, #4]
900016c2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
900016c4:	683b      	ldr	r3, [r7, #0]
900016c6:	691a      	ldr	r2, [r3, #16]
900016c8:	687b      	ldr	r3, [r7, #4]
900016ca:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
900016cc:	683b      	ldr	r3, [r7, #0]
900016ce:	695a      	ldr	r2, [r3, #20]
900016d0:	687b      	ldr	r3, [r7, #4]
900016d2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
900016d4:	687b      	ldr	r3, [r7, #4]
900016d6:	4a0c      	ldr	r2, [pc, #48]	@ (90001708 <FT5336_RegisterBusIO+0x7c>)
900016d8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900016da:	687b      	ldr	r3, [r7, #4]
900016dc:	4a0b      	ldr	r2, [pc, #44]	@ (9000170c <FT5336_RegisterBusIO+0x80>)
900016de:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
900016e0:	687b      	ldr	r3, [r7, #4]
900016e2:	687a      	ldr	r2, [r7, #4]
900016e4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900016e6:	687b      	ldr	r3, [r7, #4]
900016e8:	681b      	ldr	r3, [r3, #0]
900016ea:	2b00      	cmp	r3, #0
900016ec:	d004      	beq.n	900016f8 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900016ee:	687b      	ldr	r3, [r7, #4]
900016f0:	681b      	ldr	r3, [r3, #0]
900016f2:	4798      	blx	r3
900016f4:	60f8      	str	r0, [r7, #12]
900016f6:	e002      	b.n	900016fe <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
900016f8:	f04f 33ff 	mov.w	r3, #4294967295
900016fc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
900016fe:	68fb      	ldr	r3, [r7, #12]
}
90001700:	4618      	mov	r0, r3
90001702:	3710      	adds	r7, #16
90001704:	46bd      	mov	sp, r7
90001706:	bd80      	pop	{r7, pc}
90001708:	90001731 	.word	0x90001731
9000170c:	90001765 	.word	0x90001765

90001710 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90001710:	b580      	push	{r7, lr}
90001712:	b082      	sub	sp, #8
90001714:	af00      	add	r7, sp, #0
90001716:	6078      	str	r0, [r7, #4]
90001718:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
9000171a:	687b      	ldr	r3, [r7, #4]
9000171c:	3318      	adds	r3, #24
9000171e:	6839      	ldr	r1, [r7, #0]
90001720:	4618      	mov	r0, r3
90001722:	f000 f850 	bl	900017c6 <ft5336_chip_id>
90001726:	4603      	mov	r3, r0
}
90001728:	4618      	mov	r0, r3
9000172a:	3708      	adds	r7, #8
9000172c:	46bd      	mov	sp, r7
9000172e:	bd80      	pop	{r7, pc}

90001730 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001730:	b590      	push	{r4, r7, lr}
90001732:	b087      	sub	sp, #28
90001734:	af00      	add	r7, sp, #0
90001736:	60f8      	str	r0, [r7, #12]
90001738:	607a      	str	r2, [r7, #4]
9000173a:	461a      	mov	r2, r3
9000173c:	460b      	mov	r3, r1
9000173e:	72fb      	strb	r3, [r7, #11]
90001740:	4613      	mov	r3, r2
90001742:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001744:	68fb      	ldr	r3, [r7, #12]
90001746:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90001748:	697b      	ldr	r3, [r7, #20]
9000174a:	691c      	ldr	r4, [r3, #16]
9000174c:	697b      	ldr	r3, [r7, #20]
9000174e:	8918      	ldrh	r0, [r3, #8]
90001750:	7afb      	ldrb	r3, [r7, #11]
90001752:	b299      	uxth	r1, r3
90001754:	893b      	ldrh	r3, [r7, #8]
90001756:	687a      	ldr	r2, [r7, #4]
90001758:	47a0      	blx	r4
9000175a:	4603      	mov	r3, r0
}
9000175c:	4618      	mov	r0, r3
9000175e:	371c      	adds	r7, #28
90001760:	46bd      	mov	sp, r7
90001762:	bd90      	pop	{r4, r7, pc}

90001764 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001764:	b590      	push	{r4, r7, lr}
90001766:	b087      	sub	sp, #28
90001768:	af00      	add	r7, sp, #0
9000176a:	60f8      	str	r0, [r7, #12]
9000176c:	607a      	str	r2, [r7, #4]
9000176e:	461a      	mov	r2, r3
90001770:	460b      	mov	r3, r1
90001772:	72fb      	strb	r3, [r7, #11]
90001774:	4613      	mov	r3, r2
90001776:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001778:	68fb      	ldr	r3, [r7, #12]
9000177a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
9000177c:	697b      	ldr	r3, [r7, #20]
9000177e:	68dc      	ldr	r4, [r3, #12]
90001780:	697b      	ldr	r3, [r7, #20]
90001782:	8918      	ldrh	r0, [r3, #8]
90001784:	7afb      	ldrb	r3, [r7, #11]
90001786:	b299      	uxth	r1, r3
90001788:	893b      	ldrh	r3, [r7, #8]
9000178a:	687a      	ldr	r2, [r7, #4]
9000178c:	47a0      	blx	r4
9000178e:	4603      	mov	r3, r0
}
90001790:	4618      	mov	r0, r3
90001792:	371c      	adds	r7, #28
90001794:	46bd      	mov	sp, r7
90001796:	bd90      	pop	{r4, r7, pc}

90001798 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90001798:	b590      	push	{r4, r7, lr}
9000179a:	b085      	sub	sp, #20
9000179c:	af00      	add	r7, sp, #0
9000179e:	60f8      	str	r0, [r7, #12]
900017a0:	607a      	str	r2, [r7, #4]
900017a2:	461a      	mov	r2, r3
900017a4:	460b      	mov	r3, r1
900017a6:	72fb      	strb	r3, [r7, #11]
900017a8:	4613      	mov	r3, r2
900017aa:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900017ac:	68fb      	ldr	r3, [r7, #12]
900017ae:	685c      	ldr	r4, [r3, #4]
900017b0:	68fb      	ldr	r3, [r7, #12]
900017b2:	6898      	ldr	r0, [r3, #8]
900017b4:	893b      	ldrh	r3, [r7, #8]
900017b6:	7af9      	ldrb	r1, [r7, #11]
900017b8:	687a      	ldr	r2, [r7, #4]
900017ba:	47a0      	blx	r4
900017bc:	4603      	mov	r3, r0
}
900017be:	4618      	mov	r0, r3
900017c0:	3714      	adds	r7, #20
900017c2:	46bd      	mov	sp, r7
900017c4:	bd90      	pop	{r4, r7, pc}

900017c6 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900017c6:	b580      	push	{r7, lr}
900017c8:	b084      	sub	sp, #16
900017ca:	af00      	add	r7, sp, #0
900017cc:	6078      	str	r0, [r7, #4]
900017ce:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900017d0:	2301      	movs	r3, #1
900017d2:	683a      	ldr	r2, [r7, #0]
900017d4:	21a8      	movs	r1, #168	@ 0xa8
900017d6:	6878      	ldr	r0, [r7, #4]
900017d8:	f7ff ffde 	bl	90001798 <ft5336_read_reg>
900017dc:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900017de:	68fb      	ldr	r3, [r7, #12]
900017e0:	2b00      	cmp	r3, #0
900017e2:	d107      	bne.n	900017f4 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900017e4:	683b      	ldr	r3, [r7, #0]
900017e6:	781a      	ldrb	r2, [r3, #0]
900017e8:	683b      	ldr	r3, [r7, #0]
900017ea:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900017ec:	683b      	ldr	r3, [r7, #0]
900017ee:	781a      	ldrb	r2, [r3, #0]
900017f0:	683b      	ldr	r3, [r7, #0]
900017f2:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900017f4:	68fb      	ldr	r3, [r7, #12]
}
900017f6:	4618      	mov	r0, r3
900017f8:	3710      	adds	r7, #16
900017fa:	46bd      	mov	sp, r7
900017fc:	bd80      	pop	{r7, pc}

900017fe <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900017fe:	b580      	push	{r7, lr}
90001800:	b084      	sub	sp, #16
90001802:	af00      	add	r7, sp, #0
90001804:	6078      	str	r0, [r7, #4]
90001806:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90001808:	f04f 33ff 	mov.w	r3, #4294967295
9000180c:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000180e:	683b      	ldr	r3, [r7, #0]
90001810:	681b      	ldr	r3, [r3, #0]
90001812:	4619      	mov	r1, r3
90001814:	6878      	ldr	r0, [r7, #4]
90001816:	f000 f831 	bl	9000187c <MT48LC4M32B2_ClockEnable>
9000181a:	4603      	mov	r3, r0
9000181c:	2b00      	cmp	r3, #0
9000181e:	d128      	bne.n	90001872 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90001820:	2001      	movs	r0, #1
90001822:	f000 f8e1 	bl	900019e8 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90001826:	683b      	ldr	r3, [r7, #0]
90001828:	681b      	ldr	r3, [r3, #0]
9000182a:	4619      	mov	r1, r3
9000182c:	6878      	ldr	r0, [r7, #4]
9000182e:	f000 f849 	bl	900018c4 <MT48LC4M32B2_Precharge>
90001832:	4603      	mov	r3, r0
90001834:	2b00      	cmp	r3, #0
90001836:	d11c      	bne.n	90001872 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
90001838:	683b      	ldr	r3, [r7, #0]
9000183a:	6819      	ldr	r1, [r3, #0]
9000183c:	683b      	ldr	r3, [r7, #0]
9000183e:	685b      	ldr	r3, [r3, #4]
90001840:	461a      	mov	r2, r3
90001842:	6878      	ldr	r0, [r7, #4]
90001844:	f000 f896 	bl	90001974 <MT48LC4M32B2_RefreshMode>
90001848:	4603      	mov	r3, r0
9000184a:	2b00      	cmp	r3, #0
9000184c:	d111      	bne.n	90001872 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
9000184e:	6839      	ldr	r1, [r7, #0]
90001850:	6878      	ldr	r0, [r7, #4]
90001852:	f000 f85b 	bl	9000190c <MT48LC4M32B2_ModeRegConfig>
90001856:	4603      	mov	r3, r0
90001858:	2b00      	cmp	r3, #0
9000185a:	d10a      	bne.n	90001872 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
9000185c:	683b      	ldr	r3, [r7, #0]
9000185e:	689b      	ldr	r3, [r3, #8]
90001860:	4619      	mov	r1, r3
90001862:	6878      	ldr	r0, [r7, #4]
90001864:	f000 f8ac 	bl	900019c0 <MT48LC4M32B2_RefreshRate>
90001868:	4603      	mov	r3, r0
9000186a:	2b00      	cmp	r3, #0
9000186c:	d101      	bne.n	90001872 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
9000186e:	2300      	movs	r3, #0
90001870:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
90001872:	68fb      	ldr	r3, [r7, #12]
}
90001874:	4618      	mov	r0, r3
90001876:	3710      	adds	r7, #16
90001878:	46bd      	mov	sp, r7
9000187a:	bd80      	pop	{r7, pc}

9000187c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
9000187c:	b580      	push	{r7, lr}
9000187e:	b082      	sub	sp, #8
90001880:	af00      	add	r7, sp, #0
90001882:	6078      	str	r0, [r7, #4]
90001884:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90001886:	4b0e      	ldr	r3, [pc, #56]	@ (900018c0 <MT48LC4M32B2_ClockEnable+0x44>)
90001888:	2201      	movs	r2, #1
9000188a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
9000188c:	4a0c      	ldr	r2, [pc, #48]	@ (900018c0 <MT48LC4M32B2_ClockEnable+0x44>)
9000188e:	683b      	ldr	r3, [r7, #0]
90001890:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001892:	4b0b      	ldr	r3, [pc, #44]	@ (900018c0 <MT48LC4M32B2_ClockEnable+0x44>)
90001894:	2201      	movs	r2, #1
90001896:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001898:	4b09      	ldr	r3, [pc, #36]	@ (900018c0 <MT48LC4M32B2_ClockEnable+0x44>)
9000189a:	2200      	movs	r2, #0
9000189c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000189e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900018a2:	4907      	ldr	r1, [pc, #28]	@ (900018c0 <MT48LC4M32B2_ClockEnable+0x44>)
900018a4:	6878      	ldr	r0, [r7, #4]
900018a6:	f006 fb29 	bl	90007efc <HAL_SDRAM_SendCommand>
900018aa:	4603      	mov	r3, r0
900018ac:	2b00      	cmp	r3, #0
900018ae:	d002      	beq.n	900018b6 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900018b0:	f04f 33ff 	mov.w	r3, #4294967295
900018b4:	e000      	b.n	900018b8 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900018b6:	2300      	movs	r3, #0
  }
}
900018b8:	4618      	mov	r0, r3
900018ba:	3708      	adds	r7, #8
900018bc:	46bd      	mov	sp, r7
900018be:	bd80      	pop	{r7, pc}
900018c0:	2000029c 	.word	0x2000029c

900018c4 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900018c4:	b580      	push	{r7, lr}
900018c6:	b082      	sub	sp, #8
900018c8:	af00      	add	r7, sp, #0
900018ca:	6078      	str	r0, [r7, #4]
900018cc:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900018ce:	4b0e      	ldr	r3, [pc, #56]	@ (90001908 <MT48LC4M32B2_Precharge+0x44>)
900018d0:	2202      	movs	r2, #2
900018d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900018d4:	4a0c      	ldr	r2, [pc, #48]	@ (90001908 <MT48LC4M32B2_Precharge+0x44>)
900018d6:	683b      	ldr	r3, [r7, #0]
900018d8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900018da:	4b0b      	ldr	r3, [pc, #44]	@ (90001908 <MT48LC4M32B2_Precharge+0x44>)
900018dc:	2201      	movs	r2, #1
900018de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900018e0:	4b09      	ldr	r3, [pc, #36]	@ (90001908 <MT48LC4M32B2_Precharge+0x44>)
900018e2:	2200      	movs	r2, #0
900018e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900018e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900018ea:	4907      	ldr	r1, [pc, #28]	@ (90001908 <MT48LC4M32B2_Precharge+0x44>)
900018ec:	6878      	ldr	r0, [r7, #4]
900018ee:	f006 fb05 	bl	90007efc <HAL_SDRAM_SendCommand>
900018f2:	4603      	mov	r3, r0
900018f4:	2b00      	cmp	r3, #0
900018f6:	d002      	beq.n	900018fe <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900018f8:	f04f 33ff 	mov.w	r3, #4294967295
900018fc:	e000      	b.n	90001900 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900018fe:	2300      	movs	r3, #0
  }
}
90001900:	4618      	mov	r0, r3
90001902:	3708      	adds	r7, #8
90001904:	46bd      	mov	sp, r7
90001906:	bd80      	pop	{r7, pc}
90001908:	2000029c 	.word	0x2000029c

9000190c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
9000190c:	b580      	push	{r7, lr}
9000190e:	b084      	sub	sp, #16
90001910:	af00      	add	r7, sp, #0
90001912:	6078      	str	r0, [r7, #4]
90001914:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001916:	683b      	ldr	r3, [r7, #0]
90001918:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
9000191a:	683b      	ldr	r3, [r7, #0]
9000191c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000191e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001920:	683b      	ldr	r3, [r7, #0]
90001922:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
90001924:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
90001926:	683b      	ldr	r3, [r7, #0]
90001928:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
9000192a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
9000192c:	683b      	ldr	r3, [r7, #0]
9000192e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001930:	4313      	orrs	r3, r2
90001932:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90001934:	4b0e      	ldr	r3, [pc, #56]	@ (90001970 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001936:	2204      	movs	r2, #4
90001938:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
9000193a:	683b      	ldr	r3, [r7, #0]
9000193c:	681b      	ldr	r3, [r3, #0]
9000193e:	4a0c      	ldr	r2, [pc, #48]	@ (90001970 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001940:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001942:	4b0b      	ldr	r3, [pc, #44]	@ (90001970 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001944:	2201      	movs	r2, #1
90001946:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001948:	4a09      	ldr	r2, [pc, #36]	@ (90001970 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000194a:	68fb      	ldr	r3, [r7, #12]
9000194c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000194e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001952:	4907      	ldr	r1, [pc, #28]	@ (90001970 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001954:	6878      	ldr	r0, [r7, #4]
90001956:	f006 fad1 	bl	90007efc <HAL_SDRAM_SendCommand>
9000195a:	4603      	mov	r3, r0
9000195c:	2b00      	cmp	r3, #0
9000195e:	d002      	beq.n	90001966 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001960:	f04f 33ff 	mov.w	r3, #4294967295
90001964:	e000      	b.n	90001968 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001966:	2300      	movs	r3, #0
  }
}
90001968:	4618      	mov	r0, r3
9000196a:	3710      	adds	r7, #16
9000196c:	46bd      	mov	sp, r7
9000196e:	bd80      	pop	{r7, pc}
90001970:	2000029c 	.word	0x2000029c

90001974 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
90001974:	b580      	push	{r7, lr}
90001976:	b084      	sub	sp, #16
90001978:	af00      	add	r7, sp, #0
9000197a:	60f8      	str	r0, [r7, #12]
9000197c:	60b9      	str	r1, [r7, #8]
9000197e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001980:	4a0e      	ldr	r2, [pc, #56]	@ (900019bc <MT48LC4M32B2_RefreshMode+0x48>)
90001982:	687b      	ldr	r3, [r7, #4]
90001984:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
90001986:	4a0d      	ldr	r2, [pc, #52]	@ (900019bc <MT48LC4M32B2_RefreshMode+0x48>)
90001988:	68bb      	ldr	r3, [r7, #8]
9000198a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
9000198c:	4b0b      	ldr	r3, [pc, #44]	@ (900019bc <MT48LC4M32B2_RefreshMode+0x48>)
9000198e:	2208      	movs	r2, #8
90001990:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001992:	4b0a      	ldr	r3, [pc, #40]	@ (900019bc <MT48LC4M32B2_RefreshMode+0x48>)
90001994:	2200      	movs	r2, #0
90001996:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000199c:	4907      	ldr	r1, [pc, #28]	@ (900019bc <MT48LC4M32B2_RefreshMode+0x48>)
9000199e:	68f8      	ldr	r0, [r7, #12]
900019a0:	f006 faac 	bl	90007efc <HAL_SDRAM_SendCommand>
900019a4:	4603      	mov	r3, r0
900019a6:	2b00      	cmp	r3, #0
900019a8:	d002      	beq.n	900019b0 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
900019aa:	f04f 33ff 	mov.w	r3, #4294967295
900019ae:	e000      	b.n	900019b2 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
900019b0:	2300      	movs	r3, #0
  }
}
900019b2:	4618      	mov	r0, r3
900019b4:	3710      	adds	r7, #16
900019b6:	46bd      	mov	sp, r7
900019b8:	bd80      	pop	{r7, pc}
900019ba:	bf00      	nop
900019bc:	2000029c 	.word	0x2000029c

900019c0 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
900019c0:	b580      	push	{r7, lr}
900019c2:	b082      	sub	sp, #8
900019c4:	af00      	add	r7, sp, #0
900019c6:	6078      	str	r0, [r7, #4]
900019c8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900019ca:	6839      	ldr	r1, [r7, #0]
900019cc:	6878      	ldr	r0, [r7, #4]
900019ce:	f006 faca 	bl	90007f66 <HAL_SDRAM_ProgramRefreshRate>
900019d2:	4603      	mov	r3, r0
900019d4:	2b00      	cmp	r3, #0
900019d6:	d002      	beq.n	900019de <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
900019d8:	f04f 33ff 	mov.w	r3, #4294967295
900019dc:	e000      	b.n	900019e0 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
900019de:	2300      	movs	r3, #0
  }
}
900019e0:	4618      	mov	r0, r3
900019e2:	3708      	adds	r7, #8
900019e4:	46bd      	mov	sp, r7
900019e6:	bd80      	pop	{r7, pc}

900019e8 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
900019e8:	b580      	push	{r7, lr}
900019ea:	b084      	sub	sp, #16
900019ec:	af00      	add	r7, sp, #0
900019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900019f0:	f001 fd2a 	bl	90003448 <HAL_GetTick>
900019f4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900019f6:	bf00      	nop
900019f8:	f001 fd26 	bl	90003448 <HAL_GetTick>
900019fc:	4602      	mov	r2, r0
900019fe:	68fb      	ldr	r3, [r7, #12]
90001a00:	1ad3      	subs	r3, r2, r3
90001a02:	687a      	ldr	r2, [r7, #4]
90001a04:	429a      	cmp	r2, r3
90001a06:	d8f7      	bhi.n	900019f8 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001a08:	2300      	movs	r3, #0
}
90001a0a:	4618      	mov	r0, r3
90001a0c:	3710      	adds	r7, #16
90001a0e:	46bd      	mov	sp, r7
90001a10:	bd80      	pop	{r7, pc}
	...

90001a14 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
90001a14:	b580      	push	{r7, lr}
90001a16:	b082      	sub	sp, #8
90001a18:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001a1a:	2300      	movs	r3, #0
90001a1c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001a1e:	4b16      	ldr	r3, [pc, #88]	@ (90001a78 <BSP_I2C4_Init+0x64>)
90001a20:	4a16      	ldr	r2, [pc, #88]	@ (90001a7c <BSP_I2C4_Init+0x68>)
90001a22:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
90001a24:	4b16      	ldr	r3, [pc, #88]	@ (90001a80 <BSP_I2C4_Init+0x6c>)
90001a26:	681b      	ldr	r3, [r3, #0]
90001a28:	2b00      	cmp	r3, #0
90001a2a:	d11f      	bne.n	90001a6c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001a2c:	4b14      	ldr	r3, [pc, #80]	@ (90001a80 <BSP_I2C4_Init+0x6c>)
90001a2e:	681b      	ldr	r3, [r3, #0]
90001a30:	3301      	adds	r3, #1
90001a32:	4a13      	ldr	r2, [pc, #76]	@ (90001a80 <BSP_I2C4_Init+0x6c>)
90001a34:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90001a36:	4810      	ldr	r0, [pc, #64]	@ (90001a78 <BSP_I2C4_Init+0x64>)
90001a38:	f002 fd52 	bl	900044e0 <HAL_I2C_GetState>
90001a3c:	4603      	mov	r3, r0
90001a3e:	2b00      	cmp	r3, #0
90001a40:	d114      	bne.n	90001a6c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
90001a42:	480d      	ldr	r0, [pc, #52]	@ (90001a78 <BSP_I2C4_Init+0x64>)
90001a44:	f000 fb06 	bl	90002054 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001a48:	f004 fbd0 	bl	900061ec <HAL_RCC_GetPCLK2Freq>
90001a4c:	4603      	mov	r3, r0
90001a4e:	490d      	ldr	r1, [pc, #52]	@ (90001a84 <BSP_I2C4_Init+0x70>)
90001a50:	4618      	mov	r0, r3
90001a52:	f000 f889 	bl	90001b68 <I2C_GetTiming>
90001a56:	4603      	mov	r3, r0
90001a58:	4619      	mov	r1, r3
90001a5a:	4807      	ldr	r0, [pc, #28]	@ (90001a78 <BSP_I2C4_Init+0x64>)
90001a5c:	f000 f814 	bl	90001a88 <MX_I2C4_Init>
90001a60:	4603      	mov	r3, r0
90001a62:	2b00      	cmp	r3, #0
90001a64:	d002      	beq.n	90001a6c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
90001a66:	f06f 0307 	mvn.w	r3, #7
90001a6a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001a6c:	687b      	ldr	r3, [r7, #4]
}
90001a6e:	4618      	mov	r0, r3
90001a70:	3708      	adds	r7, #8
90001a72:	46bd      	mov	sp, r7
90001a74:	bd80      	pop	{r7, pc}
90001a76:	bf00      	nop
90001a78:	20000cb4 	.word	0x20000cb4
90001a7c:	58001c00 	.word	0x58001c00
90001a80:	200002ac 	.word	0x200002ac
90001a84:	000186a0 	.word	0x000186a0

90001a88 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001a88:	b580      	push	{r7, lr}
90001a8a:	b084      	sub	sp, #16
90001a8c:	af00      	add	r7, sp, #0
90001a8e:	6078      	str	r0, [r7, #4]
90001a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001a92:	2300      	movs	r3, #0
90001a94:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90001a96:	687b      	ldr	r3, [r7, #4]
90001a98:	683a      	ldr	r2, [r7, #0]
90001a9a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001a9c:	687b      	ldr	r3, [r7, #4]
90001a9e:	2200      	movs	r2, #0
90001aa0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001aa2:	687b      	ldr	r3, [r7, #4]
90001aa4:	2201      	movs	r2, #1
90001aa6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001aa8:	687b      	ldr	r3, [r7, #4]
90001aaa:	2200      	movs	r2, #0
90001aac:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001aae:	687b      	ldr	r3, [r7, #4]
90001ab0:	2200      	movs	r2, #0
90001ab2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001ab4:	687b      	ldr	r3, [r7, #4]
90001ab6:	2200      	movs	r2, #0
90001ab8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90001aba:	687b      	ldr	r3, [r7, #4]
90001abc:	2200      	movs	r2, #0
90001abe:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001ac0:	687b      	ldr	r3, [r7, #4]
90001ac2:	2200      	movs	r2, #0
90001ac4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90001ac6:	6878      	ldr	r0, [r7, #4]
90001ac8:	f002 fb4a 	bl	90004160 <HAL_I2C_Init>
90001acc:	4603      	mov	r3, r0
90001ace:	2b00      	cmp	r3, #0
90001ad0:	d002      	beq.n	90001ad8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001ad2:	2301      	movs	r3, #1
90001ad4:	73fb      	strb	r3, [r7, #15]
90001ad6:	e014      	b.n	90001b02 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001ad8:	2300      	movs	r3, #0
90001ada:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001adc:	68b9      	ldr	r1, [r7, #8]
90001ade:	6878      	ldr	r0, [r7, #4]
90001ae0:	f002 ff86 	bl	900049f0 <HAL_I2CEx_ConfigAnalogFilter>
90001ae4:	4603      	mov	r3, r0
90001ae6:	2b00      	cmp	r3, #0
90001ae8:	d002      	beq.n	90001af0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
90001aea:	2301      	movs	r3, #1
90001aec:	73fb      	strb	r3, [r7, #15]
90001aee:	e008      	b.n	90001b02 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001af0:	2100      	movs	r1, #0
90001af2:	6878      	ldr	r0, [r7, #4]
90001af4:	f002 ffc7 	bl	90004a86 <HAL_I2CEx_ConfigDigitalFilter>
90001af8:	4603      	mov	r3, r0
90001afa:	2b00      	cmp	r3, #0
90001afc:	d001      	beq.n	90001b02 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001afe:	2301      	movs	r3, #1
90001b00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001b02:	7bfb      	ldrb	r3, [r7, #15]
}
90001b04:	4618      	mov	r0, r3
90001b06:	3710      	adds	r7, #16
90001b08:	46bd      	mov	sp, r7
90001b0a:	bd80      	pop	{r7, pc}

90001b0c <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001b0c:	b580      	push	{r7, lr}
90001b0e:	b088      	sub	sp, #32
90001b10:	af02      	add	r7, sp, #8
90001b12:	60ba      	str	r2, [r7, #8]
90001b14:	461a      	mov	r2, r3
90001b16:	4603      	mov	r3, r0
90001b18:	81fb      	strh	r3, [r7, #14]
90001b1a:	460b      	mov	r3, r1
90001b1c:	81bb      	strh	r3, [r7, #12]
90001b1e:	4613      	mov	r3, r2
90001b20:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001b22:	89b9      	ldrh	r1, [r7, #12]
90001b24:	89f8      	ldrh	r0, [r7, #14]
90001b26:	88fb      	ldrh	r3, [r7, #6]
90001b28:	9300      	str	r3, [sp, #0]
90001b2a:	68bb      	ldr	r3, [r7, #8]
90001b2c:	2201      	movs	r2, #1
90001b2e:	f000 fafd 	bl	9000212c <I2C4_ReadReg>
90001b32:	4603      	mov	r3, r0
90001b34:	2b00      	cmp	r3, #0
90001b36:	d102      	bne.n	90001b3e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001b38:	2300      	movs	r3, #0
90001b3a:	617b      	str	r3, [r7, #20]
90001b3c:	e00c      	b.n	90001b58 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001b3e:	4809      	ldr	r0, [pc, #36]	@ (90001b64 <BSP_I2C4_ReadReg+0x58>)
90001b40:	f002 fcdc 	bl	900044fc <HAL_I2C_GetError>
90001b44:	4603      	mov	r3, r0
90001b46:	2b04      	cmp	r3, #4
90001b48:	d103      	bne.n	90001b52 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001b4a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001b4e:	617b      	str	r3, [r7, #20]
90001b50:	e002      	b.n	90001b58 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001b52:	f06f 0303 	mvn.w	r3, #3
90001b56:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001b58:	697b      	ldr	r3, [r7, #20]
}
90001b5a:	4618      	mov	r0, r3
90001b5c:	3718      	adds	r7, #24
90001b5e:	46bd      	mov	sp, r7
90001b60:	bd80      	pop	{r7, pc}
90001b62:	bf00      	nop
90001b64:	20000cb4 	.word	0x20000cb4

90001b68 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001b68:	b580      	push	{r7, lr}
90001b6a:	b086      	sub	sp, #24
90001b6c:	af00      	add	r7, sp, #0
90001b6e:	6078      	str	r0, [r7, #4]
90001b70:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001b72:	2300      	movs	r3, #0
90001b74:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001b76:	687b      	ldr	r3, [r7, #4]
90001b78:	2b00      	cmp	r3, #0
90001b7a:	d06b      	beq.n	90001c54 <I2C_GetTiming+0xec>
90001b7c:	683b      	ldr	r3, [r7, #0]
90001b7e:	2b00      	cmp	r3, #0
90001b80:	d068      	beq.n	90001c54 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001b82:	2300      	movs	r3, #0
90001b84:	613b      	str	r3, [r7, #16]
90001b86:	e060      	b.n	90001c4a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001b88:	4a35      	ldr	r2, [pc, #212]	@ (90001c60 <I2C_GetTiming+0xf8>)
90001b8a:	693b      	ldr	r3, [r7, #16]
90001b8c:	212c      	movs	r1, #44	@ 0x2c
90001b8e:	fb01 f303 	mul.w	r3, r1, r3
90001b92:	4413      	add	r3, r2
90001b94:	3304      	adds	r3, #4
90001b96:	681b      	ldr	r3, [r3, #0]
90001b98:	683a      	ldr	r2, [r7, #0]
90001b9a:	429a      	cmp	r2, r3
90001b9c:	d352      	bcc.n	90001c44 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001b9e:	4a30      	ldr	r2, [pc, #192]	@ (90001c60 <I2C_GetTiming+0xf8>)
90001ba0:	693b      	ldr	r3, [r7, #16]
90001ba2:	212c      	movs	r1, #44	@ 0x2c
90001ba4:	fb01 f303 	mul.w	r3, r1, r3
90001ba8:	4413      	add	r3, r2
90001baa:	3308      	adds	r3, #8
90001bac:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001bae:	683a      	ldr	r2, [r7, #0]
90001bb0:	429a      	cmp	r2, r3
90001bb2:	d847      	bhi.n	90001c44 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001bb4:	6939      	ldr	r1, [r7, #16]
90001bb6:	6878      	ldr	r0, [r7, #4]
90001bb8:	f000 f856 	bl	90001c68 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001bbc:	6939      	ldr	r1, [r7, #16]
90001bbe:	6878      	ldr	r0, [r7, #4]
90001bc0:	f000 f940 	bl	90001e44 <I2C_Compute_SCLL_SCLH>
90001bc4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90001bc6:	68fb      	ldr	r3, [r7, #12]
90001bc8:	2b7f      	cmp	r3, #127	@ 0x7f
90001bca:	d842      	bhi.n	90001c52 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001bcc:	4925      	ldr	r1, [pc, #148]	@ (90001c64 <I2C_GetTiming+0xfc>)
90001bce:	68fa      	ldr	r2, [r7, #12]
90001bd0:	4613      	mov	r3, r2
90001bd2:	009b      	lsls	r3, r3, #2
90001bd4:	4413      	add	r3, r2
90001bd6:	009b      	lsls	r3, r3, #2
90001bd8:	440b      	add	r3, r1
90001bda:	681b      	ldr	r3, [r3, #0]
90001bdc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001bde:	4821      	ldr	r0, [pc, #132]	@ (90001c64 <I2C_GetTiming+0xfc>)
90001be0:	68fa      	ldr	r2, [r7, #12]
90001be2:	4613      	mov	r3, r2
90001be4:	009b      	lsls	r3, r3, #2
90001be6:	4413      	add	r3, r2
90001be8:	009b      	lsls	r3, r3, #2
90001bea:	4403      	add	r3, r0
90001bec:	3304      	adds	r3, #4
90001bee:	681b      	ldr	r3, [r3, #0]
90001bf0:	051b      	lsls	r3, r3, #20
90001bf2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001bf6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001bf8:	481a      	ldr	r0, [pc, #104]	@ (90001c64 <I2C_GetTiming+0xfc>)
90001bfa:	68fa      	ldr	r2, [r7, #12]
90001bfc:	4613      	mov	r3, r2
90001bfe:	009b      	lsls	r3, r3, #2
90001c00:	4413      	add	r3, r2
90001c02:	009b      	lsls	r3, r3, #2
90001c04:	4403      	add	r3, r0
90001c06:	3308      	adds	r3, #8
90001c08:	681b      	ldr	r3, [r3, #0]
90001c0a:	041b      	lsls	r3, r3, #16
90001c0c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001c10:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001c12:	4814      	ldr	r0, [pc, #80]	@ (90001c64 <I2C_GetTiming+0xfc>)
90001c14:	68fa      	ldr	r2, [r7, #12]
90001c16:	4613      	mov	r3, r2
90001c18:	009b      	lsls	r3, r3, #2
90001c1a:	4413      	add	r3, r2
90001c1c:	009b      	lsls	r3, r3, #2
90001c1e:	4403      	add	r3, r0
90001c20:	330c      	adds	r3, #12
90001c22:	681b      	ldr	r3, [r3, #0]
90001c24:	021b      	lsls	r3, r3, #8
90001c26:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001c28:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001c2a:	480e      	ldr	r0, [pc, #56]	@ (90001c64 <I2C_GetTiming+0xfc>)
90001c2c:	68fa      	ldr	r2, [r7, #12]
90001c2e:	4613      	mov	r3, r2
90001c30:	009b      	lsls	r3, r3, #2
90001c32:	4413      	add	r3, r2
90001c34:	009b      	lsls	r3, r3, #2
90001c36:	4403      	add	r3, r0
90001c38:	3310      	adds	r3, #16
90001c3a:	681b      	ldr	r3, [r3, #0]
90001c3c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001c3e:	430b      	orrs	r3, r1
90001c40:	617b      	str	r3, [r7, #20]
        }
        break;
90001c42:	e006      	b.n	90001c52 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001c44:	693b      	ldr	r3, [r7, #16]
90001c46:	3301      	adds	r3, #1
90001c48:	613b      	str	r3, [r7, #16]
90001c4a:	693b      	ldr	r3, [r7, #16]
90001c4c:	2b02      	cmp	r3, #2
90001c4e:	d99b      	bls.n	90001b88 <I2C_GetTiming+0x20>
90001c50:	e000      	b.n	90001c54 <I2C_GetTiming+0xec>
        break;
90001c52:	bf00      	nop
      }
    }
  }

  return ret;
90001c54:	697b      	ldr	r3, [r7, #20]
}
90001c56:	4618      	mov	r0, r3
90001c58:	3718      	adds	r7, #24
90001c5a:	46bd      	mov	sp, r7
90001c5c:	bd80      	pop	{r7, pc}
90001c5e:	bf00      	nop
90001c60:	9000c120 	.word	0x9000c120
90001c64:	200002b0 	.word	0x200002b0

90001c68 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001c68:	b480      	push	{r7}
90001c6a:	b08f      	sub	sp, #60	@ 0x3c
90001c6c:	af00      	add	r7, sp, #0
90001c6e:	6078      	str	r0, [r7, #4]
90001c70:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001c72:	2310      	movs	r3, #16
90001c74:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001c76:	687b      	ldr	r3, [r7, #4]
90001c78:	085a      	lsrs	r2, r3, #1
90001c7a:	4b6e      	ldr	r3, [pc, #440]	@ (90001e34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001c7c:	4413      	add	r3, r2
90001c7e:	687a      	ldr	r2, [r7, #4]
90001c80:	fbb3 f3f2 	udiv	r3, r3, r2
90001c84:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001c86:	2332      	movs	r3, #50	@ 0x32
90001c88:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001c8a:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001c8e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001c90:	4a69      	ldr	r2, [pc, #420]	@ (90001e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001c92:	683b      	ldr	r3, [r7, #0]
90001c94:	212c      	movs	r1, #44	@ 0x2c
90001c96:	fb01 f303 	mul.w	r3, r1, r3
90001c9a:	4413      	add	r3, r2
90001c9c:	3324      	adds	r3, #36	@ 0x24
90001c9e:	681b      	ldr	r3, [r3, #0]
90001ca0:	4618      	mov	r0, r3
90001ca2:	4a65      	ldr	r2, [pc, #404]	@ (90001e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ca4:	683b      	ldr	r3, [r7, #0]
90001ca6:	212c      	movs	r1, #44	@ 0x2c
90001ca8:	fb01 f303 	mul.w	r3, r1, r3
90001cac:	4413      	add	r3, r2
90001cae:	330c      	adds	r3, #12
90001cb0:	681b      	ldr	r3, [r3, #0]
90001cb2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001cb4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001cb6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001cb8:	495f      	ldr	r1, [pc, #380]	@ (90001e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001cba:	683b      	ldr	r3, [r7, #0]
90001cbc:	202c      	movs	r0, #44	@ 0x2c
90001cbe:	fb00 f303 	mul.w	r3, r0, r3
90001cc2:	440b      	add	r3, r1
90001cc4:	3328      	adds	r3, #40	@ 0x28
90001cc6:	681b      	ldr	r3, [r3, #0]
90001cc8:	3303      	adds	r3, #3
90001cca:	69f9      	ldr	r1, [r7, #28]
90001ccc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001cd0:	1ad3      	subs	r3, r2, r3
90001cd2:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001cd4:	4a58      	ldr	r2, [pc, #352]	@ (90001e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001cd6:	683b      	ldr	r3, [r7, #0]
90001cd8:	212c      	movs	r1, #44	@ 0x2c
90001cda:	fb01 f303 	mul.w	r3, r1, r3
90001cde:	4413      	add	r3, r2
90001ce0:	3310      	adds	r3, #16
90001ce2:	681b      	ldr	r3, [r3, #0]
90001ce4:	4618      	mov	r0, r3
90001ce6:	4a54      	ldr	r2, [pc, #336]	@ (90001e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ce8:	683b      	ldr	r3, [r7, #0]
90001cea:	212c      	movs	r1, #44	@ 0x2c
90001cec:	fb01 f303 	mul.w	r3, r1, r3
90001cf0:	4413      	add	r3, r2
90001cf2:	3320      	adds	r3, #32
90001cf4:	681b      	ldr	r3, [r3, #0]
90001cf6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001cf8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001cfa:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001cfc:	494e      	ldr	r1, [pc, #312]	@ (90001e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001cfe:	683b      	ldr	r3, [r7, #0]
90001d00:	202c      	movs	r0, #44	@ 0x2c
90001d02:	fb00 f303 	mul.w	r3, r0, r3
90001d06:	440b      	add	r3, r1
90001d08:	3328      	adds	r3, #40	@ 0x28
90001d0a:	681b      	ldr	r3, [r3, #0]
90001d0c:	3304      	adds	r3, #4
90001d0e:	69f9      	ldr	r1, [r7, #28]
90001d10:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001d14:	1ad3      	subs	r3, r2, r3
90001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001d18:	4a47      	ldr	r2, [pc, #284]	@ (90001e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d1a:	683b      	ldr	r3, [r7, #0]
90001d1c:	212c      	movs	r1, #44	@ 0x2c
90001d1e:	fb01 f303 	mul.w	r3, r1, r3
90001d22:	4413      	add	r3, r2
90001d24:	3320      	adds	r3, #32
90001d26:	681b      	ldr	r3, [r3, #0]
90001d28:	4618      	mov	r0, r3
90001d2a:	4a43      	ldr	r2, [pc, #268]	@ (90001e38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d2c:	683b      	ldr	r3, [r7, #0]
90001d2e:	212c      	movs	r1, #44	@ 0x2c
90001d30:	fb01 f303 	mul.w	r3, r1, r3
90001d34:	4413      	add	r3, r2
90001d36:	3314      	adds	r3, #20
90001d38:	681b      	ldr	r3, [r3, #0]
90001d3a:	4403      	add	r3, r0
90001d3c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001d40:	2b00      	cmp	r3, #0
90001d42:	dc01      	bgt.n	90001d48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001d44:	2300      	movs	r3, #0
90001d46:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d4a:	2b00      	cmp	r3, #0
90001d4c:	dc01      	bgt.n	90001d52 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001d4e:	2300      	movs	r3, #0
90001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001d52:	2300      	movs	r3, #0
90001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
90001d56:	e062      	b.n	90001e1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001d58:	2300      	movs	r3, #0
90001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
90001d5c:	e059      	b.n	90001e12 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001d60:	3301      	adds	r3, #1
90001d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001d64:	3201      	adds	r2, #1
90001d66:	fb03 f202 	mul.w	r2, r3, r2
90001d6a:	69fb      	ldr	r3, [r7, #28]
90001d6c:	fb02 f303 	mul.w	r3, r2, r3
90001d70:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001d72:	693b      	ldr	r3, [r7, #16]
90001d74:	68fa      	ldr	r2, [r7, #12]
90001d76:	429a      	cmp	r2, r3
90001d78:	d348      	bcc.n	90001e0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001d7a:	2300      	movs	r3, #0
90001d7c:	623b      	str	r3, [r7, #32]
90001d7e:	e042      	b.n	90001e06 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001d82:	3301      	adds	r3, #1
90001d84:	6a3a      	ldr	r2, [r7, #32]
90001d86:	fb03 f202 	mul.w	r2, r3, r2
90001d8a:	69fb      	ldr	r3, [r7, #28]
90001d8c:	fb02 f303 	mul.w	r3, r2, r3
90001d90:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001d94:	68ba      	ldr	r2, [r7, #8]
90001d96:	429a      	cmp	r2, r3
90001d98:	d332      	bcc.n	90001e00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d9c:	68ba      	ldr	r2, [r7, #8]
90001d9e:	429a      	cmp	r2, r3
90001da0:	d82e      	bhi.n	90001e00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001da6:	429a      	cmp	r2, r3
90001da8:	d02a      	beq.n	90001e00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001daa:	4b24      	ldr	r3, [pc, #144]	@ (90001e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001dac:	681a      	ldr	r2, [r3, #0]
90001dae:	4924      	ldr	r1, [pc, #144]	@ (90001e40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001db0:	4613      	mov	r3, r2
90001db2:	009b      	lsls	r3, r3, #2
90001db4:	4413      	add	r3, r2
90001db6:	009b      	lsls	r3, r3, #2
90001db8:	440b      	add	r3, r1
90001dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001dbc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (90001e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001dc0:	681a      	ldr	r2, [r3, #0]
90001dc2:	491f      	ldr	r1, [pc, #124]	@ (90001e40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001dc4:	4613      	mov	r3, r2
90001dc6:	009b      	lsls	r3, r3, #2
90001dc8:	4413      	add	r3, r2
90001dca:	009b      	lsls	r3, r3, #2
90001dcc:	440b      	add	r3, r1
90001dce:	3304      	adds	r3, #4
90001dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001dd2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001dd4:	4b19      	ldr	r3, [pc, #100]	@ (90001e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001dd6:	681a      	ldr	r2, [r3, #0]
90001dd8:	4919      	ldr	r1, [pc, #100]	@ (90001e40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001dda:	4613      	mov	r3, r2
90001ddc:	009b      	lsls	r3, r3, #2
90001dde:	4413      	add	r3, r2
90001de0:	009b      	lsls	r3, r3, #2
90001de2:	440b      	add	r3, r1
90001de4:	3308      	adds	r3, #8
90001de6:	6a3a      	ldr	r2, [r7, #32]
90001de8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001dec:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001dee:	4b13      	ldr	r3, [pc, #76]	@ (90001e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001df0:	681b      	ldr	r3, [r3, #0]
90001df2:	3301      	adds	r3, #1
90001df4:	4a11      	ldr	r2, [pc, #68]	@ (90001e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001df6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001df8:	4b10      	ldr	r3, [pc, #64]	@ (90001e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001dfa:	681b      	ldr	r3, [r3, #0]
90001dfc:	2b7f      	cmp	r3, #127	@ 0x7f
90001dfe:	d812      	bhi.n	90001e26 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001e00:	6a3b      	ldr	r3, [r7, #32]
90001e02:	3301      	adds	r3, #1
90001e04:	623b      	str	r3, [r7, #32]
90001e06:	6a3b      	ldr	r3, [r7, #32]
90001e08:	2b0f      	cmp	r3, #15
90001e0a:	d9b9      	bls.n	90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001e0e:	3301      	adds	r3, #1
90001e10:	627b      	str	r3, [r7, #36]	@ 0x24
90001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001e14:	2b0f      	cmp	r3, #15
90001e16:	d9a2      	bls.n	90001d5e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001e1a:	3301      	adds	r3, #1
90001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
90001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001e20:	2b0f      	cmp	r3, #15
90001e22:	d999      	bls.n	90001d58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001e24:	e000      	b.n	90001e28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001e26:	bf00      	nop
          }
        }
      }
    }
  }
}
90001e28:	373c      	adds	r7, #60	@ 0x3c
90001e2a:	46bd      	mov	sp, r7
90001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e30:	4770      	bx	lr
90001e32:	bf00      	nop
90001e34:	3b9aca00 	.word	0x3b9aca00
90001e38:	9000c120 	.word	0x9000c120
90001e3c:	20000cb0 	.word	0x20000cb0
90001e40:	200002b0 	.word	0x200002b0

90001e44 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001e44:	b480      	push	{r7}
90001e46:	b093      	sub	sp, #76	@ 0x4c
90001e48:	af00      	add	r7, sp, #0
90001e4a:	6078      	str	r0, [r7, #4]
90001e4c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001e4e:	f04f 33ff 	mov.w	r3, #4294967295
90001e52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001e54:	687b      	ldr	r3, [r7, #4]
90001e56:	085a      	lsrs	r2, r3, #1
90001e58:	4b7a      	ldr	r3, [pc, #488]	@ (90002044 <I2C_Compute_SCLL_SCLH+0x200>)
90001e5a:	4413      	add	r3, r2
90001e5c:	687a      	ldr	r2, [r7, #4]
90001e5e:	fbb3 f3f2 	udiv	r3, r3, r2
90001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001e64:	4a78      	ldr	r2, [pc, #480]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001e66:	683b      	ldr	r3, [r7, #0]
90001e68:	212c      	movs	r1, #44	@ 0x2c
90001e6a:	fb01 f303 	mul.w	r3, r1, r3
90001e6e:	4413      	add	r3, r2
90001e70:	681b      	ldr	r3, [r3, #0]
90001e72:	085a      	lsrs	r2, r3, #1
90001e74:	4b73      	ldr	r3, [pc, #460]	@ (90002044 <I2C_Compute_SCLL_SCLH+0x200>)
90001e76:	4413      	add	r3, r2
90001e78:	4973      	ldr	r1, [pc, #460]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001e7a:	683a      	ldr	r2, [r7, #0]
90001e7c:	202c      	movs	r0, #44	@ 0x2c
90001e7e:	fb00 f202 	mul.w	r2, r0, r2
90001e82:	440a      	add	r2, r1
90001e84:	6812      	ldr	r2, [r2, #0]
90001e86:	fbb3 f3f2 	udiv	r3, r3, r2
90001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001e8c:	2332      	movs	r3, #50	@ 0x32
90001e8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001e90:	4a6d      	ldr	r2, [pc, #436]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001e92:	683b      	ldr	r3, [r7, #0]
90001e94:	212c      	movs	r1, #44	@ 0x2c
90001e96:	fb01 f303 	mul.w	r3, r1, r3
90001e9a:	4413      	add	r3, r2
90001e9c:	3328      	adds	r3, #40	@ 0x28
90001e9e:	681a      	ldr	r2, [r3, #0]
90001ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001ea2:	fb02 f303 	mul.w	r3, r2, r3
90001ea6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001ea8:	4a67      	ldr	r2, [pc, #412]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001eaa:	683b      	ldr	r3, [r7, #0]
90001eac:	212c      	movs	r1, #44	@ 0x2c
90001eae:	fb01 f303 	mul.w	r3, r1, r3
90001eb2:	4413      	add	r3, r2
90001eb4:	3304      	adds	r3, #4
90001eb6:	681b      	ldr	r3, [r3, #0]
90001eb8:	4a62      	ldr	r2, [pc, #392]	@ (90002044 <I2C_Compute_SCLL_SCLH+0x200>)
90001eba:	fbb2 f3f3 	udiv	r3, r2, r3
90001ebe:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001ec0:	4a61      	ldr	r2, [pc, #388]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001ec2:	683b      	ldr	r3, [r7, #0]
90001ec4:	212c      	movs	r1, #44	@ 0x2c
90001ec6:	fb01 f303 	mul.w	r3, r1, r3
90001eca:	4413      	add	r3, r2
90001ecc:	3308      	adds	r3, #8
90001ece:	681b      	ldr	r3, [r3, #0]
90001ed0:	4a5c      	ldr	r2, [pc, #368]	@ (90002044 <I2C_Compute_SCLL_SCLH+0x200>)
90001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
90001ed6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001eda:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001edc:	2300      	movs	r3, #0
90001ede:	637b      	str	r3, [r7, #52]	@ 0x34
90001ee0:	e0a3      	b.n	9000202a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001ee2:	495a      	ldr	r1, [pc, #360]	@ (9000204c <I2C_Compute_SCLL_SCLH+0x208>)
90001ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001ee6:	4613      	mov	r3, r2
90001ee8:	009b      	lsls	r3, r3, #2
90001eea:	4413      	add	r3, r2
90001eec:	009b      	lsls	r3, r3, #2
90001eee:	440b      	add	r3, r1
90001ef0:	681b      	ldr	r3, [r3, #0]
90001ef2:	1c5a      	adds	r2, r3, #1
90001ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001ef6:	fb02 f303 	mul.w	r3, r2, r3
90001efa:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001efc:	2300      	movs	r3, #0
90001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001f00:	e08c      	b.n	9000201c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001f04:	6a3b      	ldr	r3, [r7, #32]
90001f06:	441a      	add	r2, r3
90001f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001f0a:	3301      	adds	r3, #1
90001f0c:	6979      	ldr	r1, [r7, #20]
90001f0e:	fb03 f101 	mul.w	r1, r3, r1
90001f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001f14:	005b      	lsls	r3, r3, #1
90001f16:	440b      	add	r3, r1
90001f18:	4413      	add	r3, r2
90001f1a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001f1c:	4a4a      	ldr	r2, [pc, #296]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001f1e:	683b      	ldr	r3, [r7, #0]
90001f20:	212c      	movs	r1, #44	@ 0x2c
90001f22:	fb01 f303 	mul.w	r3, r1, r3
90001f26:	4413      	add	r3, r2
90001f28:	3318      	adds	r3, #24
90001f2a:	681b      	ldr	r3, [r3, #0]
90001f2c:	693a      	ldr	r2, [r7, #16]
90001f2e:	429a      	cmp	r2, r3
90001f30:	d971      	bls.n	90002016 <I2C_Compute_SCLL_SCLH+0x1d2>
90001f32:	693a      	ldr	r2, [r7, #16]
90001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001f36:	1ad2      	subs	r2, r2, r3
90001f38:	6a3b      	ldr	r3, [r7, #32]
90001f3a:	1ad3      	subs	r3, r2, r3
90001f3c:	089b      	lsrs	r3, r3, #2
90001f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001f40:	429a      	cmp	r2, r3
90001f42:	d268      	bcs.n	90002016 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001f44:	2300      	movs	r3, #0
90001f46:	63bb      	str	r3, [r7, #56]	@ 0x38
90001f48:	e062      	b.n	90002010 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001f4c:	6a3b      	ldr	r3, [r7, #32]
90001f4e:	441a      	add	r2, r3
90001f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001f52:	3301      	adds	r3, #1
90001f54:	6979      	ldr	r1, [r7, #20]
90001f56:	fb03 f101 	mul.w	r1, r3, r1
90001f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001f5c:	005b      	lsls	r3, r3, #1
90001f5e:	440b      	add	r3, r1
90001f60:	4413      	add	r3, r2
90001f62:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001f64:	693a      	ldr	r2, [r7, #16]
90001f66:	68fb      	ldr	r3, [r7, #12]
90001f68:	441a      	add	r2, r3
90001f6a:	4937      	ldr	r1, [pc, #220]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001f6c:	683b      	ldr	r3, [r7, #0]
90001f6e:	202c      	movs	r0, #44	@ 0x2c
90001f70:	fb00 f303 	mul.w	r3, r0, r3
90001f74:	440b      	add	r3, r1
90001f76:	3320      	adds	r3, #32
90001f78:	681b      	ldr	r3, [r3, #0]
90001f7a:	441a      	add	r2, r3
90001f7c:	4932      	ldr	r1, [pc, #200]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001f7e:	683b      	ldr	r3, [r7, #0]
90001f80:	202c      	movs	r0, #44	@ 0x2c
90001f82:	fb00 f303 	mul.w	r3, r0, r3
90001f86:	440b      	add	r3, r1
90001f88:	3324      	adds	r3, #36	@ 0x24
90001f8a:	681b      	ldr	r3, [r3, #0]
90001f8c:	4413      	add	r3, r2
90001f8e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001f90:	68ba      	ldr	r2, [r7, #8]
90001f92:	69bb      	ldr	r3, [r7, #24]
90001f94:	429a      	cmp	r2, r3
90001f96:	d338      	bcc.n	9000200a <I2C_Compute_SCLL_SCLH+0x1c6>
90001f98:	68ba      	ldr	r2, [r7, #8]
90001f9a:	69fb      	ldr	r3, [r7, #28]
90001f9c:	429a      	cmp	r2, r3
90001f9e:	d834      	bhi.n	9000200a <I2C_Compute_SCLL_SCLH+0x1c6>
90001fa0:	4a29      	ldr	r2, [pc, #164]	@ (90002048 <I2C_Compute_SCLL_SCLH+0x204>)
90001fa2:	683b      	ldr	r3, [r7, #0]
90001fa4:	212c      	movs	r1, #44	@ 0x2c
90001fa6:	fb01 f303 	mul.w	r3, r1, r3
90001faa:	4413      	add	r3, r2
90001fac:	331c      	adds	r3, #28
90001fae:	681b      	ldr	r3, [r3, #0]
90001fb0:	68fa      	ldr	r2, [r7, #12]
90001fb2:	429a      	cmp	r2, r3
90001fb4:	d329      	bcc.n	9000200a <I2C_Compute_SCLL_SCLH+0x1c6>
90001fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001fb8:	68fb      	ldr	r3, [r7, #12]
90001fba:	429a      	cmp	r2, r3
90001fbc:	d225      	bcs.n	9000200a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001fbe:	68ba      	ldr	r2, [r7, #8]
90001fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001fc2:	1ad3      	subs	r3, r2, r3
90001fc4:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001fc8:	2b00      	cmp	r3, #0
90001fca:	da02      	bge.n	90001fd2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001fce:	425b      	negs	r3, r3
90001fd0:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001fd6:	429a      	cmp	r2, r3
90001fd8:	d917      	bls.n	9000200a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001fdc:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001fde:	491b      	ldr	r1, [pc, #108]	@ (9000204c <I2C_Compute_SCLL_SCLH+0x208>)
90001fe0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001fe2:	4613      	mov	r3, r2
90001fe4:	009b      	lsls	r3, r3, #2
90001fe6:	4413      	add	r3, r2
90001fe8:	009b      	lsls	r3, r3, #2
90001fea:	440b      	add	r3, r1
90001fec:	3310      	adds	r3, #16
90001fee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001ff0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001ff2:	4916      	ldr	r1, [pc, #88]	@ (9000204c <I2C_Compute_SCLL_SCLH+0x208>)
90001ff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001ff6:	4613      	mov	r3, r2
90001ff8:	009b      	lsls	r3, r3, #2
90001ffa:	4413      	add	r3, r2
90001ffc:	009b      	lsls	r3, r3, #2
90001ffe:	440b      	add	r3, r1
90002000:	330c      	adds	r3, #12
90002002:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90002004:	601a      	str	r2, [r3, #0]
              ret = count;
90002006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90002008:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
9000200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000200c:	3301      	adds	r3, #1
9000200e:	63bb      	str	r3, [r7, #56]	@ 0x38
90002010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90002012:	2bff      	cmp	r3, #255	@ 0xff
90002014:	d999      	bls.n	90001f4a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90002016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90002018:	3301      	adds	r3, #1
9000201a:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000201c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000201e:	2bff      	cmp	r3, #255	@ 0xff
90002020:	f67f af6f 	bls.w	90001f02 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90002024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90002026:	3301      	adds	r3, #1
90002028:	637b      	str	r3, [r7, #52]	@ 0x34
9000202a:	4b09      	ldr	r3, [pc, #36]	@ (90002050 <I2C_Compute_SCLL_SCLH+0x20c>)
9000202c:	681b      	ldr	r3, [r3, #0]
9000202e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90002030:	429a      	cmp	r2, r3
90002032:	f4ff af56 	bcc.w	90001ee2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90002036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90002038:	4618      	mov	r0, r3
9000203a:	374c      	adds	r7, #76	@ 0x4c
9000203c:	46bd      	mov	sp, r7
9000203e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002042:	4770      	bx	lr
90002044:	3b9aca00 	.word	0x3b9aca00
90002048:	9000c120 	.word	0x9000c120
9000204c:	200002b0 	.word	0x200002b0
90002050:	20000cb0 	.word	0x20000cb0

90002054 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90002054:	b580      	push	{r7, lr}
90002056:	b08a      	sub	sp, #40	@ 0x28
90002058:	af00      	add	r7, sp, #0
9000205a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000205c:	4b31      	ldr	r3, [pc, #196]	@ (90002124 <I2C4_MspInit+0xd0>)
9000205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002062:	4a30      	ldr	r2, [pc, #192]	@ (90002124 <I2C4_MspInit+0xd0>)
90002064:	f043 0308 	orr.w	r3, r3, #8
90002068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000206c:	4b2d      	ldr	r3, [pc, #180]	@ (90002124 <I2C4_MspInit+0xd0>)
9000206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002072:	f003 0308 	and.w	r3, r3, #8
90002076:	613b      	str	r3, [r7, #16]
90002078:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000207a:	4b2a      	ldr	r3, [pc, #168]	@ (90002124 <I2C4_MspInit+0xd0>)
9000207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002080:	4a28      	ldr	r2, [pc, #160]	@ (90002124 <I2C4_MspInit+0xd0>)
90002082:	f043 0308 	orr.w	r3, r3, #8
90002086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000208a:	4b26      	ldr	r3, [pc, #152]	@ (90002124 <I2C4_MspInit+0xd0>)
9000208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002090:	f003 0308 	and.w	r3, r3, #8
90002094:	60fb      	str	r3, [r7, #12]
90002096:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90002098:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
9000209c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
9000209e:	2312      	movs	r3, #18
900020a0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
900020a2:	2300      	movs	r3, #0
900020a4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900020a6:	2302      	movs	r3, #2
900020a8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
900020aa:	2304      	movs	r3, #4
900020ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
900020ae:	f107 0314 	add.w	r3, r7, #20
900020b2:	4619      	mov	r1, r3
900020b4:	481c      	ldr	r0, [pc, #112]	@ (90002128 <I2C4_MspInit+0xd4>)
900020b6:	f001 fe71 	bl	90003d9c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900020ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
900020be:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
900020c0:	2312      	movs	r3, #18
900020c2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
900020c4:	2300      	movs	r3, #0
900020c6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900020c8:	2302      	movs	r3, #2
900020ca:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
900020cc:	2304      	movs	r3, #4
900020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900020d0:	f107 0314 	add.w	r3, r7, #20
900020d4:	4619      	mov	r1, r3
900020d6:	4814      	ldr	r0, [pc, #80]	@ (90002128 <I2C4_MspInit+0xd4>)
900020d8:	f001 fe60 	bl	90003d9c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
900020dc:	4b11      	ldr	r3, [pc, #68]	@ (90002124 <I2C4_MspInit+0xd0>)
900020de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900020e2:	4a10      	ldr	r2, [pc, #64]	@ (90002124 <I2C4_MspInit+0xd0>)
900020e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900020e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
900020ec:	4b0d      	ldr	r3, [pc, #52]	@ (90002124 <I2C4_MspInit+0xd0>)
900020ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900020f6:	60bb      	str	r3, [r7, #8]
900020f8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
900020fa:	4b0a      	ldr	r3, [pc, #40]	@ (90002124 <I2C4_MspInit+0xd0>)
900020fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90002100:	4a08      	ldr	r2, [pc, #32]	@ (90002124 <I2C4_MspInit+0xd0>)
90002102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002106:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
9000210a:	4b06      	ldr	r3, [pc, #24]	@ (90002124 <I2C4_MspInit+0xd0>)
9000210c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90002110:	4a04      	ldr	r2, [pc, #16]	@ (90002124 <I2C4_MspInit+0xd0>)
90002112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90002116:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
9000211a:	bf00      	nop
9000211c:	3728      	adds	r7, #40	@ 0x28
9000211e:	46bd      	mov	sp, r7
90002120:	bd80      	pop	{r7, pc}
90002122:	bf00      	nop
90002124:	58024400 	.word	0x58024400
90002128:	58020c00 	.word	0x58020c00

9000212c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
9000212c:	b580      	push	{r7, lr}
9000212e:	b088      	sub	sp, #32
90002130:	af04      	add	r7, sp, #16
90002132:	607b      	str	r3, [r7, #4]
90002134:	4603      	mov	r3, r0
90002136:	81fb      	strh	r3, [r7, #14]
90002138:	460b      	mov	r3, r1
9000213a:	81bb      	strh	r3, [r7, #12]
9000213c:	4613      	mov	r3, r2
9000213e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90002140:	8978      	ldrh	r0, [r7, #10]
90002142:	89ba      	ldrh	r2, [r7, #12]
90002144:	89f9      	ldrh	r1, [r7, #14]
90002146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000214a:	9302      	str	r3, [sp, #8]
9000214c:	8b3b      	ldrh	r3, [r7, #24]
9000214e:	9301      	str	r3, [sp, #4]
90002150:	687b      	ldr	r3, [r7, #4]
90002152:	9300      	str	r3, [sp, #0]
90002154:	4603      	mov	r3, r0
90002156:	4807      	ldr	r0, [pc, #28]	@ (90002174 <I2C4_ReadReg+0x48>)
90002158:	f002 f8a8 	bl	900042ac <HAL_I2C_Mem_Read>
9000215c:	4603      	mov	r3, r0
9000215e:	2b00      	cmp	r3, #0
90002160:	d101      	bne.n	90002166 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90002162:	2300      	movs	r3, #0
90002164:	e001      	b.n	9000216a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90002166:	f06f 0307 	mvn.w	r3, #7
}
9000216a:	4618      	mov	r0, r3
9000216c:	3710      	adds	r7, #16
9000216e:	46bd      	mov	sp, r7
90002170:	bd80      	pop	{r7, pc}
90002172:	bf00      	nop
90002174:	20000cb4 	.word	0x20000cb4

90002178 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90002178:	b580      	push	{r7, lr}
9000217a:	b084      	sub	sp, #16
9000217c:	af02      	add	r7, sp, #8
9000217e:	6078      	str	r0, [r7, #4]
90002180:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90002182:	f44f 7388 	mov.w	r3, #272	@ 0x110
90002186:	9300      	str	r3, [sp, #0]
90002188:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
9000218c:	2200      	movs	r2, #0
9000218e:	6839      	ldr	r1, [r7, #0]
90002190:	6878      	ldr	r0, [r7, #4]
90002192:	f000 f805 	bl	900021a0 <BSP_LCD_InitEx>
90002196:	4603      	mov	r3, r0
}
90002198:	4618      	mov	r0, r3
9000219a:	3708      	adds	r7, #8
9000219c:	46bd      	mov	sp, r7
9000219e:	bd80      	pop	{r7, pc}

900021a0 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
900021a0:	b580      	push	{r7, lr}
900021a2:	b09e      	sub	sp, #120	@ 0x78
900021a4:	af00      	add	r7, sp, #0
900021a6:	60f8      	str	r0, [r7, #12]
900021a8:	60b9      	str	r1, [r7, #8]
900021aa:	607a      	str	r2, [r7, #4]
900021ac:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900021ae:	2300      	movs	r3, #0
900021b0:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
900021b2:	2300      	movs	r3, #0
900021b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
900021b6:	68bb      	ldr	r3, [r7, #8]
900021b8:	2b01      	cmp	r3, #1
900021ba:	d808      	bhi.n	900021ce <BSP_LCD_InitEx+0x2e>
900021bc:	68fb      	ldr	r3, [r7, #12]
900021be:	2b00      	cmp	r3, #0
900021c0:	d105      	bne.n	900021ce <BSP_LCD_InitEx+0x2e>
900021c2:	687b      	ldr	r3, [r7, #4]
900021c4:	2b02      	cmp	r3, #2
900021c6:	d006      	beq.n	900021d6 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
900021c8:	687b      	ldr	r3, [r7, #4]
900021ca:	2b00      	cmp	r3, #0
900021cc:	d003      	beq.n	900021d6 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900021ce:	f06f 0301 	mvn.w	r3, #1
900021d2:	677b      	str	r3, [r7, #116]	@ 0x74
900021d4:	e0a8      	b.n	90002328 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
900021d6:	687b      	ldr	r3, [r7, #4]
900021d8:	2b02      	cmp	r3, #2
900021da:	d109      	bne.n	900021f0 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
900021dc:	2302      	movs	r3, #2
900021de:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
900021e0:	4a54      	ldr	r2, [pc, #336]	@ (90002334 <BSP_LCD_InitEx+0x194>)
900021e2:	68fb      	ldr	r3, [r7, #12]
900021e4:	015b      	lsls	r3, r3, #5
900021e6:	4413      	add	r3, r2
900021e8:	3310      	adds	r3, #16
900021ea:	2202      	movs	r2, #2
900021ec:	601a      	str	r2, [r3, #0]
900021ee:	e008      	b.n	90002202 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
900021f0:	2300      	movs	r3, #0
900021f2:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
900021f4:	4a4f      	ldr	r2, [pc, #316]	@ (90002334 <BSP_LCD_InitEx+0x194>)
900021f6:	68fb      	ldr	r3, [r7, #12]
900021f8:	015b      	lsls	r3, r3, #5
900021fa:	4413      	add	r3, r2
900021fc:	3310      	adds	r3, #16
900021fe:	2204      	movs	r2, #4
90002200:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90002202:	4a4c      	ldr	r2, [pc, #304]	@ (90002334 <BSP_LCD_InitEx+0x194>)
90002204:	68fb      	ldr	r3, [r7, #12]
90002206:	015b      	lsls	r3, r3, #5
90002208:	4413      	add	r3, r2
9000220a:	330c      	adds	r3, #12
9000220c:	687a      	ldr	r2, [r7, #4]
9000220e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90002210:	4a48      	ldr	r2, [pc, #288]	@ (90002334 <BSP_LCD_InitEx+0x194>)
90002212:	68fb      	ldr	r3, [r7, #12]
90002214:	015b      	lsls	r3, r3, #5
90002216:	4413      	add	r3, r2
90002218:	683a      	ldr	r2, [r7, #0]
9000221a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
9000221c:	4a45      	ldr	r2, [pc, #276]	@ (90002334 <BSP_LCD_InitEx+0x194>)
9000221e:	68fb      	ldr	r3, [r7, #12]
90002220:	015b      	lsls	r3, r3, #5
90002222:	4413      	add	r3, r2
90002224:	3304      	adds	r3, #4
90002226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
9000222a:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
9000222c:	4b42      	ldr	r3, [pc, #264]	@ (90002338 <BSP_LCD_InitEx+0x198>)
9000222e:	4a43      	ldr	r2, [pc, #268]	@ (9000233c <BSP_LCD_InitEx+0x19c>)
90002230:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90002232:	4b43      	ldr	r3, [pc, #268]	@ (90002340 <BSP_LCD_InitEx+0x1a0>)
90002234:	4a43      	ldr	r2, [pc, #268]	@ (90002344 <BSP_LCD_InitEx+0x1a4>)
90002236:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90002238:	483f      	ldr	r0, [pc, #252]	@ (90002338 <BSP_LCD_InitEx+0x198>)
9000223a:	f000 fcf9 	bl	90002c30 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
9000223e:	4840      	ldr	r0, [pc, #256]	@ (90002340 <BSP_LCD_InitEx+0x1a0>)
90002240:	f000 fdc2 	bl	90002dc8 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90002244:	4b40      	ldr	r3, [pc, #256]	@ (90002348 <BSP_LCD_InitEx+0x1a8>)
90002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90002248:	4b40      	ldr	r3, [pc, #256]	@ (9000234c <BSP_LCD_InitEx+0x1ac>)
9000224a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
9000224c:	2370      	movs	r3, #112	@ 0x70
9000224e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90002250:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90002254:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90002258:	4611      	mov	r1, r2
9000225a:	4618      	mov	r0, r3
9000225c:	f7ff fa16 	bl	9000168c <FT5336_RegisterBusIO>
90002260:	4603      	mov	r3, r0
90002262:	2b00      	cmp	r3, #0
90002264:	da03      	bge.n	9000226e <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002266:	f06f 0304 	mvn.w	r3, #4
9000226a:	677b      	str	r3, [r7, #116]	@ 0x74
9000226c:	e02b      	b.n	900022c6 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
9000226e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90002272:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90002276:	4611      	mov	r1, r2
90002278:	4618      	mov	r0, r3
9000227a:	f7ff fa49 	bl	90001710 <FT5336_ReadID>
9000227e:	4603      	mov	r3, r0
90002280:	2b00      	cmp	r3, #0
90002282:	da03      	bge.n	9000228c <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002284:	f06f 0304 	mvn.w	r3, #4
90002288:	677b      	str	r3, [r7, #116]	@ 0x74
9000228a:	e01c      	b.n	900022c6 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
9000228c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
9000228e:	2b51      	cmp	r3, #81	@ 0x51
90002290:	d003      	beq.n	9000229a <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90002292:	f06f 0306 	mvn.w	r3, #6
90002296:	677b      	str	r3, [r7, #116]	@ 0x74
90002298:	e015      	b.n	900022c6 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
9000229a:	4827      	ldr	r0, [pc, #156]	@ (90002338 <BSP_LCD_InitEx+0x198>)
9000229c:	f7fe ff16 	bl	900010cc <MX_LTDC_ClockConfig>
900022a0:	4603      	mov	r3, r0
900022a2:	2b00      	cmp	r3, #0
900022a4:	d003      	beq.n	900022ae <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900022a6:	f06f 0303 	mvn.w	r3, #3
900022aa:	677b      	str	r3, [r7, #116]	@ 0x74
900022ac:	e00b      	b.n	900022c6 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
900022ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
900022b2:	6839      	ldr	r1, [r7, #0]
900022b4:	4820      	ldr	r0, [pc, #128]	@ (90002338 <BSP_LCD_InitEx+0x198>)
900022b6:	f000 f84d 	bl	90002354 <MX_LTDC_Init>
900022ba:	4603      	mov	r3, r0
900022bc:	2b00      	cmp	r3, #0
900022be:	d002      	beq.n	900022c6 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900022c0:	f06f 0303 	mvn.w	r3, #3
900022c4:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
900022c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
900022c8:	2b00      	cmp	r3, #0
900022ca:	d12d      	bne.n	90002328 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900022cc:	2000      	movs	r0, #0
900022ce:	f000 fe0d 	bl	90002eec <BSP_SDRAM_Init>
900022d2:	4603      	mov	r3, r0
900022d4:	2b00      	cmp	r3, #0
900022d6:	d002      	beq.n	900022de <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
900022d8:	f06f 0303 	mvn.w	r3, #3
900022dc:	e025      	b.n	9000232a <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
900022de:	2300      	movs	r3, #0
900022e0:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
900022e2:	683b      	ldr	r3, [r7, #0]
900022e4:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
900022e6:	2300      	movs	r3, #0
900022e8:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
900022ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
900022ee:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
900022f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
900022f2:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
900022f4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900022f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
900022fa:	f107 0314 	add.w	r3, r7, #20
900022fe:	461a      	mov	r2, r3
90002300:	2100      	movs	r1, #0
90002302:	480d      	ldr	r0, [pc, #52]	@ (90002338 <BSP_LCD_InitEx+0x198>)
90002304:	f000 f872 	bl	900023ec <MX_LTDC_ConfigLayer>
90002308:	4603      	mov	r3, r0
9000230a:	2b00      	cmp	r3, #0
9000230c:	d002      	beq.n	90002314 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
9000230e:	f06f 0303 	mvn.w	r3, #3
90002312:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90002314:	480e      	ldr	r0, [pc, #56]	@ (90002350 <BSP_LCD_InitEx+0x1b0>)
90002316:	f000 fdbf 	bl	90002e98 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
9000231a:	4a06      	ldr	r2, [pc, #24]	@ (90002334 <BSP_LCD_InitEx+0x194>)
9000231c:	68fb      	ldr	r3, [r7, #12]
9000231e:	015b      	lsls	r3, r3, #5
90002320:	4413      	add	r3, r2
90002322:	3318      	adds	r3, #24
90002324:	2201      	movs	r2, #1
90002326:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90002328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
9000232a:	4618      	mov	r0, r3
9000232c:	3778      	adds	r7, #120	@ 0x78
9000232e:	46bd      	mov	sp, r7
90002330:	bd80      	pop	{r7, pc}
90002332:	bf00      	nop
90002334:	20000e64 	.word	0x20000e64
90002338:	20000dbc 	.word	0x20000dbc
9000233c:	50001000 	.word	0x50001000
90002340:	20000d54 	.word	0x20000d54
90002344:	52001000 	.word	0x52001000
90002348:	90001a15 	.word	0x90001a15
9000234c:	90001b0d 	.word	0x90001b0d
90002350:	20000d08 	.word	0x20000d08

90002354 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90002354:	b580      	push	{r7, lr}
90002356:	b084      	sub	sp, #16
90002358:	af00      	add	r7, sp, #0
9000235a:	60f8      	str	r0, [r7, #12]
9000235c:	60b9      	str	r1, [r7, #8]
9000235e:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90002360:	68fb      	ldr	r3, [r7, #12]
90002362:	4a21      	ldr	r2, [pc, #132]	@ (900023e8 <MX_LTDC_Init+0x94>)
90002364:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90002366:	68fb      	ldr	r3, [r7, #12]
90002368:	2200      	movs	r2, #0
9000236a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
9000236c:	68fb      	ldr	r3, [r7, #12]
9000236e:	2200      	movs	r2, #0
90002370:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90002372:	68fb      	ldr	r3, [r7, #12]
90002374:	2200      	movs	r2, #0
90002376:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90002378:	68fb      	ldr	r3, [r7, #12]
9000237a:	2200      	movs	r2, #0
9000237c:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
9000237e:	68fb      	ldr	r3, [r7, #12]
90002380:	2228      	movs	r2, #40	@ 0x28
90002382:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90002384:	68fb      	ldr	r3, [r7, #12]
90002386:	222a      	movs	r2, #42	@ 0x2a
90002388:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
9000238a:	68bb      	ldr	r3, [r7, #8]
9000238c:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002390:	68fb      	ldr	r3, [r7, #12]
90002392:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90002394:	68bb      	ldr	r3, [r7, #8]
90002396:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
9000239a:	68fb      	ldr	r3, [r7, #12]
9000239c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
9000239e:	68fb      	ldr	r3, [r7, #12]
900023a0:	2209      	movs	r2, #9
900023a2:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
900023a4:	68fb      	ldr	r3, [r7, #12]
900023a6:	220b      	movs	r2, #11
900023a8:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
900023aa:	687b      	ldr	r3, [r7, #4]
900023ac:	f103 020b 	add.w	r2, r3, #11
900023b0:	68fb      	ldr	r3, [r7, #12]
900023b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
900023b4:	687b      	ldr	r3, [r7, #4]
900023b6:	f103 020d 	add.w	r2, r3, #13
900023ba:	68fb      	ldr	r3, [r7, #12]
900023bc:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
900023be:	68fb      	ldr	r3, [r7, #12]
900023c0:	22ff      	movs	r2, #255	@ 0xff
900023c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
900023c6:	68fb      	ldr	r3, [r7, #12]
900023c8:	22ff      	movs	r2, #255	@ 0xff
900023ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
900023ce:	68fb      	ldr	r3, [r7, #12]
900023d0:	22ff      	movs	r2, #255	@ 0xff
900023d2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
900023d6:	68f8      	ldr	r0, [r7, #12]
900023d8:	f002 fba1 	bl	90004b1e <HAL_LTDC_Init>
900023dc:	4603      	mov	r3, r0
}
900023de:	4618      	mov	r0, r3
900023e0:	3710      	adds	r7, #16
900023e2:	46bd      	mov	sp, r7
900023e4:	bd80      	pop	{r7, pc}
900023e6:	bf00      	nop
900023e8:	50001000 	.word	0x50001000

900023ec <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
900023ec:	b580      	push	{r7, lr}
900023ee:	b092      	sub	sp, #72	@ 0x48
900023f0:	af00      	add	r7, sp, #0
900023f2:	60f8      	str	r0, [r7, #12]
900023f4:	60b9      	str	r1, [r7, #8]
900023f6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
900023f8:	687b      	ldr	r3, [r7, #4]
900023fa:	681b      	ldr	r3, [r3, #0]
900023fc:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
900023fe:	687b      	ldr	r3, [r7, #4]
90002400:	685b      	ldr	r3, [r3, #4]
90002402:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90002404:	687b      	ldr	r3, [r7, #4]
90002406:	689b      	ldr	r3, [r3, #8]
90002408:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
9000240a:	687b      	ldr	r3, [r7, #4]
9000240c:	68db      	ldr	r3, [r3, #12]
9000240e:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90002410:	687b      	ldr	r3, [r7, #4]
90002412:	691b      	ldr	r3, [r3, #16]
90002414:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
90002416:	23ff      	movs	r3, #255	@ 0xff
90002418:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
9000241a:	2300      	movs	r3, #0
9000241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
9000241e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
90002422:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90002424:	2307      	movs	r3, #7
90002426:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90002428:	687b      	ldr	r3, [r7, #4]
9000242a:	695b      	ldr	r3, [r3, #20]
9000242c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
9000242e:	687b      	ldr	r3, [r7, #4]
90002430:	685a      	ldr	r2, [r3, #4]
90002432:	687b      	ldr	r3, [r7, #4]
90002434:	681b      	ldr	r3, [r3, #0]
90002436:	1ad3      	subs	r3, r2, r3
90002438:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
9000243a:	687b      	ldr	r3, [r7, #4]
9000243c:	68da      	ldr	r2, [r3, #12]
9000243e:	687b      	ldr	r3, [r7, #4]
90002440:	689b      	ldr	r3, [r3, #8]
90002442:	1ad3      	subs	r3, r2, r3
90002444:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
90002446:	2300      	movs	r3, #0
90002448:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
9000244c:	2300      	movs	r3, #0
9000244e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
90002452:	2300      	movs	r3, #0
90002454:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90002458:	f107 0314 	add.w	r3, r7, #20
9000245c:	68ba      	ldr	r2, [r7, #8]
9000245e:	4619      	mov	r1, r3
90002460:	68f8      	ldr	r0, [r7, #12]
90002462:	f002 fc03 	bl	90004c6c <HAL_LTDC_ConfigLayer>
90002466:	4603      	mov	r3, r0
}
90002468:	4618      	mov	r0, r3
9000246a:	3748      	adds	r7, #72	@ 0x48
9000246c:	46bd      	mov	sp, r7
9000246e:	bd80      	pop	{r7, pc}

90002470 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90002470:	b480      	push	{r7}
90002472:	b085      	sub	sp, #20
90002474:	af00      	add	r7, sp, #0
90002476:	6078      	str	r0, [r7, #4]
90002478:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000247a:	2300      	movs	r3, #0
9000247c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000247e:	687b      	ldr	r3, [r7, #4]
90002480:	2b00      	cmp	r3, #0
90002482:	d003      	beq.n	9000248c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002484:	f06f 0301 	mvn.w	r3, #1
90002488:	60fb      	str	r3, [r7, #12]
9000248a:	e007      	b.n	9000249c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
9000248c:	4a07      	ldr	r2, [pc, #28]	@ (900024ac <BSP_LCD_GetPixelFormat+0x3c>)
9000248e:	687b      	ldr	r3, [r7, #4]
90002490:	015b      	lsls	r3, r3, #5
90002492:	4413      	add	r3, r2
90002494:	330c      	adds	r3, #12
90002496:	681a      	ldr	r2, [r3, #0]
90002498:	683b      	ldr	r3, [r7, #0]
9000249a:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000249c:	68fb      	ldr	r3, [r7, #12]
}
9000249e:	4618      	mov	r0, r3
900024a0:	3714      	adds	r7, #20
900024a2:	46bd      	mov	sp, r7
900024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900024a8:	4770      	bx	lr
900024aa:	bf00      	nop
900024ac:	20000e64 	.word	0x20000e64

900024b0 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
900024b0:	b480      	push	{r7}
900024b2:	b085      	sub	sp, #20
900024b4:	af00      	add	r7, sp, #0
900024b6:	6078      	str	r0, [r7, #4]
900024b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900024ba:	2300      	movs	r3, #0
900024bc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900024be:	687b      	ldr	r3, [r7, #4]
900024c0:	2b00      	cmp	r3, #0
900024c2:	d003      	beq.n	900024cc <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900024c4:	f06f 0301 	mvn.w	r3, #1
900024c8:	60fb      	str	r3, [r7, #12]
900024ca:	e006      	b.n	900024da <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
900024cc:	4a06      	ldr	r2, [pc, #24]	@ (900024e8 <BSP_LCD_SetActiveLayer+0x38>)
900024ce:	687b      	ldr	r3, [r7, #4]
900024d0:	015b      	lsls	r3, r3, #5
900024d2:	4413      	add	r3, r2
900024d4:	3308      	adds	r3, #8
900024d6:	683a      	ldr	r2, [r7, #0]
900024d8:	601a      	str	r2, [r3, #0]
  }

  return ret;
900024da:	68fb      	ldr	r3, [r7, #12]
}
900024dc:	4618      	mov	r0, r3
900024de:	3714      	adds	r7, #20
900024e0:	46bd      	mov	sp, r7
900024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
900024e6:	4770      	bx	lr
900024e8:	20000e64 	.word	0x20000e64

900024ec <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
900024ec:	b480      	push	{r7}
900024ee:	b085      	sub	sp, #20
900024f0:	af00      	add	r7, sp, #0
900024f2:	6078      	str	r0, [r7, #4]
900024f4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900024f6:	2300      	movs	r3, #0
900024f8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900024fa:	687b      	ldr	r3, [r7, #4]
900024fc:	2b00      	cmp	r3, #0
900024fe:	d003      	beq.n	90002508 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002500:	f06f 0301 	mvn.w	r3, #1
90002504:	60fb      	str	r3, [r7, #12]
90002506:	e006      	b.n	90002516 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90002508:	4a06      	ldr	r2, [pc, #24]	@ (90002524 <BSP_LCD_GetXSize+0x38>)
9000250a:	687b      	ldr	r3, [r7, #4]
9000250c:	015b      	lsls	r3, r3, #5
9000250e:	4413      	add	r3, r2
90002510:	681a      	ldr	r2, [r3, #0]
90002512:	683b      	ldr	r3, [r7, #0]
90002514:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002516:	68fb      	ldr	r3, [r7, #12]
}
90002518:	4618      	mov	r0, r3
9000251a:	3714      	adds	r7, #20
9000251c:	46bd      	mov	sp, r7
9000251e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002522:	4770      	bx	lr
90002524:	20000e64 	.word	0x20000e64

90002528 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90002528:	b480      	push	{r7}
9000252a:	b085      	sub	sp, #20
9000252c:	af00      	add	r7, sp, #0
9000252e:	6078      	str	r0, [r7, #4]
90002530:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002532:	2300      	movs	r3, #0
90002534:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002536:	687b      	ldr	r3, [r7, #4]
90002538:	2b00      	cmp	r3, #0
9000253a:	d003      	beq.n	90002544 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000253c:	f06f 0301 	mvn.w	r3, #1
90002540:	60fb      	str	r3, [r7, #12]
90002542:	e007      	b.n	90002554 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
90002544:	4a07      	ldr	r2, [pc, #28]	@ (90002564 <BSP_LCD_GetYSize+0x3c>)
90002546:	687b      	ldr	r3, [r7, #4]
90002548:	015b      	lsls	r3, r3, #5
9000254a:	4413      	add	r3, r2
9000254c:	3304      	adds	r3, #4
9000254e:	681a      	ldr	r2, [r3, #0]
90002550:	683b      	ldr	r3, [r7, #0]
90002552:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002554:	68fb      	ldr	r3, [r7, #12]
}
90002556:	4618      	mov	r0, r3
90002558:	3714      	adds	r7, #20
9000255a:	46bd      	mov	sp, r7
9000255c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002560:	4770      	bx	lr
90002562:	bf00      	nop
90002564:	20000e64 	.word	0x20000e64

90002568 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
90002568:	b580      	push	{r7, lr}
9000256a:	b08e      	sub	sp, #56	@ 0x38
9000256c:	af02      	add	r7, sp, #8
9000256e:	60f8      	str	r0, [r7, #12]
90002570:	60b9      	str	r1, [r7, #8]
90002572:	607a      	str	r2, [r7, #4]
90002574:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002576:	2300      	movs	r3, #0
90002578:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
9000257a:	683b      	ldr	r3, [r7, #0]
9000257c:	330a      	adds	r3, #10
9000257e:	781b      	ldrb	r3, [r3, #0]
90002580:	461a      	mov	r2, r3
90002582:	683b      	ldr	r3, [r7, #0]
90002584:	330b      	adds	r3, #11
90002586:	781b      	ldrb	r3, [r3, #0]
90002588:	021b      	lsls	r3, r3, #8
9000258a:	441a      	add	r2, r3
9000258c:	683b      	ldr	r3, [r7, #0]
9000258e:	330c      	adds	r3, #12
90002590:	781b      	ldrb	r3, [r3, #0]
90002592:	041b      	lsls	r3, r3, #16
90002594:	441a      	add	r2, r3
90002596:	683b      	ldr	r3, [r7, #0]
90002598:	330d      	adds	r3, #13
9000259a:	781b      	ldrb	r3, [r3, #0]
9000259c:	061b      	lsls	r3, r3, #24
9000259e:	4413      	add	r3, r2
900025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
900025a2:	683b      	ldr	r3, [r7, #0]
900025a4:	3312      	adds	r3, #18
900025a6:	781b      	ldrb	r3, [r3, #0]
900025a8:	461a      	mov	r2, r3
900025aa:	683b      	ldr	r3, [r7, #0]
900025ac:	3313      	adds	r3, #19
900025ae:	781b      	ldrb	r3, [r3, #0]
900025b0:	021b      	lsls	r3, r3, #8
900025b2:	441a      	add	r2, r3
900025b4:	683b      	ldr	r3, [r7, #0]
900025b6:	3314      	adds	r3, #20
900025b8:	781b      	ldrb	r3, [r3, #0]
900025ba:	041b      	lsls	r3, r3, #16
900025bc:	441a      	add	r2, r3
900025be:	683b      	ldr	r3, [r7, #0]
900025c0:	3315      	adds	r3, #21
900025c2:	781b      	ldrb	r3, [r3, #0]
900025c4:	061b      	lsls	r3, r3, #24
900025c6:	4413      	add	r3, r2
900025c8:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
900025ca:	683b      	ldr	r3, [r7, #0]
900025cc:	3316      	adds	r3, #22
900025ce:	781b      	ldrb	r3, [r3, #0]
900025d0:	461a      	mov	r2, r3
900025d2:	683b      	ldr	r3, [r7, #0]
900025d4:	3317      	adds	r3, #23
900025d6:	781b      	ldrb	r3, [r3, #0]
900025d8:	021b      	lsls	r3, r3, #8
900025da:	441a      	add	r2, r3
900025dc:	683b      	ldr	r3, [r7, #0]
900025de:	3318      	adds	r3, #24
900025e0:	781b      	ldrb	r3, [r3, #0]
900025e2:	041b      	lsls	r3, r3, #16
900025e4:	441a      	add	r2, r3
900025e6:	683b      	ldr	r3, [r7, #0]
900025e8:	3319      	adds	r3, #25
900025ea:	781b      	ldrb	r3, [r3, #0]
900025ec:	061b      	lsls	r3, r3, #24
900025ee:	4413      	add	r3, r2
900025f0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
900025f2:	683b      	ldr	r3, [r7, #0]
900025f4:	331c      	adds	r3, #28
900025f6:	781b      	ldrb	r3, [r3, #0]
900025f8:	461a      	mov	r2, r3
900025fa:	683b      	ldr	r3, [r7, #0]
900025fc:	331d      	adds	r3, #29
900025fe:	781b      	ldrb	r3, [r3, #0]
90002600:	021b      	lsls	r3, r3, #8
90002602:	4413      	add	r3, r2
90002604:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
90002606:	4a37      	ldr	r2, [pc, #220]	@ (900026e4 <BSP_LCD_DrawBitmap+0x17c>)
90002608:	68fb      	ldr	r3, [r7, #12]
9000260a:	015b      	lsls	r3, r3, #5
9000260c:	4413      	add	r3, r2
9000260e:	3308      	adds	r3, #8
90002610:	681b      	ldr	r3, [r3, #0]
90002612:	4a35      	ldr	r2, [pc, #212]	@ (900026e8 <BSP_LCD_DrawBitmap+0x180>)
90002614:	2134      	movs	r1, #52	@ 0x34
90002616:	fb01 f303 	mul.w	r3, r1, r3
9000261a:	4413      	add	r3, r2
9000261c:	335c      	adds	r3, #92	@ 0x5c
9000261e:	681a      	ldr	r2, [r3, #0]
90002620:	4930      	ldr	r1, [pc, #192]	@ (900026e4 <BSP_LCD_DrawBitmap+0x17c>)
90002622:	68fb      	ldr	r3, [r7, #12]
90002624:	015b      	lsls	r3, r3, #5
90002626:	440b      	add	r3, r1
90002628:	681b      	ldr	r3, [r3, #0]
9000262a:	6879      	ldr	r1, [r7, #4]
9000262c:	fb03 f101 	mul.w	r1, r3, r1
90002630:	68bb      	ldr	r3, [r7, #8]
90002632:	440b      	add	r3, r1
90002634:	482b      	ldr	r0, [pc, #172]	@ (900026e4 <BSP_LCD_DrawBitmap+0x17c>)
90002636:	68f9      	ldr	r1, [r7, #12]
90002638:	0149      	lsls	r1, r1, #5
9000263a:	4401      	add	r1, r0
9000263c:	3110      	adds	r1, #16
9000263e:	6809      	ldr	r1, [r1, #0]
90002640:	fb01 f303 	mul.w	r3, r1, r3
90002644:	4413      	add	r3, r2
90002646:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90002648:	693b      	ldr	r3, [r7, #16]
9000264a:	3b20      	subs	r3, #32
9000264c:	2b07      	cmp	r3, #7
9000264e:	d802      	bhi.n	90002656 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90002650:	2300      	movs	r3, #0
90002652:	627b      	str	r3, [r7, #36]	@ 0x24
90002654:	e008      	b.n	90002668 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
90002656:	693b      	ldr	r3, [r7, #16]
90002658:	3b10      	subs	r3, #16
9000265a:	2b07      	cmp	r3, #7
9000265c:	d802      	bhi.n	90002664 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
9000265e:	2302      	movs	r3, #2
90002660:	627b      	str	r3, [r7, #36]	@ 0x24
90002662:	e001      	b.n	90002668 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
90002664:	2301      	movs	r3, #1
90002666:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002668:	697b      	ldr	r3, [r7, #20]
9000266a:	3b01      	subs	r3, #1
9000266c:	69ba      	ldr	r2, [r7, #24]
9000266e:	fb02 f303 	mul.w	r3, r2, r3
90002672:	693a      	ldr	r2, [r7, #16]
90002674:	08d2      	lsrs	r2, r2, #3
90002676:	fb03 f202 	mul.w	r2, r3, r2
9000267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000267c:	4413      	add	r3, r2
9000267e:	683a      	ldr	r2, [r7, #0]
90002680:	4413      	add	r3, r2
90002682:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002684:	2300      	movs	r3, #0
90002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002688:	e023      	b.n	900026d2 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
9000268a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000268e:	9300      	str	r3, [sp, #0]
90002690:	69bb      	ldr	r3, [r7, #24]
90002692:	6a39      	ldr	r1, [r7, #32]
90002694:	68f8      	ldr	r0, [r7, #12]
90002696:	f000 fa77 	bl	90002b88 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000269a:	4a12      	ldr	r2, [pc, #72]	@ (900026e4 <BSP_LCD_DrawBitmap+0x17c>)
9000269c:	68fb      	ldr	r3, [r7, #12]
9000269e:	015b      	lsls	r3, r3, #5
900026a0:	4413      	add	r3, r2
900026a2:	681b      	ldr	r3, [r3, #0]
900026a4:	490f      	ldr	r1, [pc, #60]	@ (900026e4 <BSP_LCD_DrawBitmap+0x17c>)
900026a6:	68fa      	ldr	r2, [r7, #12]
900026a8:	0152      	lsls	r2, r2, #5
900026aa:	440a      	add	r2, r1
900026ac:	3210      	adds	r2, #16
900026ae:	6812      	ldr	r2, [r2, #0]
900026b0:	fb02 f303 	mul.w	r3, r2, r3
900026b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900026b6:	4413      	add	r3, r2
900026b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
900026ba:	693b      	ldr	r3, [r7, #16]
900026bc:	08db      	lsrs	r3, r3, #3
900026be:	69ba      	ldr	r2, [r7, #24]
900026c0:	fb02 f303 	mul.w	r3, r2, r3
900026c4:	425b      	negs	r3, r3
900026c6:	6a3a      	ldr	r2, [r7, #32]
900026c8:	4413      	add	r3, r2
900026ca:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
900026cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900026ce:	3301      	adds	r3, #1
900026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
900026d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900026d4:	697b      	ldr	r3, [r7, #20]
900026d6:	429a      	cmp	r2, r3
900026d8:	d3d7      	bcc.n	9000268a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
900026da:	69fb      	ldr	r3, [r7, #28]
}
900026dc:	4618      	mov	r0, r3
900026de:	3730      	adds	r7, #48	@ 0x30
900026e0:	46bd      	mov	sp, r7
900026e2:	bd80      	pop	{r7, pc}
900026e4:	20000e64 	.word	0x20000e64
900026e8:	20000dbc 	.word	0x20000dbc

900026ec <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
900026ec:	b580      	push	{r7, lr}
900026ee:	b088      	sub	sp, #32
900026f0:	af00      	add	r7, sp, #0
900026f2:	60f8      	str	r0, [r7, #12]
900026f4:	60b9      	str	r1, [r7, #8]
900026f6:	607a      	str	r2, [r7, #4]
900026f8:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
900026fa:	683b      	ldr	r3, [r7, #0]
900026fc:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
900026fe:	2300      	movs	r3, #0
90002700:	61fb      	str	r3, [r7, #28]
90002702:	e032      	b.n	9000276a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002704:	2300      	movs	r3, #0
90002706:	617b      	str	r3, [r7, #20]
90002708:	e028      	b.n	9000275c <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
9000270a:	69bb      	ldr	r3, [r7, #24]
9000270c:	781b      	ldrb	r3, [r3, #0]
9000270e:	461a      	mov	r2, r3
90002710:	69bb      	ldr	r3, [r7, #24]
90002712:	3301      	adds	r3, #1
90002714:	781b      	ldrb	r3, [r3, #0]
90002716:	021b      	lsls	r3, r3, #8
90002718:	431a      	orrs	r2, r3
9000271a:	69bb      	ldr	r3, [r7, #24]
9000271c:	3302      	adds	r3, #2
9000271e:	781b      	ldrb	r3, [r3, #0]
90002720:	041b      	lsls	r3, r3, #16
90002722:	431a      	orrs	r2, r3
90002724:	69bb      	ldr	r3, [r7, #24]
90002726:	3303      	adds	r3, #3
90002728:	781b      	ldrb	r3, [r3, #0]
9000272a:	061b      	lsls	r3, r3, #24
9000272c:	4313      	orrs	r3, r2
9000272e:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90002730:	68ba      	ldr	r2, [r7, #8]
90002732:	697b      	ldr	r3, [r7, #20]
90002734:	18d1      	adds	r1, r2, r3
90002736:	687a      	ldr	r2, [r7, #4]
90002738:	69fb      	ldr	r3, [r7, #28]
9000273a:	441a      	add	r2, r3
9000273c:	693b      	ldr	r3, [r7, #16]
9000273e:	68f8      	ldr	r0, [r7, #12]
90002740:	f000 f95e 	bl	90002a00 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
90002744:	4a0d      	ldr	r2, [pc, #52]	@ (9000277c <BSP_LCD_FillRGBRect+0x90>)
90002746:	68fb      	ldr	r3, [r7, #12]
90002748:	015b      	lsls	r3, r3, #5
9000274a:	4413      	add	r3, r2
9000274c:	3310      	adds	r3, #16
9000274e:	681b      	ldr	r3, [r3, #0]
90002750:	69ba      	ldr	r2, [r7, #24]
90002752:	4413      	add	r3, r2
90002754:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
90002756:	697b      	ldr	r3, [r7, #20]
90002758:	3301      	adds	r3, #1
9000275a:	617b      	str	r3, [r7, #20]
9000275c:	697a      	ldr	r2, [r7, #20]
9000275e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002760:	429a      	cmp	r2, r3
90002762:	d3d2      	bcc.n	9000270a <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
90002764:	69fb      	ldr	r3, [r7, #28]
90002766:	3301      	adds	r3, #1
90002768:	61fb      	str	r3, [r7, #28]
9000276a:	69fa      	ldr	r2, [r7, #28]
9000276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000276e:	429a      	cmp	r2, r3
90002770:	d3c8      	bcc.n	90002704 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
90002772:	2300      	movs	r3, #0
}
90002774:	4618      	mov	r0, r3
90002776:	3720      	adds	r7, #32
90002778:	46bd      	mov	sp, r7
9000277a:	bd80      	pop	{r7, pc}
9000277c:	20000e64 	.word	0x20000e64

90002780 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002780:	b580      	push	{r7, lr}
90002782:	b088      	sub	sp, #32
90002784:	af02      	add	r7, sp, #8
90002786:	60f8      	str	r0, [r7, #12]
90002788:	60b9      	str	r1, [r7, #8]
9000278a:	607a      	str	r2, [r7, #4]
9000278c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000278e:	4a21      	ldr	r2, [pc, #132]	@ (90002814 <BSP_LCD_DrawHLine+0x94>)
90002790:	68fb      	ldr	r3, [r7, #12]
90002792:	015b      	lsls	r3, r3, #5
90002794:	4413      	add	r3, r2
90002796:	3308      	adds	r3, #8
90002798:	681b      	ldr	r3, [r3, #0]
9000279a:	4a1f      	ldr	r2, [pc, #124]	@ (90002818 <BSP_LCD_DrawHLine+0x98>)
9000279c:	2134      	movs	r1, #52	@ 0x34
9000279e:	fb01 f303 	mul.w	r3, r1, r3
900027a2:	4413      	add	r3, r2
900027a4:	335c      	adds	r3, #92	@ 0x5c
900027a6:	681a      	ldr	r2, [r3, #0]
900027a8:	491a      	ldr	r1, [pc, #104]	@ (90002814 <BSP_LCD_DrawHLine+0x94>)
900027aa:	68fb      	ldr	r3, [r7, #12]
900027ac:	015b      	lsls	r3, r3, #5
900027ae:	440b      	add	r3, r1
900027b0:	3310      	adds	r3, #16
900027b2:	681b      	ldr	r3, [r3, #0]
900027b4:	4817      	ldr	r0, [pc, #92]	@ (90002814 <BSP_LCD_DrawHLine+0x94>)
900027b6:	68f9      	ldr	r1, [r7, #12]
900027b8:	0149      	lsls	r1, r1, #5
900027ba:	4401      	add	r1, r0
900027bc:	6809      	ldr	r1, [r1, #0]
900027be:	6878      	ldr	r0, [r7, #4]
900027c0:	fb01 f000 	mul.w	r0, r1, r0
900027c4:	68b9      	ldr	r1, [r7, #8]
900027c6:	4401      	add	r1, r0
900027c8:	fb01 f303 	mul.w	r3, r1, r3
900027cc:	4413      	add	r3, r2
900027ce:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
900027d0:	68ba      	ldr	r2, [r7, #8]
900027d2:	683b      	ldr	r3, [r7, #0]
900027d4:	441a      	add	r2, r3
900027d6:	490f      	ldr	r1, [pc, #60]	@ (90002814 <BSP_LCD_DrawHLine+0x94>)
900027d8:	68fb      	ldr	r3, [r7, #12]
900027da:	015b      	lsls	r3, r3, #5
900027dc:	440b      	add	r3, r1
900027de:	681b      	ldr	r3, [r3, #0]
900027e0:	429a      	cmp	r2, r3
900027e2:	d907      	bls.n	900027f4 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
900027e4:	4a0b      	ldr	r2, [pc, #44]	@ (90002814 <BSP_LCD_DrawHLine+0x94>)
900027e6:	68fb      	ldr	r3, [r7, #12]
900027e8:	015b      	lsls	r3, r3, #5
900027ea:	4413      	add	r3, r2
900027ec:	681a      	ldr	r2, [r3, #0]
900027ee:	68bb      	ldr	r3, [r7, #8]
900027f0:	1ad3      	subs	r3, r2, r3
900027f2:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
900027f4:	6979      	ldr	r1, [r7, #20]
900027f6:	6a3b      	ldr	r3, [r7, #32]
900027f8:	9301      	str	r3, [sp, #4]
900027fa:	2300      	movs	r3, #0
900027fc:	9300      	str	r3, [sp, #0]
900027fe:	2301      	movs	r3, #1
90002800:	683a      	ldr	r2, [r7, #0]
90002802:	68f8      	ldr	r0, [r7, #12]
90002804:	f000 f956 	bl	90002ab4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002808:	2300      	movs	r3, #0
}
9000280a:	4618      	mov	r0, r3
9000280c:	3718      	adds	r7, #24
9000280e:	46bd      	mov	sp, r7
90002810:	bd80      	pop	{r7, pc}
90002812:	bf00      	nop
90002814:	20000e64 	.word	0x20000e64
90002818:	20000dbc 	.word	0x20000dbc

9000281c <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
9000281c:	b580      	push	{r7, lr}
9000281e:	b088      	sub	sp, #32
90002820:	af02      	add	r7, sp, #8
90002822:	60f8      	str	r0, [r7, #12]
90002824:	60b9      	str	r1, [r7, #8]
90002826:	607a      	str	r2, [r7, #4]
90002828:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000282a:	4a24      	ldr	r2, [pc, #144]	@ (900028bc <BSP_LCD_DrawVLine+0xa0>)
9000282c:	68fb      	ldr	r3, [r7, #12]
9000282e:	015b      	lsls	r3, r3, #5
90002830:	4413      	add	r3, r2
90002832:	3308      	adds	r3, #8
90002834:	681b      	ldr	r3, [r3, #0]
90002836:	4a22      	ldr	r2, [pc, #136]	@ (900028c0 <BSP_LCD_DrawVLine+0xa4>)
90002838:	2134      	movs	r1, #52	@ 0x34
9000283a:	fb01 f303 	mul.w	r3, r1, r3
9000283e:	4413      	add	r3, r2
90002840:	335c      	adds	r3, #92	@ 0x5c
90002842:	681a      	ldr	r2, [r3, #0]
90002844:	491d      	ldr	r1, [pc, #116]	@ (900028bc <BSP_LCD_DrawVLine+0xa0>)
90002846:	68fb      	ldr	r3, [r7, #12]
90002848:	015b      	lsls	r3, r3, #5
9000284a:	440b      	add	r3, r1
9000284c:	3310      	adds	r3, #16
9000284e:	681b      	ldr	r3, [r3, #0]
90002850:	481a      	ldr	r0, [pc, #104]	@ (900028bc <BSP_LCD_DrawVLine+0xa0>)
90002852:	68f9      	ldr	r1, [r7, #12]
90002854:	0149      	lsls	r1, r1, #5
90002856:	4401      	add	r1, r0
90002858:	6809      	ldr	r1, [r1, #0]
9000285a:	6878      	ldr	r0, [r7, #4]
9000285c:	fb01 f000 	mul.w	r0, r1, r0
90002860:	68b9      	ldr	r1, [r7, #8]
90002862:	4401      	add	r1, r0
90002864:	fb01 f303 	mul.w	r3, r1, r3
90002868:	4413      	add	r3, r2
9000286a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
9000286c:	687a      	ldr	r2, [r7, #4]
9000286e:	683b      	ldr	r3, [r7, #0]
90002870:	441a      	add	r2, r3
90002872:	4912      	ldr	r1, [pc, #72]	@ (900028bc <BSP_LCD_DrawVLine+0xa0>)
90002874:	68fb      	ldr	r3, [r7, #12]
90002876:	015b      	lsls	r3, r3, #5
90002878:	440b      	add	r3, r1
9000287a:	3304      	adds	r3, #4
9000287c:	681b      	ldr	r3, [r3, #0]
9000287e:	429a      	cmp	r2, r3
90002880:	d908      	bls.n	90002894 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90002882:	4a0e      	ldr	r2, [pc, #56]	@ (900028bc <BSP_LCD_DrawVLine+0xa0>)
90002884:	68fb      	ldr	r3, [r7, #12]
90002886:	015b      	lsls	r3, r3, #5
90002888:	4413      	add	r3, r2
9000288a:	3304      	adds	r3, #4
9000288c:	681a      	ldr	r2, [r3, #0]
9000288e:	687b      	ldr	r3, [r7, #4]
90002890:	1ad3      	subs	r3, r2, r3
90002892:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002894:	6979      	ldr	r1, [r7, #20]
90002896:	4a09      	ldr	r2, [pc, #36]	@ (900028bc <BSP_LCD_DrawVLine+0xa0>)
90002898:	68fb      	ldr	r3, [r7, #12]
9000289a:	015b      	lsls	r3, r3, #5
9000289c:	4413      	add	r3, r2
9000289e:	681b      	ldr	r3, [r3, #0]
900028a0:	3b01      	subs	r3, #1
900028a2:	6a3a      	ldr	r2, [r7, #32]
900028a4:	9201      	str	r2, [sp, #4]
900028a6:	9300      	str	r3, [sp, #0]
900028a8:	683b      	ldr	r3, [r7, #0]
900028aa:	2201      	movs	r2, #1
900028ac:	68f8      	ldr	r0, [r7, #12]
900028ae:	f000 f901 	bl	90002ab4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900028b2:	2300      	movs	r3, #0
}
900028b4:	4618      	mov	r0, r3
900028b6:	3718      	adds	r7, #24
900028b8:	46bd      	mov	sp, r7
900028ba:	bd80      	pop	{r7, pc}
900028bc:	20000e64 	.word	0x20000e64
900028c0:	20000dbc 	.word	0x20000dbc

900028c4 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
900028c4:	b580      	push	{r7, lr}
900028c6:	b088      	sub	sp, #32
900028c8:	af02      	add	r7, sp, #8
900028ca:	60f8      	str	r0, [r7, #12]
900028cc:	60b9      	str	r1, [r7, #8]
900028ce:	607a      	str	r2, [r7, #4]
900028d0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900028d2:	4a1b      	ldr	r2, [pc, #108]	@ (90002940 <BSP_LCD_FillRect+0x7c>)
900028d4:	68fb      	ldr	r3, [r7, #12]
900028d6:	015b      	lsls	r3, r3, #5
900028d8:	4413      	add	r3, r2
900028da:	3308      	adds	r3, #8
900028dc:	681b      	ldr	r3, [r3, #0]
900028de:	4a19      	ldr	r2, [pc, #100]	@ (90002944 <BSP_LCD_FillRect+0x80>)
900028e0:	2134      	movs	r1, #52	@ 0x34
900028e2:	fb01 f303 	mul.w	r3, r1, r3
900028e6:	4413      	add	r3, r2
900028e8:	335c      	adds	r3, #92	@ 0x5c
900028ea:	681a      	ldr	r2, [r3, #0]
900028ec:	4914      	ldr	r1, [pc, #80]	@ (90002940 <BSP_LCD_FillRect+0x7c>)
900028ee:	68fb      	ldr	r3, [r7, #12]
900028f0:	015b      	lsls	r3, r3, #5
900028f2:	440b      	add	r3, r1
900028f4:	3310      	adds	r3, #16
900028f6:	681b      	ldr	r3, [r3, #0]
900028f8:	4811      	ldr	r0, [pc, #68]	@ (90002940 <BSP_LCD_FillRect+0x7c>)
900028fa:	68f9      	ldr	r1, [r7, #12]
900028fc:	0149      	lsls	r1, r1, #5
900028fe:	4401      	add	r1, r0
90002900:	6809      	ldr	r1, [r1, #0]
90002902:	6878      	ldr	r0, [r7, #4]
90002904:	fb01 f000 	mul.w	r0, r1, r0
90002908:	68b9      	ldr	r1, [r7, #8]
9000290a:	4401      	add	r1, r0
9000290c:	fb01 f303 	mul.w	r3, r1, r3
90002910:	4413      	add	r3, r2
90002912:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
90002914:	6979      	ldr	r1, [r7, #20]
90002916:	4a0a      	ldr	r2, [pc, #40]	@ (90002940 <BSP_LCD_FillRect+0x7c>)
90002918:	68fb      	ldr	r3, [r7, #12]
9000291a:	015b      	lsls	r3, r3, #5
9000291c:	4413      	add	r3, r2
9000291e:	681a      	ldr	r2, [r3, #0]
90002920:	683b      	ldr	r3, [r7, #0]
90002922:	1ad3      	subs	r3, r2, r3
90002924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90002926:	9201      	str	r2, [sp, #4]
90002928:	9300      	str	r3, [sp, #0]
9000292a:	6a3b      	ldr	r3, [r7, #32]
9000292c:	683a      	ldr	r2, [r7, #0]
9000292e:	68f8      	ldr	r0, [r7, #12]
90002930:	f000 f8c0 	bl	90002ab4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002934:	2300      	movs	r3, #0
}
90002936:	4618      	mov	r0, r3
90002938:	3718      	adds	r7, #24
9000293a:	46bd      	mov	sp, r7
9000293c:	bd80      	pop	{r7, pc}
9000293e:	bf00      	nop
90002940:	20000e64 	.word	0x20000e64
90002944:	20000dbc 	.word	0x20000dbc

90002948 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002948:	b480      	push	{r7}
9000294a:	b085      	sub	sp, #20
9000294c:	af00      	add	r7, sp, #0
9000294e:	60f8      	str	r0, [r7, #12]
90002950:	60b9      	str	r1, [r7, #8]
90002952:	607a      	str	r2, [r7, #4]
90002954:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002956:	4a28      	ldr	r2, [pc, #160]	@ (900029f8 <BSP_LCD_ReadPixel+0xb0>)
90002958:	68fb      	ldr	r3, [r7, #12]
9000295a:	015b      	lsls	r3, r3, #5
9000295c:	4413      	add	r3, r2
9000295e:	3308      	adds	r3, #8
90002960:	681b      	ldr	r3, [r3, #0]
90002962:	4a26      	ldr	r2, [pc, #152]	@ (900029fc <BSP_LCD_ReadPixel+0xb4>)
90002964:	2134      	movs	r1, #52	@ 0x34
90002966:	fb01 f303 	mul.w	r3, r1, r3
9000296a:	4413      	add	r3, r2
9000296c:	3348      	adds	r3, #72	@ 0x48
9000296e:	681b      	ldr	r3, [r3, #0]
90002970:	2b00      	cmp	r3, #0
90002972:	d11c      	bne.n	900029ae <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002974:	4a20      	ldr	r2, [pc, #128]	@ (900029f8 <BSP_LCD_ReadPixel+0xb0>)
90002976:	68fb      	ldr	r3, [r7, #12]
90002978:	015b      	lsls	r3, r3, #5
9000297a:	4413      	add	r3, r2
9000297c:	3308      	adds	r3, #8
9000297e:	681b      	ldr	r3, [r3, #0]
90002980:	4a1e      	ldr	r2, [pc, #120]	@ (900029fc <BSP_LCD_ReadPixel+0xb4>)
90002982:	2134      	movs	r1, #52	@ 0x34
90002984:	fb01 f303 	mul.w	r3, r1, r3
90002988:	4413      	add	r3, r2
9000298a:	335c      	adds	r3, #92	@ 0x5c
9000298c:	681a      	ldr	r2, [r3, #0]
9000298e:	491a      	ldr	r1, [pc, #104]	@ (900029f8 <BSP_LCD_ReadPixel+0xb0>)
90002990:	68fb      	ldr	r3, [r7, #12]
90002992:	015b      	lsls	r3, r3, #5
90002994:	440b      	add	r3, r1
90002996:	681b      	ldr	r3, [r3, #0]
90002998:	6879      	ldr	r1, [r7, #4]
9000299a:	fb03 f101 	mul.w	r1, r3, r1
9000299e:	68bb      	ldr	r3, [r7, #8]
900029a0:	440b      	add	r3, r1
900029a2:	009b      	lsls	r3, r3, #2
900029a4:	4413      	add	r3, r2
900029a6:	681a      	ldr	r2, [r3, #0]
900029a8:	683b      	ldr	r3, [r7, #0]
900029aa:	601a      	str	r2, [r3, #0]
900029ac:	e01d      	b.n	900029ea <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900029ae:	4a12      	ldr	r2, [pc, #72]	@ (900029f8 <BSP_LCD_ReadPixel+0xb0>)
900029b0:	68fb      	ldr	r3, [r7, #12]
900029b2:	015b      	lsls	r3, r3, #5
900029b4:	4413      	add	r3, r2
900029b6:	3308      	adds	r3, #8
900029b8:	681b      	ldr	r3, [r3, #0]
900029ba:	4a10      	ldr	r2, [pc, #64]	@ (900029fc <BSP_LCD_ReadPixel+0xb4>)
900029bc:	2134      	movs	r1, #52	@ 0x34
900029be:	fb01 f303 	mul.w	r3, r1, r3
900029c2:	4413      	add	r3, r2
900029c4:	335c      	adds	r3, #92	@ 0x5c
900029c6:	681a      	ldr	r2, [r3, #0]
900029c8:	490b      	ldr	r1, [pc, #44]	@ (900029f8 <BSP_LCD_ReadPixel+0xb0>)
900029ca:	68fb      	ldr	r3, [r7, #12]
900029cc:	015b      	lsls	r3, r3, #5
900029ce:	440b      	add	r3, r1
900029d0:	681b      	ldr	r3, [r3, #0]
900029d2:	6879      	ldr	r1, [r7, #4]
900029d4:	fb03 f101 	mul.w	r1, r3, r1
900029d8:	68bb      	ldr	r3, [r7, #8]
900029da:	440b      	add	r3, r1
900029dc:	005b      	lsls	r3, r3, #1
900029de:	4413      	add	r3, r2
900029e0:	881b      	ldrh	r3, [r3, #0]
900029e2:	b29b      	uxth	r3, r3
900029e4:	461a      	mov	r2, r3
900029e6:	683b      	ldr	r3, [r7, #0]
900029e8:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
900029ea:	2300      	movs	r3, #0
}
900029ec:	4618      	mov	r0, r3
900029ee:	3714      	adds	r7, #20
900029f0:	46bd      	mov	sp, r7
900029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900029f6:	4770      	bx	lr
900029f8:	20000e64 	.word	0x20000e64
900029fc:	20000dbc 	.word	0x20000dbc

90002a00 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002a00:	b480      	push	{r7}
90002a02:	b085      	sub	sp, #20
90002a04:	af00      	add	r7, sp, #0
90002a06:	60f8      	str	r0, [r7, #12]
90002a08:	60b9      	str	r1, [r7, #8]
90002a0a:	607a      	str	r2, [r7, #4]
90002a0c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002a0e:	4a27      	ldr	r2, [pc, #156]	@ (90002aac <BSP_LCD_WritePixel+0xac>)
90002a10:	68fb      	ldr	r3, [r7, #12]
90002a12:	015b      	lsls	r3, r3, #5
90002a14:	4413      	add	r3, r2
90002a16:	3308      	adds	r3, #8
90002a18:	681b      	ldr	r3, [r3, #0]
90002a1a:	4a25      	ldr	r2, [pc, #148]	@ (90002ab0 <BSP_LCD_WritePixel+0xb0>)
90002a1c:	2134      	movs	r1, #52	@ 0x34
90002a1e:	fb01 f303 	mul.w	r3, r1, r3
90002a22:	4413      	add	r3, r2
90002a24:	3348      	adds	r3, #72	@ 0x48
90002a26:	681b      	ldr	r3, [r3, #0]
90002a28:	2b00      	cmp	r3, #0
90002a2a:	d11c      	bne.n	90002a66 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90002a2c:	4a1f      	ldr	r2, [pc, #124]	@ (90002aac <BSP_LCD_WritePixel+0xac>)
90002a2e:	68fb      	ldr	r3, [r7, #12]
90002a30:	015b      	lsls	r3, r3, #5
90002a32:	4413      	add	r3, r2
90002a34:	3308      	adds	r3, #8
90002a36:	681b      	ldr	r3, [r3, #0]
90002a38:	4a1d      	ldr	r2, [pc, #116]	@ (90002ab0 <BSP_LCD_WritePixel+0xb0>)
90002a3a:	2134      	movs	r1, #52	@ 0x34
90002a3c:	fb01 f303 	mul.w	r3, r1, r3
90002a40:	4413      	add	r3, r2
90002a42:	335c      	adds	r3, #92	@ 0x5c
90002a44:	681a      	ldr	r2, [r3, #0]
90002a46:	4919      	ldr	r1, [pc, #100]	@ (90002aac <BSP_LCD_WritePixel+0xac>)
90002a48:	68fb      	ldr	r3, [r7, #12]
90002a4a:	015b      	lsls	r3, r3, #5
90002a4c:	440b      	add	r3, r1
90002a4e:	681b      	ldr	r3, [r3, #0]
90002a50:	6879      	ldr	r1, [r7, #4]
90002a52:	fb03 f101 	mul.w	r1, r3, r1
90002a56:	68bb      	ldr	r3, [r7, #8]
90002a58:	440b      	add	r3, r1
90002a5a:	009b      	lsls	r3, r3, #2
90002a5c:	4413      	add	r3, r2
90002a5e:	461a      	mov	r2, r3
90002a60:	683b      	ldr	r3, [r7, #0]
90002a62:	6013      	str	r3, [r2, #0]
90002a64:	e01b      	b.n	90002a9e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
90002a66:	4a11      	ldr	r2, [pc, #68]	@ (90002aac <BSP_LCD_WritePixel+0xac>)
90002a68:	68fb      	ldr	r3, [r7, #12]
90002a6a:	015b      	lsls	r3, r3, #5
90002a6c:	4413      	add	r3, r2
90002a6e:	3308      	adds	r3, #8
90002a70:	681b      	ldr	r3, [r3, #0]
90002a72:	4a0f      	ldr	r2, [pc, #60]	@ (90002ab0 <BSP_LCD_WritePixel+0xb0>)
90002a74:	2134      	movs	r1, #52	@ 0x34
90002a76:	fb01 f303 	mul.w	r3, r1, r3
90002a7a:	4413      	add	r3, r2
90002a7c:	335c      	adds	r3, #92	@ 0x5c
90002a7e:	681a      	ldr	r2, [r3, #0]
90002a80:	490a      	ldr	r1, [pc, #40]	@ (90002aac <BSP_LCD_WritePixel+0xac>)
90002a82:	68fb      	ldr	r3, [r7, #12]
90002a84:	015b      	lsls	r3, r3, #5
90002a86:	440b      	add	r3, r1
90002a88:	681b      	ldr	r3, [r3, #0]
90002a8a:	6879      	ldr	r1, [r7, #4]
90002a8c:	fb03 f101 	mul.w	r1, r3, r1
90002a90:	68bb      	ldr	r3, [r7, #8]
90002a92:	440b      	add	r3, r1
90002a94:	005b      	lsls	r3, r3, #1
90002a96:	4413      	add	r3, r2
90002a98:	683a      	ldr	r2, [r7, #0]
90002a9a:	b292      	uxth	r2, r2
90002a9c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002a9e:	2300      	movs	r3, #0
}
90002aa0:	4618      	mov	r0, r3
90002aa2:	3714      	adds	r7, #20
90002aa4:	46bd      	mov	sp, r7
90002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
90002aaa:	4770      	bx	lr
90002aac:	20000e64 	.word	0x20000e64
90002ab0:	20000dbc 	.word	0x20000dbc

90002ab4 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002ab4:	b580      	push	{r7, lr}
90002ab6:	b088      	sub	sp, #32
90002ab8:	af02      	add	r7, sp, #8
90002aba:	60f8      	str	r0, [r7, #12]
90002abc:	60b9      	str	r1, [r7, #8]
90002abe:	607a      	str	r2, [r7, #4]
90002ac0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002ac4:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90002ac6:	4a2d      	ldr	r2, [pc, #180]	@ (90002b7c <LL_FillBuffer+0xc8>)
90002ac8:	68fb      	ldr	r3, [r7, #12]
90002aca:	015b      	lsls	r3, r3, #5
90002acc:	4413      	add	r3, r2
90002ace:	330c      	adds	r3, #12
90002ad0:	681b      	ldr	r3, [r3, #0]
90002ad2:	2b02      	cmp	r3, #2
90002ad4:	d129      	bne.n	90002b2a <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002ad6:	2302      	movs	r3, #2
90002ad8:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
90002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002adc:	0adb      	lsrs	r3, r3, #11
90002ade:	f003 021f 	and.w	r2, r3, #31
90002ae2:	4613      	mov	r3, r2
90002ae4:	011b      	lsls	r3, r3, #4
90002ae6:	4413      	add	r3, r2
90002ae8:	015a      	lsls	r2, r3, #5
90002aea:	1ad3      	subs	r3, r2, r3
90002aec:	3317      	adds	r3, #23
90002aee:	099b      	lsrs	r3, r3, #6
90002af0:	0419      	lsls	r1, r3, #16
90002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002af4:	095b      	lsrs	r3, r3, #5
90002af6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90002afa:	4613      	mov	r3, r2
90002afc:	01db      	lsls	r3, r3, #7
90002afe:	4413      	add	r3, r2
90002b00:	005b      	lsls	r3, r3, #1
90002b02:	4413      	add	r3, r2
90002b04:	3321      	adds	r3, #33	@ 0x21
90002b06:	099b      	lsrs	r3, r3, #6
90002b08:	021b      	lsls	r3, r3, #8
90002b0a:	4319      	orrs	r1, r3
90002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002b0e:	f003 021f 	and.w	r2, r3, #31
90002b12:	4613      	mov	r3, r2
90002b14:	011b      	lsls	r3, r3, #4
90002b16:	4413      	add	r3, r2
90002b18:	015a      	lsls	r2, r3, #5
90002b1a:	1ad3      	subs	r3, r2, r3
90002b1c:	3317      	adds	r3, #23
90002b1e:	099b      	lsrs	r3, r3, #6
90002b20:	430b      	orrs	r3, r1
90002b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
90002b26:	613b      	str	r3, [r7, #16]
    break;
90002b28:	e002      	b.n	90002b30 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002b2a:	2300      	movs	r3, #0
90002b2c:	617b      	str	r3, [r7, #20]
    break;
90002b2e:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002b30:	4b13      	ldr	r3, [pc, #76]	@ (90002b80 <LL_FillBuffer+0xcc>)
90002b32:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
90002b36:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002b38:	4a11      	ldr	r2, [pc, #68]	@ (90002b80 <LL_FillBuffer+0xcc>)
90002b3a:	697b      	ldr	r3, [r7, #20]
90002b3c:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90002b3e:	4a10      	ldr	r2, [pc, #64]	@ (90002b80 <LL_FillBuffer+0xcc>)
90002b40:	6a3b      	ldr	r3, [r7, #32]
90002b42:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
90002b44:	4b0e      	ldr	r3, [pc, #56]	@ (90002b80 <LL_FillBuffer+0xcc>)
90002b46:	4a0f      	ldr	r2, [pc, #60]	@ (90002b84 <LL_FillBuffer+0xd0>)
90002b48:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002b4a:	480d      	ldr	r0, [pc, #52]	@ (90002b80 <LL_FillBuffer+0xcc>)
90002b4c:	f000 fe50 	bl	900037f0 <HAL_DMA2D_Init>
90002b50:	4603      	mov	r3, r0
90002b52:	2b00      	cmp	r3, #0
90002b54:	d10e      	bne.n	90002b74 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90002b56:	68ba      	ldr	r2, [r7, #8]
90002b58:	683b      	ldr	r3, [r7, #0]
90002b5a:	9300      	str	r3, [sp, #0]
90002b5c:	687b      	ldr	r3, [r7, #4]
90002b5e:	6939      	ldr	r1, [r7, #16]
90002b60:	4807      	ldr	r0, [pc, #28]	@ (90002b80 <LL_FillBuffer+0xcc>)
90002b62:	f000 feb3 	bl	900038cc <HAL_DMA2D_Start>
90002b66:	4603      	mov	r3, r0
90002b68:	2b00      	cmp	r3, #0
90002b6a:	d103      	bne.n	90002b74 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002b6c:	2132      	movs	r1, #50	@ 0x32
90002b6e:	4804      	ldr	r0, [pc, #16]	@ (90002b80 <LL_FillBuffer+0xcc>)
90002b70:	f000 fed7 	bl	90003922 <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002b74:	bf00      	nop
90002b76:	3718      	adds	r7, #24
90002b78:	46bd      	mov	sp, r7
90002b7a:	bd80      	pop	{r7, pc}
90002b7c:	20000e64 	.word	0x20000e64
90002b80:	20000d54 	.word	0x20000d54
90002b84:	52001000 	.word	0x52001000

90002b88 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002b88:	b580      	push	{r7, lr}
90002b8a:	b088      	sub	sp, #32
90002b8c:	af02      	add	r7, sp, #8
90002b8e:	60f8      	str	r0, [r7, #12]
90002b90:	60b9      	str	r1, [r7, #8]
90002b92:	607a      	str	r2, [r7, #4]
90002b94:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002b96:	4a23      	ldr	r2, [pc, #140]	@ (90002c24 <LL_ConvertLineToRGB+0x9c>)
90002b98:	68fb      	ldr	r3, [r7, #12]
90002b9a:	015b      	lsls	r3, r3, #5
90002b9c:	4413      	add	r3, r2
90002b9e:	330c      	adds	r3, #12
90002ba0:	681b      	ldr	r3, [r3, #0]
90002ba2:	2b02      	cmp	r3, #2
90002ba4:	d102      	bne.n	90002bac <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002ba6:	2302      	movs	r3, #2
90002ba8:	617b      	str	r3, [r7, #20]
    break;
90002baa:	e002      	b.n	90002bb2 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002bac:	2300      	movs	r3, #0
90002bae:	617b      	str	r3, [r7, #20]
    break;
90002bb0:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002bb2:	4b1d      	ldr	r3, [pc, #116]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002bb4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002bb8:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002bba:	4a1b      	ldr	r2, [pc, #108]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002bbc:	697b      	ldr	r3, [r7, #20]
90002bbe:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002bc0:	4b19      	ldr	r3, [pc, #100]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002bc2:	2200      	movs	r2, #0
90002bc4:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90002bc6:	4b18      	ldr	r3, [pc, #96]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002bc8:	2200      	movs	r2, #0
90002bca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002bcc:	4b16      	ldr	r3, [pc, #88]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002bce:	22ff      	movs	r2, #255	@ 0xff
90002bd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002bd2:	4a15      	ldr	r2, [pc, #84]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002bd4:	6a3b      	ldr	r3, [r7, #32]
90002bd6:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002bd8:	4b13      	ldr	r3, [pc, #76]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002bda:	2200      	movs	r2, #0
90002bdc:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002bde:	4b12      	ldr	r3, [pc, #72]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002be0:	4a12      	ldr	r2, [pc, #72]	@ (90002c2c <LL_ConvertLineToRGB+0xa4>)
90002be2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002be4:	4810      	ldr	r0, [pc, #64]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002be6:	f000 fe03 	bl	900037f0 <HAL_DMA2D_Init>
90002bea:	4603      	mov	r3, r0
90002bec:	2b00      	cmp	r3, #0
90002bee:	d115      	bne.n	90002c1c <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002bf0:	2101      	movs	r1, #1
90002bf2:	480d      	ldr	r0, [pc, #52]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002bf4:	f000 ff7e 	bl	90003af4 <HAL_DMA2D_ConfigLayer>
90002bf8:	4603      	mov	r3, r0
90002bfa:	2b00      	cmp	r3, #0
90002bfc:	d10e      	bne.n	90002c1c <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002bfe:	68b9      	ldr	r1, [r7, #8]
90002c00:	687a      	ldr	r2, [r7, #4]
90002c02:	2301      	movs	r3, #1
90002c04:	9300      	str	r3, [sp, #0]
90002c06:	683b      	ldr	r3, [r7, #0]
90002c08:	4807      	ldr	r0, [pc, #28]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002c0a:	f000 fe5f 	bl	900038cc <HAL_DMA2D_Start>
90002c0e:	4603      	mov	r3, r0
90002c10:	2b00      	cmp	r3, #0
90002c12:	d103      	bne.n	90002c1c <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002c14:	2132      	movs	r1, #50	@ 0x32
90002c16:	4804      	ldr	r0, [pc, #16]	@ (90002c28 <LL_ConvertLineToRGB+0xa0>)
90002c18:	f000 fe83 	bl	90003922 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002c1c:	bf00      	nop
90002c1e:	3718      	adds	r7, #24
90002c20:	46bd      	mov	sp, r7
90002c22:	bd80      	pop	{r7, pc}
90002c24:	20000e64 	.word	0x20000e64
90002c28:	20000d54 	.word	0x20000d54
90002c2c:	52001000 	.word	0x52001000

90002c30 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002c30:	b580      	push	{r7, lr}
90002c32:	b08e      	sub	sp, #56	@ 0x38
90002c34:	af00      	add	r7, sp, #0
90002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002c38:	687b      	ldr	r3, [r7, #4]
90002c3a:	681b      	ldr	r3, [r3, #0]
90002c3c:	4a5b      	ldr	r2, [pc, #364]	@ (90002dac <LTDC_MspInit+0x17c>)
90002c3e:	4293      	cmp	r3, r2
90002c40:	f040 80b0 	bne.w	90002da4 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002c44:	4b5a      	ldr	r3, [pc, #360]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002c4a:	4a59      	ldr	r2, [pc, #356]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c4c:	f043 0308 	orr.w	r3, r3, #8
90002c50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002c54:	4b56      	ldr	r3, [pc, #344]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002c5a:	f003 0308 	and.w	r3, r3, #8
90002c5e:	623b      	str	r3, [r7, #32]
90002c60:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002c62:	4b53      	ldr	r3, [pc, #332]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c68:	4a51      	ldr	r2, [pc, #324]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002c72:	4b4f      	ldr	r3, [pc, #316]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002c7c:	61fb      	str	r3, [r7, #28]
90002c7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002c80:	4b4b      	ldr	r3, [pc, #300]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c86:	4a4a      	ldr	r2, [pc, #296]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002c90:	4b47      	ldr	r3, [pc, #284]	@ (90002db0 <LTDC_MspInit+0x180>)
90002c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002c9a:	61bb      	str	r3, [r7, #24]
90002c9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002c9e:	4b44      	ldr	r3, [pc, #272]	@ (90002db0 <LTDC_MspInit+0x180>)
90002ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ca4:	4a42      	ldr	r2, [pc, #264]	@ (90002db0 <LTDC_MspInit+0x180>)
90002ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002caa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002cae:	4b40      	ldr	r3, [pc, #256]	@ (90002db0 <LTDC_MspInit+0x180>)
90002cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002cb8:	617b      	str	r3, [r7, #20]
90002cba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002cbc:	4b3c      	ldr	r3, [pc, #240]	@ (90002db0 <LTDC_MspInit+0x180>)
90002cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cc2:	4a3b      	ldr	r2, [pc, #236]	@ (90002db0 <LTDC_MspInit+0x180>)
90002cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ccc:	4b38      	ldr	r3, [pc, #224]	@ (90002db0 <LTDC_MspInit+0x180>)
90002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002cd6:	613b      	str	r3, [r7, #16]
90002cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002cda:	4b35      	ldr	r3, [pc, #212]	@ (90002db0 <LTDC_MspInit+0x180>)
90002cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ce0:	4a33      	ldr	r2, [pc, #204]	@ (90002db0 <LTDC_MspInit+0x180>)
90002ce2:	f043 0308 	orr.w	r3, r3, #8
90002ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002cea:	4b31      	ldr	r3, [pc, #196]	@ (90002db0 <LTDC_MspInit+0x180>)
90002cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cf0:	f003 0308 	and.w	r3, r3, #8
90002cf4:	60fb      	str	r3, [r7, #12]
90002cf6:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002cf8:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002cfe:	2302      	movs	r3, #2
90002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002d02:	2300      	movs	r3, #0
90002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002d06:	2302      	movs	r3, #2
90002d08:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002d0a:	230e      	movs	r3, #14
90002d0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002d12:	4619      	mov	r1, r3
90002d14:	4827      	ldr	r0, [pc, #156]	@ (90002db4 <LTDC_MspInit+0x184>)
90002d16:	f001 f841 	bl	90003d9c <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002d1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002d20:	230e      	movs	r3, #14
90002d22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002d28:	4619      	mov	r1, r3
90002d2a:	4823      	ldr	r0, [pc, #140]	@ (90002db8 <LTDC_MspInit+0x188>)
90002d2c:	f001 f836 	bl	90003d9c <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002d30:	23ff      	movs	r3, #255	@ 0xff
90002d32:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002d34:	230e      	movs	r3, #14
90002d36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002d3c:	4619      	mov	r1, r3
90002d3e:	481f      	ldr	r0, [pc, #124]	@ (90002dbc <LTDC_MspInit+0x18c>)
90002d40:	f001 f82c 	bl	90003d9c <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002d44:	f240 2302 	movw	r3, #514	@ 0x202
90002d48:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002d4a:	2302      	movs	r3, #2
90002d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002d4e:	2300      	movs	r3, #0
90002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002d52:	2302      	movs	r3, #2
90002d54:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002d56:	230e      	movs	r3, #14
90002d58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002d5e:	4619      	mov	r1, r3
90002d60:	4817      	ldr	r0, [pc, #92]	@ (90002dc0 <LTDC_MspInit+0x190>)
90002d62:	f001 f81b 	bl	90003d9c <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002d66:	2380      	movs	r3, #128	@ 0x80
90002d68:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002d6a:	2301      	movs	r3, #1
90002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002d72:	4619      	mov	r1, r3
90002d74:	4813      	ldr	r0, [pc, #76]	@ (90002dc4 <LTDC_MspInit+0x194>)
90002d76:	f001 f811 	bl	90003d9c <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002d7a:	2201      	movs	r2, #1
90002d7c:	2180      	movs	r1, #128	@ 0x80
90002d7e:	4811      	ldr	r0, [pc, #68]	@ (90002dc4 <LTDC_MspInit+0x194>)
90002d80:	f001 f9d4 	bl	9000412c <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002d84:	4b0a      	ldr	r3, [pc, #40]	@ (90002db0 <LTDC_MspInit+0x180>)
90002d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002d8a:	4a09      	ldr	r2, [pc, #36]	@ (90002db0 <LTDC_MspInit+0x180>)
90002d8c:	f043 0308 	orr.w	r3, r3, #8
90002d90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002d94:	4b06      	ldr	r3, [pc, #24]	@ (90002db0 <LTDC_MspInit+0x180>)
90002d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002d9a:	4a05      	ldr	r2, [pc, #20]	@ (90002db0 <LTDC_MspInit+0x180>)
90002d9c:	f023 0308 	bic.w	r3, r3, #8
90002da0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002da4:	bf00      	nop
90002da6:	3738      	adds	r7, #56	@ 0x38
90002da8:	46bd      	mov	sp, r7
90002daa:	bd80      	pop	{r7, pc}
90002dac:	50001000 	.word	0x50001000
90002db0:	58024400 	.word	0x58024400
90002db4:	58022000 	.word	0x58022000
90002db8:	58022400 	.word	0x58022400
90002dbc:	58022800 	.word	0x58022800
90002dc0:	58021c00 	.word	0x58021c00
90002dc4:	58020c00 	.word	0x58020c00

90002dc8 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002dc8:	b480      	push	{r7}
90002dca:	b085      	sub	sp, #20
90002dcc:	af00      	add	r7, sp, #0
90002dce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002dd0:	687b      	ldr	r3, [r7, #4]
90002dd2:	681b      	ldr	r3, [r3, #0]
90002dd4:	4a11      	ldr	r2, [pc, #68]	@ (90002e1c <DMA2D_MspInit+0x54>)
90002dd6:	4293      	cmp	r3, r2
90002dd8:	d11a      	bne.n	90002e10 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002dda:	4b11      	ldr	r3, [pc, #68]	@ (90002e20 <DMA2D_MspInit+0x58>)
90002ddc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002de0:	4a0f      	ldr	r2, [pc, #60]	@ (90002e20 <DMA2D_MspInit+0x58>)
90002de2:	f043 0310 	orr.w	r3, r3, #16
90002de6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002dea:	4b0d      	ldr	r3, [pc, #52]	@ (90002e20 <DMA2D_MspInit+0x58>)
90002dec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002df0:	f003 0310 	and.w	r3, r3, #16
90002df4:	60fb      	str	r3, [r7, #12]
90002df6:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002df8:	4b09      	ldr	r3, [pc, #36]	@ (90002e20 <DMA2D_MspInit+0x58>)
90002dfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002dfc:	4a08      	ldr	r2, [pc, #32]	@ (90002e20 <DMA2D_MspInit+0x58>)
90002dfe:	f043 0310 	orr.w	r3, r3, #16
90002e02:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002e04:	4b06      	ldr	r3, [pc, #24]	@ (90002e20 <DMA2D_MspInit+0x58>)
90002e06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002e08:	4a05      	ldr	r2, [pc, #20]	@ (90002e20 <DMA2D_MspInit+0x58>)
90002e0a:	f023 0310 	bic.w	r3, r3, #16
90002e0e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002e10:	bf00      	nop
90002e12:	3714      	adds	r7, #20
90002e14:	46bd      	mov	sp, r7
90002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
90002e1a:	4770      	bx	lr
90002e1c:	52001000 	.word	0x52001000
90002e20:	58024400 	.word	0x58024400

90002e24 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002e24:	b580      	push	{r7, lr}
90002e26:	b08a      	sub	sp, #40	@ 0x28
90002e28:	af00      	add	r7, sp, #0
90002e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002e2c:	4b18      	ldr	r3, [pc, #96]	@ (90002e90 <TIMx_PWM_MspInit+0x6c>)
90002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e32:	4a17      	ldr	r2, [pc, #92]	@ (90002e90 <TIMx_PWM_MspInit+0x6c>)
90002e34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e3c:	4b14      	ldr	r3, [pc, #80]	@ (90002e90 <TIMx_PWM_MspInit+0x6c>)
90002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002e46:	613b      	str	r3, [r7, #16]
90002e48:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002e4a:	4b11      	ldr	r3, [pc, #68]	@ (90002e90 <TIMx_PWM_MspInit+0x6c>)
90002e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002e50:	4a0f      	ldr	r2, [pc, #60]	@ (90002e90 <TIMx_PWM_MspInit+0x6c>)
90002e52:	f043 0302 	orr.w	r3, r3, #2
90002e56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (90002e90 <TIMx_PWM_MspInit+0x6c>)
90002e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002e60:	f003 0302 	and.w	r3, r3, #2
90002e64:	60fb      	str	r3, [r7, #12]
90002e66:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002e68:	2302      	movs	r3, #2
90002e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002e6c:	2300      	movs	r3, #0
90002e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002e70:	2301      	movs	r3, #1
90002e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002e74:	2303      	movs	r3, #3
90002e76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002e78:	2301      	movs	r3, #1
90002e7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002e7c:	f107 0314 	add.w	r3, r7, #20
90002e80:	4619      	mov	r1, r3
90002e82:	4804      	ldr	r0, [pc, #16]	@ (90002e94 <TIMx_PWM_MspInit+0x70>)
90002e84:	f000 ff8a 	bl	90003d9c <HAL_GPIO_Init>
}
90002e88:	bf00      	nop
90002e8a:	3728      	adds	r7, #40	@ 0x28
90002e8c:	46bd      	mov	sp, r7
90002e8e:	bd80      	pop	{r7, pc}
90002e90:	58024400 	.word	0x58024400
90002e94:	58022800 	.word	0x58022800

90002e98 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002e98:	b580      	push	{r7, lr}
90002e9a:	b082      	sub	sp, #8
90002e9c:	af00      	add	r7, sp, #0
90002e9e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002ea0:	687b      	ldr	r3, [r7, #4]
90002ea2:	4a11      	ldr	r2, [pc, #68]	@ (90002ee8 <TIMx_PWM_Init+0x50>)
90002ea4:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002ea6:	6878      	ldr	r0, [r7, #4]
90002ea8:	f005 f8dc 	bl	90008064 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002eac:	6878      	ldr	r0, [r7, #4]
90002eae:	f7ff ffb9 	bl	90002e24 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002eb2:	687b      	ldr	r3, [r7, #4]
90002eb4:	2204      	movs	r2, #4
90002eb6:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002eb8:	687b      	ldr	r3, [r7, #4]
90002eba:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002ebe:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002ec0:	687b      	ldr	r3, [r7, #4]
90002ec2:	2200      	movs	r2, #0
90002ec4:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002ec6:	687b      	ldr	r3, [r7, #4]
90002ec8:	2200      	movs	r2, #0
90002eca:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002ecc:	687b      	ldr	r3, [r7, #4]
90002ece:	2200      	movs	r2, #0
90002ed0:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002ed2:	687b      	ldr	r3, [r7, #4]
90002ed4:	2200      	movs	r2, #0
90002ed6:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002ed8:	6878      	ldr	r0, [r7, #4]
90002eda:	f005 f86c 	bl	90007fb6 <HAL_TIM_PWM_Init>
}
90002ede:	bf00      	nop
90002ee0:	3708      	adds	r7, #8
90002ee2:	46bd      	mov	sp, r7
90002ee4:	bd80      	pop	{r7, pc}
90002ee6:	bf00      	nop
90002ee8:	40010400 	.word	0x40010400

90002eec <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002eec:	b580      	push	{r7, lr}
90002eee:	b084      	sub	sp, #16
90002ef0:	af00      	add	r7, sp, #0
90002ef2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002ef4:	2300      	movs	r3, #0
90002ef6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002ef8:	687b      	ldr	r3, [r7, #4]
90002efa:	2b00      	cmp	r3, #0
90002efc:	d003      	beq.n	90002f06 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002efe:	f06f 0301 	mvn.w	r3, #1
90002f02:	60fb      	str	r3, [r7, #12]
90002f04:	e044      	b.n	90002f90 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002f06:	687b      	ldr	r3, [r7, #4]
90002f08:	2234      	movs	r2, #52	@ 0x34
90002f0a:	fb02 f303 	mul.w	r3, r2, r3
90002f0e:	4a23      	ldr	r2, [pc, #140]	@ (90002f9c <BSP_SDRAM_Init+0xb0>)
90002f10:	4413      	add	r3, r2
90002f12:	4618      	mov	r0, r3
90002f14:	f000 f892 	bl	9000303c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002f18:	687b      	ldr	r3, [r7, #4]
90002f1a:	2234      	movs	r2, #52	@ 0x34
90002f1c:	fb02 f303 	mul.w	r3, r2, r3
90002f20:	4a1e      	ldr	r2, [pc, #120]	@ (90002f9c <BSP_SDRAM_Init+0xb0>)
90002f22:	4413      	add	r3, r2
90002f24:	2210      	movs	r2, #16
90002f26:	2104      	movs	r1, #4
90002f28:	4618      	mov	r0, r3
90002f2a:	f000 f83b 	bl	90002fa4 <MX_SDRAM_BANK2_Init>
90002f2e:	4603      	mov	r3, r0
90002f30:	2b00      	cmp	r3, #0
90002f32:	d003      	beq.n	90002f3c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002f34:	f04f 33ff 	mov.w	r3, #4294967295
90002f38:	60fb      	str	r3, [r7, #12]
90002f3a:	e029      	b.n	90002f90 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002f3c:	4b18      	ldr	r3, [pc, #96]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f3e:	2208      	movs	r2, #8
90002f40:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002f42:	4b17      	ldr	r3, [pc, #92]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f44:	2203      	movs	r2, #3
90002f46:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002f48:	4b15      	ldr	r3, [pc, #84]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f4a:	f240 6203 	movw	r2, #1539	@ 0x603
90002f4e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002f50:	4b13      	ldr	r3, [pc, #76]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f52:	2200      	movs	r2, #0
90002f54:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002f56:	4b12      	ldr	r3, [pc, #72]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f58:	2200      	movs	r2, #0
90002f5a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002f5c:	4b10      	ldr	r3, [pc, #64]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f5e:	2230      	movs	r2, #48	@ 0x30
90002f60:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002f62:	4b0f      	ldr	r3, [pc, #60]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f64:	2200      	movs	r2, #0
90002f66:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002f68:	4b0d      	ldr	r3, [pc, #52]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002f6e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002f70:	687b      	ldr	r3, [r7, #4]
90002f72:	2234      	movs	r2, #52	@ 0x34
90002f74:	fb02 f303 	mul.w	r3, r2, r3
90002f78:	4a08      	ldr	r2, [pc, #32]	@ (90002f9c <BSP_SDRAM_Init+0xb0>)
90002f7a:	4413      	add	r3, r2
90002f7c:	4908      	ldr	r1, [pc, #32]	@ (90002fa0 <BSP_SDRAM_Init+0xb4>)
90002f7e:	4618      	mov	r0, r3
90002f80:	f7fe fc3d 	bl	900017fe <MT48LC4M32B2_Init>
90002f84:	4603      	mov	r3, r0
90002f86:	2b00      	cmp	r3, #0
90002f88:	d002      	beq.n	90002f90 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002f8a:	f06f 0304 	mvn.w	r3, #4
90002f8e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002f90:	68fb      	ldr	r3, [r7, #12]
}
90002f92:	4618      	mov	r0, r3
90002f94:	3710      	adds	r7, #16
90002f96:	46bd      	mov	sp, r7
90002f98:	bd80      	pop	{r7, pc}
90002f9a:	bf00      	nop
90002f9c:	20000e84 	.word	0x20000e84
90002fa0:	20000eb8 	.word	0x20000eb8

90002fa4 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002fa4:	b580      	push	{r7, lr}
90002fa6:	b08c      	sub	sp, #48	@ 0x30
90002fa8:	af00      	add	r7, sp, #0
90002faa:	60f8      	str	r0, [r7, #12]
90002fac:	60b9      	str	r1, [r7, #8]
90002fae:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002fb0:	4b20      	ldr	r3, [pc, #128]	@ (90003034 <MX_SDRAM_BANK2_Init+0x90>)
90002fb2:	4a21      	ldr	r2, [pc, #132]	@ (90003038 <MX_SDRAM_BANK2_Init+0x94>)
90002fb4:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002fb6:	68fb      	ldr	r3, [r7, #12]
90002fb8:	2201      	movs	r2, #1
90002fba:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002fbc:	68fb      	ldr	r3, [r7, #12]
90002fbe:	2200      	movs	r2, #0
90002fc0:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002fc2:	68fb      	ldr	r3, [r7, #12]
90002fc4:	68ba      	ldr	r2, [r7, #8]
90002fc6:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002fc8:	68fb      	ldr	r3, [r7, #12]
90002fca:	687a      	ldr	r2, [r7, #4]
90002fcc:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002fce:	4b19      	ldr	r3, [pc, #100]	@ (90003034 <MX_SDRAM_BANK2_Init+0x90>)
90002fd0:	2240      	movs	r2, #64	@ 0x40
90002fd2:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002fd4:	68fb      	ldr	r3, [r7, #12]
90002fd6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002fda:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002fdc:	68fb      	ldr	r3, [r7, #12]
90002fde:	2200      	movs	r2, #0
90002fe0:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002fe2:	68fb      	ldr	r3, [r7, #12]
90002fe4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002fe8:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002fea:	68fb      	ldr	r3, [r7, #12]
90002fec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002ff2:	68fb      	ldr	r3, [r7, #12]
90002ff4:	2200      	movs	r2, #0
90002ff6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002ff8:	2302      	movs	r3, #2
90002ffa:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002ffc:	2307      	movs	r3, #7
90002ffe:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90003000:	2304      	movs	r3, #4
90003002:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90003004:	2307      	movs	r3, #7
90003006:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90003008:	2302      	movs	r3, #2
9000300a:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
9000300c:	2302      	movs	r3, #2
9000300e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90003010:	2302      	movs	r3, #2
90003012:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90003014:	f107 0314 	add.w	r3, r7, #20
90003018:	4619      	mov	r1, r3
9000301a:	68f8      	ldr	r0, [r7, #12]
9000301c:	f004 ff28 	bl	90007e70 <HAL_SDRAM_Init>
90003020:	4603      	mov	r3, r0
90003022:	2b00      	cmp	r3, #0
90003024:	d001      	beq.n	9000302a <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90003026:	2301      	movs	r3, #1
90003028:	e000      	b.n	9000302c <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
9000302a:	2300      	movs	r3, #0
}
9000302c:	4618      	mov	r0, r3
9000302e:	3730      	adds	r7, #48	@ 0x30
90003030:	46bd      	mov	sp, r7
90003032:	bd80      	pop	{r7, pc}
90003034:	20000e84 	.word	0x20000e84
90003038:	52004140 	.word	0x52004140

9000303c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
9000303c:	b580      	push	{r7, lr}
9000303e:	b08e      	sub	sp, #56	@ 0x38
90003040:	af00      	add	r7, sp, #0
90003042:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90003044:	4b73      	ldr	r3, [pc, #460]	@ (90003214 <SDRAM_MspInit+0x1d8>)
90003046:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
9000304a:	4a72      	ldr	r2, [pc, #456]	@ (90003214 <SDRAM_MspInit+0x1d8>)
9000304c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90003050:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90003054:	4b6f      	ldr	r3, [pc, #444]	@ (90003214 <SDRAM_MspInit+0x1d8>)
90003056:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
9000305a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
9000305e:	623b      	str	r3, [r7, #32]
90003060:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90003062:	4b6c      	ldr	r3, [pc, #432]	@ (90003214 <SDRAM_MspInit+0x1d8>)
90003064:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90003068:	4a6a      	ldr	r2, [pc, #424]	@ (90003214 <SDRAM_MspInit+0x1d8>)
9000306a:	f043 0301 	orr.w	r3, r3, #1
9000306e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90003072:	4b68      	ldr	r3, [pc, #416]	@ (90003214 <SDRAM_MspInit+0x1d8>)
90003074:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90003078:	f003 0301 	and.w	r3, r3, #1
9000307c:	61fb      	str	r3, [r7, #28]
9000307e:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90003080:	4b64      	ldr	r3, [pc, #400]	@ (90003214 <SDRAM_MspInit+0x1d8>)
90003082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003086:	4a63      	ldr	r2, [pc, #396]	@ (90003214 <SDRAM_MspInit+0x1d8>)
90003088:	f043 0308 	orr.w	r3, r3, #8
9000308c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003090:	4b60      	ldr	r3, [pc, #384]	@ (90003214 <SDRAM_MspInit+0x1d8>)
90003092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003096:	f003 0308 	and.w	r3, r3, #8
9000309a:	61bb      	str	r3, [r7, #24]
9000309c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
9000309e:	4b5d      	ldr	r3, [pc, #372]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900030a4:	4a5b      	ldr	r2, [pc, #364]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030a6:	f043 0310 	orr.w	r3, r3, #16
900030aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900030ae:	4b59      	ldr	r3, [pc, #356]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900030b4:	f003 0310 	and.w	r3, r3, #16
900030b8:	617b      	str	r3, [r7, #20]
900030ba:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900030bc:	4b55      	ldr	r3, [pc, #340]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900030c2:	4a54      	ldr	r2, [pc, #336]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030c4:	f043 0320 	orr.w	r3, r3, #32
900030c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900030cc:	4b51      	ldr	r3, [pc, #324]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900030d2:	f003 0320 	and.w	r3, r3, #32
900030d6:	613b      	str	r3, [r7, #16]
900030d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900030da:	4b4e      	ldr	r3, [pc, #312]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900030e0:	4a4c      	ldr	r2, [pc, #304]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
900030e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900030ea:	4b4a      	ldr	r3, [pc, #296]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900030f4:	60fb      	str	r3, [r7, #12]
900030f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900030f8:	4b46      	ldr	r3, [pc, #280]	@ (90003214 <SDRAM_MspInit+0x1d8>)
900030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900030fe:	4a45      	ldr	r2, [pc, #276]	@ (90003214 <SDRAM_MspInit+0x1d8>)
90003100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90003104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003108:	4b42      	ldr	r3, [pc, #264]	@ (90003214 <SDRAM_MspInit+0x1d8>)
9000310a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000310e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90003112:	60bb      	str	r3, [r7, #8]
90003114:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90003116:	2302      	movs	r3, #2
90003118:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
9000311a:	2301      	movs	r3, #1
9000311c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
9000311e:	2303      	movs	r3, #3
90003120:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90003122:	230c      	movs	r3, #12
90003124:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90003126:	f24c 7303 	movw	r3, #50947	@ 0xc703
9000312a:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
9000312c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003130:	4619      	mov	r1, r3
90003132:	4839      	ldr	r0, [pc, #228]	@ (90003218 <SDRAM_MspInit+0x1dc>)
90003134:	f000 fe32 	bl	90003d9c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90003138:	f64f 7383 	movw	r3, #65411	@ 0xff83
9000313c:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000313e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003142:	4619      	mov	r1, r3
90003144:	4835      	ldr	r0, [pc, #212]	@ (9000321c <SDRAM_MspInit+0x1e0>)
90003146:	f000 fe29 	bl	90003d9c <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000314a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
9000314e:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90003150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003154:	4619      	mov	r1, r3
90003156:	4832      	ldr	r0, [pc, #200]	@ (90003220 <SDRAM_MspInit+0x1e4>)
90003158:	f000 fe20 	bl	90003d9c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
9000315c:	f248 1333 	movw	r3, #33075	@ 0x8133
90003160:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90003162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003166:	4619      	mov	r1, r3
90003168:	482e      	ldr	r0, [pc, #184]	@ (90003224 <SDRAM_MspInit+0x1e8>)
9000316a:	f000 fe17 	bl	90003d9c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
9000316e:	23e0      	movs	r3, #224	@ 0xe0
90003170:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90003172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003176:	4619      	mov	r1, r3
90003178:	482b      	ldr	r0, [pc, #172]	@ (90003228 <SDRAM_MspInit+0x1ec>)
9000317a:	f000 fe0f 	bl	90003d9c <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000317e:	4b2b      	ldr	r3, [pc, #172]	@ (9000322c <SDRAM_MspInit+0x1f0>)
90003180:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90003184:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90003186:	4b29      	ldr	r3, [pc, #164]	@ (9000322c <SDRAM_MspInit+0x1f0>)
90003188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000318c:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000318e:	4b27      	ldr	r3, [pc, #156]	@ (9000322c <SDRAM_MspInit+0x1f0>)
90003190:	2280      	movs	r2, #128	@ 0x80
90003192:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90003194:	4b25      	ldr	r3, [pc, #148]	@ (9000322c <SDRAM_MspInit+0x1f0>)
90003196:	2200      	movs	r2, #0
90003198:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
9000319a:	4b24      	ldr	r3, [pc, #144]	@ (9000322c <SDRAM_MspInit+0x1f0>)
9000319c:	f240 2202 	movw	r2, #514	@ 0x202
900031a0:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
900031a2:	4b22      	ldr	r3, [pc, #136]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031a4:	f640 0208 	movw	r2, #2056	@ 0x808
900031a8:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900031aa:	4b20      	ldr	r3, [pc, #128]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031ac:	2220      	movs	r2, #32
900031ae:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900031b0:	4b1e      	ldr	r3, [pc, #120]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031b2:	2280      	movs	r2, #128	@ 0x80
900031b4:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900031b6:	4b1d      	ldr	r3, [pc, #116]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900031bc:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
900031be:	4b1b      	ldr	r3, [pc, #108]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031c0:	2200      	movs	r2, #0
900031c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
900031c4:	4b19      	ldr	r3, [pc, #100]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031c6:	2200      	movs	r2, #0
900031c8:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
900031ca:	4b18      	ldr	r3, [pc, #96]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031cc:	2280      	movs	r2, #128	@ 0x80
900031ce:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
900031d0:	4b16      	ldr	r3, [pc, #88]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031d2:	2200      	movs	r2, #0
900031d4:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
900031d6:	4b15      	ldr	r3, [pc, #84]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031d8:	2200      	movs	r2, #0
900031da:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900031dc:	4b13      	ldr	r3, [pc, #76]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031de:	4a14      	ldr	r2, [pc, #80]	@ (90003230 <SDRAM_MspInit+0x1f4>)
900031e0:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900031e2:	4b14      	ldr	r3, [pc, #80]	@ (90003234 <SDRAM_MspInit+0x1f8>)
900031e4:	4a11      	ldr	r2, [pc, #68]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031e6:	631a      	str	r2, [r3, #48]	@ 0x30
900031e8:	4b10      	ldr	r3, [pc, #64]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031ea:	4a12      	ldr	r2, [pc, #72]	@ (90003234 <SDRAM_MspInit+0x1f8>)
900031ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
900031ee:	480f      	ldr	r0, [pc, #60]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031f0:	f001 ff3c 	bl	9000506c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
900031f4:	480d      	ldr	r0, [pc, #52]	@ (9000322c <SDRAM_MspInit+0x1f0>)
900031f6:	f001 feed 	bl	90004fd4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
900031fa:	2200      	movs	r2, #0
900031fc:	210f      	movs	r1, #15
900031fe:	207a      	movs	r0, #122	@ 0x7a
90003200:	f000 fa49 	bl	90003696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90003204:	207a      	movs	r0, #122	@ 0x7a
90003206:	f000 fa60 	bl	900036ca <HAL_NVIC_EnableIRQ>
}
9000320a:	bf00      	nop
9000320c:	3738      	adds	r7, #56	@ 0x38
9000320e:	46bd      	mov	sp, r7
90003210:	bd80      	pop	{r7, pc}
90003212:	bf00      	nop
90003214:	58024400 	.word	0x58024400
90003218:	58020c00 	.word	0x58020c00
9000321c:	58021000 	.word	0x58021000
90003220:	58021400 	.word	0x58021400
90003224:	58021800 	.word	0x58021800
90003228:	58021c00 	.word	0x58021c00
9000322c:	20000ed8 	.word	0x20000ed8
90003230:	52000040 	.word	0x52000040
90003234:	20000e84 	.word	0x20000e84

90003238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90003238:	b480      	push	{r7}
9000323a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000323c:	4b29      	ldr	r3, [pc, #164]	@ (900032e4 <SystemInit+0xac>)
9000323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90003242:	4a28      	ldr	r2, [pc, #160]	@ (900032e4 <SystemInit+0xac>)
90003244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90003248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
9000324c:	4b26      	ldr	r3, [pc, #152]	@ (900032e8 <SystemInit+0xb0>)
9000324e:	681b      	ldr	r3, [r3, #0]
90003250:	4a25      	ldr	r2, [pc, #148]	@ (900032e8 <SystemInit+0xb0>)
90003252:	f043 0301 	orr.w	r3, r3, #1
90003256:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90003258:	4b23      	ldr	r3, [pc, #140]	@ (900032e8 <SystemInit+0xb0>)
9000325a:	2200      	movs	r2, #0
9000325c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
9000325e:	4b22      	ldr	r3, [pc, #136]	@ (900032e8 <SystemInit+0xb0>)
90003260:	681a      	ldr	r2, [r3, #0]
90003262:	4921      	ldr	r1, [pc, #132]	@ (900032e8 <SystemInit+0xb0>)
90003264:	4b21      	ldr	r3, [pc, #132]	@ (900032ec <SystemInit+0xb4>)
90003266:	4013      	ands	r3, r2
90003268:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
9000326a:	4b1f      	ldr	r3, [pc, #124]	@ (900032e8 <SystemInit+0xb0>)
9000326c:	2200      	movs	r2, #0
9000326e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003270:	4b1d      	ldr	r3, [pc, #116]	@ (900032e8 <SystemInit+0xb0>)
90003272:	2200      	movs	r2, #0
90003274:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90003276:	4b1c      	ldr	r3, [pc, #112]	@ (900032e8 <SystemInit+0xb0>)
90003278:	2200      	movs	r2, #0
9000327a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
9000327c:	4b1a      	ldr	r3, [pc, #104]	@ (900032e8 <SystemInit+0xb0>)
9000327e:	2200      	movs	r2, #0
90003280:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90003282:	4b19      	ldr	r3, [pc, #100]	@ (900032e8 <SystemInit+0xb0>)
90003284:	2200      	movs	r2, #0
90003286:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90003288:	4b17      	ldr	r3, [pc, #92]	@ (900032e8 <SystemInit+0xb0>)
9000328a:	2200      	movs	r2, #0
9000328c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
9000328e:	4b16      	ldr	r3, [pc, #88]	@ (900032e8 <SystemInit+0xb0>)
90003290:	2200      	movs	r2, #0
90003292:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90003294:	4b14      	ldr	r3, [pc, #80]	@ (900032e8 <SystemInit+0xb0>)
90003296:	2200      	movs	r2, #0
90003298:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
9000329a:	4b13      	ldr	r3, [pc, #76]	@ (900032e8 <SystemInit+0xb0>)
9000329c:	2200      	movs	r2, #0
9000329e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
900032a0:	4b11      	ldr	r3, [pc, #68]	@ (900032e8 <SystemInit+0xb0>)
900032a2:	2200      	movs	r2, #0
900032a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
900032a6:	4b10      	ldr	r3, [pc, #64]	@ (900032e8 <SystemInit+0xb0>)
900032a8:	2200      	movs	r2, #0
900032aa:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
900032ac:	4b0e      	ldr	r3, [pc, #56]	@ (900032e8 <SystemInit+0xb0>)
900032ae:	681b      	ldr	r3, [r3, #0]
900032b0:	4a0d      	ldr	r2, [pc, #52]	@ (900032e8 <SystemInit+0xb0>)
900032b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
900032b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
900032b8:	4b0b      	ldr	r3, [pc, #44]	@ (900032e8 <SystemInit+0xb0>)
900032ba:	2200      	movs	r2, #0
900032bc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900032be:	4b0c      	ldr	r3, [pc, #48]	@ (900032f0 <SystemInit+0xb8>)
900032c0:	681a      	ldr	r2, [r3, #0]
900032c2:	4b0c      	ldr	r3, [pc, #48]	@ (900032f4 <SystemInit+0xbc>)
900032c4:	4013      	ands	r3, r2
900032c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900032ca:	d202      	bcs.n	900032d2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
900032cc:	4b0a      	ldr	r3, [pc, #40]	@ (900032f8 <SystemInit+0xc0>)
900032ce:	2201      	movs	r2, #1
900032d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
900032d2:	4b04      	ldr	r3, [pc, #16]	@ (900032e4 <SystemInit+0xac>)
900032d4:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
900032d8:	609a      	str	r2, [r3, #8]
#endif  


}
900032da:	bf00      	nop
900032dc:	46bd      	mov	sp, r7
900032de:	f85d 7b04 	ldr.w	r7, [sp], #4
900032e2:	4770      	bx	lr
900032e4:	e000ed00 	.word	0xe000ed00
900032e8:	58024400 	.word	0x58024400
900032ec:	eaf6ed7f 	.word	0xeaf6ed7f
900032f0:	5c001000 	.word	0x5c001000
900032f4:	ffff0000 	.word	0xffff0000
900032f8:	51008108 	.word	0x51008108

900032fc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
900032fc:	b480      	push	{r7}
900032fe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90003300:	4b09      	ldr	r3, [pc, #36]	@ (90003328 <ExitRun0Mode+0x2c>)
90003302:	68db      	ldr	r3, [r3, #12]
90003304:	4a08      	ldr	r2, [pc, #32]	@ (90003328 <ExitRun0Mode+0x2c>)
90003306:	f043 0302 	orr.w	r3, r3, #2
9000330a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
9000330c:	bf00      	nop
9000330e:	4b06      	ldr	r3, [pc, #24]	@ (90003328 <ExitRun0Mode+0x2c>)
90003310:	685b      	ldr	r3, [r3, #4]
90003312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90003316:	2b00      	cmp	r3, #0
90003318:	d0f9      	beq.n	9000330e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
9000331a:	bf00      	nop
9000331c:	bf00      	nop
9000331e:	46bd      	mov	sp, r7
90003320:	f85d 7b04 	ldr.w	r7, [sp], #4
90003324:	4770      	bx	lr
90003326:	bf00      	nop
90003328:	58024800 	.word	0x58024800

9000332c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
9000332c:	b580      	push	{r7, lr}
9000332e:	b082      	sub	sp, #8
90003330:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90003332:	2003      	movs	r0, #3
90003334:	f000 f9a4 	bl	90003680 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90003338:	f002 fd98 	bl	90005e6c <HAL_RCC_GetSysClockFreq>
9000333c:	4602      	mov	r2, r0
9000333e:	4b15      	ldr	r3, [pc, #84]	@ (90003394 <HAL_Init+0x68>)
90003340:	699b      	ldr	r3, [r3, #24]
90003342:	0a1b      	lsrs	r3, r3, #8
90003344:	f003 030f 	and.w	r3, r3, #15
90003348:	4913      	ldr	r1, [pc, #76]	@ (90003398 <HAL_Init+0x6c>)
9000334a:	5ccb      	ldrb	r3, [r1, r3]
9000334c:	f003 031f 	and.w	r3, r3, #31
90003350:	fa22 f303 	lsr.w	r3, r2, r3
90003354:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90003356:	4b0f      	ldr	r3, [pc, #60]	@ (90003394 <HAL_Init+0x68>)
90003358:	699b      	ldr	r3, [r3, #24]
9000335a:	f003 030f 	and.w	r3, r3, #15
9000335e:	4a0e      	ldr	r2, [pc, #56]	@ (90003398 <HAL_Init+0x6c>)
90003360:	5cd3      	ldrb	r3, [r2, r3]
90003362:	f003 031f 	and.w	r3, r3, #31
90003366:	687a      	ldr	r2, [r7, #4]
90003368:	fa22 f303 	lsr.w	r3, r2, r3
9000336c:	4a0b      	ldr	r2, [pc, #44]	@ (9000339c <HAL_Init+0x70>)
9000336e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003370:	4a0b      	ldr	r2, [pc, #44]	@ (900033a0 <HAL_Init+0x74>)
90003372:	687b      	ldr	r3, [r7, #4]
90003374:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90003376:	200f      	movs	r0, #15
90003378:	f000 f81c 	bl	900033b4 <HAL_InitTick>
9000337c:	4603      	mov	r3, r0
9000337e:	2b00      	cmp	r3, #0
90003380:	d001      	beq.n	90003386 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90003382:	2301      	movs	r3, #1
90003384:	e002      	b.n	9000338c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90003386:	f000 f80d 	bl	900033a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000338a:	2300      	movs	r3, #0
}
9000338c:	4618      	mov	r0, r3
9000338e:	3708      	adds	r7, #8
90003390:	46bd      	mov	sp, r7
90003392:	bd80      	pop	{r7, pc}
90003394:	58024400 	.word	0x58024400
90003398:	9000c1d0 	.word	0x9000c1d0
9000339c:	20000004 	.word	0x20000004
900033a0:	20000000 	.word	0x20000000

900033a4 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
900033a4:	b480      	push	{r7}
900033a6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
900033a8:	bf00      	nop
900033aa:	46bd      	mov	sp, r7
900033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900033b0:	4770      	bx	lr
	...

900033b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900033b4:	b580      	push	{r7, lr}
900033b6:	b082      	sub	sp, #8
900033b8:	af00      	add	r7, sp, #0
900033ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
900033bc:	4b15      	ldr	r3, [pc, #84]	@ (90003414 <HAL_InitTick+0x60>)
900033be:	781b      	ldrb	r3, [r3, #0]
900033c0:	2b00      	cmp	r3, #0
900033c2:	d101      	bne.n	900033c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
900033c4:	2301      	movs	r3, #1
900033c6:	e021      	b.n	9000340c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
900033c8:	4b13      	ldr	r3, [pc, #76]	@ (90003418 <HAL_InitTick+0x64>)
900033ca:	681a      	ldr	r2, [r3, #0]
900033cc:	4b11      	ldr	r3, [pc, #68]	@ (90003414 <HAL_InitTick+0x60>)
900033ce:	781b      	ldrb	r3, [r3, #0]
900033d0:	4619      	mov	r1, r3
900033d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
900033d6:	fbb3 f3f1 	udiv	r3, r3, r1
900033da:	fbb2 f3f3 	udiv	r3, r2, r3
900033de:	4618      	mov	r0, r3
900033e0:	f000 f981 	bl	900036e6 <HAL_SYSTICK_Config>
900033e4:	4603      	mov	r3, r0
900033e6:	2b00      	cmp	r3, #0
900033e8:	d001      	beq.n	900033ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
900033ea:	2301      	movs	r3, #1
900033ec:	e00e      	b.n	9000340c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900033ee:	687b      	ldr	r3, [r7, #4]
900033f0:	2b0f      	cmp	r3, #15
900033f2:	d80a      	bhi.n	9000340a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
900033f4:	2200      	movs	r2, #0
900033f6:	6879      	ldr	r1, [r7, #4]
900033f8:	f04f 30ff 	mov.w	r0, #4294967295
900033fc:	f000 f94b 	bl	90003696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003400:	4a06      	ldr	r2, [pc, #24]	@ (9000341c <HAL_InitTick+0x68>)
90003402:	687b      	ldr	r3, [r7, #4]
90003404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90003406:	2300      	movs	r3, #0
90003408:	e000      	b.n	9000340c <HAL_InitTick+0x58>
    return HAL_ERROR;
9000340a:	2301      	movs	r3, #1
}
9000340c:	4618      	mov	r0, r3
9000340e:	3708      	adds	r7, #8
90003410:	46bd      	mov	sp, r7
90003412:	bd80      	pop	{r7, pc}
90003414:	2000000c 	.word	0x2000000c
90003418:	20000000 	.word	0x20000000
9000341c:	20000008 	.word	0x20000008

90003420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003420:	b480      	push	{r7}
90003422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90003424:	4b06      	ldr	r3, [pc, #24]	@ (90003440 <HAL_IncTick+0x20>)
90003426:	781b      	ldrb	r3, [r3, #0]
90003428:	461a      	mov	r2, r3
9000342a:	4b06      	ldr	r3, [pc, #24]	@ (90003444 <HAL_IncTick+0x24>)
9000342c:	681b      	ldr	r3, [r3, #0]
9000342e:	4413      	add	r3, r2
90003430:	4a04      	ldr	r2, [pc, #16]	@ (90003444 <HAL_IncTick+0x24>)
90003432:	6013      	str	r3, [r2, #0]
}
90003434:	bf00      	nop
90003436:	46bd      	mov	sp, r7
90003438:	f85d 7b04 	ldr.w	r7, [sp], #4
9000343c:	4770      	bx	lr
9000343e:	bf00      	nop
90003440:	2000000c 	.word	0x2000000c
90003444:	20000f44 	.word	0x20000f44

90003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90003448:	b480      	push	{r7}
9000344a:	af00      	add	r7, sp, #0
  return uwTick;
9000344c:	4b03      	ldr	r3, [pc, #12]	@ (9000345c <HAL_GetTick+0x14>)
9000344e:	681b      	ldr	r3, [r3, #0]
}
90003450:	4618      	mov	r0, r3
90003452:	46bd      	mov	sp, r7
90003454:	f85d 7b04 	ldr.w	r7, [sp], #4
90003458:	4770      	bx	lr
9000345a:	bf00      	nop
9000345c:	20000f44 	.word	0x20000f44

90003460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90003460:	b580      	push	{r7, lr}
90003462:	b084      	sub	sp, #16
90003464:	af00      	add	r7, sp, #0
90003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90003468:	f7ff ffee 	bl	90003448 <HAL_GetTick>
9000346c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
9000346e:	687b      	ldr	r3, [r7, #4]
90003470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90003472:	68fb      	ldr	r3, [r7, #12]
90003474:	f1b3 3fff 	cmp.w	r3, #4294967295
90003478:	d005      	beq.n	90003486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
9000347a:	4b0a      	ldr	r3, [pc, #40]	@ (900034a4 <HAL_Delay+0x44>)
9000347c:	781b      	ldrb	r3, [r3, #0]
9000347e:	461a      	mov	r2, r3
90003480:	68fb      	ldr	r3, [r7, #12]
90003482:	4413      	add	r3, r2
90003484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90003486:	bf00      	nop
90003488:	f7ff ffde 	bl	90003448 <HAL_GetTick>
9000348c:	4602      	mov	r2, r0
9000348e:	68bb      	ldr	r3, [r7, #8]
90003490:	1ad3      	subs	r3, r2, r3
90003492:	68fa      	ldr	r2, [r7, #12]
90003494:	429a      	cmp	r2, r3
90003496:	d8f7      	bhi.n	90003488 <HAL_Delay+0x28>
  {
  }
}
90003498:	bf00      	nop
9000349a:	bf00      	nop
9000349c:	3710      	adds	r7, #16
9000349e:	46bd      	mov	sp, r7
900034a0:	bd80      	pop	{r7, pc}
900034a2:	bf00      	nop
900034a4:	2000000c 	.word	0x2000000c

900034a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
900034a8:	b480      	push	{r7}
900034aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
900034ac:	4b03      	ldr	r3, [pc, #12]	@ (900034bc <HAL_GetREVID+0x14>)
900034ae:	681b      	ldr	r3, [r3, #0]
900034b0:	0c1b      	lsrs	r3, r3, #16
}
900034b2:	4618      	mov	r0, r3
900034b4:	46bd      	mov	sp, r7
900034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900034ba:	4770      	bx	lr
900034bc:	5c001000 	.word	0x5c001000

900034c0 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
900034c0:	b480      	push	{r7}
900034c2:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
900034c4:	4b05      	ldr	r3, [pc, #20]	@ (900034dc <HAL_EnableCompensationCell+0x1c>)
900034c6:	6a1b      	ldr	r3, [r3, #32]
900034c8:	4a04      	ldr	r2, [pc, #16]	@ (900034dc <HAL_EnableCompensationCell+0x1c>)
900034ca:	f043 0301 	orr.w	r3, r3, #1
900034ce:	6213      	str	r3, [r2, #32]
}
900034d0:	bf00      	nop
900034d2:	46bd      	mov	sp, r7
900034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900034d8:	4770      	bx	lr
900034da:	bf00      	nop
900034dc:	58000400 	.word	0x58000400

900034e0 <__NVIC_SetPriorityGrouping>:
{
900034e0:	b480      	push	{r7}
900034e2:	b085      	sub	sp, #20
900034e4:	af00      	add	r7, sp, #0
900034e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900034e8:	687b      	ldr	r3, [r7, #4]
900034ea:	f003 0307 	and.w	r3, r3, #7
900034ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900034f0:	4b0b      	ldr	r3, [pc, #44]	@ (90003520 <__NVIC_SetPriorityGrouping+0x40>)
900034f2:	68db      	ldr	r3, [r3, #12]
900034f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900034f6:	68ba      	ldr	r2, [r7, #8]
900034f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
900034fc:	4013      	ands	r3, r2
900034fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003500:	68fb      	ldr	r3, [r7, #12]
90003502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90003504:	68bb      	ldr	r3, [r7, #8]
90003506:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003508:	4b06      	ldr	r3, [pc, #24]	@ (90003524 <__NVIC_SetPriorityGrouping+0x44>)
9000350a:	4313      	orrs	r3, r2
9000350c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
9000350e:	4a04      	ldr	r2, [pc, #16]	@ (90003520 <__NVIC_SetPriorityGrouping+0x40>)
90003510:	68bb      	ldr	r3, [r7, #8]
90003512:	60d3      	str	r3, [r2, #12]
}
90003514:	bf00      	nop
90003516:	3714      	adds	r7, #20
90003518:	46bd      	mov	sp, r7
9000351a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000351e:	4770      	bx	lr
90003520:	e000ed00 	.word	0xe000ed00
90003524:	05fa0000 	.word	0x05fa0000

90003528 <__NVIC_GetPriorityGrouping>:
{
90003528:	b480      	push	{r7}
9000352a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
9000352c:	4b04      	ldr	r3, [pc, #16]	@ (90003540 <__NVIC_GetPriorityGrouping+0x18>)
9000352e:	68db      	ldr	r3, [r3, #12]
90003530:	0a1b      	lsrs	r3, r3, #8
90003532:	f003 0307 	and.w	r3, r3, #7
}
90003536:	4618      	mov	r0, r3
90003538:	46bd      	mov	sp, r7
9000353a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000353e:	4770      	bx	lr
90003540:	e000ed00 	.word	0xe000ed00

90003544 <__NVIC_EnableIRQ>:
{
90003544:	b480      	push	{r7}
90003546:	b083      	sub	sp, #12
90003548:	af00      	add	r7, sp, #0
9000354a:	4603      	mov	r3, r0
9000354c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
9000354e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003552:	2b00      	cmp	r3, #0
90003554:	db0b      	blt.n	9000356e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90003556:	88fb      	ldrh	r3, [r7, #6]
90003558:	f003 021f 	and.w	r2, r3, #31
9000355c:	4907      	ldr	r1, [pc, #28]	@ (9000357c <__NVIC_EnableIRQ+0x38>)
9000355e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003562:	095b      	lsrs	r3, r3, #5
90003564:	2001      	movs	r0, #1
90003566:	fa00 f202 	lsl.w	r2, r0, r2
9000356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
9000356e:	bf00      	nop
90003570:	370c      	adds	r7, #12
90003572:	46bd      	mov	sp, r7
90003574:	f85d 7b04 	ldr.w	r7, [sp], #4
90003578:	4770      	bx	lr
9000357a:	bf00      	nop
9000357c:	e000e100 	.word	0xe000e100

90003580 <__NVIC_SetPriority>:
{
90003580:	b480      	push	{r7}
90003582:	b083      	sub	sp, #12
90003584:	af00      	add	r7, sp, #0
90003586:	4603      	mov	r3, r0
90003588:	6039      	str	r1, [r7, #0]
9000358a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
9000358c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003590:	2b00      	cmp	r3, #0
90003592:	db0a      	blt.n	900035aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003594:	683b      	ldr	r3, [r7, #0]
90003596:	b2da      	uxtb	r2, r3
90003598:	490c      	ldr	r1, [pc, #48]	@ (900035cc <__NVIC_SetPriority+0x4c>)
9000359a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000359e:	0112      	lsls	r2, r2, #4
900035a0:	b2d2      	uxtb	r2, r2
900035a2:	440b      	add	r3, r1
900035a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
900035a8:	e00a      	b.n	900035c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900035aa:	683b      	ldr	r3, [r7, #0]
900035ac:	b2da      	uxtb	r2, r3
900035ae:	4908      	ldr	r1, [pc, #32]	@ (900035d0 <__NVIC_SetPriority+0x50>)
900035b0:	88fb      	ldrh	r3, [r7, #6]
900035b2:	f003 030f 	and.w	r3, r3, #15
900035b6:	3b04      	subs	r3, #4
900035b8:	0112      	lsls	r2, r2, #4
900035ba:	b2d2      	uxtb	r2, r2
900035bc:	440b      	add	r3, r1
900035be:	761a      	strb	r2, [r3, #24]
}
900035c0:	bf00      	nop
900035c2:	370c      	adds	r7, #12
900035c4:	46bd      	mov	sp, r7
900035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900035ca:	4770      	bx	lr
900035cc:	e000e100 	.word	0xe000e100
900035d0:	e000ed00 	.word	0xe000ed00

900035d4 <NVIC_EncodePriority>:
{
900035d4:	b480      	push	{r7}
900035d6:	b089      	sub	sp, #36	@ 0x24
900035d8:	af00      	add	r7, sp, #0
900035da:	60f8      	str	r0, [r7, #12]
900035dc:	60b9      	str	r1, [r7, #8]
900035de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900035e0:	68fb      	ldr	r3, [r7, #12]
900035e2:	f003 0307 	and.w	r3, r3, #7
900035e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900035e8:	69fb      	ldr	r3, [r7, #28]
900035ea:	f1c3 0307 	rsb	r3, r3, #7
900035ee:	2b04      	cmp	r3, #4
900035f0:	bf28      	it	cs
900035f2:	2304      	movcs	r3, #4
900035f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900035f6:	69fb      	ldr	r3, [r7, #28]
900035f8:	3304      	adds	r3, #4
900035fa:	2b06      	cmp	r3, #6
900035fc:	d902      	bls.n	90003604 <NVIC_EncodePriority+0x30>
900035fe:	69fb      	ldr	r3, [r7, #28]
90003600:	3b03      	subs	r3, #3
90003602:	e000      	b.n	90003606 <NVIC_EncodePriority+0x32>
90003604:	2300      	movs	r3, #0
90003606:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003608:	f04f 32ff 	mov.w	r2, #4294967295
9000360c:	69bb      	ldr	r3, [r7, #24]
9000360e:	fa02 f303 	lsl.w	r3, r2, r3
90003612:	43da      	mvns	r2, r3
90003614:	68bb      	ldr	r3, [r7, #8]
90003616:	401a      	ands	r2, r3
90003618:	697b      	ldr	r3, [r7, #20]
9000361a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
9000361c:	f04f 31ff 	mov.w	r1, #4294967295
90003620:	697b      	ldr	r3, [r7, #20]
90003622:	fa01 f303 	lsl.w	r3, r1, r3
90003626:	43d9      	mvns	r1, r3
90003628:	687b      	ldr	r3, [r7, #4]
9000362a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000362c:	4313      	orrs	r3, r2
}
9000362e:	4618      	mov	r0, r3
90003630:	3724      	adds	r7, #36	@ 0x24
90003632:	46bd      	mov	sp, r7
90003634:	f85d 7b04 	ldr.w	r7, [sp], #4
90003638:	4770      	bx	lr
	...

9000363c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
9000363c:	b580      	push	{r7, lr}
9000363e:	b082      	sub	sp, #8
90003640:	af00      	add	r7, sp, #0
90003642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90003644:	687b      	ldr	r3, [r7, #4]
90003646:	3b01      	subs	r3, #1
90003648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
9000364c:	d301      	bcc.n	90003652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
9000364e:	2301      	movs	r3, #1
90003650:	e00f      	b.n	90003672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90003652:	4a0a      	ldr	r2, [pc, #40]	@ (9000367c <SysTick_Config+0x40>)
90003654:	687b      	ldr	r3, [r7, #4]
90003656:	3b01      	subs	r3, #1
90003658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
9000365a:	210f      	movs	r1, #15
9000365c:	f04f 30ff 	mov.w	r0, #4294967295
90003660:	f7ff ff8e 	bl	90003580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90003664:	4b05      	ldr	r3, [pc, #20]	@ (9000367c <SysTick_Config+0x40>)
90003666:	2200      	movs	r2, #0
90003668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
9000366a:	4b04      	ldr	r3, [pc, #16]	@ (9000367c <SysTick_Config+0x40>)
9000366c:	2207      	movs	r2, #7
9000366e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003670:	2300      	movs	r3, #0
}
90003672:	4618      	mov	r0, r3
90003674:	3708      	adds	r7, #8
90003676:	46bd      	mov	sp, r7
90003678:	bd80      	pop	{r7, pc}
9000367a:	bf00      	nop
9000367c:	e000e010 	.word	0xe000e010

90003680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003680:	b580      	push	{r7, lr}
90003682:	b082      	sub	sp, #8
90003684:	af00      	add	r7, sp, #0
90003686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003688:	6878      	ldr	r0, [r7, #4]
9000368a:	f7ff ff29 	bl	900034e0 <__NVIC_SetPriorityGrouping>
}
9000368e:	bf00      	nop
90003690:	3708      	adds	r7, #8
90003692:	46bd      	mov	sp, r7
90003694:	bd80      	pop	{r7, pc}

90003696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90003696:	b580      	push	{r7, lr}
90003698:	b086      	sub	sp, #24
9000369a:	af00      	add	r7, sp, #0
9000369c:	4603      	mov	r3, r0
9000369e:	60b9      	str	r1, [r7, #8]
900036a0:	607a      	str	r2, [r7, #4]
900036a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
900036a4:	f7ff ff40 	bl	90003528 <__NVIC_GetPriorityGrouping>
900036a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
900036aa:	687a      	ldr	r2, [r7, #4]
900036ac:	68b9      	ldr	r1, [r7, #8]
900036ae:	6978      	ldr	r0, [r7, #20]
900036b0:	f7ff ff90 	bl	900035d4 <NVIC_EncodePriority>
900036b4:	4602      	mov	r2, r0
900036b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
900036ba:	4611      	mov	r1, r2
900036bc:	4618      	mov	r0, r3
900036be:	f7ff ff5f 	bl	90003580 <__NVIC_SetPriority>
}
900036c2:	bf00      	nop
900036c4:	3718      	adds	r7, #24
900036c6:	46bd      	mov	sp, r7
900036c8:	bd80      	pop	{r7, pc}

900036ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900036ca:	b580      	push	{r7, lr}
900036cc:	b082      	sub	sp, #8
900036ce:	af00      	add	r7, sp, #0
900036d0:	4603      	mov	r3, r0
900036d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900036d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900036d8:	4618      	mov	r0, r3
900036da:	f7ff ff33 	bl	90003544 <__NVIC_EnableIRQ>
}
900036de:	bf00      	nop
900036e0:	3708      	adds	r7, #8
900036e2:	46bd      	mov	sp, r7
900036e4:	bd80      	pop	{r7, pc}

900036e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
900036e6:	b580      	push	{r7, lr}
900036e8:	b082      	sub	sp, #8
900036ea:	af00      	add	r7, sp, #0
900036ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
900036ee:	6878      	ldr	r0, [r7, #4]
900036f0:	f7ff ffa4 	bl	9000363c <SysTick_Config>
900036f4:	4603      	mov	r3, r0
}
900036f6:	4618      	mov	r0, r3
900036f8:	3708      	adds	r7, #8
900036fa:	46bd      	mov	sp, r7
900036fc:	bd80      	pop	{r7, pc}
	...

90003700 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003700:	b480      	push	{r7}
90003702:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90003704:	f3bf 8f5f 	dmb	sy
}
90003708:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
9000370a:	4b07      	ldr	r3, [pc, #28]	@ (90003728 <HAL_MPU_Disable+0x28>)
9000370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000370e:	4a06      	ldr	r2, [pc, #24]	@ (90003728 <HAL_MPU_Disable+0x28>)
90003710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90003714:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90003716:	4b05      	ldr	r3, [pc, #20]	@ (9000372c <HAL_MPU_Disable+0x2c>)
90003718:	2200      	movs	r2, #0
9000371a:	605a      	str	r2, [r3, #4]
}
9000371c:	bf00      	nop
9000371e:	46bd      	mov	sp, r7
90003720:	f85d 7b04 	ldr.w	r7, [sp], #4
90003724:	4770      	bx	lr
90003726:	bf00      	nop
90003728:	e000ed00 	.word	0xe000ed00
9000372c:	e000ed90 	.word	0xe000ed90

90003730 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003730:	b480      	push	{r7}
90003732:	b083      	sub	sp, #12
90003734:	af00      	add	r7, sp, #0
90003736:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003738:	4a0b      	ldr	r2, [pc, #44]	@ (90003768 <HAL_MPU_Enable+0x38>)
9000373a:	687b      	ldr	r3, [r7, #4]
9000373c:	f043 0301 	orr.w	r3, r3, #1
90003740:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90003742:	4b0a      	ldr	r3, [pc, #40]	@ (9000376c <HAL_MPU_Enable+0x3c>)
90003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003746:	4a09      	ldr	r2, [pc, #36]	@ (9000376c <HAL_MPU_Enable+0x3c>)
90003748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000374c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
9000374e:	f3bf 8f4f 	dsb	sy
}
90003752:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90003754:	f3bf 8f6f 	isb	sy
}
90003758:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
9000375a:	bf00      	nop
9000375c:	370c      	adds	r7, #12
9000375e:	46bd      	mov	sp, r7
90003760:	f85d 7b04 	ldr.w	r7, [sp], #4
90003764:	4770      	bx	lr
90003766:	bf00      	nop
90003768:	e000ed90 	.word	0xe000ed90
9000376c:	e000ed00 	.word	0xe000ed00

90003770 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003770:	b480      	push	{r7}
90003772:	b083      	sub	sp, #12
90003774:	af00      	add	r7, sp, #0
90003776:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003778:	687b      	ldr	r3, [r7, #4]
9000377a:	785a      	ldrb	r2, [r3, #1]
9000377c:	4b1b      	ldr	r3, [pc, #108]	@ (900037ec <HAL_MPU_ConfigRegion+0x7c>)
9000377e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003780:	4b1a      	ldr	r3, [pc, #104]	@ (900037ec <HAL_MPU_ConfigRegion+0x7c>)
90003782:	691b      	ldr	r3, [r3, #16]
90003784:	4a19      	ldr	r2, [pc, #100]	@ (900037ec <HAL_MPU_ConfigRegion+0x7c>)
90003786:	f023 0301 	bic.w	r3, r3, #1
9000378a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
9000378c:	4a17      	ldr	r2, [pc, #92]	@ (900037ec <HAL_MPU_ConfigRegion+0x7c>)
9000378e:	687b      	ldr	r3, [r7, #4]
90003790:	685b      	ldr	r3, [r3, #4]
90003792:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003794:	687b      	ldr	r3, [r7, #4]
90003796:	7b1b      	ldrb	r3, [r3, #12]
90003798:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000379a:	687b      	ldr	r3, [r7, #4]
9000379c:	7adb      	ldrb	r3, [r3, #11]
9000379e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900037a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900037a2:	687b      	ldr	r3, [r7, #4]
900037a4:	7a9b      	ldrb	r3, [r3, #10]
900037a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900037a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900037aa:	687b      	ldr	r3, [r7, #4]
900037ac:	7b5b      	ldrb	r3, [r3, #13]
900037ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900037b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900037b2:	687b      	ldr	r3, [r7, #4]
900037b4:	7b9b      	ldrb	r3, [r3, #14]
900037b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900037b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900037ba:	687b      	ldr	r3, [r7, #4]
900037bc:	7bdb      	ldrb	r3, [r3, #15]
900037be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900037c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900037c2:	687b      	ldr	r3, [r7, #4]
900037c4:	7a5b      	ldrb	r3, [r3, #9]
900037c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900037c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900037ca:	687b      	ldr	r3, [r7, #4]
900037cc:	7a1b      	ldrb	r3, [r3, #8]
900037ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900037d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
900037d2:	687a      	ldr	r2, [r7, #4]
900037d4:	7812      	ldrb	r2, [r2, #0]
900037d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900037d8:	4a04      	ldr	r2, [pc, #16]	@ (900037ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900037da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900037dc:	6113      	str	r3, [r2, #16]
}
900037de:	bf00      	nop
900037e0:	370c      	adds	r7, #12
900037e2:	46bd      	mov	sp, r7
900037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900037e8:	4770      	bx	lr
900037ea:	bf00      	nop
900037ec:	e000ed90 	.word	0xe000ed90

900037f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900037f0:	b580      	push	{r7, lr}
900037f2:	b082      	sub	sp, #8
900037f4:	af00      	add	r7, sp, #0
900037f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900037f8:	687b      	ldr	r3, [r7, #4]
900037fa:	2b00      	cmp	r3, #0
900037fc:	d101      	bne.n	90003802 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
900037fe:	2301      	movs	r3, #1
90003800:	e04f      	b.n	900038a2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90003802:	687b      	ldr	r3, [r7, #4]
90003804:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90003808:	b2db      	uxtb	r3, r3
9000380a:	2b00      	cmp	r3, #0
9000380c:	d106      	bne.n	9000381c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
9000380e:	687b      	ldr	r3, [r7, #4]
90003810:	2200      	movs	r2, #0
90003812:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90003816:	6878      	ldr	r0, [r7, #4]
90003818:	f000 f84e 	bl	900038b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000381c:	687b      	ldr	r3, [r7, #4]
9000381e:	2202      	movs	r2, #2
90003820:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90003824:	687b      	ldr	r3, [r7, #4]
90003826:	681b      	ldr	r3, [r3, #0]
90003828:	681a      	ldr	r2, [r3, #0]
9000382a:	4b20      	ldr	r3, [pc, #128]	@ (900038ac <HAL_DMA2D_Init+0xbc>)
9000382c:	4013      	ands	r3, r2
9000382e:	687a      	ldr	r2, [r7, #4]
90003830:	6851      	ldr	r1, [r2, #4]
90003832:	687a      	ldr	r2, [r7, #4]
90003834:	69d2      	ldr	r2, [r2, #28]
90003836:	4311      	orrs	r1, r2
90003838:	687a      	ldr	r2, [r7, #4]
9000383a:	6812      	ldr	r2, [r2, #0]
9000383c:	430b      	orrs	r3, r1
9000383e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003840:	687b      	ldr	r3, [r7, #4]
90003842:	681b      	ldr	r3, [r3, #0]
90003844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90003846:	4b1a      	ldr	r3, [pc, #104]	@ (900038b0 <HAL_DMA2D_Init+0xc0>)
90003848:	4013      	ands	r3, r2
9000384a:	687a      	ldr	r2, [r7, #4]
9000384c:	6891      	ldr	r1, [r2, #8]
9000384e:	687a      	ldr	r2, [r7, #4]
90003850:	6992      	ldr	r2, [r2, #24]
90003852:	4311      	orrs	r1, r2
90003854:	687a      	ldr	r2, [r7, #4]
90003856:	6812      	ldr	r2, [r2, #0]
90003858:	430b      	orrs	r3, r1
9000385a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000385c:	687b      	ldr	r3, [r7, #4]
9000385e:	681b      	ldr	r3, [r3, #0]
90003860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
90003862:	4b14      	ldr	r3, [pc, #80]	@ (900038b4 <HAL_DMA2D_Init+0xc4>)
90003864:	4013      	ands	r3, r2
90003866:	687a      	ldr	r2, [r7, #4]
90003868:	68d1      	ldr	r1, [r2, #12]
9000386a:	687a      	ldr	r2, [r7, #4]
9000386c:	6812      	ldr	r2, [r2, #0]
9000386e:	430b      	orrs	r3, r1
90003870:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90003872:	687b      	ldr	r3, [r7, #4]
90003874:	681b      	ldr	r3, [r3, #0]
90003876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003878:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
9000387c:	687b      	ldr	r3, [r7, #4]
9000387e:	691b      	ldr	r3, [r3, #16]
90003880:	051a      	lsls	r2, r3, #20
90003882:	687b      	ldr	r3, [r7, #4]
90003884:	695b      	ldr	r3, [r3, #20]
90003886:	055b      	lsls	r3, r3, #21
90003888:	431a      	orrs	r2, r3
9000388a:	687b      	ldr	r3, [r7, #4]
9000388c:	681b      	ldr	r3, [r3, #0]
9000388e:	430a      	orrs	r2, r1
90003890:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003892:	687b      	ldr	r3, [r7, #4]
90003894:	2200      	movs	r2, #0
90003896:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003898:	687b      	ldr	r3, [r7, #4]
9000389a:	2201      	movs	r2, #1
9000389c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
900038a0:	2300      	movs	r3, #0
}
900038a2:	4618      	mov	r0, r3
900038a4:	3708      	adds	r7, #8
900038a6:	46bd      	mov	sp, r7
900038a8:	bd80      	pop	{r7, pc}
900038aa:	bf00      	nop
900038ac:	fff8ffbf 	.word	0xfff8ffbf
900038b0:	fffffef8 	.word	0xfffffef8
900038b4:	ffff0000 	.word	0xffff0000

900038b8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
900038b8:	b480      	push	{r7}
900038ba:	b083      	sub	sp, #12
900038bc:	af00      	add	r7, sp, #0
900038be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
900038c0:	bf00      	nop
900038c2:	370c      	adds	r7, #12
900038c4:	46bd      	mov	sp, r7
900038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900038ca:	4770      	bx	lr

900038cc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
900038cc:	b580      	push	{r7, lr}
900038ce:	b086      	sub	sp, #24
900038d0:	af02      	add	r7, sp, #8
900038d2:	60f8      	str	r0, [r7, #12]
900038d4:	60b9      	str	r1, [r7, #8]
900038d6:	607a      	str	r2, [r7, #4]
900038d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
900038da:	68fb      	ldr	r3, [r7, #12]
900038dc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900038e0:	2b01      	cmp	r3, #1
900038e2:	d101      	bne.n	900038e8 <HAL_DMA2D_Start+0x1c>
900038e4:	2302      	movs	r3, #2
900038e6:	e018      	b.n	9000391a <HAL_DMA2D_Start+0x4e>
900038e8:	68fb      	ldr	r3, [r7, #12]
900038ea:	2201      	movs	r2, #1
900038ec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900038f0:	68fb      	ldr	r3, [r7, #12]
900038f2:	2202      	movs	r2, #2
900038f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900038f8:	69bb      	ldr	r3, [r7, #24]
900038fa:	9300      	str	r3, [sp, #0]
900038fc:	683b      	ldr	r3, [r7, #0]
900038fe:	687a      	ldr	r2, [r7, #4]
90003900:	68b9      	ldr	r1, [r7, #8]
90003902:	68f8      	ldr	r0, [r7, #12]
90003904:	f000 f9a4 	bl	90003c50 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003908:	68fb      	ldr	r3, [r7, #12]
9000390a:	681b      	ldr	r3, [r3, #0]
9000390c:	681a      	ldr	r2, [r3, #0]
9000390e:	68fb      	ldr	r3, [r7, #12]
90003910:	681b      	ldr	r3, [r3, #0]
90003912:	f042 0201 	orr.w	r2, r2, #1
90003916:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003918:	2300      	movs	r3, #0
}
9000391a:	4618      	mov	r0, r3
9000391c:	3710      	adds	r7, #16
9000391e:	46bd      	mov	sp, r7
90003920:	bd80      	pop	{r7, pc}

90003922 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90003922:	b580      	push	{r7, lr}
90003924:	b086      	sub	sp, #24
90003926:	af00      	add	r7, sp, #0
90003928:	6078      	str	r0, [r7, #4]
9000392a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
9000392c:	2300      	movs	r3, #0
9000392e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003930:	687b      	ldr	r3, [r7, #4]
90003932:	681b      	ldr	r3, [r3, #0]
90003934:	681b      	ldr	r3, [r3, #0]
90003936:	f003 0301 	and.w	r3, r3, #1
9000393a:	2b00      	cmp	r3, #0
9000393c:	d056      	beq.n	900039ec <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
9000393e:	f7ff fd83 	bl	90003448 <HAL_GetTick>
90003942:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003944:	e04b      	b.n	900039de <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003946:	687b      	ldr	r3, [r7, #4]
90003948:	681b      	ldr	r3, [r3, #0]
9000394a:	685b      	ldr	r3, [r3, #4]
9000394c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
9000394e:	68fb      	ldr	r3, [r7, #12]
90003950:	f003 0321 	and.w	r3, r3, #33	@ 0x21
90003954:	2b00      	cmp	r3, #0
90003956:	d023      	beq.n	900039a0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003958:	68fb      	ldr	r3, [r7, #12]
9000395a:	f003 0320 	and.w	r3, r3, #32
9000395e:	2b00      	cmp	r3, #0
90003960:	d005      	beq.n	9000396e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003962:	687b      	ldr	r3, [r7, #4]
90003964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003966:	f043 0202 	orr.w	r2, r3, #2
9000396a:	687b      	ldr	r3, [r7, #4]
9000396c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000396e:	68fb      	ldr	r3, [r7, #12]
90003970:	f003 0301 	and.w	r3, r3, #1
90003974:	2b00      	cmp	r3, #0
90003976:	d005      	beq.n	90003984 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003978:	687b      	ldr	r3, [r7, #4]
9000397a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000397c:	f043 0201 	orr.w	r2, r3, #1
90003980:	687b      	ldr	r3, [r7, #4]
90003982:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003984:	687b      	ldr	r3, [r7, #4]
90003986:	681b      	ldr	r3, [r3, #0]
90003988:	2221      	movs	r2, #33	@ 0x21
9000398a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000398c:	687b      	ldr	r3, [r7, #4]
9000398e:	2204      	movs	r2, #4
90003990:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003994:	687b      	ldr	r3, [r7, #4]
90003996:	2200      	movs	r2, #0
90003998:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
9000399c:	2301      	movs	r3, #1
9000399e:	e0a5      	b.n	90003aec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900039a0:	683b      	ldr	r3, [r7, #0]
900039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
900039a6:	d01a      	beq.n	900039de <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900039a8:	f7ff fd4e 	bl	90003448 <HAL_GetTick>
900039ac:	4602      	mov	r2, r0
900039ae:	697b      	ldr	r3, [r7, #20]
900039b0:	1ad3      	subs	r3, r2, r3
900039b2:	683a      	ldr	r2, [r7, #0]
900039b4:	429a      	cmp	r2, r3
900039b6:	d302      	bcc.n	900039be <HAL_DMA2D_PollForTransfer+0x9c>
900039b8:	683b      	ldr	r3, [r7, #0]
900039ba:	2b00      	cmp	r3, #0
900039bc:	d10f      	bne.n	900039de <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900039be:	687b      	ldr	r3, [r7, #4]
900039c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900039c2:	f043 0220 	orr.w	r2, r3, #32
900039c6:	687b      	ldr	r3, [r7, #4]
900039c8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
900039ca:	687b      	ldr	r3, [r7, #4]
900039cc:	2203      	movs	r2, #3
900039ce:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
900039d2:	687b      	ldr	r3, [r7, #4]
900039d4:	2200      	movs	r2, #0
900039d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
900039da:	2303      	movs	r3, #3
900039dc:	e086      	b.n	90003aec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900039de:	687b      	ldr	r3, [r7, #4]
900039e0:	681b      	ldr	r3, [r3, #0]
900039e2:	685b      	ldr	r3, [r3, #4]
900039e4:	f003 0302 	and.w	r3, r3, #2
900039e8:	2b00      	cmp	r3, #0
900039ea:	d0ac      	beq.n	90003946 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
900039ec:	687b      	ldr	r3, [r7, #4]
900039ee:	681b      	ldr	r3, [r3, #0]
900039f0:	69db      	ldr	r3, [r3, #28]
900039f2:	f003 0320 	and.w	r3, r3, #32
900039f6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
900039f8:	687b      	ldr	r3, [r7, #4]
900039fa:	681b      	ldr	r3, [r3, #0]
900039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900039fe:	f003 0320 	and.w	r3, r3, #32
90003a02:	693a      	ldr	r2, [r7, #16]
90003a04:	4313      	orrs	r3, r2
90003a06:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003a08:	693b      	ldr	r3, [r7, #16]
90003a0a:	2b00      	cmp	r3, #0
90003a0c:	d061      	beq.n	90003ad2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003a0e:	f7ff fd1b 	bl	90003448 <HAL_GetTick>
90003a12:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003a14:	e056      	b.n	90003ac4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003a16:	687b      	ldr	r3, [r7, #4]
90003a18:	681b      	ldr	r3, [r3, #0]
90003a1a:	685b      	ldr	r3, [r3, #4]
90003a1c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003a1e:	68fb      	ldr	r3, [r7, #12]
90003a20:	f003 0329 	and.w	r3, r3, #41	@ 0x29
90003a24:	2b00      	cmp	r3, #0
90003a26:	d02e      	beq.n	90003a86 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003a28:	68fb      	ldr	r3, [r7, #12]
90003a2a:	f003 0308 	and.w	r3, r3, #8
90003a2e:	2b00      	cmp	r3, #0
90003a30:	d005      	beq.n	90003a3e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90003a32:	687b      	ldr	r3, [r7, #4]
90003a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003a36:	f043 0204 	orr.w	r2, r3, #4
90003a3a:	687b      	ldr	r3, [r7, #4]
90003a3c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003a3e:	68fb      	ldr	r3, [r7, #12]
90003a40:	f003 0320 	and.w	r3, r3, #32
90003a44:	2b00      	cmp	r3, #0
90003a46:	d005      	beq.n	90003a54 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003a48:	687b      	ldr	r3, [r7, #4]
90003a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003a4c:	f043 0202 	orr.w	r2, r3, #2
90003a50:	687b      	ldr	r3, [r7, #4]
90003a52:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003a54:	68fb      	ldr	r3, [r7, #12]
90003a56:	f003 0301 	and.w	r3, r3, #1
90003a5a:	2b00      	cmp	r3, #0
90003a5c:	d005      	beq.n	90003a6a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003a5e:	687b      	ldr	r3, [r7, #4]
90003a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003a62:	f043 0201 	orr.w	r2, r3, #1
90003a66:	687b      	ldr	r3, [r7, #4]
90003a68:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003a6a:	687b      	ldr	r3, [r7, #4]
90003a6c:	681b      	ldr	r3, [r3, #0]
90003a6e:	2229      	movs	r2, #41	@ 0x29
90003a70:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003a72:	687b      	ldr	r3, [r7, #4]
90003a74:	2204      	movs	r2, #4
90003a76:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003a7a:	687b      	ldr	r3, [r7, #4]
90003a7c:	2200      	movs	r2, #0
90003a7e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003a82:	2301      	movs	r3, #1
90003a84:	e032      	b.n	90003aec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003a86:	683b      	ldr	r3, [r7, #0]
90003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
90003a8c:	d01a      	beq.n	90003ac4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003a8e:	f7ff fcdb 	bl	90003448 <HAL_GetTick>
90003a92:	4602      	mov	r2, r0
90003a94:	697b      	ldr	r3, [r7, #20]
90003a96:	1ad3      	subs	r3, r2, r3
90003a98:	683a      	ldr	r2, [r7, #0]
90003a9a:	429a      	cmp	r2, r3
90003a9c:	d302      	bcc.n	90003aa4 <HAL_DMA2D_PollForTransfer+0x182>
90003a9e:	683b      	ldr	r3, [r7, #0]
90003aa0:	2b00      	cmp	r3, #0
90003aa2:	d10f      	bne.n	90003ac4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003aa4:	687b      	ldr	r3, [r7, #4]
90003aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003aa8:	f043 0220 	orr.w	r2, r3, #32
90003aac:	687b      	ldr	r3, [r7, #4]
90003aae:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003ab0:	687b      	ldr	r3, [r7, #4]
90003ab2:	2203      	movs	r2, #3
90003ab4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003ab8:	687b      	ldr	r3, [r7, #4]
90003aba:	2200      	movs	r2, #0
90003abc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003ac0:	2303      	movs	r3, #3
90003ac2:	e013      	b.n	90003aec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003ac4:	687b      	ldr	r3, [r7, #4]
90003ac6:	681b      	ldr	r3, [r3, #0]
90003ac8:	685b      	ldr	r3, [r3, #4]
90003aca:	f003 0310 	and.w	r3, r3, #16
90003ace:	2b00      	cmp	r3, #0
90003ad0:	d0a1      	beq.n	90003a16 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003ad2:	687b      	ldr	r3, [r7, #4]
90003ad4:	681b      	ldr	r3, [r3, #0]
90003ad6:	2212      	movs	r2, #18
90003ad8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003ada:	687b      	ldr	r3, [r7, #4]
90003adc:	2201      	movs	r2, #1
90003ade:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003ae2:	687b      	ldr	r3, [r7, #4]
90003ae4:	2200      	movs	r2, #0
90003ae6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003aea:	2300      	movs	r3, #0
}
90003aec:	4618      	mov	r0, r3
90003aee:	3718      	adds	r7, #24
90003af0:	46bd      	mov	sp, r7
90003af2:	bd80      	pop	{r7, pc}

90003af4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003af4:	b480      	push	{r7}
90003af6:	b087      	sub	sp, #28
90003af8:	af00      	add	r7, sp, #0
90003afa:	6078      	str	r0, [r7, #4]
90003afc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003afe:	687b      	ldr	r3, [r7, #4]
90003b00:	685b      	ldr	r3, [r3, #4]
90003b02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90003b06:	683b      	ldr	r3, [r7, #0]
90003b08:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003b0a:	687b      	ldr	r3, [r7, #4]
90003b0c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003b10:	2b01      	cmp	r3, #1
90003b12:	d101      	bne.n	90003b18 <HAL_DMA2D_ConfigLayer+0x24>
90003b14:	2302      	movs	r3, #2
90003b16:	e092      	b.n	90003c3e <HAL_DMA2D_ConfigLayer+0x14a>
90003b18:	687b      	ldr	r3, [r7, #4]
90003b1a:	2201      	movs	r2, #1
90003b1c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003b20:	687b      	ldr	r3, [r7, #4]
90003b22:	2202      	movs	r2, #2
90003b24:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003b28:	683a      	ldr	r2, [r7, #0]
90003b2a:	4613      	mov	r3, r2
90003b2c:	00db      	lsls	r3, r3, #3
90003b2e:	1a9b      	subs	r3, r3, r2
90003b30:	009b      	lsls	r3, r3, #2
90003b32:	3328      	adds	r3, #40	@ 0x28
90003b34:	687a      	ldr	r2, [r7, #4]
90003b36:	4413      	add	r3, r2
90003b38:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003b3a:	68fb      	ldr	r3, [r7, #12]
90003b3c:	685a      	ldr	r2, [r3, #4]
90003b3e:	68fb      	ldr	r3, [r7, #12]
90003b40:	689b      	ldr	r3, [r3, #8]
90003b42:	041b      	lsls	r3, r3, #16
90003b44:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003b46:	68fb      	ldr	r3, [r7, #12]
90003b48:	691b      	ldr	r3, [r3, #16]
90003b4a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003b4c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003b4e:	68fb      	ldr	r3, [r7, #12]
90003b50:	695b      	ldr	r3, [r3, #20]
90003b52:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003b54:	4313      	orrs	r3, r2
90003b56:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003b58:	4b3c      	ldr	r3, [pc, #240]	@ (90003c4c <HAL_DMA2D_ConfigLayer+0x158>)
90003b5a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003b5c:	68fb      	ldr	r3, [r7, #12]
90003b5e:	685b      	ldr	r3, [r3, #4]
90003b60:	2b0a      	cmp	r3, #10
90003b62:	d003      	beq.n	90003b6c <HAL_DMA2D_ConfigLayer+0x78>
90003b64:	68fb      	ldr	r3, [r7, #12]
90003b66:	685b      	ldr	r3, [r3, #4]
90003b68:	2b09      	cmp	r3, #9
90003b6a:	d107      	bne.n	90003b7c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003b6c:	68fb      	ldr	r3, [r7, #12]
90003b6e:	68db      	ldr	r3, [r3, #12]
90003b70:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003b74:	693a      	ldr	r2, [r7, #16]
90003b76:	4313      	orrs	r3, r2
90003b78:	613b      	str	r3, [r7, #16]
90003b7a:	e005      	b.n	90003b88 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003b7c:	68fb      	ldr	r3, [r7, #12]
90003b7e:	68db      	ldr	r3, [r3, #12]
90003b80:	061b      	lsls	r3, r3, #24
90003b82:	693a      	ldr	r2, [r7, #16]
90003b84:	4313      	orrs	r3, r2
90003b86:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003b88:	683b      	ldr	r3, [r7, #0]
90003b8a:	2b00      	cmp	r3, #0
90003b8c:	d120      	bne.n	90003bd0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003b8e:	687b      	ldr	r3, [r7, #4]
90003b90:	681b      	ldr	r3, [r3, #0]
90003b92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003b94:	697b      	ldr	r3, [r7, #20]
90003b96:	43db      	mvns	r3, r3
90003b98:	ea02 0103 	and.w	r1, r2, r3
90003b9c:	687b      	ldr	r3, [r7, #4]
90003b9e:	681b      	ldr	r3, [r3, #0]
90003ba0:	693a      	ldr	r2, [r7, #16]
90003ba2:	430a      	orrs	r2, r1
90003ba4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003ba6:	687b      	ldr	r3, [r7, #4]
90003ba8:	681b      	ldr	r3, [r3, #0]
90003baa:	68fa      	ldr	r2, [r7, #12]
90003bac:	6812      	ldr	r2, [r2, #0]
90003bae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003bb0:	68fb      	ldr	r3, [r7, #12]
90003bb2:	685b      	ldr	r3, [r3, #4]
90003bb4:	2b0a      	cmp	r3, #10
90003bb6:	d003      	beq.n	90003bc0 <HAL_DMA2D_ConfigLayer+0xcc>
90003bb8:	68fb      	ldr	r3, [r7, #12]
90003bba:	685b      	ldr	r3, [r3, #4]
90003bbc:	2b09      	cmp	r3, #9
90003bbe:	d135      	bne.n	90003c2c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003bc0:	68fb      	ldr	r3, [r7, #12]
90003bc2:	68da      	ldr	r2, [r3, #12]
90003bc4:	687b      	ldr	r3, [r7, #4]
90003bc6:	681b      	ldr	r3, [r3, #0]
90003bc8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003bcc:	629a      	str	r2, [r3, #40]	@ 0x28
90003bce:	e02d      	b.n	90003c2c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003bd0:	68fb      	ldr	r3, [r7, #12]
90003bd2:	685b      	ldr	r3, [r3, #4]
90003bd4:	2b0b      	cmp	r3, #11
90003bd6:	d109      	bne.n	90003bec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003bd8:	68fb      	ldr	r3, [r7, #12]
90003bda:	699b      	ldr	r3, [r3, #24]
90003bdc:	049b      	lsls	r3, r3, #18
90003bde:	693a      	ldr	r2, [r7, #16]
90003be0:	4313      	orrs	r3, r2
90003be2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003be4:	697b      	ldr	r3, [r7, #20]
90003be6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
90003bea:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003bec:	687b      	ldr	r3, [r7, #4]
90003bee:	681b      	ldr	r3, [r3, #0]
90003bf0:	69da      	ldr	r2, [r3, #28]
90003bf2:	697b      	ldr	r3, [r7, #20]
90003bf4:	43db      	mvns	r3, r3
90003bf6:	ea02 0103 	and.w	r1, r2, r3
90003bfa:	687b      	ldr	r3, [r7, #4]
90003bfc:	681b      	ldr	r3, [r3, #0]
90003bfe:	693a      	ldr	r2, [r7, #16]
90003c00:	430a      	orrs	r2, r1
90003c02:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003c04:	687b      	ldr	r3, [r7, #4]
90003c06:	681b      	ldr	r3, [r3, #0]
90003c08:	68fa      	ldr	r2, [r7, #12]
90003c0a:	6812      	ldr	r2, [r2, #0]
90003c0c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003c0e:	68fb      	ldr	r3, [r7, #12]
90003c10:	685b      	ldr	r3, [r3, #4]
90003c12:	2b0a      	cmp	r3, #10
90003c14:	d003      	beq.n	90003c1e <HAL_DMA2D_ConfigLayer+0x12a>
90003c16:	68fb      	ldr	r3, [r7, #12]
90003c18:	685b      	ldr	r3, [r3, #4]
90003c1a:	2b09      	cmp	r3, #9
90003c1c:	d106      	bne.n	90003c2c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003c1e:	68fb      	ldr	r3, [r7, #12]
90003c20:	68da      	ldr	r2, [r3, #12]
90003c22:	687b      	ldr	r3, [r7, #4]
90003c24:	681b      	ldr	r3, [r3, #0]
90003c26:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003c2a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003c2c:	687b      	ldr	r3, [r7, #4]
90003c2e:	2201      	movs	r2, #1
90003c30:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003c34:	687b      	ldr	r3, [r7, #4]
90003c36:	2200      	movs	r2, #0
90003c38:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003c3c:	2300      	movs	r3, #0
}
90003c3e:	4618      	mov	r0, r3
90003c40:	371c      	adds	r7, #28
90003c42:	46bd      	mov	sp, r7
90003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
90003c48:	4770      	bx	lr
90003c4a:	bf00      	nop
90003c4c:	ff33000f 	.word	0xff33000f

90003c50 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003c50:	b480      	push	{r7}
90003c52:	b08b      	sub	sp, #44	@ 0x2c
90003c54:	af00      	add	r7, sp, #0
90003c56:	60f8      	str	r0, [r7, #12]
90003c58:	60b9      	str	r1, [r7, #8]
90003c5a:	607a      	str	r2, [r7, #4]
90003c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003c5e:	68fb      	ldr	r3, [r7, #12]
90003c60:	681b      	ldr	r3, [r3, #0]
90003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003c64:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003c68:	683b      	ldr	r3, [r7, #0]
90003c6a:	041a      	lsls	r2, r3, #16
90003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003c6e:	431a      	orrs	r2, r3
90003c70:	68fb      	ldr	r3, [r7, #12]
90003c72:	681b      	ldr	r3, [r3, #0]
90003c74:	430a      	orrs	r2, r1
90003c76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003c78:	68fb      	ldr	r3, [r7, #12]
90003c7a:	681b      	ldr	r3, [r3, #0]
90003c7c:	687a      	ldr	r2, [r7, #4]
90003c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003c80:	68fb      	ldr	r3, [r7, #12]
90003c82:	685b      	ldr	r3, [r3, #4]
90003c84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003c88:	d174      	bne.n	90003d74 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003c8a:	68bb      	ldr	r3, [r7, #8]
90003c8c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003c90:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003c92:	68bb      	ldr	r3, [r7, #8]
90003c94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003c98:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003c9a:	68bb      	ldr	r3, [r7, #8]
90003c9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003ca0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003ca2:	68bb      	ldr	r3, [r7, #8]
90003ca4:	b2db      	uxtb	r3, r3
90003ca6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003ca8:	68fb      	ldr	r3, [r7, #12]
90003caa:	689b      	ldr	r3, [r3, #8]
90003cac:	2b00      	cmp	r3, #0
90003cae:	d108      	bne.n	90003cc2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003cb0:	69ba      	ldr	r2, [r7, #24]
90003cb2:	69fb      	ldr	r3, [r7, #28]
90003cb4:	431a      	orrs	r2, r3
90003cb6:	6a3b      	ldr	r3, [r7, #32]
90003cb8:	4313      	orrs	r3, r2
90003cba:	697a      	ldr	r2, [r7, #20]
90003cbc:	4313      	orrs	r3, r2
90003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
90003cc0:	e053      	b.n	90003d6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003cc2:	68fb      	ldr	r3, [r7, #12]
90003cc4:	689b      	ldr	r3, [r3, #8]
90003cc6:	2b01      	cmp	r3, #1
90003cc8:	d106      	bne.n	90003cd8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003cca:	69ba      	ldr	r2, [r7, #24]
90003ccc:	69fb      	ldr	r3, [r7, #28]
90003cce:	4313      	orrs	r3, r2
90003cd0:	697a      	ldr	r2, [r7, #20]
90003cd2:	4313      	orrs	r3, r2
90003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
90003cd6:	e048      	b.n	90003d6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003cd8:	68fb      	ldr	r3, [r7, #12]
90003cda:	689b      	ldr	r3, [r3, #8]
90003cdc:	2b02      	cmp	r3, #2
90003cde:	d111      	bne.n	90003d04 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003ce0:	69fb      	ldr	r3, [r7, #28]
90003ce2:	0cdb      	lsrs	r3, r3, #19
90003ce4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003ce6:	69bb      	ldr	r3, [r7, #24]
90003ce8:	0a9b      	lsrs	r3, r3, #10
90003cea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003cec:	697b      	ldr	r3, [r7, #20]
90003cee:	08db      	lsrs	r3, r3, #3
90003cf0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003cf2:	69bb      	ldr	r3, [r7, #24]
90003cf4:	015a      	lsls	r2, r3, #5
90003cf6:	69fb      	ldr	r3, [r7, #28]
90003cf8:	02db      	lsls	r3, r3, #11
90003cfa:	4313      	orrs	r3, r2
90003cfc:	697a      	ldr	r2, [r7, #20]
90003cfe:	4313      	orrs	r3, r2
90003d00:	627b      	str	r3, [r7, #36]	@ 0x24
90003d02:	e032      	b.n	90003d6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003d04:	68fb      	ldr	r3, [r7, #12]
90003d06:	689b      	ldr	r3, [r3, #8]
90003d08:	2b03      	cmp	r3, #3
90003d0a:	d117      	bne.n	90003d3c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003d0c:	6a3b      	ldr	r3, [r7, #32]
90003d0e:	0fdb      	lsrs	r3, r3, #31
90003d10:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003d12:	69fb      	ldr	r3, [r7, #28]
90003d14:	0cdb      	lsrs	r3, r3, #19
90003d16:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003d18:	69bb      	ldr	r3, [r7, #24]
90003d1a:	0adb      	lsrs	r3, r3, #11
90003d1c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003d1e:	697b      	ldr	r3, [r7, #20]
90003d20:	08db      	lsrs	r3, r3, #3
90003d22:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003d24:	69bb      	ldr	r3, [r7, #24]
90003d26:	015a      	lsls	r2, r3, #5
90003d28:	69fb      	ldr	r3, [r7, #28]
90003d2a:	029b      	lsls	r3, r3, #10
90003d2c:	431a      	orrs	r2, r3
90003d2e:	6a3b      	ldr	r3, [r7, #32]
90003d30:	03db      	lsls	r3, r3, #15
90003d32:	4313      	orrs	r3, r2
90003d34:	697a      	ldr	r2, [r7, #20]
90003d36:	4313      	orrs	r3, r2
90003d38:	627b      	str	r3, [r7, #36]	@ 0x24
90003d3a:	e016      	b.n	90003d6a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003d3c:	6a3b      	ldr	r3, [r7, #32]
90003d3e:	0f1b      	lsrs	r3, r3, #28
90003d40:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003d42:	69fb      	ldr	r3, [r7, #28]
90003d44:	0d1b      	lsrs	r3, r3, #20
90003d46:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003d48:	69bb      	ldr	r3, [r7, #24]
90003d4a:	0b1b      	lsrs	r3, r3, #12
90003d4c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003d4e:	697b      	ldr	r3, [r7, #20]
90003d50:	091b      	lsrs	r3, r3, #4
90003d52:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003d54:	69bb      	ldr	r3, [r7, #24]
90003d56:	011a      	lsls	r2, r3, #4
90003d58:	69fb      	ldr	r3, [r7, #28]
90003d5a:	021b      	lsls	r3, r3, #8
90003d5c:	431a      	orrs	r2, r3
90003d5e:	6a3b      	ldr	r3, [r7, #32]
90003d60:	031b      	lsls	r3, r3, #12
90003d62:	4313      	orrs	r3, r2
90003d64:	697a      	ldr	r2, [r7, #20]
90003d66:	4313      	orrs	r3, r2
90003d68:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003d6a:	68fb      	ldr	r3, [r7, #12]
90003d6c:	681b      	ldr	r3, [r3, #0]
90003d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003d70:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003d72:	e00d      	b.n	90003d90 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003d74:	68fb      	ldr	r3, [r7, #12]
90003d76:	685b      	ldr	r3, [r3, #4]
90003d78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003d7c:	d104      	bne.n	90003d88 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003d7e:	68fb      	ldr	r3, [r7, #12]
90003d80:	681b      	ldr	r3, [r3, #0]
90003d82:	68ba      	ldr	r2, [r7, #8]
90003d84:	615a      	str	r2, [r3, #20]
}
90003d86:	e003      	b.n	90003d90 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003d88:	68fb      	ldr	r3, [r7, #12]
90003d8a:	681b      	ldr	r3, [r3, #0]
90003d8c:	68ba      	ldr	r2, [r7, #8]
90003d8e:	60da      	str	r2, [r3, #12]
}
90003d90:	bf00      	nop
90003d92:	372c      	adds	r7, #44	@ 0x2c
90003d94:	46bd      	mov	sp, r7
90003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d9a:	4770      	bx	lr

90003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003d9c:	b480      	push	{r7}
90003d9e:	b089      	sub	sp, #36	@ 0x24
90003da0:	af00      	add	r7, sp, #0
90003da2:	6078      	str	r0, [r7, #4]
90003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003da6:	2300      	movs	r3, #0
90003da8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003daa:	4b89      	ldr	r3, [pc, #548]	@ (90003fd0 <HAL_GPIO_Init+0x234>)
90003dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003dae:	e194      	b.n	900040da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003db0:	683b      	ldr	r3, [r7, #0]
90003db2:	681a      	ldr	r2, [r3, #0]
90003db4:	2101      	movs	r1, #1
90003db6:	69fb      	ldr	r3, [r7, #28]
90003db8:	fa01 f303 	lsl.w	r3, r1, r3
90003dbc:	4013      	ands	r3, r2
90003dbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003dc0:	693b      	ldr	r3, [r7, #16]
90003dc2:	2b00      	cmp	r3, #0
90003dc4:	f000 8186 	beq.w	900040d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003dc8:	683b      	ldr	r3, [r7, #0]
90003dca:	685b      	ldr	r3, [r3, #4]
90003dcc:	f003 0303 	and.w	r3, r3, #3
90003dd0:	2b01      	cmp	r3, #1
90003dd2:	d005      	beq.n	90003de0 <HAL_GPIO_Init+0x44>
90003dd4:	683b      	ldr	r3, [r7, #0]
90003dd6:	685b      	ldr	r3, [r3, #4]
90003dd8:	f003 0303 	and.w	r3, r3, #3
90003ddc:	2b02      	cmp	r3, #2
90003dde:	d130      	bne.n	90003e42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003de0:	687b      	ldr	r3, [r7, #4]
90003de2:	689b      	ldr	r3, [r3, #8]
90003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003de6:	69fb      	ldr	r3, [r7, #28]
90003de8:	005b      	lsls	r3, r3, #1
90003dea:	2203      	movs	r2, #3
90003dec:	fa02 f303 	lsl.w	r3, r2, r3
90003df0:	43db      	mvns	r3, r3
90003df2:	69ba      	ldr	r2, [r7, #24]
90003df4:	4013      	ands	r3, r2
90003df6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003df8:	683b      	ldr	r3, [r7, #0]
90003dfa:	68da      	ldr	r2, [r3, #12]
90003dfc:	69fb      	ldr	r3, [r7, #28]
90003dfe:	005b      	lsls	r3, r3, #1
90003e00:	fa02 f303 	lsl.w	r3, r2, r3
90003e04:	69ba      	ldr	r2, [r7, #24]
90003e06:	4313      	orrs	r3, r2
90003e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003e0a:	687b      	ldr	r3, [r7, #4]
90003e0c:	69ba      	ldr	r2, [r7, #24]
90003e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003e10:	687b      	ldr	r3, [r7, #4]
90003e12:	685b      	ldr	r3, [r3, #4]
90003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003e16:	2201      	movs	r2, #1
90003e18:	69fb      	ldr	r3, [r7, #28]
90003e1a:	fa02 f303 	lsl.w	r3, r2, r3
90003e1e:	43db      	mvns	r3, r3
90003e20:	69ba      	ldr	r2, [r7, #24]
90003e22:	4013      	ands	r3, r2
90003e24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003e26:	683b      	ldr	r3, [r7, #0]
90003e28:	685b      	ldr	r3, [r3, #4]
90003e2a:	091b      	lsrs	r3, r3, #4
90003e2c:	f003 0201 	and.w	r2, r3, #1
90003e30:	69fb      	ldr	r3, [r7, #28]
90003e32:	fa02 f303 	lsl.w	r3, r2, r3
90003e36:	69ba      	ldr	r2, [r7, #24]
90003e38:	4313      	orrs	r3, r2
90003e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003e3c:	687b      	ldr	r3, [r7, #4]
90003e3e:	69ba      	ldr	r2, [r7, #24]
90003e40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003e42:	683b      	ldr	r3, [r7, #0]
90003e44:	685b      	ldr	r3, [r3, #4]
90003e46:	f003 0303 	and.w	r3, r3, #3
90003e4a:	2b03      	cmp	r3, #3
90003e4c:	d017      	beq.n	90003e7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003e4e:	687b      	ldr	r3, [r7, #4]
90003e50:	68db      	ldr	r3, [r3, #12]
90003e52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003e54:	69fb      	ldr	r3, [r7, #28]
90003e56:	005b      	lsls	r3, r3, #1
90003e58:	2203      	movs	r2, #3
90003e5a:	fa02 f303 	lsl.w	r3, r2, r3
90003e5e:	43db      	mvns	r3, r3
90003e60:	69ba      	ldr	r2, [r7, #24]
90003e62:	4013      	ands	r3, r2
90003e64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003e66:	683b      	ldr	r3, [r7, #0]
90003e68:	689a      	ldr	r2, [r3, #8]
90003e6a:	69fb      	ldr	r3, [r7, #28]
90003e6c:	005b      	lsls	r3, r3, #1
90003e6e:	fa02 f303 	lsl.w	r3, r2, r3
90003e72:	69ba      	ldr	r2, [r7, #24]
90003e74:	4313      	orrs	r3, r2
90003e76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003e78:	687b      	ldr	r3, [r7, #4]
90003e7a:	69ba      	ldr	r2, [r7, #24]
90003e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003e7e:	683b      	ldr	r3, [r7, #0]
90003e80:	685b      	ldr	r3, [r3, #4]
90003e82:	f003 0303 	and.w	r3, r3, #3
90003e86:	2b02      	cmp	r3, #2
90003e88:	d123      	bne.n	90003ed2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003e8a:	69fb      	ldr	r3, [r7, #28]
90003e8c:	08da      	lsrs	r2, r3, #3
90003e8e:	687b      	ldr	r3, [r7, #4]
90003e90:	3208      	adds	r2, #8
90003e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003e98:	69fb      	ldr	r3, [r7, #28]
90003e9a:	f003 0307 	and.w	r3, r3, #7
90003e9e:	009b      	lsls	r3, r3, #2
90003ea0:	220f      	movs	r2, #15
90003ea2:	fa02 f303 	lsl.w	r3, r2, r3
90003ea6:	43db      	mvns	r3, r3
90003ea8:	69ba      	ldr	r2, [r7, #24]
90003eaa:	4013      	ands	r3, r2
90003eac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003eae:	683b      	ldr	r3, [r7, #0]
90003eb0:	691a      	ldr	r2, [r3, #16]
90003eb2:	69fb      	ldr	r3, [r7, #28]
90003eb4:	f003 0307 	and.w	r3, r3, #7
90003eb8:	009b      	lsls	r3, r3, #2
90003eba:	fa02 f303 	lsl.w	r3, r2, r3
90003ebe:	69ba      	ldr	r2, [r7, #24]
90003ec0:	4313      	orrs	r3, r2
90003ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003ec4:	69fb      	ldr	r3, [r7, #28]
90003ec6:	08da      	lsrs	r2, r3, #3
90003ec8:	687b      	ldr	r3, [r7, #4]
90003eca:	3208      	adds	r2, #8
90003ecc:	69b9      	ldr	r1, [r7, #24]
90003ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003ed2:	687b      	ldr	r3, [r7, #4]
90003ed4:	681b      	ldr	r3, [r3, #0]
90003ed6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003ed8:	69fb      	ldr	r3, [r7, #28]
90003eda:	005b      	lsls	r3, r3, #1
90003edc:	2203      	movs	r2, #3
90003ede:	fa02 f303 	lsl.w	r3, r2, r3
90003ee2:	43db      	mvns	r3, r3
90003ee4:	69ba      	ldr	r2, [r7, #24]
90003ee6:	4013      	ands	r3, r2
90003ee8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003eea:	683b      	ldr	r3, [r7, #0]
90003eec:	685b      	ldr	r3, [r3, #4]
90003eee:	f003 0203 	and.w	r2, r3, #3
90003ef2:	69fb      	ldr	r3, [r7, #28]
90003ef4:	005b      	lsls	r3, r3, #1
90003ef6:	fa02 f303 	lsl.w	r3, r2, r3
90003efa:	69ba      	ldr	r2, [r7, #24]
90003efc:	4313      	orrs	r3, r2
90003efe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003f00:	687b      	ldr	r3, [r7, #4]
90003f02:	69ba      	ldr	r2, [r7, #24]
90003f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003f06:	683b      	ldr	r3, [r7, #0]
90003f08:	685b      	ldr	r3, [r3, #4]
90003f0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003f0e:	2b00      	cmp	r3, #0
90003f10:	f000 80e0 	beq.w	900040d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003f14:	4b2f      	ldr	r3, [pc, #188]	@ (90003fd4 <HAL_GPIO_Init+0x238>)
90003f16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003f1a:	4a2e      	ldr	r2, [pc, #184]	@ (90003fd4 <HAL_GPIO_Init+0x238>)
90003f1c:	f043 0302 	orr.w	r3, r3, #2
90003f20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003f24:	4b2b      	ldr	r3, [pc, #172]	@ (90003fd4 <HAL_GPIO_Init+0x238>)
90003f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003f2a:	f003 0302 	and.w	r3, r3, #2
90003f2e:	60fb      	str	r3, [r7, #12]
90003f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003f32:	4a29      	ldr	r2, [pc, #164]	@ (90003fd8 <HAL_GPIO_Init+0x23c>)
90003f34:	69fb      	ldr	r3, [r7, #28]
90003f36:	089b      	lsrs	r3, r3, #2
90003f38:	3302      	adds	r3, #2
90003f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003f40:	69fb      	ldr	r3, [r7, #28]
90003f42:	f003 0303 	and.w	r3, r3, #3
90003f46:	009b      	lsls	r3, r3, #2
90003f48:	220f      	movs	r2, #15
90003f4a:	fa02 f303 	lsl.w	r3, r2, r3
90003f4e:	43db      	mvns	r3, r3
90003f50:	69ba      	ldr	r2, [r7, #24]
90003f52:	4013      	ands	r3, r2
90003f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003f56:	687b      	ldr	r3, [r7, #4]
90003f58:	4a20      	ldr	r2, [pc, #128]	@ (90003fdc <HAL_GPIO_Init+0x240>)
90003f5a:	4293      	cmp	r3, r2
90003f5c:	d052      	beq.n	90004004 <HAL_GPIO_Init+0x268>
90003f5e:	687b      	ldr	r3, [r7, #4]
90003f60:	4a1f      	ldr	r2, [pc, #124]	@ (90003fe0 <HAL_GPIO_Init+0x244>)
90003f62:	4293      	cmp	r3, r2
90003f64:	d031      	beq.n	90003fca <HAL_GPIO_Init+0x22e>
90003f66:	687b      	ldr	r3, [r7, #4]
90003f68:	4a1e      	ldr	r2, [pc, #120]	@ (90003fe4 <HAL_GPIO_Init+0x248>)
90003f6a:	4293      	cmp	r3, r2
90003f6c:	d02b      	beq.n	90003fc6 <HAL_GPIO_Init+0x22a>
90003f6e:	687b      	ldr	r3, [r7, #4]
90003f70:	4a1d      	ldr	r2, [pc, #116]	@ (90003fe8 <HAL_GPIO_Init+0x24c>)
90003f72:	4293      	cmp	r3, r2
90003f74:	d025      	beq.n	90003fc2 <HAL_GPIO_Init+0x226>
90003f76:	687b      	ldr	r3, [r7, #4]
90003f78:	4a1c      	ldr	r2, [pc, #112]	@ (90003fec <HAL_GPIO_Init+0x250>)
90003f7a:	4293      	cmp	r3, r2
90003f7c:	d01f      	beq.n	90003fbe <HAL_GPIO_Init+0x222>
90003f7e:	687b      	ldr	r3, [r7, #4]
90003f80:	4a1b      	ldr	r2, [pc, #108]	@ (90003ff0 <HAL_GPIO_Init+0x254>)
90003f82:	4293      	cmp	r3, r2
90003f84:	d019      	beq.n	90003fba <HAL_GPIO_Init+0x21e>
90003f86:	687b      	ldr	r3, [r7, #4]
90003f88:	4a1a      	ldr	r2, [pc, #104]	@ (90003ff4 <HAL_GPIO_Init+0x258>)
90003f8a:	4293      	cmp	r3, r2
90003f8c:	d013      	beq.n	90003fb6 <HAL_GPIO_Init+0x21a>
90003f8e:	687b      	ldr	r3, [r7, #4]
90003f90:	4a19      	ldr	r2, [pc, #100]	@ (90003ff8 <HAL_GPIO_Init+0x25c>)
90003f92:	4293      	cmp	r3, r2
90003f94:	d00d      	beq.n	90003fb2 <HAL_GPIO_Init+0x216>
90003f96:	687b      	ldr	r3, [r7, #4]
90003f98:	4a18      	ldr	r2, [pc, #96]	@ (90003ffc <HAL_GPIO_Init+0x260>)
90003f9a:	4293      	cmp	r3, r2
90003f9c:	d007      	beq.n	90003fae <HAL_GPIO_Init+0x212>
90003f9e:	687b      	ldr	r3, [r7, #4]
90003fa0:	4a17      	ldr	r2, [pc, #92]	@ (90004000 <HAL_GPIO_Init+0x264>)
90003fa2:	4293      	cmp	r3, r2
90003fa4:	d101      	bne.n	90003faa <HAL_GPIO_Init+0x20e>
90003fa6:	2309      	movs	r3, #9
90003fa8:	e02d      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003faa:	230a      	movs	r3, #10
90003fac:	e02b      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fae:	2308      	movs	r3, #8
90003fb0:	e029      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fb2:	2307      	movs	r3, #7
90003fb4:	e027      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fb6:	2306      	movs	r3, #6
90003fb8:	e025      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fba:	2305      	movs	r3, #5
90003fbc:	e023      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fbe:	2304      	movs	r3, #4
90003fc0:	e021      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fc2:	2303      	movs	r3, #3
90003fc4:	e01f      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fc6:	2302      	movs	r3, #2
90003fc8:	e01d      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fca:	2301      	movs	r3, #1
90003fcc:	e01b      	b.n	90004006 <HAL_GPIO_Init+0x26a>
90003fce:	bf00      	nop
90003fd0:	58000080 	.word	0x58000080
90003fd4:	58024400 	.word	0x58024400
90003fd8:	58000400 	.word	0x58000400
90003fdc:	58020000 	.word	0x58020000
90003fe0:	58020400 	.word	0x58020400
90003fe4:	58020800 	.word	0x58020800
90003fe8:	58020c00 	.word	0x58020c00
90003fec:	58021000 	.word	0x58021000
90003ff0:	58021400 	.word	0x58021400
90003ff4:	58021800 	.word	0x58021800
90003ff8:	58021c00 	.word	0x58021c00
90003ffc:	58022000 	.word	0x58022000
90004000:	58022400 	.word	0x58022400
90004004:	2300      	movs	r3, #0
90004006:	69fa      	ldr	r2, [r7, #28]
90004008:	f002 0203 	and.w	r2, r2, #3
9000400c:	0092      	lsls	r2, r2, #2
9000400e:	4093      	lsls	r3, r2
90004010:	69ba      	ldr	r2, [r7, #24]
90004012:	4313      	orrs	r3, r2
90004014:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90004016:	4938      	ldr	r1, [pc, #224]	@ (900040f8 <HAL_GPIO_Init+0x35c>)
90004018:	69fb      	ldr	r3, [r7, #28]
9000401a:	089b      	lsrs	r3, r3, #2
9000401c:	3302      	adds	r3, #2
9000401e:	69ba      	ldr	r2, [r7, #24]
90004020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90004024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90004028:	681b      	ldr	r3, [r3, #0]
9000402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000402c:	693b      	ldr	r3, [r7, #16]
9000402e:	43db      	mvns	r3, r3
90004030:	69ba      	ldr	r2, [r7, #24]
90004032:	4013      	ands	r3, r2
90004034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90004036:	683b      	ldr	r3, [r7, #0]
90004038:	685b      	ldr	r3, [r3, #4]
9000403a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
9000403e:	2b00      	cmp	r3, #0
90004040:	d003      	beq.n	9000404a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90004042:	69ba      	ldr	r2, [r7, #24]
90004044:	693b      	ldr	r3, [r7, #16]
90004046:	4313      	orrs	r3, r2
90004048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
9000404a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
9000404e:	69bb      	ldr	r3, [r7, #24]
90004050:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90004052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90004056:	685b      	ldr	r3, [r3, #4]
90004058:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000405a:	693b      	ldr	r3, [r7, #16]
9000405c:	43db      	mvns	r3, r3
9000405e:	69ba      	ldr	r2, [r7, #24]
90004060:	4013      	ands	r3, r2
90004062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90004064:	683b      	ldr	r3, [r7, #0]
90004066:	685b      	ldr	r3, [r3, #4]
90004068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
9000406c:	2b00      	cmp	r3, #0
9000406e:	d003      	beq.n	90004078 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90004070:	69ba      	ldr	r2, [r7, #24]
90004072:	693b      	ldr	r3, [r7, #16]
90004074:	4313      	orrs	r3, r2
90004076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90004078:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
9000407c:	69bb      	ldr	r3, [r7, #24]
9000407e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90004080:	697b      	ldr	r3, [r7, #20]
90004082:	685b      	ldr	r3, [r3, #4]
90004084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004086:	693b      	ldr	r3, [r7, #16]
90004088:	43db      	mvns	r3, r3
9000408a:	69ba      	ldr	r2, [r7, #24]
9000408c:	4013      	ands	r3, r2
9000408e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90004090:	683b      	ldr	r3, [r7, #0]
90004092:	685b      	ldr	r3, [r3, #4]
90004094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90004098:	2b00      	cmp	r3, #0
9000409a:	d003      	beq.n	900040a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
9000409c:	69ba      	ldr	r2, [r7, #24]
9000409e:	693b      	ldr	r3, [r7, #16]
900040a0:	4313      	orrs	r3, r2
900040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
900040a4:	697b      	ldr	r3, [r7, #20]
900040a6:	69ba      	ldr	r2, [r7, #24]
900040a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
900040aa:	697b      	ldr	r3, [r7, #20]
900040ac:	681b      	ldr	r3, [r3, #0]
900040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900040b0:	693b      	ldr	r3, [r7, #16]
900040b2:	43db      	mvns	r3, r3
900040b4:	69ba      	ldr	r2, [r7, #24]
900040b6:	4013      	ands	r3, r2
900040b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900040ba:	683b      	ldr	r3, [r7, #0]
900040bc:	685b      	ldr	r3, [r3, #4]
900040be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
900040c2:	2b00      	cmp	r3, #0
900040c4:	d003      	beq.n	900040ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
900040c6:	69ba      	ldr	r2, [r7, #24]
900040c8:	693b      	ldr	r3, [r7, #16]
900040ca:	4313      	orrs	r3, r2
900040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
900040ce:	697b      	ldr	r3, [r7, #20]
900040d0:	69ba      	ldr	r2, [r7, #24]
900040d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
900040d4:	69fb      	ldr	r3, [r7, #28]
900040d6:	3301      	adds	r3, #1
900040d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900040da:	683b      	ldr	r3, [r7, #0]
900040dc:	681a      	ldr	r2, [r3, #0]
900040de:	69fb      	ldr	r3, [r7, #28]
900040e0:	fa22 f303 	lsr.w	r3, r2, r3
900040e4:	2b00      	cmp	r3, #0
900040e6:	f47f ae63 	bne.w	90003db0 <HAL_GPIO_Init+0x14>
  }
}
900040ea:	bf00      	nop
900040ec:	bf00      	nop
900040ee:	3724      	adds	r7, #36	@ 0x24
900040f0:	46bd      	mov	sp, r7
900040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900040f6:	4770      	bx	lr
900040f8:	58000400 	.word	0x58000400

900040fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
900040fc:	b480      	push	{r7}
900040fe:	b085      	sub	sp, #20
90004100:	af00      	add	r7, sp, #0
90004102:	6078      	str	r0, [r7, #4]
90004104:	460b      	mov	r3, r1
90004106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90004108:	687b      	ldr	r3, [r7, #4]
9000410a:	691a      	ldr	r2, [r3, #16]
9000410c:	887b      	ldrh	r3, [r7, #2]
9000410e:	4013      	ands	r3, r2
90004110:	2b00      	cmp	r3, #0
90004112:	d002      	beq.n	9000411a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90004114:	2301      	movs	r3, #1
90004116:	73fb      	strb	r3, [r7, #15]
90004118:	e001      	b.n	9000411e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
9000411a:	2300      	movs	r3, #0
9000411c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
9000411e:	7bfb      	ldrb	r3, [r7, #15]
}
90004120:	4618      	mov	r0, r3
90004122:	3714      	adds	r7, #20
90004124:	46bd      	mov	sp, r7
90004126:	f85d 7b04 	ldr.w	r7, [sp], #4
9000412a:	4770      	bx	lr

9000412c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
9000412c:	b480      	push	{r7}
9000412e:	b083      	sub	sp, #12
90004130:	af00      	add	r7, sp, #0
90004132:	6078      	str	r0, [r7, #4]
90004134:	460b      	mov	r3, r1
90004136:	807b      	strh	r3, [r7, #2]
90004138:	4613      	mov	r3, r2
9000413a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
9000413c:	787b      	ldrb	r3, [r7, #1]
9000413e:	2b00      	cmp	r3, #0
90004140:	d003      	beq.n	9000414a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90004142:	887a      	ldrh	r2, [r7, #2]
90004144:	687b      	ldr	r3, [r7, #4]
90004146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90004148:	e003      	b.n	90004152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000414a:	887b      	ldrh	r3, [r7, #2]
9000414c:	041a      	lsls	r2, r3, #16
9000414e:	687b      	ldr	r3, [r7, #4]
90004150:	619a      	str	r2, [r3, #24]
}
90004152:	bf00      	nop
90004154:	370c      	adds	r7, #12
90004156:	46bd      	mov	sp, r7
90004158:	f85d 7b04 	ldr.w	r7, [sp], #4
9000415c:	4770      	bx	lr
	...

90004160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90004160:	b580      	push	{r7, lr}
90004162:	b082      	sub	sp, #8
90004164:	af00      	add	r7, sp, #0
90004166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90004168:	687b      	ldr	r3, [r7, #4]
9000416a:	2b00      	cmp	r3, #0
9000416c:	d101      	bne.n	90004172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
9000416e:	2301      	movs	r3, #1
90004170:	e08b      	b.n	9000428a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90004172:	687b      	ldr	r3, [r7, #4]
90004174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90004178:	b2db      	uxtb	r3, r3
9000417a:	2b00      	cmp	r3, #0
9000417c:	d106      	bne.n	9000418c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
9000417e:	687b      	ldr	r3, [r7, #4]
90004180:	2200      	movs	r2, #0
90004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90004186:	6878      	ldr	r0, [r7, #4]
90004188:	f000 f886 	bl	90004298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
9000418c:	687b      	ldr	r3, [r7, #4]
9000418e:	2224      	movs	r2, #36	@ 0x24
90004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90004194:	687b      	ldr	r3, [r7, #4]
90004196:	681b      	ldr	r3, [r3, #0]
90004198:	681a      	ldr	r2, [r3, #0]
9000419a:	687b      	ldr	r3, [r7, #4]
9000419c:	681b      	ldr	r3, [r3, #0]
9000419e:	f022 0201 	bic.w	r2, r2, #1
900041a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900041a4:	687b      	ldr	r3, [r7, #4]
900041a6:	685a      	ldr	r2, [r3, #4]
900041a8:	687b      	ldr	r3, [r7, #4]
900041aa:	681b      	ldr	r3, [r3, #0]
900041ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
900041b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
900041b2:	687b      	ldr	r3, [r7, #4]
900041b4:	681b      	ldr	r3, [r3, #0]
900041b6:	689a      	ldr	r2, [r3, #8]
900041b8:	687b      	ldr	r3, [r7, #4]
900041ba:	681b      	ldr	r3, [r3, #0]
900041bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
900041c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900041c2:	687b      	ldr	r3, [r7, #4]
900041c4:	68db      	ldr	r3, [r3, #12]
900041c6:	2b01      	cmp	r3, #1
900041c8:	d107      	bne.n	900041da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900041ca:	687b      	ldr	r3, [r7, #4]
900041cc:	689a      	ldr	r2, [r3, #8]
900041ce:	687b      	ldr	r3, [r7, #4]
900041d0:	681b      	ldr	r3, [r3, #0]
900041d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
900041d6:	609a      	str	r2, [r3, #8]
900041d8:	e006      	b.n	900041e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900041da:	687b      	ldr	r3, [r7, #4]
900041dc:	689a      	ldr	r2, [r3, #8]
900041de:	687b      	ldr	r3, [r7, #4]
900041e0:	681b      	ldr	r3, [r3, #0]
900041e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
900041e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900041e8:	687b      	ldr	r3, [r7, #4]
900041ea:	68db      	ldr	r3, [r3, #12]
900041ec:	2b02      	cmp	r3, #2
900041ee:	d108      	bne.n	90004202 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
900041f0:	687b      	ldr	r3, [r7, #4]
900041f2:	681b      	ldr	r3, [r3, #0]
900041f4:	685a      	ldr	r2, [r3, #4]
900041f6:	687b      	ldr	r3, [r7, #4]
900041f8:	681b      	ldr	r3, [r3, #0]
900041fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
900041fe:	605a      	str	r2, [r3, #4]
90004200:	e007      	b.n	90004212 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90004202:	687b      	ldr	r3, [r7, #4]
90004204:	681b      	ldr	r3, [r3, #0]
90004206:	685a      	ldr	r2, [r3, #4]
90004208:	687b      	ldr	r3, [r7, #4]
9000420a:	681b      	ldr	r3, [r3, #0]
9000420c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90004210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90004212:	687b      	ldr	r3, [r7, #4]
90004214:	681b      	ldr	r3, [r3, #0]
90004216:	6859      	ldr	r1, [r3, #4]
90004218:	687b      	ldr	r3, [r7, #4]
9000421a:	681a      	ldr	r2, [r3, #0]
9000421c:	4b1d      	ldr	r3, [pc, #116]	@ (90004294 <HAL_I2C_Init+0x134>)
9000421e:	430b      	orrs	r3, r1
90004220:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90004222:	687b      	ldr	r3, [r7, #4]
90004224:	681b      	ldr	r3, [r3, #0]
90004226:	68da      	ldr	r2, [r3, #12]
90004228:	687b      	ldr	r3, [r7, #4]
9000422a:	681b      	ldr	r3, [r3, #0]
9000422c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90004230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90004232:	687b      	ldr	r3, [r7, #4]
90004234:	691a      	ldr	r2, [r3, #16]
90004236:	687b      	ldr	r3, [r7, #4]
90004238:	695b      	ldr	r3, [r3, #20]
9000423a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
9000423e:	687b      	ldr	r3, [r7, #4]
90004240:	699b      	ldr	r3, [r3, #24]
90004242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90004244:	687b      	ldr	r3, [r7, #4]
90004246:	681b      	ldr	r3, [r3, #0]
90004248:	430a      	orrs	r2, r1
9000424a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000424c:	687b      	ldr	r3, [r7, #4]
9000424e:	69d9      	ldr	r1, [r3, #28]
90004250:	687b      	ldr	r3, [r7, #4]
90004252:	6a1a      	ldr	r2, [r3, #32]
90004254:	687b      	ldr	r3, [r7, #4]
90004256:	681b      	ldr	r3, [r3, #0]
90004258:	430a      	orrs	r2, r1
9000425a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
9000425c:	687b      	ldr	r3, [r7, #4]
9000425e:	681b      	ldr	r3, [r3, #0]
90004260:	681a      	ldr	r2, [r3, #0]
90004262:	687b      	ldr	r3, [r7, #4]
90004264:	681b      	ldr	r3, [r3, #0]
90004266:	f042 0201 	orr.w	r2, r2, #1
9000426a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000426c:	687b      	ldr	r3, [r7, #4]
9000426e:	2200      	movs	r2, #0
90004270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90004272:	687b      	ldr	r3, [r7, #4]
90004274:	2220      	movs	r2, #32
90004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000427a:	687b      	ldr	r3, [r7, #4]
9000427c:	2200      	movs	r2, #0
9000427e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90004280:	687b      	ldr	r3, [r7, #4]
90004282:	2200      	movs	r2, #0
90004284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90004288:	2300      	movs	r3, #0
}
9000428a:	4618      	mov	r0, r3
9000428c:	3708      	adds	r7, #8
9000428e:	46bd      	mov	sp, r7
90004290:	bd80      	pop	{r7, pc}
90004292:	bf00      	nop
90004294:	02008000 	.word	0x02008000

90004298 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90004298:	b480      	push	{r7}
9000429a:	b083      	sub	sp, #12
9000429c:	af00      	add	r7, sp, #0
9000429e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
900042a0:	bf00      	nop
900042a2:	370c      	adds	r7, #12
900042a4:	46bd      	mov	sp, r7
900042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900042aa:	4770      	bx	lr

900042ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
900042ac:	b580      	push	{r7, lr}
900042ae:	b088      	sub	sp, #32
900042b0:	af02      	add	r7, sp, #8
900042b2:	60f8      	str	r0, [r7, #12]
900042b4:	4608      	mov	r0, r1
900042b6:	4611      	mov	r1, r2
900042b8:	461a      	mov	r2, r3
900042ba:	4603      	mov	r3, r0
900042bc:	817b      	strh	r3, [r7, #10]
900042be:	460b      	mov	r3, r1
900042c0:	813b      	strh	r3, [r7, #8]
900042c2:	4613      	mov	r3, r2
900042c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
900042c6:	68fb      	ldr	r3, [r7, #12]
900042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900042cc:	b2db      	uxtb	r3, r3
900042ce:	2b20      	cmp	r3, #32
900042d0:	f040 80fd 	bne.w	900044ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
900042d4:	6a3b      	ldr	r3, [r7, #32]
900042d6:	2b00      	cmp	r3, #0
900042d8:	d002      	beq.n	900042e0 <HAL_I2C_Mem_Read+0x34>
900042da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
900042dc:	2b00      	cmp	r3, #0
900042de:	d105      	bne.n	900042ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900042e0:	68fb      	ldr	r3, [r7, #12]
900042e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
900042e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
900042e8:	2301      	movs	r3, #1
900042ea:	e0f1      	b.n	900044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
900042ec:	68fb      	ldr	r3, [r7, #12]
900042ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900042f2:	2b01      	cmp	r3, #1
900042f4:	d101      	bne.n	900042fa <HAL_I2C_Mem_Read+0x4e>
900042f6:	2302      	movs	r3, #2
900042f8:	e0ea      	b.n	900044d0 <HAL_I2C_Mem_Read+0x224>
900042fa:	68fb      	ldr	r3, [r7, #12]
900042fc:	2201      	movs	r2, #1
900042fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90004302:	f7ff f8a1 	bl	90003448 <HAL_GetTick>
90004306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90004308:	697b      	ldr	r3, [r7, #20]
9000430a:	9300      	str	r3, [sp, #0]
9000430c:	2319      	movs	r3, #25
9000430e:	2201      	movs	r2, #1
90004310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90004314:	68f8      	ldr	r0, [r7, #12]
90004316:	f000 f975 	bl	90004604 <I2C_WaitOnFlagUntilTimeout>
9000431a:	4603      	mov	r3, r0
9000431c:	2b00      	cmp	r3, #0
9000431e:	d001      	beq.n	90004324 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90004320:	2301      	movs	r3, #1
90004322:	e0d5      	b.n	900044d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90004324:	68fb      	ldr	r3, [r7, #12]
90004326:	2222      	movs	r2, #34	@ 0x22
90004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000432c:	68fb      	ldr	r3, [r7, #12]
9000432e:	2240      	movs	r2, #64	@ 0x40
90004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90004334:	68fb      	ldr	r3, [r7, #12]
90004336:	2200      	movs	r2, #0
90004338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
9000433a:	68fb      	ldr	r3, [r7, #12]
9000433c:	6a3a      	ldr	r2, [r7, #32]
9000433e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90004340:	68fb      	ldr	r3, [r7, #12]
90004342:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90004344:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90004346:	68fb      	ldr	r3, [r7, #12]
90004348:	2200      	movs	r2, #0
9000434a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
9000434c:	88f8      	ldrh	r0, [r7, #6]
9000434e:	893a      	ldrh	r2, [r7, #8]
90004350:	8979      	ldrh	r1, [r7, #10]
90004352:	697b      	ldr	r3, [r7, #20]
90004354:	9301      	str	r3, [sp, #4]
90004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90004358:	9300      	str	r3, [sp, #0]
9000435a:	4603      	mov	r3, r0
9000435c:	68f8      	ldr	r0, [r7, #12]
9000435e:	f000 f8d9 	bl	90004514 <I2C_RequestMemoryRead>
90004362:	4603      	mov	r3, r0
90004364:	2b00      	cmp	r3, #0
90004366:	d005      	beq.n	90004374 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90004368:	68fb      	ldr	r3, [r7, #12]
9000436a:	2200      	movs	r2, #0
9000436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90004370:	2301      	movs	r3, #1
90004372:	e0ad      	b.n	900044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90004374:	68fb      	ldr	r3, [r7, #12]
90004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90004378:	b29b      	uxth	r3, r3
9000437a:	2bff      	cmp	r3, #255	@ 0xff
9000437c:	d90e      	bls.n	9000439c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000437e:	68fb      	ldr	r3, [r7, #12]
90004380:	22ff      	movs	r2, #255	@ 0xff
90004382:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90004384:	68fb      	ldr	r3, [r7, #12]
90004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90004388:	b2da      	uxtb	r2, r3
9000438a:	8979      	ldrh	r1, [r7, #10]
9000438c:	4b52      	ldr	r3, [pc, #328]	@ (900044d8 <HAL_I2C_Mem_Read+0x22c>)
9000438e:	9300      	str	r3, [sp, #0]
90004390:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90004394:	68f8      	ldr	r0, [r7, #12]
90004396:	f000 faf9 	bl	9000498c <I2C_TransferConfig>
9000439a:	e00f      	b.n	900043bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
9000439c:	68fb      	ldr	r3, [r7, #12]
9000439e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900043a0:	b29a      	uxth	r2, r3
900043a2:	68fb      	ldr	r3, [r7, #12]
900043a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900043a6:	68fb      	ldr	r3, [r7, #12]
900043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900043aa:	b2da      	uxtb	r2, r3
900043ac:	8979      	ldrh	r1, [r7, #10]
900043ae:	4b4a      	ldr	r3, [pc, #296]	@ (900044d8 <HAL_I2C_Mem_Read+0x22c>)
900043b0:	9300      	str	r3, [sp, #0]
900043b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
900043b6:	68f8      	ldr	r0, [r7, #12]
900043b8:	f000 fae8 	bl	9000498c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
900043bc:	697b      	ldr	r3, [r7, #20]
900043be:	9300      	str	r3, [sp, #0]
900043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900043c2:	2200      	movs	r2, #0
900043c4:	2104      	movs	r1, #4
900043c6:	68f8      	ldr	r0, [r7, #12]
900043c8:	f000 f91c 	bl	90004604 <I2C_WaitOnFlagUntilTimeout>
900043cc:	4603      	mov	r3, r0
900043ce:	2b00      	cmp	r3, #0
900043d0:	d001      	beq.n	900043d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
900043d2:	2301      	movs	r3, #1
900043d4:	e07c      	b.n	900044d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
900043d6:	68fb      	ldr	r3, [r7, #12]
900043d8:	681b      	ldr	r3, [r3, #0]
900043da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
900043dc:	68fb      	ldr	r3, [r7, #12]
900043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900043e0:	b2d2      	uxtb	r2, r2
900043e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
900043e4:	68fb      	ldr	r3, [r7, #12]
900043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900043e8:	1c5a      	adds	r2, r3, #1
900043ea:	68fb      	ldr	r3, [r7, #12]
900043ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
900043ee:	68fb      	ldr	r3, [r7, #12]
900043f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900043f2:	3b01      	subs	r3, #1
900043f4:	b29a      	uxth	r2, r3
900043f6:	68fb      	ldr	r3, [r7, #12]
900043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
900043fa:	68fb      	ldr	r3, [r7, #12]
900043fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900043fe:	b29b      	uxth	r3, r3
90004400:	3b01      	subs	r3, #1
90004402:	b29a      	uxth	r2, r3
90004404:	68fb      	ldr	r3, [r7, #12]
90004406:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90004408:	68fb      	ldr	r3, [r7, #12]
9000440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000440c:	b29b      	uxth	r3, r3
9000440e:	2b00      	cmp	r3, #0
90004410:	d034      	beq.n	9000447c <HAL_I2C_Mem_Read+0x1d0>
90004412:	68fb      	ldr	r3, [r7, #12]
90004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90004416:	2b00      	cmp	r3, #0
90004418:	d130      	bne.n	9000447c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
9000441a:	697b      	ldr	r3, [r7, #20]
9000441c:	9300      	str	r3, [sp, #0]
9000441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90004420:	2200      	movs	r2, #0
90004422:	2180      	movs	r1, #128	@ 0x80
90004424:	68f8      	ldr	r0, [r7, #12]
90004426:	f000 f8ed 	bl	90004604 <I2C_WaitOnFlagUntilTimeout>
9000442a:	4603      	mov	r3, r0
9000442c:	2b00      	cmp	r3, #0
9000442e:	d001      	beq.n	90004434 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90004430:	2301      	movs	r3, #1
90004432:	e04d      	b.n	900044d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90004434:	68fb      	ldr	r3, [r7, #12]
90004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90004438:	b29b      	uxth	r3, r3
9000443a:	2bff      	cmp	r3, #255	@ 0xff
9000443c:	d90e      	bls.n	9000445c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000443e:	68fb      	ldr	r3, [r7, #12]
90004440:	22ff      	movs	r2, #255	@ 0xff
90004442:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90004444:	68fb      	ldr	r3, [r7, #12]
90004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90004448:	b2da      	uxtb	r2, r3
9000444a:	8979      	ldrh	r1, [r7, #10]
9000444c:	2300      	movs	r3, #0
9000444e:	9300      	str	r3, [sp, #0]
90004450:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90004454:	68f8      	ldr	r0, [r7, #12]
90004456:	f000 fa99 	bl	9000498c <I2C_TransferConfig>
9000445a:	e00f      	b.n	9000447c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
9000445c:	68fb      	ldr	r3, [r7, #12]
9000445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90004460:	b29a      	uxth	r2, r3
90004462:	68fb      	ldr	r3, [r7, #12]
90004464:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90004466:	68fb      	ldr	r3, [r7, #12]
90004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000446a:	b2da      	uxtb	r2, r3
9000446c:	8979      	ldrh	r1, [r7, #10]
9000446e:	2300      	movs	r3, #0
90004470:	9300      	str	r3, [sp, #0]
90004472:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90004476:	68f8      	ldr	r0, [r7, #12]
90004478:	f000 fa88 	bl	9000498c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
9000447c:	68fb      	ldr	r3, [r7, #12]
9000447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90004480:	b29b      	uxth	r3, r3
90004482:	2b00      	cmp	r3, #0
90004484:	d19a      	bne.n	900043bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90004486:	697a      	ldr	r2, [r7, #20]
90004488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000448a:	68f8      	ldr	r0, [r7, #12]
9000448c:	f000 f95a 	bl	90004744 <I2C_WaitOnSTOPFlagUntilTimeout>
90004490:	4603      	mov	r3, r0
90004492:	2b00      	cmp	r3, #0
90004494:	d001      	beq.n	9000449a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90004496:	2301      	movs	r3, #1
90004498:	e01a      	b.n	900044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000449a:	68fb      	ldr	r3, [r7, #12]
9000449c:	681b      	ldr	r3, [r3, #0]
9000449e:	2220      	movs	r2, #32
900044a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900044a2:	68fb      	ldr	r3, [r7, #12]
900044a4:	681b      	ldr	r3, [r3, #0]
900044a6:	6859      	ldr	r1, [r3, #4]
900044a8:	68fb      	ldr	r3, [r7, #12]
900044aa:	681a      	ldr	r2, [r3, #0]
900044ac:	4b0b      	ldr	r3, [pc, #44]	@ (900044dc <HAL_I2C_Mem_Read+0x230>)
900044ae:	400b      	ands	r3, r1
900044b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
900044b2:	68fb      	ldr	r3, [r7, #12]
900044b4:	2220      	movs	r2, #32
900044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900044ba:	68fb      	ldr	r3, [r7, #12]
900044bc:	2200      	movs	r2, #0
900044be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900044c2:	68fb      	ldr	r3, [r7, #12]
900044c4:	2200      	movs	r2, #0
900044c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900044ca:	2300      	movs	r3, #0
900044cc:	e000      	b.n	900044d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
900044ce:	2302      	movs	r3, #2
  }
}
900044d0:	4618      	mov	r0, r3
900044d2:	3718      	adds	r7, #24
900044d4:	46bd      	mov	sp, r7
900044d6:	bd80      	pop	{r7, pc}
900044d8:	80002400 	.word	0x80002400
900044dc:	fe00e800 	.word	0xfe00e800

900044e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
900044e0:	b480      	push	{r7}
900044e2:	b083      	sub	sp, #12
900044e4:	af00      	add	r7, sp, #0
900044e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
900044e8:	687b      	ldr	r3, [r7, #4]
900044ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900044ee:	b2db      	uxtb	r3, r3
}
900044f0:	4618      	mov	r0, r3
900044f2:	370c      	adds	r7, #12
900044f4:	46bd      	mov	sp, r7
900044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
900044fa:	4770      	bx	lr

900044fc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
900044fc:	b480      	push	{r7}
900044fe:	b083      	sub	sp, #12
90004500:	af00      	add	r7, sp, #0
90004502:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90004504:	687b      	ldr	r3, [r7, #4]
90004506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90004508:	4618      	mov	r0, r3
9000450a:	370c      	adds	r7, #12
9000450c:	46bd      	mov	sp, r7
9000450e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004512:	4770      	bx	lr

90004514 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90004514:	b580      	push	{r7, lr}
90004516:	b086      	sub	sp, #24
90004518:	af02      	add	r7, sp, #8
9000451a:	60f8      	str	r0, [r7, #12]
9000451c:	4608      	mov	r0, r1
9000451e:	4611      	mov	r1, r2
90004520:	461a      	mov	r2, r3
90004522:	4603      	mov	r3, r0
90004524:	817b      	strh	r3, [r7, #10]
90004526:	460b      	mov	r3, r1
90004528:	813b      	strh	r3, [r7, #8]
9000452a:	4613      	mov	r3, r2
9000452c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
9000452e:	88fb      	ldrh	r3, [r7, #6]
90004530:	b2da      	uxtb	r2, r3
90004532:	8979      	ldrh	r1, [r7, #10]
90004534:	4b20      	ldr	r3, [pc, #128]	@ (900045b8 <I2C_RequestMemoryRead+0xa4>)
90004536:	9300      	str	r3, [sp, #0]
90004538:	2300      	movs	r3, #0
9000453a:	68f8      	ldr	r0, [r7, #12]
9000453c:	f000 fa26 	bl	9000498c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90004540:	69fa      	ldr	r2, [r7, #28]
90004542:	69b9      	ldr	r1, [r7, #24]
90004544:	68f8      	ldr	r0, [r7, #12]
90004546:	f000 f8b6 	bl	900046b6 <I2C_WaitOnTXISFlagUntilTimeout>
9000454a:	4603      	mov	r3, r0
9000454c:	2b00      	cmp	r3, #0
9000454e:	d001      	beq.n	90004554 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90004550:	2301      	movs	r3, #1
90004552:	e02c      	b.n	900045ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90004554:	88fb      	ldrh	r3, [r7, #6]
90004556:	2b01      	cmp	r3, #1
90004558:	d105      	bne.n	90004566 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000455a:	893b      	ldrh	r3, [r7, #8]
9000455c:	b2da      	uxtb	r2, r3
9000455e:	68fb      	ldr	r3, [r7, #12]
90004560:	681b      	ldr	r3, [r3, #0]
90004562:	629a      	str	r2, [r3, #40]	@ 0x28
90004564:	e015      	b.n	90004592 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90004566:	893b      	ldrh	r3, [r7, #8]
90004568:	0a1b      	lsrs	r3, r3, #8
9000456a:	b29b      	uxth	r3, r3
9000456c:	b2da      	uxtb	r2, r3
9000456e:	68fb      	ldr	r3, [r7, #12]
90004570:	681b      	ldr	r3, [r3, #0]
90004572:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90004574:	69fa      	ldr	r2, [r7, #28]
90004576:	69b9      	ldr	r1, [r7, #24]
90004578:	68f8      	ldr	r0, [r7, #12]
9000457a:	f000 f89c 	bl	900046b6 <I2C_WaitOnTXISFlagUntilTimeout>
9000457e:	4603      	mov	r3, r0
90004580:	2b00      	cmp	r3, #0
90004582:	d001      	beq.n	90004588 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90004584:	2301      	movs	r3, #1
90004586:	e012      	b.n	900045ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90004588:	893b      	ldrh	r3, [r7, #8]
9000458a:	b2da      	uxtb	r2, r3
9000458c:	68fb      	ldr	r3, [r7, #12]
9000458e:	681b      	ldr	r3, [r3, #0]
90004590:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90004592:	69fb      	ldr	r3, [r7, #28]
90004594:	9300      	str	r3, [sp, #0]
90004596:	69bb      	ldr	r3, [r7, #24]
90004598:	2200      	movs	r2, #0
9000459a:	2140      	movs	r1, #64	@ 0x40
9000459c:	68f8      	ldr	r0, [r7, #12]
9000459e:	f000 f831 	bl	90004604 <I2C_WaitOnFlagUntilTimeout>
900045a2:	4603      	mov	r3, r0
900045a4:	2b00      	cmp	r3, #0
900045a6:	d001      	beq.n	900045ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
900045a8:	2301      	movs	r3, #1
900045aa:	e000      	b.n	900045ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
900045ac:	2300      	movs	r3, #0
}
900045ae:	4618      	mov	r0, r3
900045b0:	3710      	adds	r7, #16
900045b2:	46bd      	mov	sp, r7
900045b4:	bd80      	pop	{r7, pc}
900045b6:	bf00      	nop
900045b8:	80002000 	.word	0x80002000

900045bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
900045bc:	b480      	push	{r7}
900045be:	b083      	sub	sp, #12
900045c0:	af00      	add	r7, sp, #0
900045c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900045c4:	687b      	ldr	r3, [r7, #4]
900045c6:	681b      	ldr	r3, [r3, #0]
900045c8:	699b      	ldr	r3, [r3, #24]
900045ca:	f003 0302 	and.w	r3, r3, #2
900045ce:	2b02      	cmp	r3, #2
900045d0:	d103      	bne.n	900045da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
900045d2:	687b      	ldr	r3, [r7, #4]
900045d4:	681b      	ldr	r3, [r3, #0]
900045d6:	2200      	movs	r2, #0
900045d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900045da:	687b      	ldr	r3, [r7, #4]
900045dc:	681b      	ldr	r3, [r3, #0]
900045de:	699b      	ldr	r3, [r3, #24]
900045e0:	f003 0301 	and.w	r3, r3, #1
900045e4:	2b01      	cmp	r3, #1
900045e6:	d007      	beq.n	900045f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900045e8:	687b      	ldr	r3, [r7, #4]
900045ea:	681b      	ldr	r3, [r3, #0]
900045ec:	699a      	ldr	r2, [r3, #24]
900045ee:	687b      	ldr	r3, [r7, #4]
900045f0:	681b      	ldr	r3, [r3, #0]
900045f2:	f042 0201 	orr.w	r2, r2, #1
900045f6:	619a      	str	r2, [r3, #24]
  }
}
900045f8:	bf00      	nop
900045fa:	370c      	adds	r7, #12
900045fc:	46bd      	mov	sp, r7
900045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90004602:	4770      	bx	lr

90004604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90004604:	b580      	push	{r7, lr}
90004606:	b084      	sub	sp, #16
90004608:	af00      	add	r7, sp, #0
9000460a:	60f8      	str	r0, [r7, #12]
9000460c:	60b9      	str	r1, [r7, #8]
9000460e:	603b      	str	r3, [r7, #0]
90004610:	4613      	mov	r3, r2
90004612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90004614:	e03b      	b.n	9000468e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90004616:	69ba      	ldr	r2, [r7, #24]
90004618:	6839      	ldr	r1, [r7, #0]
9000461a:	68f8      	ldr	r0, [r7, #12]
9000461c:	f000 f8d6 	bl	900047cc <I2C_IsErrorOccurred>
90004620:	4603      	mov	r3, r0
90004622:	2b00      	cmp	r3, #0
90004624:	d001      	beq.n	9000462a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90004626:	2301      	movs	r3, #1
90004628:	e041      	b.n	900046ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000462a:	683b      	ldr	r3, [r7, #0]
9000462c:	f1b3 3fff 	cmp.w	r3, #4294967295
90004630:	d02d      	beq.n	9000468e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90004632:	f7fe ff09 	bl	90003448 <HAL_GetTick>
90004636:	4602      	mov	r2, r0
90004638:	69bb      	ldr	r3, [r7, #24]
9000463a:	1ad3      	subs	r3, r2, r3
9000463c:	683a      	ldr	r2, [r7, #0]
9000463e:	429a      	cmp	r2, r3
90004640:	d302      	bcc.n	90004648 <I2C_WaitOnFlagUntilTimeout+0x44>
90004642:	683b      	ldr	r3, [r7, #0]
90004644:	2b00      	cmp	r3, #0
90004646:	d122      	bne.n	9000468e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90004648:	68fb      	ldr	r3, [r7, #12]
9000464a:	681b      	ldr	r3, [r3, #0]
9000464c:	699a      	ldr	r2, [r3, #24]
9000464e:	68bb      	ldr	r3, [r7, #8]
90004650:	4013      	ands	r3, r2
90004652:	68ba      	ldr	r2, [r7, #8]
90004654:	429a      	cmp	r2, r3
90004656:	bf0c      	ite	eq
90004658:	2301      	moveq	r3, #1
9000465a:	2300      	movne	r3, #0
9000465c:	b2db      	uxtb	r3, r3
9000465e:	461a      	mov	r2, r3
90004660:	79fb      	ldrb	r3, [r7, #7]
90004662:	429a      	cmp	r2, r3
90004664:	d113      	bne.n	9000468e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90004666:	68fb      	ldr	r3, [r7, #12]
90004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000466a:	f043 0220 	orr.w	r2, r3, #32
9000466e:	68fb      	ldr	r3, [r7, #12]
90004670:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90004672:	68fb      	ldr	r3, [r7, #12]
90004674:	2220      	movs	r2, #32
90004676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000467a:	68fb      	ldr	r3, [r7, #12]
9000467c:	2200      	movs	r2, #0
9000467e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90004682:	68fb      	ldr	r3, [r7, #12]
90004684:	2200      	movs	r2, #0
90004686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
9000468a:	2301      	movs	r3, #1
9000468c:	e00f      	b.n	900046ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000468e:	68fb      	ldr	r3, [r7, #12]
90004690:	681b      	ldr	r3, [r3, #0]
90004692:	699a      	ldr	r2, [r3, #24]
90004694:	68bb      	ldr	r3, [r7, #8]
90004696:	4013      	ands	r3, r2
90004698:	68ba      	ldr	r2, [r7, #8]
9000469a:	429a      	cmp	r2, r3
9000469c:	bf0c      	ite	eq
9000469e:	2301      	moveq	r3, #1
900046a0:	2300      	movne	r3, #0
900046a2:	b2db      	uxtb	r3, r3
900046a4:	461a      	mov	r2, r3
900046a6:	79fb      	ldrb	r3, [r7, #7]
900046a8:	429a      	cmp	r2, r3
900046aa:	d0b4      	beq.n	90004616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
900046ac:	2300      	movs	r3, #0
}
900046ae:	4618      	mov	r0, r3
900046b0:	3710      	adds	r7, #16
900046b2:	46bd      	mov	sp, r7
900046b4:	bd80      	pop	{r7, pc}

900046b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900046b6:	b580      	push	{r7, lr}
900046b8:	b084      	sub	sp, #16
900046ba:	af00      	add	r7, sp, #0
900046bc:	60f8      	str	r0, [r7, #12]
900046be:	60b9      	str	r1, [r7, #8]
900046c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900046c2:	e033      	b.n	9000472c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
900046c4:	687a      	ldr	r2, [r7, #4]
900046c6:	68b9      	ldr	r1, [r7, #8]
900046c8:	68f8      	ldr	r0, [r7, #12]
900046ca:	f000 f87f 	bl	900047cc <I2C_IsErrorOccurred>
900046ce:	4603      	mov	r3, r0
900046d0:	2b00      	cmp	r3, #0
900046d2:	d001      	beq.n	900046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
900046d4:	2301      	movs	r3, #1
900046d6:	e031      	b.n	9000473c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900046d8:	68bb      	ldr	r3, [r7, #8]
900046da:	f1b3 3fff 	cmp.w	r3, #4294967295
900046de:	d025      	beq.n	9000472c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900046e0:	f7fe feb2 	bl	90003448 <HAL_GetTick>
900046e4:	4602      	mov	r2, r0
900046e6:	687b      	ldr	r3, [r7, #4]
900046e8:	1ad3      	subs	r3, r2, r3
900046ea:	68ba      	ldr	r2, [r7, #8]
900046ec:	429a      	cmp	r2, r3
900046ee:	d302      	bcc.n	900046f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
900046f0:	68bb      	ldr	r3, [r7, #8]
900046f2:	2b00      	cmp	r3, #0
900046f4:	d11a      	bne.n	9000472c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900046f6:	68fb      	ldr	r3, [r7, #12]
900046f8:	681b      	ldr	r3, [r3, #0]
900046fa:	699b      	ldr	r3, [r3, #24]
900046fc:	f003 0302 	and.w	r3, r3, #2
90004700:	2b02      	cmp	r3, #2
90004702:	d013      	beq.n	9000472c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90004704:	68fb      	ldr	r3, [r7, #12]
90004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90004708:	f043 0220 	orr.w	r2, r3, #32
9000470c:	68fb      	ldr	r3, [r7, #12]
9000470e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90004710:	68fb      	ldr	r3, [r7, #12]
90004712:	2220      	movs	r2, #32
90004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90004718:	68fb      	ldr	r3, [r7, #12]
9000471a:	2200      	movs	r2, #0
9000471c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90004720:	68fb      	ldr	r3, [r7, #12]
90004722:	2200      	movs	r2, #0
90004724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90004728:	2301      	movs	r3, #1
9000472a:	e007      	b.n	9000473c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000472c:	68fb      	ldr	r3, [r7, #12]
9000472e:	681b      	ldr	r3, [r3, #0]
90004730:	699b      	ldr	r3, [r3, #24]
90004732:	f003 0302 	and.w	r3, r3, #2
90004736:	2b02      	cmp	r3, #2
90004738:	d1c4      	bne.n	900046c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
9000473a:	2300      	movs	r3, #0
}
9000473c:	4618      	mov	r0, r3
9000473e:	3710      	adds	r7, #16
90004740:	46bd      	mov	sp, r7
90004742:	bd80      	pop	{r7, pc}

90004744 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90004744:	b580      	push	{r7, lr}
90004746:	b084      	sub	sp, #16
90004748:	af00      	add	r7, sp, #0
9000474a:	60f8      	str	r0, [r7, #12]
9000474c:	60b9      	str	r1, [r7, #8]
9000474e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90004750:	e02f      	b.n	900047b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90004752:	687a      	ldr	r2, [r7, #4]
90004754:	68b9      	ldr	r1, [r7, #8]
90004756:	68f8      	ldr	r0, [r7, #12]
90004758:	f000 f838 	bl	900047cc <I2C_IsErrorOccurred>
9000475c:	4603      	mov	r3, r0
9000475e:	2b00      	cmp	r3, #0
90004760:	d001      	beq.n	90004766 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90004762:	2301      	movs	r3, #1
90004764:	e02d      	b.n	900047c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90004766:	f7fe fe6f 	bl	90003448 <HAL_GetTick>
9000476a:	4602      	mov	r2, r0
9000476c:	687b      	ldr	r3, [r7, #4]
9000476e:	1ad3      	subs	r3, r2, r3
90004770:	68ba      	ldr	r2, [r7, #8]
90004772:	429a      	cmp	r2, r3
90004774:	d302      	bcc.n	9000477c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90004776:	68bb      	ldr	r3, [r7, #8]
90004778:	2b00      	cmp	r3, #0
9000477a:	d11a      	bne.n	900047b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000477c:	68fb      	ldr	r3, [r7, #12]
9000477e:	681b      	ldr	r3, [r3, #0]
90004780:	699b      	ldr	r3, [r3, #24]
90004782:	f003 0320 	and.w	r3, r3, #32
90004786:	2b20      	cmp	r3, #32
90004788:	d013      	beq.n	900047b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000478a:	68fb      	ldr	r3, [r7, #12]
9000478c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000478e:	f043 0220 	orr.w	r2, r3, #32
90004792:	68fb      	ldr	r3, [r7, #12]
90004794:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90004796:	68fb      	ldr	r3, [r7, #12]
90004798:	2220      	movs	r2, #32
9000479a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
9000479e:	68fb      	ldr	r3, [r7, #12]
900047a0:	2200      	movs	r2, #0
900047a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
900047a6:	68fb      	ldr	r3, [r7, #12]
900047a8:	2200      	movs	r2, #0
900047aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
900047ae:	2301      	movs	r3, #1
900047b0:	e007      	b.n	900047c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900047b2:	68fb      	ldr	r3, [r7, #12]
900047b4:	681b      	ldr	r3, [r3, #0]
900047b6:	699b      	ldr	r3, [r3, #24]
900047b8:	f003 0320 	and.w	r3, r3, #32
900047bc:	2b20      	cmp	r3, #32
900047be:	d1c8      	bne.n	90004752 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
900047c0:	2300      	movs	r3, #0
}
900047c2:	4618      	mov	r0, r3
900047c4:	3710      	adds	r7, #16
900047c6:	46bd      	mov	sp, r7
900047c8:	bd80      	pop	{r7, pc}
	...

900047cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
900047cc:	b580      	push	{r7, lr}
900047ce:	b08a      	sub	sp, #40	@ 0x28
900047d0:	af00      	add	r7, sp, #0
900047d2:	60f8      	str	r0, [r7, #12]
900047d4:	60b9      	str	r1, [r7, #8]
900047d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900047d8:	2300      	movs	r3, #0
900047da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
900047de:	68fb      	ldr	r3, [r7, #12]
900047e0:	681b      	ldr	r3, [r3, #0]
900047e2:	699b      	ldr	r3, [r3, #24]
900047e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
900047e6:	2300      	movs	r3, #0
900047e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
900047ea:	687b      	ldr	r3, [r7, #4]
900047ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900047ee:	69bb      	ldr	r3, [r7, #24]
900047f0:	f003 0310 	and.w	r3, r3, #16
900047f4:	2b00      	cmp	r3, #0
900047f6:	d068      	beq.n	900048ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900047f8:	68fb      	ldr	r3, [r7, #12]
900047fa:	681b      	ldr	r3, [r3, #0]
900047fc:	2210      	movs	r2, #16
900047fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90004800:	e049      	b.n	90004896 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90004802:	68bb      	ldr	r3, [r7, #8]
90004804:	f1b3 3fff 	cmp.w	r3, #4294967295
90004808:	d045      	beq.n	90004896 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000480a:	f7fe fe1d 	bl	90003448 <HAL_GetTick>
9000480e:	4602      	mov	r2, r0
90004810:	69fb      	ldr	r3, [r7, #28]
90004812:	1ad3      	subs	r3, r2, r3
90004814:	68ba      	ldr	r2, [r7, #8]
90004816:	429a      	cmp	r2, r3
90004818:	d302      	bcc.n	90004820 <I2C_IsErrorOccurred+0x54>
9000481a:	68bb      	ldr	r3, [r7, #8]
9000481c:	2b00      	cmp	r3, #0
9000481e:	d13a      	bne.n	90004896 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90004820:	68fb      	ldr	r3, [r7, #12]
90004822:	681b      	ldr	r3, [r3, #0]
90004824:	685b      	ldr	r3, [r3, #4]
90004826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
9000482a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
9000482c:	68fb      	ldr	r3, [r7, #12]
9000482e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90004832:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90004834:	68fb      	ldr	r3, [r7, #12]
90004836:	681b      	ldr	r3, [r3, #0]
90004838:	699b      	ldr	r3, [r3, #24]
9000483a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
9000483e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90004842:	d121      	bne.n	90004888 <I2C_IsErrorOccurred+0xbc>
90004844:	697b      	ldr	r3, [r7, #20]
90004846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000484a:	d01d      	beq.n	90004888 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
9000484c:	7cfb      	ldrb	r3, [r7, #19]
9000484e:	2b20      	cmp	r3, #32
90004850:	d01a      	beq.n	90004888 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90004852:	68fb      	ldr	r3, [r7, #12]
90004854:	681b      	ldr	r3, [r3, #0]
90004856:	685a      	ldr	r2, [r3, #4]
90004858:	68fb      	ldr	r3, [r7, #12]
9000485a:	681b      	ldr	r3, [r3, #0]
9000485c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90004860:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90004862:	f7fe fdf1 	bl	90003448 <HAL_GetTick>
90004866:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90004868:	e00e      	b.n	90004888 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000486a:	f7fe fded 	bl	90003448 <HAL_GetTick>
9000486e:	4602      	mov	r2, r0
90004870:	69fb      	ldr	r3, [r7, #28]
90004872:	1ad3      	subs	r3, r2, r3
90004874:	2b19      	cmp	r3, #25
90004876:	d907      	bls.n	90004888 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90004878:	6a3b      	ldr	r3, [r7, #32]
9000487a:	f043 0320 	orr.w	r3, r3, #32
9000487e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90004880:	2301      	movs	r3, #1
90004882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90004886:	e006      	b.n	90004896 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90004888:	68fb      	ldr	r3, [r7, #12]
9000488a:	681b      	ldr	r3, [r3, #0]
9000488c:	699b      	ldr	r3, [r3, #24]
9000488e:	f003 0320 	and.w	r3, r3, #32
90004892:	2b20      	cmp	r3, #32
90004894:	d1e9      	bne.n	9000486a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90004896:	68fb      	ldr	r3, [r7, #12]
90004898:	681b      	ldr	r3, [r3, #0]
9000489a:	699b      	ldr	r3, [r3, #24]
9000489c:	f003 0320 	and.w	r3, r3, #32
900048a0:	2b20      	cmp	r3, #32
900048a2:	d003      	beq.n	900048ac <I2C_IsErrorOccurred+0xe0>
900048a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900048a8:	2b00      	cmp	r3, #0
900048aa:	d0aa      	beq.n	90004802 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
900048ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900048b0:	2b00      	cmp	r3, #0
900048b2:	d103      	bne.n	900048bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900048b4:	68fb      	ldr	r3, [r7, #12]
900048b6:	681b      	ldr	r3, [r3, #0]
900048b8:	2220      	movs	r2, #32
900048ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900048bc:	6a3b      	ldr	r3, [r7, #32]
900048be:	f043 0304 	orr.w	r3, r3, #4
900048c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
900048c4:	2301      	movs	r3, #1
900048c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900048ca:	68fb      	ldr	r3, [r7, #12]
900048cc:	681b      	ldr	r3, [r3, #0]
900048ce:	699b      	ldr	r3, [r3, #24]
900048d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900048d2:	69bb      	ldr	r3, [r7, #24]
900048d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900048d8:	2b00      	cmp	r3, #0
900048da:	d00b      	beq.n	900048f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
900048dc:	6a3b      	ldr	r3, [r7, #32]
900048de:	f043 0301 	orr.w	r3, r3, #1
900048e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900048e4:	68fb      	ldr	r3, [r7, #12]
900048e6:	681b      	ldr	r3, [r3, #0]
900048e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
900048ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900048ee:	2301      	movs	r3, #1
900048f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900048f4:	69bb      	ldr	r3, [r7, #24]
900048f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900048fa:	2b00      	cmp	r3, #0
900048fc:	d00b      	beq.n	90004916 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900048fe:	6a3b      	ldr	r3, [r7, #32]
90004900:	f043 0308 	orr.w	r3, r3, #8
90004904:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90004906:	68fb      	ldr	r3, [r7, #12]
90004908:	681b      	ldr	r3, [r3, #0]
9000490a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
9000490e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90004910:	2301      	movs	r3, #1
90004912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90004916:	69bb      	ldr	r3, [r7, #24]
90004918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000491c:	2b00      	cmp	r3, #0
9000491e:	d00b      	beq.n	90004938 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90004920:	6a3b      	ldr	r3, [r7, #32]
90004922:	f043 0302 	orr.w	r3, r3, #2
90004926:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90004928:	68fb      	ldr	r3, [r7, #12]
9000492a:	681b      	ldr	r3, [r3, #0]
9000492c:	f44f 7200 	mov.w	r2, #512	@ 0x200
90004930:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90004932:	2301      	movs	r3, #1
90004934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90004938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000493c:	2b00      	cmp	r3, #0
9000493e:	d01c      	beq.n	9000497a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90004940:	68f8      	ldr	r0, [r7, #12]
90004942:	f7ff fe3b 	bl	900045bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90004946:	68fb      	ldr	r3, [r7, #12]
90004948:	681b      	ldr	r3, [r3, #0]
9000494a:	6859      	ldr	r1, [r3, #4]
9000494c:	68fb      	ldr	r3, [r7, #12]
9000494e:	681a      	ldr	r2, [r3, #0]
90004950:	4b0d      	ldr	r3, [pc, #52]	@ (90004988 <I2C_IsErrorOccurred+0x1bc>)
90004952:	400b      	ands	r3, r1
90004954:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90004956:	68fb      	ldr	r3, [r7, #12]
90004958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000495a:	6a3b      	ldr	r3, [r7, #32]
9000495c:	431a      	orrs	r2, r3
9000495e:	68fb      	ldr	r3, [r7, #12]
90004960:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90004962:	68fb      	ldr	r3, [r7, #12]
90004964:	2220      	movs	r2, #32
90004966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000496a:	68fb      	ldr	r3, [r7, #12]
9000496c:	2200      	movs	r2, #0
9000496e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90004972:	68fb      	ldr	r3, [r7, #12]
90004974:	2200      	movs	r2, #0
90004976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
9000497a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
9000497e:	4618      	mov	r0, r3
90004980:	3728      	adds	r7, #40	@ 0x28
90004982:	46bd      	mov	sp, r7
90004984:	bd80      	pop	{r7, pc}
90004986:	bf00      	nop
90004988:	fe00e800 	.word	0xfe00e800

9000498c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
9000498c:	b480      	push	{r7}
9000498e:	b087      	sub	sp, #28
90004990:	af00      	add	r7, sp, #0
90004992:	60f8      	str	r0, [r7, #12]
90004994:	607b      	str	r3, [r7, #4]
90004996:	460b      	mov	r3, r1
90004998:	817b      	strh	r3, [r7, #10]
9000499a:	4613      	mov	r3, r2
9000499c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000499e:	897b      	ldrh	r3, [r7, #10]
900049a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900049a4:	7a7b      	ldrb	r3, [r7, #9]
900049a6:	041b      	lsls	r3, r3, #16
900049a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900049ac:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900049ae:	687b      	ldr	r3, [r7, #4]
900049b0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900049b2:	6a3b      	ldr	r3, [r7, #32]
900049b4:	4313      	orrs	r3, r2
900049b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
900049ba:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900049bc:	68fb      	ldr	r3, [r7, #12]
900049be:	681b      	ldr	r3, [r3, #0]
900049c0:	685a      	ldr	r2, [r3, #4]
900049c2:	6a3b      	ldr	r3, [r7, #32]
900049c4:	0d5b      	lsrs	r3, r3, #21
900049c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
900049ca:	4b08      	ldr	r3, [pc, #32]	@ (900049ec <I2C_TransferConfig+0x60>)
900049cc:	430b      	orrs	r3, r1
900049ce:	43db      	mvns	r3, r3
900049d0:	ea02 0103 	and.w	r1, r2, r3
900049d4:	68fb      	ldr	r3, [r7, #12]
900049d6:	681b      	ldr	r3, [r3, #0]
900049d8:	697a      	ldr	r2, [r7, #20]
900049da:	430a      	orrs	r2, r1
900049dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900049de:	bf00      	nop
900049e0:	371c      	adds	r7, #28
900049e2:	46bd      	mov	sp, r7
900049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900049e8:	4770      	bx	lr
900049ea:	bf00      	nop
900049ec:	03ff63ff 	.word	0x03ff63ff

900049f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900049f0:	b480      	push	{r7}
900049f2:	b083      	sub	sp, #12
900049f4:	af00      	add	r7, sp, #0
900049f6:	6078      	str	r0, [r7, #4]
900049f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900049fa:	687b      	ldr	r3, [r7, #4]
900049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90004a00:	b2db      	uxtb	r3, r3
90004a02:	2b20      	cmp	r3, #32
90004a04:	d138      	bne.n	90004a78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90004a06:	687b      	ldr	r3, [r7, #4]
90004a08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90004a0c:	2b01      	cmp	r3, #1
90004a0e:	d101      	bne.n	90004a14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90004a10:	2302      	movs	r3, #2
90004a12:	e032      	b.n	90004a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90004a14:	687b      	ldr	r3, [r7, #4]
90004a16:	2201      	movs	r2, #1
90004a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90004a1c:	687b      	ldr	r3, [r7, #4]
90004a1e:	2224      	movs	r2, #36	@ 0x24
90004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90004a24:	687b      	ldr	r3, [r7, #4]
90004a26:	681b      	ldr	r3, [r3, #0]
90004a28:	681a      	ldr	r2, [r3, #0]
90004a2a:	687b      	ldr	r3, [r7, #4]
90004a2c:	681b      	ldr	r3, [r3, #0]
90004a2e:	f022 0201 	bic.w	r2, r2, #1
90004a32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90004a34:	687b      	ldr	r3, [r7, #4]
90004a36:	681b      	ldr	r3, [r3, #0]
90004a38:	681a      	ldr	r2, [r3, #0]
90004a3a:	687b      	ldr	r3, [r7, #4]
90004a3c:	681b      	ldr	r3, [r3, #0]
90004a3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90004a42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90004a44:	687b      	ldr	r3, [r7, #4]
90004a46:	681b      	ldr	r3, [r3, #0]
90004a48:	6819      	ldr	r1, [r3, #0]
90004a4a:	687b      	ldr	r3, [r7, #4]
90004a4c:	681b      	ldr	r3, [r3, #0]
90004a4e:	683a      	ldr	r2, [r7, #0]
90004a50:	430a      	orrs	r2, r1
90004a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90004a54:	687b      	ldr	r3, [r7, #4]
90004a56:	681b      	ldr	r3, [r3, #0]
90004a58:	681a      	ldr	r2, [r3, #0]
90004a5a:	687b      	ldr	r3, [r7, #4]
90004a5c:	681b      	ldr	r3, [r3, #0]
90004a5e:	f042 0201 	orr.w	r2, r2, #1
90004a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90004a64:	687b      	ldr	r3, [r7, #4]
90004a66:	2220      	movs	r2, #32
90004a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90004a6c:	687b      	ldr	r3, [r7, #4]
90004a6e:	2200      	movs	r2, #0
90004a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90004a74:	2300      	movs	r3, #0
90004a76:	e000      	b.n	90004a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90004a78:	2302      	movs	r3, #2
  }
}
90004a7a:	4618      	mov	r0, r3
90004a7c:	370c      	adds	r7, #12
90004a7e:	46bd      	mov	sp, r7
90004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
90004a84:	4770      	bx	lr

90004a86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90004a86:	b480      	push	{r7}
90004a88:	b085      	sub	sp, #20
90004a8a:	af00      	add	r7, sp, #0
90004a8c:	6078      	str	r0, [r7, #4]
90004a8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90004a90:	687b      	ldr	r3, [r7, #4]
90004a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90004a96:	b2db      	uxtb	r3, r3
90004a98:	2b20      	cmp	r3, #32
90004a9a:	d139      	bne.n	90004b10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90004a9c:	687b      	ldr	r3, [r7, #4]
90004a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90004aa2:	2b01      	cmp	r3, #1
90004aa4:	d101      	bne.n	90004aaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
90004aa6:	2302      	movs	r3, #2
90004aa8:	e033      	b.n	90004b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
90004aaa:	687b      	ldr	r3, [r7, #4]
90004aac:	2201      	movs	r2, #1
90004aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90004ab2:	687b      	ldr	r3, [r7, #4]
90004ab4:	2224      	movs	r2, #36	@ 0x24
90004ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90004aba:	687b      	ldr	r3, [r7, #4]
90004abc:	681b      	ldr	r3, [r3, #0]
90004abe:	681a      	ldr	r2, [r3, #0]
90004ac0:	687b      	ldr	r3, [r7, #4]
90004ac2:	681b      	ldr	r3, [r3, #0]
90004ac4:	f022 0201 	bic.w	r2, r2, #1
90004ac8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
90004aca:	687b      	ldr	r3, [r7, #4]
90004acc:	681b      	ldr	r3, [r3, #0]
90004ace:	681b      	ldr	r3, [r3, #0]
90004ad0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90004ad2:	68fb      	ldr	r3, [r7, #12]
90004ad4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
90004ad8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
90004ada:	683b      	ldr	r3, [r7, #0]
90004adc:	021b      	lsls	r3, r3, #8
90004ade:	68fa      	ldr	r2, [r7, #12]
90004ae0:	4313      	orrs	r3, r2
90004ae2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90004ae4:	687b      	ldr	r3, [r7, #4]
90004ae6:	681b      	ldr	r3, [r3, #0]
90004ae8:	68fa      	ldr	r2, [r7, #12]
90004aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90004aec:	687b      	ldr	r3, [r7, #4]
90004aee:	681b      	ldr	r3, [r3, #0]
90004af0:	681a      	ldr	r2, [r3, #0]
90004af2:	687b      	ldr	r3, [r7, #4]
90004af4:	681b      	ldr	r3, [r3, #0]
90004af6:	f042 0201 	orr.w	r2, r2, #1
90004afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90004afc:	687b      	ldr	r3, [r7, #4]
90004afe:	2220      	movs	r2, #32
90004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90004b04:	687b      	ldr	r3, [r7, #4]
90004b06:	2200      	movs	r2, #0
90004b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90004b0c:	2300      	movs	r3, #0
90004b0e:	e000      	b.n	90004b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90004b10:	2302      	movs	r3, #2
  }
}
90004b12:	4618      	mov	r0, r3
90004b14:	3714      	adds	r7, #20
90004b16:	46bd      	mov	sp, r7
90004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
90004b1c:	4770      	bx	lr

90004b1e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90004b1e:	b580      	push	{r7, lr}
90004b20:	b084      	sub	sp, #16
90004b22:	af00      	add	r7, sp, #0
90004b24:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90004b26:	687b      	ldr	r3, [r7, #4]
90004b28:	2b00      	cmp	r3, #0
90004b2a:	d101      	bne.n	90004b30 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90004b2c:	2301      	movs	r3, #1
90004b2e:	e08f      	b.n	90004c50 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90004b30:	687b      	ldr	r3, [r7, #4]
90004b32:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90004b36:	b2db      	uxtb	r3, r3
90004b38:	2b00      	cmp	r3, #0
90004b3a:	d106      	bne.n	90004b4a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90004b3c:	687b      	ldr	r3, [r7, #4]
90004b3e:	2200      	movs	r2, #0
90004b40:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90004b44:	6878      	ldr	r0, [r7, #4]
90004b46:	f000 f887 	bl	90004c58 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90004b4a:	687b      	ldr	r3, [r7, #4]
90004b4c:	2202      	movs	r2, #2
90004b4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90004b52:	687b      	ldr	r3, [r7, #4]
90004b54:	681b      	ldr	r3, [r3, #0]
90004b56:	699a      	ldr	r2, [r3, #24]
90004b58:	687b      	ldr	r3, [r7, #4]
90004b5a:	681b      	ldr	r3, [r3, #0]
90004b5c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90004b60:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004b62:	687b      	ldr	r3, [r7, #4]
90004b64:	681b      	ldr	r3, [r3, #0]
90004b66:	6999      	ldr	r1, [r3, #24]
90004b68:	687b      	ldr	r3, [r7, #4]
90004b6a:	685a      	ldr	r2, [r3, #4]
90004b6c:	687b      	ldr	r3, [r7, #4]
90004b6e:	689b      	ldr	r3, [r3, #8]
90004b70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90004b72:	687b      	ldr	r3, [r7, #4]
90004b74:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004b76:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90004b78:	687b      	ldr	r3, [r7, #4]
90004b7a:	691b      	ldr	r3, [r3, #16]
90004b7c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004b7e:	687b      	ldr	r3, [r7, #4]
90004b80:	681b      	ldr	r3, [r3, #0]
90004b82:	430a      	orrs	r2, r1
90004b84:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
90004b86:	687b      	ldr	r3, [r7, #4]
90004b88:	695b      	ldr	r3, [r3, #20]
90004b8a:	041b      	lsls	r3, r3, #16
90004b8c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
90004b8e:	687b      	ldr	r3, [r7, #4]
90004b90:	6999      	ldr	r1, [r3, #24]
90004b92:	687b      	ldr	r3, [r7, #4]
90004b94:	681b      	ldr	r3, [r3, #0]
90004b96:	68fa      	ldr	r2, [r7, #12]
90004b98:	430a      	orrs	r2, r1
90004b9a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90004b9c:	687b      	ldr	r3, [r7, #4]
90004b9e:	69db      	ldr	r3, [r3, #28]
90004ba0:	041b      	lsls	r3, r3, #16
90004ba2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90004ba4:	687b      	ldr	r3, [r7, #4]
90004ba6:	6a19      	ldr	r1, [r3, #32]
90004ba8:	687b      	ldr	r3, [r7, #4]
90004baa:	681b      	ldr	r3, [r3, #0]
90004bac:	68fa      	ldr	r2, [r7, #12]
90004bae:	430a      	orrs	r2, r1
90004bb0:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90004bb2:	687b      	ldr	r3, [r7, #4]
90004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90004bb6:	041b      	lsls	r3, r3, #16
90004bb8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
90004bba:	687b      	ldr	r3, [r7, #4]
90004bbc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
90004bbe:	687b      	ldr	r3, [r7, #4]
90004bc0:	681b      	ldr	r3, [r3, #0]
90004bc2:	68fa      	ldr	r2, [r7, #12]
90004bc4:	430a      	orrs	r2, r1
90004bc6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
90004bc8:	687b      	ldr	r3, [r7, #4]
90004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90004bcc:	041b      	lsls	r3, r3, #16
90004bce:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90004bd0:	687b      	ldr	r3, [r7, #4]
90004bd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90004bd4:	687b      	ldr	r3, [r7, #4]
90004bd6:	681b      	ldr	r3, [r3, #0]
90004bd8:	68fa      	ldr	r2, [r7, #12]
90004bda:	430a      	orrs	r2, r1
90004bdc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90004bde:	687b      	ldr	r3, [r7, #4]
90004be0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90004be4:	021b      	lsls	r3, r3, #8
90004be6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90004be8:	687b      	ldr	r3, [r7, #4]
90004bea:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
90004bee:	041b      	lsls	r3, r3, #16
90004bf0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90004bf2:	687b      	ldr	r3, [r7, #4]
90004bf4:	681b      	ldr	r3, [r3, #0]
90004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
90004bf8:	687b      	ldr	r3, [r7, #4]
90004bfa:	681b      	ldr	r3, [r3, #0]
90004bfc:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90004c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90004c02:	687b      	ldr	r3, [r7, #4]
90004c04:	681b      	ldr	r3, [r3, #0]
90004c06:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
90004c08:	68ba      	ldr	r2, [r7, #8]
90004c0a:	68fb      	ldr	r3, [r7, #12]
90004c0c:	4313      	orrs	r3, r2
90004c0e:	687a      	ldr	r2, [r7, #4]
90004c10:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90004c14:	431a      	orrs	r2, r3
90004c16:	687b      	ldr	r3, [r7, #4]
90004c18:	681b      	ldr	r3, [r3, #0]
90004c1a:	430a      	orrs	r2, r1
90004c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90004c1e:	687b      	ldr	r3, [r7, #4]
90004c20:	681b      	ldr	r3, [r3, #0]
90004c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90004c24:	687b      	ldr	r3, [r7, #4]
90004c26:	681b      	ldr	r3, [r3, #0]
90004c28:	f042 0206 	orr.w	r2, r2, #6
90004c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90004c2e:	687b      	ldr	r3, [r7, #4]
90004c30:	681b      	ldr	r3, [r3, #0]
90004c32:	699a      	ldr	r2, [r3, #24]
90004c34:	687b      	ldr	r3, [r7, #4]
90004c36:	681b      	ldr	r3, [r3, #0]
90004c38:	f042 0201 	orr.w	r2, r2, #1
90004c3c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90004c3e:	687b      	ldr	r3, [r7, #4]
90004c40:	2200      	movs	r2, #0
90004c42:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90004c46:	687b      	ldr	r3, [r7, #4]
90004c48:	2201      	movs	r2, #1
90004c4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
90004c4e:	2300      	movs	r3, #0
}
90004c50:	4618      	mov	r0, r3
90004c52:	3710      	adds	r7, #16
90004c54:	46bd      	mov	sp, r7
90004c56:	bd80      	pop	{r7, pc}

90004c58 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90004c58:	b480      	push	{r7}
90004c5a:	b083      	sub	sp, #12
90004c5c:	af00      	add	r7, sp, #0
90004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90004c60:	bf00      	nop
90004c62:	370c      	adds	r7, #12
90004c64:	46bd      	mov	sp, r7
90004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
90004c6a:	4770      	bx	lr

90004c6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90004c6c:	b5b0      	push	{r4, r5, r7, lr}
90004c6e:	b084      	sub	sp, #16
90004c70:	af00      	add	r7, sp, #0
90004c72:	60f8      	str	r0, [r7, #12]
90004c74:	60b9      	str	r1, [r7, #8]
90004c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90004c78:	68fb      	ldr	r3, [r7, #12]
90004c7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90004c7e:	2b01      	cmp	r3, #1
90004c80:	d101      	bne.n	90004c86 <HAL_LTDC_ConfigLayer+0x1a>
90004c82:	2302      	movs	r3, #2
90004c84:	e02c      	b.n	90004ce0 <HAL_LTDC_ConfigLayer+0x74>
90004c86:	68fb      	ldr	r3, [r7, #12]
90004c88:	2201      	movs	r2, #1
90004c8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90004c8e:	68fb      	ldr	r3, [r7, #12]
90004c90:	2202      	movs	r2, #2
90004c92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004c96:	68fa      	ldr	r2, [r7, #12]
90004c98:	687b      	ldr	r3, [r7, #4]
90004c9a:	2134      	movs	r1, #52	@ 0x34
90004c9c:	fb01 f303 	mul.w	r3, r1, r3
90004ca0:	4413      	add	r3, r2
90004ca2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
90004ca6:	68bb      	ldr	r3, [r7, #8]
90004ca8:	4614      	mov	r4, r2
90004caa:	461d      	mov	r5, r3
90004cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90004cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90004cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90004cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004cb8:	682b      	ldr	r3, [r5, #0]
90004cba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90004cbc:	687a      	ldr	r2, [r7, #4]
90004cbe:	68b9      	ldr	r1, [r7, #8]
90004cc0:	68f8      	ldr	r0, [r7, #12]
90004cc2:	f000 f811 	bl	90004ce8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90004cc6:	68fb      	ldr	r3, [r7, #12]
90004cc8:	681b      	ldr	r3, [r3, #0]
90004cca:	2201      	movs	r2, #1
90004ccc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90004cce:	68fb      	ldr	r3, [r7, #12]
90004cd0:	2201      	movs	r2, #1
90004cd2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90004cd6:	68fb      	ldr	r3, [r7, #12]
90004cd8:	2200      	movs	r2, #0
90004cda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90004cde:	2300      	movs	r3, #0
}
90004ce0:	4618      	mov	r0, r3
90004ce2:	3710      	adds	r7, #16
90004ce4:	46bd      	mov	sp, r7
90004ce6:	bdb0      	pop	{r4, r5, r7, pc}

90004ce8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90004ce8:	b480      	push	{r7}
90004cea:	b089      	sub	sp, #36	@ 0x24
90004cec:	af00      	add	r7, sp, #0
90004cee:	60f8      	str	r0, [r7, #12]
90004cf0:	60b9      	str	r1, [r7, #8]
90004cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004cf4:	68bb      	ldr	r3, [r7, #8]
90004cf6:	685a      	ldr	r2, [r3, #4]
90004cf8:	68fb      	ldr	r3, [r7, #12]
90004cfa:	681b      	ldr	r3, [r3, #0]
90004cfc:	68db      	ldr	r3, [r3, #12]
90004cfe:	0c1b      	lsrs	r3, r3, #16
90004d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
90004d04:	4413      	add	r3, r2
90004d06:	041b      	lsls	r3, r3, #16
90004d08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004d0a:	68fb      	ldr	r3, [r7, #12]
90004d0c:	681b      	ldr	r3, [r3, #0]
90004d0e:	461a      	mov	r2, r3
90004d10:	687b      	ldr	r3, [r7, #4]
90004d12:	01db      	lsls	r3, r3, #7
90004d14:	4413      	add	r3, r2
90004d16:	3384      	adds	r3, #132	@ 0x84
90004d18:	685b      	ldr	r3, [r3, #4]
90004d1a:	68fa      	ldr	r2, [r7, #12]
90004d1c:	6812      	ldr	r2, [r2, #0]
90004d1e:	4611      	mov	r1, r2
90004d20:	687a      	ldr	r2, [r7, #4]
90004d22:	01d2      	lsls	r2, r2, #7
90004d24:	440a      	add	r2, r1
90004d26:	3284      	adds	r2, #132	@ 0x84
90004d28:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90004d2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90004d2e:	68bb      	ldr	r3, [r7, #8]
90004d30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90004d32:	68fb      	ldr	r3, [r7, #12]
90004d34:	681b      	ldr	r3, [r3, #0]
90004d36:	68db      	ldr	r3, [r3, #12]
90004d38:	0c1b      	lsrs	r3, r3, #16
90004d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90004d3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90004d40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90004d42:	68fb      	ldr	r3, [r7, #12]
90004d44:	681b      	ldr	r3, [r3, #0]
90004d46:	4619      	mov	r1, r3
90004d48:	687b      	ldr	r3, [r7, #4]
90004d4a:	01db      	lsls	r3, r3, #7
90004d4c:	440b      	add	r3, r1
90004d4e:	3384      	adds	r3, #132	@ 0x84
90004d50:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90004d52:	69fb      	ldr	r3, [r7, #28]
90004d54:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90004d56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90004d58:	68bb      	ldr	r3, [r7, #8]
90004d5a:	68da      	ldr	r2, [r3, #12]
90004d5c:	68fb      	ldr	r3, [r7, #12]
90004d5e:	681b      	ldr	r3, [r3, #0]
90004d60:	68db      	ldr	r3, [r3, #12]
90004d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
90004d66:	4413      	add	r3, r2
90004d68:	041b      	lsls	r3, r3, #16
90004d6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90004d6c:	68fb      	ldr	r3, [r7, #12]
90004d6e:	681b      	ldr	r3, [r3, #0]
90004d70:	461a      	mov	r2, r3
90004d72:	687b      	ldr	r3, [r7, #4]
90004d74:	01db      	lsls	r3, r3, #7
90004d76:	4413      	add	r3, r2
90004d78:	3384      	adds	r3, #132	@ 0x84
90004d7a:	689b      	ldr	r3, [r3, #8]
90004d7c:	68fa      	ldr	r2, [r7, #12]
90004d7e:	6812      	ldr	r2, [r2, #0]
90004d80:	4611      	mov	r1, r2
90004d82:	687a      	ldr	r2, [r7, #4]
90004d84:	01d2      	lsls	r2, r2, #7
90004d86:	440a      	add	r2, r1
90004d88:	3284      	adds	r2, #132	@ 0x84
90004d8a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90004d8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90004d90:	68bb      	ldr	r3, [r7, #8]
90004d92:	689a      	ldr	r2, [r3, #8]
90004d94:	68fb      	ldr	r3, [r7, #12]
90004d96:	681b      	ldr	r3, [r3, #0]
90004d98:	68db      	ldr	r3, [r3, #12]
90004d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
90004d9e:	4413      	add	r3, r2
90004da0:	1c5a      	adds	r2, r3, #1
90004da2:	68fb      	ldr	r3, [r7, #12]
90004da4:	681b      	ldr	r3, [r3, #0]
90004da6:	4619      	mov	r1, r3
90004da8:	687b      	ldr	r3, [r7, #4]
90004daa:	01db      	lsls	r3, r3, #7
90004dac:	440b      	add	r3, r1
90004dae:	3384      	adds	r3, #132	@ 0x84
90004db0:	4619      	mov	r1, r3
90004db2:	69fb      	ldr	r3, [r7, #28]
90004db4:	4313      	orrs	r3, r2
90004db6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90004db8:	68fb      	ldr	r3, [r7, #12]
90004dba:	681b      	ldr	r3, [r3, #0]
90004dbc:	461a      	mov	r2, r3
90004dbe:	687b      	ldr	r3, [r7, #4]
90004dc0:	01db      	lsls	r3, r3, #7
90004dc2:	4413      	add	r3, r2
90004dc4:	3384      	adds	r3, #132	@ 0x84
90004dc6:	691b      	ldr	r3, [r3, #16]
90004dc8:	68fa      	ldr	r2, [r7, #12]
90004dca:	6812      	ldr	r2, [r2, #0]
90004dcc:	4611      	mov	r1, r2
90004dce:	687a      	ldr	r2, [r7, #4]
90004dd0:	01d2      	lsls	r2, r2, #7
90004dd2:	440a      	add	r2, r1
90004dd4:	3284      	adds	r2, #132	@ 0x84
90004dd6:	f023 0307 	bic.w	r3, r3, #7
90004dda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90004ddc:	68fb      	ldr	r3, [r7, #12]
90004dde:	681b      	ldr	r3, [r3, #0]
90004de0:	461a      	mov	r2, r3
90004de2:	687b      	ldr	r3, [r7, #4]
90004de4:	01db      	lsls	r3, r3, #7
90004de6:	4413      	add	r3, r2
90004de8:	3384      	adds	r3, #132	@ 0x84
90004dea:	461a      	mov	r2, r3
90004dec:	68bb      	ldr	r3, [r7, #8]
90004dee:	691b      	ldr	r3, [r3, #16]
90004df0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90004df2:	68bb      	ldr	r3, [r7, #8]
90004df4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
90004df8:	021b      	lsls	r3, r3, #8
90004dfa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90004dfc:	68bb      	ldr	r3, [r7, #8]
90004dfe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
90004e02:	041b      	lsls	r3, r3, #16
90004e04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90004e06:	68bb      	ldr	r3, [r7, #8]
90004e08:	699b      	ldr	r3, [r3, #24]
90004e0a:	061b      	lsls	r3, r3, #24
90004e0c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
90004e0e:	68bb      	ldr	r3, [r7, #8]
90004e10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90004e14:	461a      	mov	r2, r3
90004e16:	69fb      	ldr	r3, [r7, #28]
90004e18:	431a      	orrs	r2, r3
90004e1a:	69bb      	ldr	r3, [r7, #24]
90004e1c:	431a      	orrs	r2, r3
90004e1e:	68fb      	ldr	r3, [r7, #12]
90004e20:	681b      	ldr	r3, [r3, #0]
90004e22:	4619      	mov	r1, r3
90004e24:	687b      	ldr	r3, [r7, #4]
90004e26:	01db      	lsls	r3, r3, #7
90004e28:	440b      	add	r3, r1
90004e2a:	3384      	adds	r3, #132	@ 0x84
90004e2c:	4619      	mov	r1, r3
90004e2e:	697b      	ldr	r3, [r7, #20]
90004e30:	4313      	orrs	r3, r2
90004e32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90004e34:	68fb      	ldr	r3, [r7, #12]
90004e36:	681b      	ldr	r3, [r3, #0]
90004e38:	461a      	mov	r2, r3
90004e3a:	687b      	ldr	r3, [r7, #4]
90004e3c:	01db      	lsls	r3, r3, #7
90004e3e:	4413      	add	r3, r2
90004e40:	3384      	adds	r3, #132	@ 0x84
90004e42:	695b      	ldr	r3, [r3, #20]
90004e44:	68fa      	ldr	r2, [r7, #12]
90004e46:	6812      	ldr	r2, [r2, #0]
90004e48:	4611      	mov	r1, r2
90004e4a:	687a      	ldr	r2, [r7, #4]
90004e4c:	01d2      	lsls	r2, r2, #7
90004e4e:	440a      	add	r2, r1
90004e50:	3284      	adds	r2, #132	@ 0x84
90004e52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90004e56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90004e58:	68fb      	ldr	r3, [r7, #12]
90004e5a:	681b      	ldr	r3, [r3, #0]
90004e5c:	461a      	mov	r2, r3
90004e5e:	687b      	ldr	r3, [r7, #4]
90004e60:	01db      	lsls	r3, r3, #7
90004e62:	4413      	add	r3, r2
90004e64:	3384      	adds	r3, #132	@ 0x84
90004e66:	461a      	mov	r2, r3
90004e68:	68bb      	ldr	r3, [r7, #8]
90004e6a:	695b      	ldr	r3, [r3, #20]
90004e6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90004e6e:	68fb      	ldr	r3, [r7, #12]
90004e70:	681b      	ldr	r3, [r3, #0]
90004e72:	461a      	mov	r2, r3
90004e74:	687b      	ldr	r3, [r7, #4]
90004e76:	01db      	lsls	r3, r3, #7
90004e78:	4413      	add	r3, r2
90004e7a:	3384      	adds	r3, #132	@ 0x84
90004e7c:	69da      	ldr	r2, [r3, #28]
90004e7e:	68fb      	ldr	r3, [r7, #12]
90004e80:	681b      	ldr	r3, [r3, #0]
90004e82:	4619      	mov	r1, r3
90004e84:	687b      	ldr	r3, [r7, #4]
90004e86:	01db      	lsls	r3, r3, #7
90004e88:	440b      	add	r3, r1
90004e8a:	3384      	adds	r3, #132	@ 0x84
90004e8c:	4619      	mov	r1, r3
90004e8e:	4b4f      	ldr	r3, [pc, #316]	@ (90004fcc <LTDC_SetConfig+0x2e4>)
90004e90:	4013      	ands	r3, r2
90004e92:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90004e94:	68bb      	ldr	r3, [r7, #8]
90004e96:	69da      	ldr	r2, [r3, #28]
90004e98:	68bb      	ldr	r3, [r7, #8]
90004e9a:	6a1b      	ldr	r3, [r3, #32]
90004e9c:	68f9      	ldr	r1, [r7, #12]
90004e9e:	6809      	ldr	r1, [r1, #0]
90004ea0:	4608      	mov	r0, r1
90004ea2:	6879      	ldr	r1, [r7, #4]
90004ea4:	01c9      	lsls	r1, r1, #7
90004ea6:	4401      	add	r1, r0
90004ea8:	3184      	adds	r1, #132	@ 0x84
90004eaa:	4313      	orrs	r3, r2
90004eac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90004eae:	68fb      	ldr	r3, [r7, #12]
90004eb0:	681b      	ldr	r3, [r3, #0]
90004eb2:	461a      	mov	r2, r3
90004eb4:	687b      	ldr	r3, [r7, #4]
90004eb6:	01db      	lsls	r3, r3, #7
90004eb8:	4413      	add	r3, r2
90004eba:	3384      	adds	r3, #132	@ 0x84
90004ebc:	461a      	mov	r2, r3
90004ebe:	68bb      	ldr	r3, [r7, #8]
90004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90004ec2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90004ec4:	68bb      	ldr	r3, [r7, #8]
90004ec6:	691b      	ldr	r3, [r3, #16]
90004ec8:	2b00      	cmp	r3, #0
90004eca:	d102      	bne.n	90004ed2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90004ecc:	2304      	movs	r3, #4
90004ece:	61fb      	str	r3, [r7, #28]
90004ed0:	e01b      	b.n	90004f0a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90004ed2:	68bb      	ldr	r3, [r7, #8]
90004ed4:	691b      	ldr	r3, [r3, #16]
90004ed6:	2b01      	cmp	r3, #1
90004ed8:	d102      	bne.n	90004ee0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
90004eda:	2303      	movs	r3, #3
90004edc:	61fb      	str	r3, [r7, #28]
90004ede:	e014      	b.n	90004f0a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90004ee0:	68bb      	ldr	r3, [r7, #8]
90004ee2:	691b      	ldr	r3, [r3, #16]
90004ee4:	2b04      	cmp	r3, #4
90004ee6:	d00b      	beq.n	90004f00 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90004ee8:	68bb      	ldr	r3, [r7, #8]
90004eea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90004eec:	2b02      	cmp	r3, #2
90004eee:	d007      	beq.n	90004f00 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90004ef0:	68bb      	ldr	r3, [r7, #8]
90004ef2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90004ef4:	2b03      	cmp	r3, #3
90004ef6:	d003      	beq.n	90004f00 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90004ef8:	68bb      	ldr	r3, [r7, #8]
90004efa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90004efc:	2b07      	cmp	r3, #7
90004efe:	d102      	bne.n	90004f06 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90004f00:	2302      	movs	r3, #2
90004f02:	61fb      	str	r3, [r7, #28]
90004f04:	e001      	b.n	90004f0a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
90004f06:	2301      	movs	r3, #1
90004f08:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90004f0a:	68fb      	ldr	r3, [r7, #12]
90004f0c:	681b      	ldr	r3, [r3, #0]
90004f0e:	461a      	mov	r2, r3
90004f10:	687b      	ldr	r3, [r7, #4]
90004f12:	01db      	lsls	r3, r3, #7
90004f14:	4413      	add	r3, r2
90004f16:	3384      	adds	r3, #132	@ 0x84
90004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90004f1a:	68fa      	ldr	r2, [r7, #12]
90004f1c:	6812      	ldr	r2, [r2, #0]
90004f1e:	4611      	mov	r1, r2
90004f20:	687a      	ldr	r2, [r7, #4]
90004f22:	01d2      	lsls	r2, r2, #7
90004f24:	440a      	add	r2, r1
90004f26:	3284      	adds	r2, #132	@ 0x84
90004f28:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90004f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90004f2e:	68bb      	ldr	r3, [r7, #8]
90004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90004f32:	69fa      	ldr	r2, [r7, #28]
90004f34:	fb02 f303 	mul.w	r3, r2, r3
90004f38:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90004f3a:	68bb      	ldr	r3, [r7, #8]
90004f3c:	6859      	ldr	r1, [r3, #4]
90004f3e:	68bb      	ldr	r3, [r7, #8]
90004f40:	681b      	ldr	r3, [r3, #0]
90004f42:	1acb      	subs	r3, r1, r3
90004f44:	69f9      	ldr	r1, [r7, #28]
90004f46:	fb01 f303 	mul.w	r3, r1, r3
90004f4a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90004f4c:	68f9      	ldr	r1, [r7, #12]
90004f4e:	6809      	ldr	r1, [r1, #0]
90004f50:	4608      	mov	r0, r1
90004f52:	6879      	ldr	r1, [r7, #4]
90004f54:	01c9      	lsls	r1, r1, #7
90004f56:	4401      	add	r1, r0
90004f58:	3184      	adds	r1, #132	@ 0x84
90004f5a:	4313      	orrs	r3, r2
90004f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90004f5e:	68fb      	ldr	r3, [r7, #12]
90004f60:	681b      	ldr	r3, [r3, #0]
90004f62:	461a      	mov	r2, r3
90004f64:	687b      	ldr	r3, [r7, #4]
90004f66:	01db      	lsls	r3, r3, #7
90004f68:	4413      	add	r3, r2
90004f6a:	3384      	adds	r3, #132	@ 0x84
90004f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90004f6e:	68fb      	ldr	r3, [r7, #12]
90004f70:	681b      	ldr	r3, [r3, #0]
90004f72:	4619      	mov	r1, r3
90004f74:	687b      	ldr	r3, [r7, #4]
90004f76:	01db      	lsls	r3, r3, #7
90004f78:	440b      	add	r3, r1
90004f7a:	3384      	adds	r3, #132	@ 0x84
90004f7c:	4619      	mov	r1, r3
90004f7e:	4b14      	ldr	r3, [pc, #80]	@ (90004fd0 <LTDC_SetConfig+0x2e8>)
90004f80:	4013      	ands	r3, r2
90004f82:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90004f84:	68fb      	ldr	r3, [r7, #12]
90004f86:	681b      	ldr	r3, [r3, #0]
90004f88:	461a      	mov	r2, r3
90004f8a:	687b      	ldr	r3, [r7, #4]
90004f8c:	01db      	lsls	r3, r3, #7
90004f8e:	4413      	add	r3, r2
90004f90:	3384      	adds	r3, #132	@ 0x84
90004f92:	461a      	mov	r2, r3
90004f94:	68bb      	ldr	r3, [r7, #8]
90004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90004f98:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90004f9a:	68fb      	ldr	r3, [r7, #12]
90004f9c:	681b      	ldr	r3, [r3, #0]
90004f9e:	461a      	mov	r2, r3
90004fa0:	687b      	ldr	r3, [r7, #4]
90004fa2:	01db      	lsls	r3, r3, #7
90004fa4:	4413      	add	r3, r2
90004fa6:	3384      	adds	r3, #132	@ 0x84
90004fa8:	681b      	ldr	r3, [r3, #0]
90004faa:	68fa      	ldr	r2, [r7, #12]
90004fac:	6812      	ldr	r2, [r2, #0]
90004fae:	4611      	mov	r1, r2
90004fb0:	687a      	ldr	r2, [r7, #4]
90004fb2:	01d2      	lsls	r2, r2, #7
90004fb4:	440a      	add	r2, r1
90004fb6:	3284      	adds	r2, #132	@ 0x84
90004fb8:	f043 0301 	orr.w	r3, r3, #1
90004fbc:	6013      	str	r3, [r2, #0]
}
90004fbe:	bf00      	nop
90004fc0:	3724      	adds	r7, #36	@ 0x24
90004fc2:	46bd      	mov	sp, r7
90004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
90004fc8:	4770      	bx	lr
90004fca:	bf00      	nop
90004fcc:	fffff8f8 	.word	0xfffff8f8
90004fd0:	fffff800 	.word	0xfffff800

90004fd4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90004fd4:	b580      	push	{r7, lr}
90004fd6:	b084      	sub	sp, #16
90004fd8:	af00      	add	r7, sp, #0
90004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90004fdc:	f7fe fa34 	bl	90003448 <HAL_GetTick>
90004fe0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90004fe2:	687b      	ldr	r3, [r7, #4]
90004fe4:	2b00      	cmp	r3, #0
90004fe6:	d101      	bne.n	90004fec <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
90004fe8:	2301      	movs	r3, #1
90004fea:	e03b      	b.n	90005064 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90004fec:	687b      	ldr	r3, [r7, #4]
90004fee:	2200      	movs	r2, #0
90004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90004ff4:	687b      	ldr	r3, [r7, #4]
90004ff6:	2202      	movs	r2, #2
90004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90004ffc:	687b      	ldr	r3, [r7, #4]
90004ffe:	681b      	ldr	r3, [r3, #0]
90005000:	68da      	ldr	r2, [r3, #12]
90005002:	687b      	ldr	r3, [r7, #4]
90005004:	681b      	ldr	r3, [r3, #0]
90005006:	f022 0201 	bic.w	r2, r2, #1
9000500a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000500c:	e00f      	b.n	9000502e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000500e:	f7fe fa1b 	bl	90003448 <HAL_GetTick>
90005012:	4602      	mov	r2, r0
90005014:	68fb      	ldr	r3, [r7, #12]
90005016:	1ad3      	subs	r3, r2, r3
90005018:	2b05      	cmp	r3, #5
9000501a:	d908      	bls.n	9000502e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000501c:	687b      	ldr	r3, [r7, #4]
9000501e:	2240      	movs	r2, #64	@ 0x40
90005020:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90005022:	687b      	ldr	r3, [r7, #4]
90005024:	2203      	movs	r2, #3
90005026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
9000502a:	2301      	movs	r3, #1
9000502c:	e01a      	b.n	90005064 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000502e:	687b      	ldr	r3, [r7, #4]
90005030:	681b      	ldr	r3, [r3, #0]
90005032:	68db      	ldr	r3, [r3, #12]
90005034:	f003 0301 	and.w	r3, r3, #1
90005038:	2b00      	cmp	r3, #0
9000503a:	d1e8      	bne.n	9000500e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
9000503c:	6878      	ldr	r0, [r7, #4]
9000503e:	f000 f86d 	bl	9000511c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90005042:	687b      	ldr	r3, [r7, #4]
90005044:	2200      	movs	r2, #0
90005046:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90005048:	687b      	ldr	r3, [r7, #4]
9000504a:	2200      	movs	r2, #0
9000504c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
9000504e:	687b      	ldr	r3, [r7, #4]
90005050:	2200      	movs	r2, #0
90005052:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90005054:	687b      	ldr	r3, [r7, #4]
90005056:	2200      	movs	r2, #0
90005058:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
9000505a:	687b      	ldr	r3, [r7, #4]
9000505c:	2201      	movs	r2, #1
9000505e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90005062:	2300      	movs	r3, #0
}
90005064:	4618      	mov	r0, r3
90005066:	3710      	adds	r7, #16
90005068:	46bd      	mov	sp, r7
9000506a:	bd80      	pop	{r7, pc}

9000506c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
9000506c:	b480      	push	{r7}
9000506e:	b083      	sub	sp, #12
90005070:	af00      	add	r7, sp, #0
90005072:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90005074:	687b      	ldr	r3, [r7, #4]
90005076:	2b00      	cmp	r3, #0
90005078:	d101      	bne.n	9000507e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
9000507a:	2301      	movs	r3, #1
9000507c:	e048      	b.n	90005110 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
9000507e:	687b      	ldr	r3, [r7, #4]
90005080:	681b      	ldr	r3, [r3, #0]
90005082:	68da      	ldr	r2, [r3, #12]
90005084:	687b      	ldr	r3, [r7, #4]
90005086:	681b      	ldr	r3, [r3, #0]
90005088:	f022 0201 	bic.w	r2, r2, #1
9000508c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
9000508e:	687b      	ldr	r3, [r7, #4]
90005090:	681b      	ldr	r3, [r3, #0]
90005092:	2200      	movs	r2, #0
90005094:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90005096:	687b      	ldr	r3, [r7, #4]
90005098:	681b      	ldr	r3, [r3, #0]
9000509a:	2200      	movs	r2, #0
9000509c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
9000509e:	687b      	ldr	r3, [r7, #4]
900050a0:	681b      	ldr	r3, [r3, #0]
900050a2:	2200      	movs	r2, #0
900050a4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
900050a6:	687b      	ldr	r3, [r7, #4]
900050a8:	681b      	ldr	r3, [r3, #0]
900050aa:	2200      	movs	r2, #0
900050ac:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
900050ae:	687b      	ldr	r3, [r7, #4]
900050b0:	681b      	ldr	r3, [r3, #0]
900050b2:	2200      	movs	r2, #0
900050b4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
900050b6:	687b      	ldr	r3, [r7, #4]
900050b8:	681b      	ldr	r3, [r3, #0]
900050ba:	2200      	movs	r2, #0
900050bc:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
900050be:	687b      	ldr	r3, [r7, #4]
900050c0:	681b      	ldr	r3, [r3, #0]
900050c2:	2200      	movs	r2, #0
900050c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
900050c6:	687b      	ldr	r3, [r7, #4]
900050c8:	681b      	ldr	r3, [r3, #0]
900050ca:	2200      	movs	r2, #0
900050cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
900050ce:	687b      	ldr	r3, [r7, #4]
900050d0:	681b      	ldr	r3, [r3, #0]
900050d2:	2200      	movs	r2, #0
900050d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
900050d6:	687b      	ldr	r3, [r7, #4]
900050d8:	681b      	ldr	r3, [r3, #0]
900050da:	2200      	movs	r2, #0
900050dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
900050de:	687b      	ldr	r3, [r7, #4]
900050e0:	681b      	ldr	r3, [r3, #0]
900050e2:	221f      	movs	r2, #31
900050e4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
900050e6:	687b      	ldr	r3, [r7, #4]
900050e8:	2200      	movs	r2, #0
900050ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
900050ec:	687b      	ldr	r3, [r7, #4]
900050ee:	2200      	movs	r2, #0
900050f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
900050f2:	687b      	ldr	r3, [r7, #4]
900050f4:	2200      	movs	r2, #0
900050f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900050f8:	687b      	ldr	r3, [r7, #4]
900050fa:	2200      	movs	r2, #0
900050fc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
900050fe:	687b      	ldr	r3, [r7, #4]
90005100:	2200      	movs	r2, #0
90005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90005106:	687b      	ldr	r3, [r7, #4]
90005108:	2200      	movs	r2, #0
9000510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
9000510e:	2300      	movs	r3, #0
}
90005110:	4618      	mov	r0, r3
90005112:	370c      	adds	r7, #12
90005114:	46bd      	mov	sp, r7
90005116:	f85d 7b04 	ldr.w	r7, [sp], #4
9000511a:	4770      	bx	lr

9000511c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000511c:	b480      	push	{r7}
9000511e:	b085      	sub	sp, #20
90005120:	af00      	add	r7, sp, #0
90005122:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90005124:	687b      	ldr	r3, [r7, #4]
90005126:	68d9      	ldr	r1, [r3, #12]
90005128:	687b      	ldr	r3, [r7, #4]
9000512a:	691a      	ldr	r2, [r3, #16]
9000512c:	687b      	ldr	r3, [r7, #4]
9000512e:	681b      	ldr	r3, [r3, #0]
90005130:	430a      	orrs	r2, r1
90005132:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90005134:	687b      	ldr	r3, [r7, #4]
90005136:	695a      	ldr	r2, [r3, #20]
90005138:	687b      	ldr	r3, [r7, #4]
9000513a:	699b      	ldr	r3, [r3, #24]
9000513c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
9000513e:	687b      	ldr	r3, [r7, #4]
90005140:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90005142:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90005144:	687b      	ldr	r3, [r7, #4]
90005146:	6a1b      	ldr	r3, [r3, #32]
90005148:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000514a:	687b      	ldr	r3, [r7, #4]
9000514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
9000514e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90005150:	687b      	ldr	r3, [r7, #4]
90005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005154:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90005156:	687b      	ldr	r3, [r7, #4]
90005158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000515a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000515c:	687b      	ldr	r3, [r7, #4]
9000515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90005160:	3b01      	subs	r3, #1
90005162:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90005164:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90005168:	687b      	ldr	r3, [r7, #4]
9000516a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000516c:	687b      	ldr	r3, [r7, #4]
9000516e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90005170:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90005172:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90005174:	687b      	ldr	r3, [r7, #4]
90005176:	685b      	ldr	r3, [r3, #4]
90005178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000517c:	d107      	bne.n	9000518e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000517e:	687b      	ldr	r3, [r7, #4]
90005180:	681b      	ldr	r3, [r3, #0]
90005182:	691a      	ldr	r2, [r3, #16]
90005184:	687b      	ldr	r3, [r7, #4]
90005186:	681b      	ldr	r3, [r3, #0]
90005188:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
9000518c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000518e:	687b      	ldr	r3, [r7, #4]
90005190:	681b      	ldr	r3, [r3, #0]
90005192:	2200      	movs	r2, #0
90005194:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90005196:	687b      	ldr	r3, [r7, #4]
90005198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000519a:	2b00      	cmp	r3, #0
9000519c:	da11      	bge.n	900051c2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000519e:	687b      	ldr	r3, [r7, #4]
900051a0:	681b      	ldr	r3, [r3, #0]
900051a2:	695a      	ldr	r2, [r3, #20]
900051a4:	687b      	ldr	r3, [r7, #4]
900051a6:	681b      	ldr	r3, [r3, #0]
900051a8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
900051ac:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
900051ae:	687b      	ldr	r3, [r7, #4]
900051b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900051b2:	425b      	negs	r3, r3
900051b4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
900051b6:	687b      	ldr	r3, [r7, #4]
900051b8:	681b      	ldr	r3, [r3, #0]
900051ba:	68fa      	ldr	r2, [r7, #12]
900051bc:	b292      	uxth	r2, r2
900051be:	621a      	str	r2, [r3, #32]
900051c0:	e006      	b.n	900051d0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
900051c2:	687b      	ldr	r3, [r7, #4]
900051c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900051c6:	461a      	mov	r2, r3
900051c8:	687b      	ldr	r3, [r7, #4]
900051ca:	681b      	ldr	r3, [r3, #0]
900051cc:	b292      	uxth	r2, r2
900051ce:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
900051d0:	687b      	ldr	r3, [r7, #4]
900051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900051d4:	2b00      	cmp	r3, #0
900051d6:	da15      	bge.n	90005204 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
900051d8:	687b      	ldr	r3, [r7, #4]
900051da:	681b      	ldr	r3, [r3, #0]
900051dc:	695a      	ldr	r2, [r3, #20]
900051de:	687b      	ldr	r3, [r7, #4]
900051e0:	681b      	ldr	r3, [r3, #0]
900051e2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
900051e6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
900051e8:	687b      	ldr	r3, [r7, #4]
900051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900051ec:	425b      	negs	r3, r3
900051ee:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
900051f0:	687b      	ldr	r3, [r7, #4]
900051f2:	681b      	ldr	r3, [r3, #0]
900051f4:	6a19      	ldr	r1, [r3, #32]
900051f6:	68fb      	ldr	r3, [r7, #12]
900051f8:	041a      	lsls	r2, r3, #16
900051fa:	687b      	ldr	r3, [r7, #4]
900051fc:	681b      	ldr	r3, [r3, #0]
900051fe:	430a      	orrs	r2, r1
90005200:	621a      	str	r2, [r3, #32]
90005202:	e009      	b.n	90005218 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90005204:	687b      	ldr	r3, [r7, #4]
90005206:	681b      	ldr	r3, [r3, #0]
90005208:	6a19      	ldr	r1, [r3, #32]
9000520a:	687b      	ldr	r3, [r7, #4]
9000520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000520e:	041a      	lsls	r2, r3, #16
90005210:	687b      	ldr	r3, [r7, #4]
90005212:	681b      	ldr	r3, [r3, #0]
90005214:	430a      	orrs	r2, r1
90005216:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90005218:	687b      	ldr	r3, [r7, #4]
9000521a:	685b      	ldr	r3, [r3, #4]
9000521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90005220:	d006      	beq.n	90005230 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90005222:	687b      	ldr	r3, [r7, #4]
90005224:	685a      	ldr	r2, [r3, #4]
90005226:	687b      	ldr	r3, [r7, #4]
90005228:	681b      	ldr	r3, [r3, #0]
9000522a:	b2d2      	uxtb	r2, r2
9000522c:	629a      	str	r2, [r3, #40]	@ 0x28
9000522e:	e003      	b.n	90005238 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90005230:	687b      	ldr	r3, [r7, #4]
90005232:	681b      	ldr	r3, [r3, #0]
90005234:	2200      	movs	r2, #0
90005236:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90005238:	687b      	ldr	r3, [r7, #4]
9000523a:	681b      	ldr	r3, [r3, #0]
9000523c:	2200      	movs	r2, #0
9000523e:	625a      	str	r2, [r3, #36]	@ 0x24
}
90005240:	bf00      	nop
90005242:	3714      	adds	r7, #20
90005244:	46bd      	mov	sp, r7
90005246:	f85d 7b04 	ldr.w	r7, [sp], #4
9000524a:	4770      	bx	lr

9000524c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
9000524c:	b580      	push	{r7, lr}
9000524e:	b08c      	sub	sp, #48	@ 0x30
90005250:	af00      	add	r7, sp, #0
90005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90005254:	687b      	ldr	r3, [r7, #4]
90005256:	2b00      	cmp	r3, #0
90005258:	d102      	bne.n	90005260 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
9000525a:	2301      	movs	r3, #1
9000525c:	f000 bc48 	b.w	90005af0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90005260:	687b      	ldr	r3, [r7, #4]
90005262:	681b      	ldr	r3, [r3, #0]
90005264:	f003 0301 	and.w	r3, r3, #1
90005268:	2b00      	cmp	r3, #0
9000526a:	f000 8088 	beq.w	9000537e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000526e:	4b99      	ldr	r3, [pc, #612]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005270:	691b      	ldr	r3, [r3, #16]
90005272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90005276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90005278:	4b96      	ldr	r3, [pc, #600]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000527c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90005280:	2b10      	cmp	r3, #16
90005282:	d007      	beq.n	90005294 <HAL_RCC_OscConfig+0x48>
90005284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90005286:	2b18      	cmp	r3, #24
90005288:	d111      	bne.n	900052ae <HAL_RCC_OscConfig+0x62>
9000528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000528c:	f003 0303 	and.w	r3, r3, #3
90005290:	2b02      	cmp	r3, #2
90005292:	d10c      	bne.n	900052ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90005294:	4b8f      	ldr	r3, [pc, #572]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005296:	681b      	ldr	r3, [r3, #0]
90005298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000529c:	2b00      	cmp	r3, #0
9000529e:	d06d      	beq.n	9000537c <HAL_RCC_OscConfig+0x130>
900052a0:	687b      	ldr	r3, [r7, #4]
900052a2:	685b      	ldr	r3, [r3, #4]
900052a4:	2b00      	cmp	r3, #0
900052a6:	d169      	bne.n	9000537c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
900052a8:	2301      	movs	r3, #1
900052aa:	f000 bc21 	b.w	90005af0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900052ae:	687b      	ldr	r3, [r7, #4]
900052b0:	685b      	ldr	r3, [r3, #4]
900052b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900052b6:	d106      	bne.n	900052c6 <HAL_RCC_OscConfig+0x7a>
900052b8:	4b86      	ldr	r3, [pc, #536]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900052ba:	681b      	ldr	r3, [r3, #0]
900052bc:	4a85      	ldr	r2, [pc, #532]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900052be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900052c2:	6013      	str	r3, [r2, #0]
900052c4:	e02e      	b.n	90005324 <HAL_RCC_OscConfig+0xd8>
900052c6:	687b      	ldr	r3, [r7, #4]
900052c8:	685b      	ldr	r3, [r3, #4]
900052ca:	2b00      	cmp	r3, #0
900052cc:	d10c      	bne.n	900052e8 <HAL_RCC_OscConfig+0x9c>
900052ce:	4b81      	ldr	r3, [pc, #516]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900052d0:	681b      	ldr	r3, [r3, #0]
900052d2:	4a80      	ldr	r2, [pc, #512]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900052d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900052d8:	6013      	str	r3, [r2, #0]
900052da:	4b7e      	ldr	r3, [pc, #504]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900052dc:	681b      	ldr	r3, [r3, #0]
900052de:	4a7d      	ldr	r2, [pc, #500]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900052e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
900052e4:	6013      	str	r3, [r2, #0]
900052e6:	e01d      	b.n	90005324 <HAL_RCC_OscConfig+0xd8>
900052e8:	687b      	ldr	r3, [r7, #4]
900052ea:	685b      	ldr	r3, [r3, #4]
900052ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
900052f0:	d10c      	bne.n	9000530c <HAL_RCC_OscConfig+0xc0>
900052f2:	4b78      	ldr	r3, [pc, #480]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900052f4:	681b      	ldr	r3, [r3, #0]
900052f6:	4a77      	ldr	r2, [pc, #476]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900052f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
900052fc:	6013      	str	r3, [r2, #0]
900052fe:	4b75      	ldr	r3, [pc, #468]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005300:	681b      	ldr	r3, [r3, #0]
90005302:	4a74      	ldr	r2, [pc, #464]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90005308:	6013      	str	r3, [r2, #0]
9000530a:	e00b      	b.n	90005324 <HAL_RCC_OscConfig+0xd8>
9000530c:	4b71      	ldr	r3, [pc, #452]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000530e:	681b      	ldr	r3, [r3, #0]
90005310:	4a70      	ldr	r2, [pc, #448]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005316:	6013      	str	r3, [r2, #0]
90005318:	4b6e      	ldr	r3, [pc, #440]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000531a:	681b      	ldr	r3, [r3, #0]
9000531c:	4a6d      	ldr	r2, [pc, #436]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000531e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90005322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90005324:	687b      	ldr	r3, [r7, #4]
90005326:	685b      	ldr	r3, [r3, #4]
90005328:	2b00      	cmp	r3, #0
9000532a:	d013      	beq.n	90005354 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000532c:	f7fe f88c 	bl	90003448 <HAL_GetTick>
90005330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90005332:	e008      	b.n	90005346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90005334:	f7fe f888 	bl	90003448 <HAL_GetTick>
90005338:	4602      	mov	r2, r0
9000533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000533c:	1ad3      	subs	r3, r2, r3
9000533e:	2b64      	cmp	r3, #100	@ 0x64
90005340:	d901      	bls.n	90005346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90005342:	2303      	movs	r3, #3
90005344:	e3d4      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90005346:	4b63      	ldr	r3, [pc, #396]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005348:	681b      	ldr	r3, [r3, #0]
9000534a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000534e:	2b00      	cmp	r3, #0
90005350:	d0f0      	beq.n	90005334 <HAL_RCC_OscConfig+0xe8>
90005352:	e014      	b.n	9000537e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90005354:	f7fe f878 	bl	90003448 <HAL_GetTick>
90005358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000535a:	e008      	b.n	9000536e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000535c:	f7fe f874 	bl	90003448 <HAL_GetTick>
90005360:	4602      	mov	r2, r0
90005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005364:	1ad3      	subs	r3, r2, r3
90005366:	2b64      	cmp	r3, #100	@ 0x64
90005368:	d901      	bls.n	9000536e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
9000536a:	2303      	movs	r3, #3
9000536c:	e3c0      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000536e:	4b59      	ldr	r3, [pc, #356]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005370:	681b      	ldr	r3, [r3, #0]
90005372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90005376:	2b00      	cmp	r3, #0
90005378:	d1f0      	bne.n	9000535c <HAL_RCC_OscConfig+0x110>
9000537a:	e000      	b.n	9000537e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000537c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000537e:	687b      	ldr	r3, [r7, #4]
90005380:	681b      	ldr	r3, [r3, #0]
90005382:	f003 0302 	and.w	r3, r3, #2
90005386:	2b00      	cmp	r3, #0
90005388:	f000 80ca 	beq.w	90005520 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000538c:	4b51      	ldr	r3, [pc, #324]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000538e:	691b      	ldr	r3, [r3, #16]
90005390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90005394:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90005396:	4b4f      	ldr	r3, [pc, #316]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000539a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000539c:	6a3b      	ldr	r3, [r7, #32]
9000539e:	2b00      	cmp	r3, #0
900053a0:	d007      	beq.n	900053b2 <HAL_RCC_OscConfig+0x166>
900053a2:	6a3b      	ldr	r3, [r7, #32]
900053a4:	2b18      	cmp	r3, #24
900053a6:	d156      	bne.n	90005456 <HAL_RCC_OscConfig+0x20a>
900053a8:	69fb      	ldr	r3, [r7, #28]
900053aa:	f003 0303 	and.w	r3, r3, #3
900053ae:	2b00      	cmp	r3, #0
900053b0:	d151      	bne.n	90005456 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900053b2:	4b48      	ldr	r3, [pc, #288]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900053b4:	681b      	ldr	r3, [r3, #0]
900053b6:	f003 0304 	and.w	r3, r3, #4
900053ba:	2b00      	cmp	r3, #0
900053bc:	d005      	beq.n	900053ca <HAL_RCC_OscConfig+0x17e>
900053be:	687b      	ldr	r3, [r7, #4]
900053c0:	68db      	ldr	r3, [r3, #12]
900053c2:	2b00      	cmp	r3, #0
900053c4:	d101      	bne.n	900053ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
900053c6:	2301      	movs	r3, #1
900053c8:	e392      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900053ca:	4b42      	ldr	r3, [pc, #264]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900053cc:	681b      	ldr	r3, [r3, #0]
900053ce:	f023 0219 	bic.w	r2, r3, #25
900053d2:	687b      	ldr	r3, [r7, #4]
900053d4:	68db      	ldr	r3, [r3, #12]
900053d6:	493f      	ldr	r1, [pc, #252]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900053d8:	4313      	orrs	r3, r2
900053da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900053dc:	f7fe f834 	bl	90003448 <HAL_GetTick>
900053e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900053e2:	e008      	b.n	900053f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900053e4:	f7fe f830 	bl	90003448 <HAL_GetTick>
900053e8:	4602      	mov	r2, r0
900053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900053ec:	1ad3      	subs	r3, r2, r3
900053ee:	2b02      	cmp	r3, #2
900053f0:	d901      	bls.n	900053f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
900053f2:	2303      	movs	r3, #3
900053f4:	e37c      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900053f6:	4b37      	ldr	r3, [pc, #220]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900053f8:	681b      	ldr	r3, [r3, #0]
900053fa:	f003 0304 	and.w	r3, r3, #4
900053fe:	2b00      	cmp	r3, #0
90005400:	d0f0      	beq.n	900053e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90005402:	f7fe f851 	bl	900034a8 <HAL_GetREVID>
90005406:	4603      	mov	r3, r0
90005408:	f241 0203 	movw	r2, #4099	@ 0x1003
9000540c:	4293      	cmp	r3, r2
9000540e:	d817      	bhi.n	90005440 <HAL_RCC_OscConfig+0x1f4>
90005410:	687b      	ldr	r3, [r7, #4]
90005412:	691b      	ldr	r3, [r3, #16]
90005414:	2b40      	cmp	r3, #64	@ 0x40
90005416:	d108      	bne.n	9000542a <HAL_RCC_OscConfig+0x1de>
90005418:	4b2e      	ldr	r3, [pc, #184]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000541a:	685b      	ldr	r3, [r3, #4]
9000541c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90005420:	4a2c      	ldr	r2, [pc, #176]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90005426:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90005428:	e07a      	b.n	90005520 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000542a:	4b2a      	ldr	r3, [pc, #168]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000542c:	685b      	ldr	r3, [r3, #4]
9000542e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90005432:	687b      	ldr	r3, [r7, #4]
90005434:	691b      	ldr	r3, [r3, #16]
90005436:	031b      	lsls	r3, r3, #12
90005438:	4926      	ldr	r1, [pc, #152]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000543a:	4313      	orrs	r3, r2
9000543c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000543e:	e06f      	b.n	90005520 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90005440:	4b24      	ldr	r3, [pc, #144]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005442:	685b      	ldr	r3, [r3, #4]
90005444:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90005448:	687b      	ldr	r3, [r7, #4]
9000544a:	691b      	ldr	r3, [r3, #16]
9000544c:	061b      	lsls	r3, r3, #24
9000544e:	4921      	ldr	r1, [pc, #132]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005450:	4313      	orrs	r3, r2
90005452:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90005454:	e064      	b.n	90005520 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90005456:	687b      	ldr	r3, [r7, #4]
90005458:	68db      	ldr	r3, [r3, #12]
9000545a:	2b00      	cmp	r3, #0
9000545c:	d047      	beq.n	900054ee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000545e:	4b1d      	ldr	r3, [pc, #116]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
90005460:	681b      	ldr	r3, [r3, #0]
90005462:	f023 0219 	bic.w	r2, r3, #25
90005466:	687b      	ldr	r3, [r7, #4]
90005468:	68db      	ldr	r3, [r3, #12]
9000546a:	491a      	ldr	r1, [pc, #104]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000546c:	4313      	orrs	r3, r2
9000546e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90005470:	f7fd ffea 	bl	90003448 <HAL_GetTick>
90005474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90005476:	e008      	b.n	9000548a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90005478:	f7fd ffe6 	bl	90003448 <HAL_GetTick>
9000547c:	4602      	mov	r2, r0
9000547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005480:	1ad3      	subs	r3, r2, r3
90005482:	2b02      	cmp	r3, #2
90005484:	d901      	bls.n	9000548a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90005486:	2303      	movs	r3, #3
90005488:	e332      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000548a:	4b12      	ldr	r3, [pc, #72]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
9000548c:	681b      	ldr	r3, [r3, #0]
9000548e:	f003 0304 	and.w	r3, r3, #4
90005492:	2b00      	cmp	r3, #0
90005494:	d0f0      	beq.n	90005478 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90005496:	f7fe f807 	bl	900034a8 <HAL_GetREVID>
9000549a:	4603      	mov	r3, r0
9000549c:	f241 0203 	movw	r2, #4099	@ 0x1003
900054a0:	4293      	cmp	r3, r2
900054a2:	d819      	bhi.n	900054d8 <HAL_RCC_OscConfig+0x28c>
900054a4:	687b      	ldr	r3, [r7, #4]
900054a6:	691b      	ldr	r3, [r3, #16]
900054a8:	2b40      	cmp	r3, #64	@ 0x40
900054aa:	d108      	bne.n	900054be <HAL_RCC_OscConfig+0x272>
900054ac:	4b09      	ldr	r3, [pc, #36]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900054ae:	685b      	ldr	r3, [r3, #4]
900054b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
900054b4:	4a07      	ldr	r2, [pc, #28]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900054b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900054ba:	6053      	str	r3, [r2, #4]
900054bc:	e030      	b.n	90005520 <HAL_RCC_OscConfig+0x2d4>
900054be:	4b05      	ldr	r3, [pc, #20]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900054c0:	685b      	ldr	r3, [r3, #4]
900054c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900054c6:	687b      	ldr	r3, [r7, #4]
900054c8:	691b      	ldr	r3, [r3, #16]
900054ca:	031b      	lsls	r3, r3, #12
900054cc:	4901      	ldr	r1, [pc, #4]	@ (900054d4 <HAL_RCC_OscConfig+0x288>)
900054ce:	4313      	orrs	r3, r2
900054d0:	604b      	str	r3, [r1, #4]
900054d2:	e025      	b.n	90005520 <HAL_RCC_OscConfig+0x2d4>
900054d4:	58024400 	.word	0x58024400
900054d8:	4b9a      	ldr	r3, [pc, #616]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900054da:	685b      	ldr	r3, [r3, #4]
900054dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
900054e0:	687b      	ldr	r3, [r7, #4]
900054e2:	691b      	ldr	r3, [r3, #16]
900054e4:	061b      	lsls	r3, r3, #24
900054e6:	4997      	ldr	r1, [pc, #604]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900054e8:	4313      	orrs	r3, r2
900054ea:	604b      	str	r3, [r1, #4]
900054ec:	e018      	b.n	90005520 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
900054ee:	4b95      	ldr	r3, [pc, #596]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900054f0:	681b      	ldr	r3, [r3, #0]
900054f2:	4a94      	ldr	r2, [pc, #592]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900054f4:	f023 0301 	bic.w	r3, r3, #1
900054f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900054fa:	f7fd ffa5 	bl	90003448 <HAL_GetTick>
900054fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90005500:	e008      	b.n	90005514 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90005502:	f7fd ffa1 	bl	90003448 <HAL_GetTick>
90005506:	4602      	mov	r2, r0
90005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000550a:	1ad3      	subs	r3, r2, r3
9000550c:	2b02      	cmp	r3, #2
9000550e:	d901      	bls.n	90005514 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90005510:	2303      	movs	r3, #3
90005512:	e2ed      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90005514:	4b8b      	ldr	r3, [pc, #556]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005516:	681b      	ldr	r3, [r3, #0]
90005518:	f003 0304 	and.w	r3, r3, #4
9000551c:	2b00      	cmp	r3, #0
9000551e:	d1f0      	bne.n	90005502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90005520:	687b      	ldr	r3, [r7, #4]
90005522:	681b      	ldr	r3, [r3, #0]
90005524:	f003 0310 	and.w	r3, r3, #16
90005528:	2b00      	cmp	r3, #0
9000552a:	f000 80a9 	beq.w	90005680 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000552e:	4b85      	ldr	r3, [pc, #532]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005530:	691b      	ldr	r3, [r3, #16]
90005532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90005536:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90005538:	4b82      	ldr	r3, [pc, #520]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
9000553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000553c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000553e:	69bb      	ldr	r3, [r7, #24]
90005540:	2b08      	cmp	r3, #8
90005542:	d007      	beq.n	90005554 <HAL_RCC_OscConfig+0x308>
90005544:	69bb      	ldr	r3, [r7, #24]
90005546:	2b18      	cmp	r3, #24
90005548:	d13a      	bne.n	900055c0 <HAL_RCC_OscConfig+0x374>
9000554a:	697b      	ldr	r3, [r7, #20]
9000554c:	f003 0303 	and.w	r3, r3, #3
90005550:	2b01      	cmp	r3, #1
90005552:	d135      	bne.n	900055c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90005554:	4b7b      	ldr	r3, [pc, #492]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005556:	681b      	ldr	r3, [r3, #0]
90005558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000555c:	2b00      	cmp	r3, #0
9000555e:	d005      	beq.n	9000556c <HAL_RCC_OscConfig+0x320>
90005560:	687b      	ldr	r3, [r7, #4]
90005562:	69db      	ldr	r3, [r3, #28]
90005564:	2b80      	cmp	r3, #128	@ 0x80
90005566:	d001      	beq.n	9000556c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90005568:	2301      	movs	r3, #1
9000556a:	e2c1      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000556c:	f7fd ff9c 	bl	900034a8 <HAL_GetREVID>
90005570:	4603      	mov	r3, r0
90005572:	f241 0203 	movw	r2, #4099	@ 0x1003
90005576:	4293      	cmp	r3, r2
90005578:	d817      	bhi.n	900055aa <HAL_RCC_OscConfig+0x35e>
9000557a:	687b      	ldr	r3, [r7, #4]
9000557c:	6a1b      	ldr	r3, [r3, #32]
9000557e:	2b20      	cmp	r3, #32
90005580:	d108      	bne.n	90005594 <HAL_RCC_OscConfig+0x348>
90005582:	4b70      	ldr	r3, [pc, #448]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005584:	685b      	ldr	r3, [r3, #4]
90005586:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
9000558a:	4a6e      	ldr	r2, [pc, #440]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
9000558c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90005590:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90005592:	e075      	b.n	90005680 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90005594:	4b6b      	ldr	r3, [pc, #428]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005596:	685b      	ldr	r3, [r3, #4]
90005598:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
9000559c:	687b      	ldr	r3, [r7, #4]
9000559e:	6a1b      	ldr	r3, [r3, #32]
900055a0:	069b      	lsls	r3, r3, #26
900055a2:	4968      	ldr	r1, [pc, #416]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900055a4:	4313      	orrs	r3, r2
900055a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900055a8:	e06a      	b.n	90005680 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900055aa:	4b66      	ldr	r3, [pc, #408]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900055ac:	68db      	ldr	r3, [r3, #12]
900055ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
900055b2:	687b      	ldr	r3, [r7, #4]
900055b4:	6a1b      	ldr	r3, [r3, #32]
900055b6:	061b      	lsls	r3, r3, #24
900055b8:	4962      	ldr	r1, [pc, #392]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900055ba:	4313      	orrs	r3, r2
900055bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900055be:	e05f      	b.n	90005680 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
900055c0:	687b      	ldr	r3, [r7, #4]
900055c2:	69db      	ldr	r3, [r3, #28]
900055c4:	2b00      	cmp	r3, #0
900055c6:	d042      	beq.n	9000564e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
900055c8:	4b5e      	ldr	r3, [pc, #376]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900055ca:	681b      	ldr	r3, [r3, #0]
900055cc:	4a5d      	ldr	r2, [pc, #372]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900055ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900055d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900055d4:	f7fd ff38 	bl	90003448 <HAL_GetTick>
900055d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900055da:	e008      	b.n	900055ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
900055dc:	f7fd ff34 	bl	90003448 <HAL_GetTick>
900055e0:	4602      	mov	r2, r0
900055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900055e4:	1ad3      	subs	r3, r2, r3
900055e6:	2b02      	cmp	r3, #2
900055e8:	d901      	bls.n	900055ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
900055ea:	2303      	movs	r3, #3
900055ec:	e280      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900055ee:	4b55      	ldr	r3, [pc, #340]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900055f0:	681b      	ldr	r3, [r3, #0]
900055f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900055f6:	2b00      	cmp	r3, #0
900055f8:	d0f0      	beq.n	900055dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900055fa:	f7fd ff55 	bl	900034a8 <HAL_GetREVID>
900055fe:	4603      	mov	r3, r0
90005600:	f241 0203 	movw	r2, #4099	@ 0x1003
90005604:	4293      	cmp	r3, r2
90005606:	d817      	bhi.n	90005638 <HAL_RCC_OscConfig+0x3ec>
90005608:	687b      	ldr	r3, [r7, #4]
9000560a:	6a1b      	ldr	r3, [r3, #32]
9000560c:	2b20      	cmp	r3, #32
9000560e:	d108      	bne.n	90005622 <HAL_RCC_OscConfig+0x3d6>
90005610:	4b4c      	ldr	r3, [pc, #304]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005612:	685b      	ldr	r3, [r3, #4]
90005614:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90005618:	4a4a      	ldr	r2, [pc, #296]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
9000561a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000561e:	6053      	str	r3, [r2, #4]
90005620:	e02e      	b.n	90005680 <HAL_RCC_OscConfig+0x434>
90005622:	4b48      	ldr	r3, [pc, #288]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005624:	685b      	ldr	r3, [r3, #4]
90005626:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
9000562a:	687b      	ldr	r3, [r7, #4]
9000562c:	6a1b      	ldr	r3, [r3, #32]
9000562e:	069b      	lsls	r3, r3, #26
90005630:	4944      	ldr	r1, [pc, #272]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005632:	4313      	orrs	r3, r2
90005634:	604b      	str	r3, [r1, #4]
90005636:	e023      	b.n	90005680 <HAL_RCC_OscConfig+0x434>
90005638:	4b42      	ldr	r3, [pc, #264]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
9000563a:	68db      	ldr	r3, [r3, #12]
9000563c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90005640:	687b      	ldr	r3, [r7, #4]
90005642:	6a1b      	ldr	r3, [r3, #32]
90005644:	061b      	lsls	r3, r3, #24
90005646:	493f      	ldr	r1, [pc, #252]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005648:	4313      	orrs	r3, r2
9000564a:	60cb      	str	r3, [r1, #12]
9000564c:	e018      	b.n	90005680 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
9000564e:	4b3d      	ldr	r3, [pc, #244]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005650:	681b      	ldr	r3, [r3, #0]
90005652:	4a3c      	ldr	r2, [pc, #240]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90005658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000565a:	f7fd fef5 	bl	90003448 <HAL_GetTick>
9000565e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90005660:	e008      	b.n	90005674 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90005662:	f7fd fef1 	bl	90003448 <HAL_GetTick>
90005666:	4602      	mov	r2, r0
90005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000566a:	1ad3      	subs	r3, r2, r3
9000566c:	2b02      	cmp	r3, #2
9000566e:	d901      	bls.n	90005674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90005670:	2303      	movs	r3, #3
90005672:	e23d      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90005674:	4b33      	ldr	r3, [pc, #204]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005676:	681b      	ldr	r3, [r3, #0]
90005678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000567c:	2b00      	cmp	r3, #0
9000567e:	d1f0      	bne.n	90005662 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90005680:	687b      	ldr	r3, [r7, #4]
90005682:	681b      	ldr	r3, [r3, #0]
90005684:	f003 0308 	and.w	r3, r3, #8
90005688:	2b00      	cmp	r3, #0
9000568a:	d036      	beq.n	900056fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000568c:	687b      	ldr	r3, [r7, #4]
9000568e:	695b      	ldr	r3, [r3, #20]
90005690:	2b00      	cmp	r3, #0
90005692:	d019      	beq.n	900056c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90005694:	4b2b      	ldr	r3, [pc, #172]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90005698:	4a2a      	ldr	r2, [pc, #168]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
9000569a:	f043 0301 	orr.w	r3, r3, #1
9000569e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900056a0:	f7fd fed2 	bl	90003448 <HAL_GetTick>
900056a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900056a6:	e008      	b.n	900056ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900056a8:	f7fd fece 	bl	90003448 <HAL_GetTick>
900056ac:	4602      	mov	r2, r0
900056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900056b0:	1ad3      	subs	r3, r2, r3
900056b2:	2b02      	cmp	r3, #2
900056b4:	d901      	bls.n	900056ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
900056b6:	2303      	movs	r3, #3
900056b8:	e21a      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900056ba:	4b22      	ldr	r3, [pc, #136]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900056bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900056be:	f003 0302 	and.w	r3, r3, #2
900056c2:	2b00      	cmp	r3, #0
900056c4:	d0f0      	beq.n	900056a8 <HAL_RCC_OscConfig+0x45c>
900056c6:	e018      	b.n	900056fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900056c8:	4b1e      	ldr	r3, [pc, #120]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900056ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900056cc:	4a1d      	ldr	r2, [pc, #116]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900056ce:	f023 0301 	bic.w	r3, r3, #1
900056d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900056d4:	f7fd feb8 	bl	90003448 <HAL_GetTick>
900056d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900056da:	e008      	b.n	900056ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900056dc:	f7fd feb4 	bl	90003448 <HAL_GetTick>
900056e0:	4602      	mov	r2, r0
900056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900056e4:	1ad3      	subs	r3, r2, r3
900056e6:	2b02      	cmp	r3, #2
900056e8:	d901      	bls.n	900056ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
900056ea:	2303      	movs	r3, #3
900056ec:	e200      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900056ee:	4b15      	ldr	r3, [pc, #84]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
900056f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900056f2:	f003 0302 	and.w	r3, r3, #2
900056f6:	2b00      	cmp	r3, #0
900056f8:	d1f0      	bne.n	900056dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
900056fa:	687b      	ldr	r3, [r7, #4]
900056fc:	681b      	ldr	r3, [r3, #0]
900056fe:	f003 0320 	and.w	r3, r3, #32
90005702:	2b00      	cmp	r3, #0
90005704:	d039      	beq.n	9000577a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90005706:	687b      	ldr	r3, [r7, #4]
90005708:	699b      	ldr	r3, [r3, #24]
9000570a:	2b00      	cmp	r3, #0
9000570c:	d01c      	beq.n	90005748 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
9000570e:	4b0d      	ldr	r3, [pc, #52]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005710:	681b      	ldr	r3, [r3, #0]
90005712:	4a0c      	ldr	r2, [pc, #48]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90005718:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000571a:	f7fd fe95 	bl	90003448 <HAL_GetTick>
9000571e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90005720:	e008      	b.n	90005734 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90005722:	f7fd fe91 	bl	90003448 <HAL_GetTick>
90005726:	4602      	mov	r2, r0
90005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000572a:	1ad3      	subs	r3, r2, r3
9000572c:	2b02      	cmp	r3, #2
9000572e:	d901      	bls.n	90005734 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90005730:	2303      	movs	r3, #3
90005732:	e1dd      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90005734:	4b03      	ldr	r3, [pc, #12]	@ (90005744 <HAL_RCC_OscConfig+0x4f8>)
90005736:	681b      	ldr	r3, [r3, #0]
90005738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000573c:	2b00      	cmp	r3, #0
9000573e:	d0f0      	beq.n	90005722 <HAL_RCC_OscConfig+0x4d6>
90005740:	e01b      	b.n	9000577a <HAL_RCC_OscConfig+0x52e>
90005742:	bf00      	nop
90005744:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90005748:	4b9b      	ldr	r3, [pc, #620]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000574a:	681b      	ldr	r3, [r3, #0]
9000574c:	4a9a      	ldr	r2, [pc, #616]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000574e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90005752:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90005754:	f7fd fe78 	bl	90003448 <HAL_GetTick>
90005758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000575a:	e008      	b.n	9000576e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000575c:	f7fd fe74 	bl	90003448 <HAL_GetTick>
90005760:	4602      	mov	r2, r0
90005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005764:	1ad3      	subs	r3, r2, r3
90005766:	2b02      	cmp	r3, #2
90005768:	d901      	bls.n	9000576e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
9000576a:	2303      	movs	r3, #3
9000576c:	e1c0      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000576e:	4b92      	ldr	r3, [pc, #584]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005770:	681b      	ldr	r3, [r3, #0]
90005772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90005776:	2b00      	cmp	r3, #0
90005778:	d1f0      	bne.n	9000575c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000577a:	687b      	ldr	r3, [r7, #4]
9000577c:	681b      	ldr	r3, [r3, #0]
9000577e:	f003 0304 	and.w	r3, r3, #4
90005782:	2b00      	cmp	r3, #0
90005784:	f000 8081 	beq.w	9000588a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90005788:	4b8c      	ldr	r3, [pc, #560]	@ (900059bc <HAL_RCC_OscConfig+0x770>)
9000578a:	681b      	ldr	r3, [r3, #0]
9000578c:	4a8b      	ldr	r2, [pc, #556]	@ (900059bc <HAL_RCC_OscConfig+0x770>)
9000578e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90005792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90005794:	f7fd fe58 	bl	90003448 <HAL_GetTick>
90005798:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000579a:	e008      	b.n	900057ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000579c:	f7fd fe54 	bl	90003448 <HAL_GetTick>
900057a0:	4602      	mov	r2, r0
900057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900057a4:	1ad3      	subs	r3, r2, r3
900057a6:	2b64      	cmp	r3, #100	@ 0x64
900057a8:	d901      	bls.n	900057ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
900057aa:	2303      	movs	r3, #3
900057ac:	e1a0      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900057ae:	4b83      	ldr	r3, [pc, #524]	@ (900059bc <HAL_RCC_OscConfig+0x770>)
900057b0:	681b      	ldr	r3, [r3, #0]
900057b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900057b6:	2b00      	cmp	r3, #0
900057b8:	d0f0      	beq.n	9000579c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900057ba:	687b      	ldr	r3, [r7, #4]
900057bc:	689b      	ldr	r3, [r3, #8]
900057be:	2b01      	cmp	r3, #1
900057c0:	d106      	bne.n	900057d0 <HAL_RCC_OscConfig+0x584>
900057c2:	4b7d      	ldr	r3, [pc, #500]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900057c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900057c6:	4a7c      	ldr	r2, [pc, #496]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900057c8:	f043 0301 	orr.w	r3, r3, #1
900057cc:	6713      	str	r3, [r2, #112]	@ 0x70
900057ce:	e02d      	b.n	9000582c <HAL_RCC_OscConfig+0x5e0>
900057d0:	687b      	ldr	r3, [r7, #4]
900057d2:	689b      	ldr	r3, [r3, #8]
900057d4:	2b00      	cmp	r3, #0
900057d6:	d10c      	bne.n	900057f2 <HAL_RCC_OscConfig+0x5a6>
900057d8:	4b77      	ldr	r3, [pc, #476]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900057da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900057dc:	4a76      	ldr	r2, [pc, #472]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900057de:	f023 0301 	bic.w	r3, r3, #1
900057e2:	6713      	str	r3, [r2, #112]	@ 0x70
900057e4:	4b74      	ldr	r3, [pc, #464]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900057e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900057e8:	4a73      	ldr	r2, [pc, #460]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900057ea:	f023 0304 	bic.w	r3, r3, #4
900057ee:	6713      	str	r3, [r2, #112]	@ 0x70
900057f0:	e01c      	b.n	9000582c <HAL_RCC_OscConfig+0x5e0>
900057f2:	687b      	ldr	r3, [r7, #4]
900057f4:	689b      	ldr	r3, [r3, #8]
900057f6:	2b05      	cmp	r3, #5
900057f8:	d10c      	bne.n	90005814 <HAL_RCC_OscConfig+0x5c8>
900057fa:	4b6f      	ldr	r3, [pc, #444]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900057fe:	4a6e      	ldr	r2, [pc, #440]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005800:	f043 0304 	orr.w	r3, r3, #4
90005804:	6713      	str	r3, [r2, #112]	@ 0x70
90005806:	4b6c      	ldr	r3, [pc, #432]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000580a:	4a6b      	ldr	r2, [pc, #428]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000580c:	f043 0301 	orr.w	r3, r3, #1
90005810:	6713      	str	r3, [r2, #112]	@ 0x70
90005812:	e00b      	b.n	9000582c <HAL_RCC_OscConfig+0x5e0>
90005814:	4b68      	ldr	r3, [pc, #416]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90005818:	4a67      	ldr	r2, [pc, #412]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000581a:	f023 0301 	bic.w	r3, r3, #1
9000581e:	6713      	str	r3, [r2, #112]	@ 0x70
90005820:	4b65      	ldr	r3, [pc, #404]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90005824:	4a64      	ldr	r2, [pc, #400]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005826:	f023 0304 	bic.w	r3, r3, #4
9000582a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000582c:	687b      	ldr	r3, [r7, #4]
9000582e:	689b      	ldr	r3, [r3, #8]
90005830:	2b00      	cmp	r3, #0
90005832:	d015      	beq.n	90005860 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90005834:	f7fd fe08 	bl	90003448 <HAL_GetTick>
90005838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000583a:	e00a      	b.n	90005852 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000583c:	f7fd fe04 	bl	90003448 <HAL_GetTick>
90005840:	4602      	mov	r2, r0
90005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005844:	1ad3      	subs	r3, r2, r3
90005846:	f241 3288 	movw	r2, #5000	@ 0x1388
9000584a:	4293      	cmp	r3, r2
9000584c:	d901      	bls.n	90005852 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
9000584e:	2303      	movs	r3, #3
90005850:	e14e      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90005852:	4b59      	ldr	r3, [pc, #356]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90005856:	f003 0302 	and.w	r3, r3, #2
9000585a:	2b00      	cmp	r3, #0
9000585c:	d0ee      	beq.n	9000583c <HAL_RCC_OscConfig+0x5f0>
9000585e:	e014      	b.n	9000588a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90005860:	f7fd fdf2 	bl	90003448 <HAL_GetTick>
90005864:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90005866:	e00a      	b.n	9000587e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90005868:	f7fd fdee 	bl	90003448 <HAL_GetTick>
9000586c:	4602      	mov	r2, r0
9000586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005870:	1ad3      	subs	r3, r2, r3
90005872:	f241 3288 	movw	r2, #5000	@ 0x1388
90005876:	4293      	cmp	r3, r2
90005878:	d901      	bls.n	9000587e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
9000587a:	2303      	movs	r3, #3
9000587c:	e138      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000587e:	4b4e      	ldr	r3, [pc, #312]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90005882:	f003 0302 	and.w	r3, r3, #2
90005886:	2b00      	cmp	r3, #0
90005888:	d1ee      	bne.n	90005868 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000588a:	687b      	ldr	r3, [r7, #4]
9000588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000588e:	2b00      	cmp	r3, #0
90005890:	f000 812d 	beq.w	90005aee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90005894:	4b48      	ldr	r3, [pc, #288]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005896:	691b      	ldr	r3, [r3, #16]
90005898:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000589c:	2b18      	cmp	r3, #24
9000589e:	f000 80bd 	beq.w	90005a1c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900058a2:	687b      	ldr	r3, [r7, #4]
900058a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900058a6:	2b02      	cmp	r3, #2
900058a8:	f040 809e 	bne.w	900059e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900058ac:	4b42      	ldr	r3, [pc, #264]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900058ae:	681b      	ldr	r3, [r3, #0]
900058b0:	4a41      	ldr	r2, [pc, #260]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900058b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900058b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900058b8:	f7fd fdc6 	bl	90003448 <HAL_GetTick>
900058bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900058be:	e008      	b.n	900058d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900058c0:	f7fd fdc2 	bl	90003448 <HAL_GetTick>
900058c4:	4602      	mov	r2, r0
900058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900058c8:	1ad3      	subs	r3, r2, r3
900058ca:	2b02      	cmp	r3, #2
900058cc:	d901      	bls.n	900058d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900058ce:	2303      	movs	r3, #3
900058d0:	e10e      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900058d2:	4b39      	ldr	r3, [pc, #228]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900058d4:	681b      	ldr	r3, [r3, #0]
900058d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900058da:	2b00      	cmp	r3, #0
900058dc:	d1f0      	bne.n	900058c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900058de:	4b36      	ldr	r3, [pc, #216]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900058e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
900058e2:	4b37      	ldr	r3, [pc, #220]	@ (900059c0 <HAL_RCC_OscConfig+0x774>)
900058e4:	4013      	ands	r3, r2
900058e6:	687a      	ldr	r2, [r7, #4]
900058e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
900058ea:	687a      	ldr	r2, [r7, #4]
900058ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900058ee:	0112      	lsls	r2, r2, #4
900058f0:	430a      	orrs	r2, r1
900058f2:	4931      	ldr	r1, [pc, #196]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900058f4:	4313      	orrs	r3, r2
900058f6:	628b      	str	r3, [r1, #40]	@ 0x28
900058f8:	687b      	ldr	r3, [r7, #4]
900058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900058fc:	3b01      	subs	r3, #1
900058fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
90005902:	687b      	ldr	r3, [r7, #4]
90005904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90005906:	3b01      	subs	r3, #1
90005908:	025b      	lsls	r3, r3, #9
9000590a:	b29b      	uxth	r3, r3
9000590c:	431a      	orrs	r2, r3
9000590e:	687b      	ldr	r3, [r7, #4]
90005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90005912:	3b01      	subs	r3, #1
90005914:	041b      	lsls	r3, r3, #16
90005916:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000591a:	431a      	orrs	r2, r3
9000591c:	687b      	ldr	r3, [r7, #4]
9000591e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90005920:	3b01      	subs	r3, #1
90005922:	061b      	lsls	r3, r3, #24
90005924:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90005928:	4923      	ldr	r1, [pc, #140]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000592a:	4313      	orrs	r3, r2
9000592c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
9000592e:	4b22      	ldr	r3, [pc, #136]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005932:	4a21      	ldr	r2, [pc, #132]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005934:	f023 0301 	bic.w	r3, r3, #1
90005938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000593a:	4b1f      	ldr	r3, [pc, #124]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000593c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000593e:	4b21      	ldr	r3, [pc, #132]	@ (900059c4 <HAL_RCC_OscConfig+0x778>)
90005940:	4013      	ands	r3, r2
90005942:	687a      	ldr	r2, [r7, #4]
90005944:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90005946:	00d2      	lsls	r2, r2, #3
90005948:	491b      	ldr	r1, [pc, #108]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000594a:	4313      	orrs	r3, r2
9000594c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000594e:	4b1a      	ldr	r3, [pc, #104]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005952:	f023 020c 	bic.w	r2, r3, #12
90005956:	687b      	ldr	r3, [r7, #4]
90005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000595a:	4917      	ldr	r1, [pc, #92]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000595c:	4313      	orrs	r3, r2
9000595e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90005960:	4b15      	ldr	r3, [pc, #84]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005964:	f023 0202 	bic.w	r2, r3, #2
90005968:	687b      	ldr	r3, [r7, #4]
9000596a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000596c:	4912      	ldr	r1, [pc, #72]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000596e:	4313      	orrs	r3, r2
90005970:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90005972:	4b11      	ldr	r3, [pc, #68]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005976:	4a10      	ldr	r2, [pc, #64]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000597c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000597e:	4b0e      	ldr	r3, [pc, #56]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005982:	4a0d      	ldr	r2, [pc, #52]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90005988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000598a:	4b0b      	ldr	r3, [pc, #44]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000598c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000598e:	4a0a      	ldr	r2, [pc, #40]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90005994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90005996:	4b08      	ldr	r3, [pc, #32]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
90005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000599a:	4a07      	ldr	r2, [pc, #28]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
9000599c:	f043 0301 	orr.w	r3, r3, #1
900059a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
900059a2:	4b05      	ldr	r3, [pc, #20]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900059a4:	681b      	ldr	r3, [r3, #0]
900059a6:	4a04      	ldr	r2, [pc, #16]	@ (900059b8 <HAL_RCC_OscConfig+0x76c>)
900059a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
900059ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900059ae:	f7fd fd4b 	bl	90003448 <HAL_GetTick>
900059b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900059b4:	e011      	b.n	900059da <HAL_RCC_OscConfig+0x78e>
900059b6:	bf00      	nop
900059b8:	58024400 	.word	0x58024400
900059bc:	58024800 	.word	0x58024800
900059c0:	fffffc0c 	.word	0xfffffc0c
900059c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900059c8:	f7fd fd3e 	bl	90003448 <HAL_GetTick>
900059cc:	4602      	mov	r2, r0
900059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900059d0:	1ad3      	subs	r3, r2, r3
900059d2:	2b02      	cmp	r3, #2
900059d4:	d901      	bls.n	900059da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
900059d6:	2303      	movs	r3, #3
900059d8:	e08a      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900059da:	4b47      	ldr	r3, [pc, #284]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
900059dc:	681b      	ldr	r3, [r3, #0]
900059de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900059e2:	2b00      	cmp	r3, #0
900059e4:	d0f0      	beq.n	900059c8 <HAL_RCC_OscConfig+0x77c>
900059e6:	e082      	b.n	90005aee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900059e8:	4b43      	ldr	r3, [pc, #268]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
900059ea:	681b      	ldr	r3, [r3, #0]
900059ec:	4a42      	ldr	r2, [pc, #264]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
900059ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900059f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900059f4:	f7fd fd28 	bl	90003448 <HAL_GetTick>
900059f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900059fa:	e008      	b.n	90005a0e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900059fc:	f7fd fd24 	bl	90003448 <HAL_GetTick>
90005a00:	4602      	mov	r2, r0
90005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005a04:	1ad3      	subs	r3, r2, r3
90005a06:	2b02      	cmp	r3, #2
90005a08:	d901      	bls.n	90005a0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90005a0a:	2303      	movs	r3, #3
90005a0c:	e070      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90005a0e:	4b3a      	ldr	r3, [pc, #232]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005a10:	681b      	ldr	r3, [r3, #0]
90005a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90005a16:	2b00      	cmp	r3, #0
90005a18:	d1f0      	bne.n	900059fc <HAL_RCC_OscConfig+0x7b0>
90005a1a:	e068      	b.n	90005aee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90005a1c:	4b36      	ldr	r3, [pc, #216]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90005a20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90005a22:	4b35      	ldr	r3, [pc, #212]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90005a26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90005a28:	687b      	ldr	r3, [r7, #4]
90005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005a2c:	2b01      	cmp	r3, #1
90005a2e:	d031      	beq.n	90005a94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90005a30:	693b      	ldr	r3, [r7, #16]
90005a32:	f003 0203 	and.w	r2, r3, #3
90005a36:	687b      	ldr	r3, [r7, #4]
90005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90005a3a:	429a      	cmp	r2, r3
90005a3c:	d12a      	bne.n	90005a94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90005a3e:	693b      	ldr	r3, [r7, #16]
90005a40:	091b      	lsrs	r3, r3, #4
90005a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90005a46:	687b      	ldr	r3, [r7, #4]
90005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90005a4a:	429a      	cmp	r2, r3
90005a4c:	d122      	bne.n	90005a94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90005a4e:	68fb      	ldr	r3, [r7, #12]
90005a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
90005a54:	687b      	ldr	r3, [r7, #4]
90005a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90005a58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90005a5a:	429a      	cmp	r2, r3
90005a5c:	d11a      	bne.n	90005a94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90005a5e:	68fb      	ldr	r3, [r7, #12]
90005a60:	0a5b      	lsrs	r3, r3, #9
90005a62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90005a66:	687b      	ldr	r3, [r7, #4]
90005a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90005a6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90005a6c:	429a      	cmp	r2, r3
90005a6e:	d111      	bne.n	90005a94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90005a70:	68fb      	ldr	r3, [r7, #12]
90005a72:	0c1b      	lsrs	r3, r3, #16
90005a74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90005a78:	687b      	ldr	r3, [r7, #4]
90005a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90005a7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90005a7e:	429a      	cmp	r2, r3
90005a80:	d108      	bne.n	90005a94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90005a82:	68fb      	ldr	r3, [r7, #12]
90005a84:	0e1b      	lsrs	r3, r3, #24
90005a86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90005a8a:	687b      	ldr	r3, [r7, #4]
90005a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90005a8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90005a90:	429a      	cmp	r2, r3
90005a92:	d001      	beq.n	90005a98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90005a94:	2301      	movs	r3, #1
90005a96:	e02b      	b.n	90005af0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90005a98:	4b17      	ldr	r3, [pc, #92]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90005a9c:	08db      	lsrs	r3, r3, #3
90005a9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
90005aa2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90005aa4:	687b      	ldr	r3, [r7, #4]
90005aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90005aa8:	693a      	ldr	r2, [r7, #16]
90005aaa:	429a      	cmp	r2, r3
90005aac:	d01f      	beq.n	90005aee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90005aae:	4b12      	ldr	r3, [pc, #72]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005ab2:	4a11      	ldr	r2, [pc, #68]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005ab4:	f023 0301 	bic.w	r3, r3, #1
90005ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90005aba:	f7fd fcc5 	bl	90003448 <HAL_GetTick>
90005abe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90005ac0:	bf00      	nop
90005ac2:	f7fd fcc1 	bl	90003448 <HAL_GetTick>
90005ac6:	4602      	mov	r2, r0
90005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005aca:	4293      	cmp	r3, r2
90005acc:	d0f9      	beq.n	90005ac2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90005ace:	4b0a      	ldr	r3, [pc, #40]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90005ad2:	4b0a      	ldr	r3, [pc, #40]	@ (90005afc <HAL_RCC_OscConfig+0x8b0>)
90005ad4:	4013      	ands	r3, r2
90005ad6:	687a      	ldr	r2, [r7, #4]
90005ad8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90005ada:	00d2      	lsls	r2, r2, #3
90005adc:	4906      	ldr	r1, [pc, #24]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005ade:	4313      	orrs	r3, r2
90005ae0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90005ae2:	4b05      	ldr	r3, [pc, #20]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005ae6:	4a04      	ldr	r2, [pc, #16]	@ (90005af8 <HAL_RCC_OscConfig+0x8ac>)
90005ae8:	f043 0301 	orr.w	r3, r3, #1
90005aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
90005aee:	2300      	movs	r3, #0
}
90005af0:	4618      	mov	r0, r3
90005af2:	3730      	adds	r7, #48	@ 0x30
90005af4:	46bd      	mov	sp, r7
90005af6:	bd80      	pop	{r7, pc}
90005af8:	58024400 	.word	0x58024400
90005afc:	ffff0007 	.word	0xffff0007

90005b00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90005b00:	b580      	push	{r7, lr}
90005b02:	b086      	sub	sp, #24
90005b04:	af00      	add	r7, sp, #0
90005b06:	6078      	str	r0, [r7, #4]
90005b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90005b0a:	687b      	ldr	r3, [r7, #4]
90005b0c:	2b00      	cmp	r3, #0
90005b0e:	d101      	bne.n	90005b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90005b10:	2301      	movs	r3, #1
90005b12:	e19c      	b.n	90005e4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90005b14:	4b8a      	ldr	r3, [pc, #552]	@ (90005d40 <HAL_RCC_ClockConfig+0x240>)
90005b16:	681b      	ldr	r3, [r3, #0]
90005b18:	f003 030f 	and.w	r3, r3, #15
90005b1c:	683a      	ldr	r2, [r7, #0]
90005b1e:	429a      	cmp	r2, r3
90005b20:	d910      	bls.n	90005b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90005b22:	4b87      	ldr	r3, [pc, #540]	@ (90005d40 <HAL_RCC_ClockConfig+0x240>)
90005b24:	681b      	ldr	r3, [r3, #0]
90005b26:	f023 020f 	bic.w	r2, r3, #15
90005b2a:	4985      	ldr	r1, [pc, #532]	@ (90005d40 <HAL_RCC_ClockConfig+0x240>)
90005b2c:	683b      	ldr	r3, [r7, #0]
90005b2e:	4313      	orrs	r3, r2
90005b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90005b32:	4b83      	ldr	r3, [pc, #524]	@ (90005d40 <HAL_RCC_ClockConfig+0x240>)
90005b34:	681b      	ldr	r3, [r3, #0]
90005b36:	f003 030f 	and.w	r3, r3, #15
90005b3a:	683a      	ldr	r2, [r7, #0]
90005b3c:	429a      	cmp	r2, r3
90005b3e:	d001      	beq.n	90005b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90005b40:	2301      	movs	r3, #1
90005b42:	e184      	b.n	90005e4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90005b44:	687b      	ldr	r3, [r7, #4]
90005b46:	681b      	ldr	r3, [r3, #0]
90005b48:	f003 0304 	and.w	r3, r3, #4
90005b4c:	2b00      	cmp	r3, #0
90005b4e:	d010      	beq.n	90005b72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90005b50:	687b      	ldr	r3, [r7, #4]
90005b52:	691a      	ldr	r2, [r3, #16]
90005b54:	4b7b      	ldr	r3, [pc, #492]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005b56:	699b      	ldr	r3, [r3, #24]
90005b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90005b5c:	429a      	cmp	r2, r3
90005b5e:	d908      	bls.n	90005b72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90005b60:	4b78      	ldr	r3, [pc, #480]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005b62:	699b      	ldr	r3, [r3, #24]
90005b64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90005b68:	687b      	ldr	r3, [r7, #4]
90005b6a:	691b      	ldr	r3, [r3, #16]
90005b6c:	4975      	ldr	r1, [pc, #468]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005b6e:	4313      	orrs	r3, r2
90005b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90005b72:	687b      	ldr	r3, [r7, #4]
90005b74:	681b      	ldr	r3, [r3, #0]
90005b76:	f003 0308 	and.w	r3, r3, #8
90005b7a:	2b00      	cmp	r3, #0
90005b7c:	d010      	beq.n	90005ba0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90005b7e:	687b      	ldr	r3, [r7, #4]
90005b80:	695a      	ldr	r2, [r3, #20]
90005b82:	4b70      	ldr	r3, [pc, #448]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005b84:	69db      	ldr	r3, [r3, #28]
90005b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90005b8a:	429a      	cmp	r2, r3
90005b8c:	d908      	bls.n	90005ba0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90005b8e:	4b6d      	ldr	r3, [pc, #436]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005b90:	69db      	ldr	r3, [r3, #28]
90005b92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90005b96:	687b      	ldr	r3, [r7, #4]
90005b98:	695b      	ldr	r3, [r3, #20]
90005b9a:	496a      	ldr	r1, [pc, #424]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005b9c:	4313      	orrs	r3, r2
90005b9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90005ba0:	687b      	ldr	r3, [r7, #4]
90005ba2:	681b      	ldr	r3, [r3, #0]
90005ba4:	f003 0310 	and.w	r3, r3, #16
90005ba8:	2b00      	cmp	r3, #0
90005baa:	d010      	beq.n	90005bce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90005bac:	687b      	ldr	r3, [r7, #4]
90005bae:	699a      	ldr	r2, [r3, #24]
90005bb0:	4b64      	ldr	r3, [pc, #400]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005bb2:	69db      	ldr	r3, [r3, #28]
90005bb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90005bb8:	429a      	cmp	r2, r3
90005bba:	d908      	bls.n	90005bce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90005bbc:	4b61      	ldr	r3, [pc, #388]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005bbe:	69db      	ldr	r3, [r3, #28]
90005bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90005bc4:	687b      	ldr	r3, [r7, #4]
90005bc6:	699b      	ldr	r3, [r3, #24]
90005bc8:	495e      	ldr	r1, [pc, #376]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005bca:	4313      	orrs	r3, r2
90005bcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90005bce:	687b      	ldr	r3, [r7, #4]
90005bd0:	681b      	ldr	r3, [r3, #0]
90005bd2:	f003 0320 	and.w	r3, r3, #32
90005bd6:	2b00      	cmp	r3, #0
90005bd8:	d010      	beq.n	90005bfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90005bda:	687b      	ldr	r3, [r7, #4]
90005bdc:	69da      	ldr	r2, [r3, #28]
90005bde:	4b59      	ldr	r3, [pc, #356]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005be0:	6a1b      	ldr	r3, [r3, #32]
90005be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90005be6:	429a      	cmp	r2, r3
90005be8:	d908      	bls.n	90005bfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90005bea:	4b56      	ldr	r3, [pc, #344]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005bec:	6a1b      	ldr	r3, [r3, #32]
90005bee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90005bf2:	687b      	ldr	r3, [r7, #4]
90005bf4:	69db      	ldr	r3, [r3, #28]
90005bf6:	4953      	ldr	r1, [pc, #332]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005bf8:	4313      	orrs	r3, r2
90005bfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90005bfc:	687b      	ldr	r3, [r7, #4]
90005bfe:	681b      	ldr	r3, [r3, #0]
90005c00:	f003 0302 	and.w	r3, r3, #2
90005c04:	2b00      	cmp	r3, #0
90005c06:	d010      	beq.n	90005c2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90005c08:	687b      	ldr	r3, [r7, #4]
90005c0a:	68da      	ldr	r2, [r3, #12]
90005c0c:	4b4d      	ldr	r3, [pc, #308]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c0e:	699b      	ldr	r3, [r3, #24]
90005c10:	f003 030f 	and.w	r3, r3, #15
90005c14:	429a      	cmp	r2, r3
90005c16:	d908      	bls.n	90005c2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90005c18:	4b4a      	ldr	r3, [pc, #296]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c1a:	699b      	ldr	r3, [r3, #24]
90005c1c:	f023 020f 	bic.w	r2, r3, #15
90005c20:	687b      	ldr	r3, [r7, #4]
90005c22:	68db      	ldr	r3, [r3, #12]
90005c24:	4947      	ldr	r1, [pc, #284]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c26:	4313      	orrs	r3, r2
90005c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90005c2a:	687b      	ldr	r3, [r7, #4]
90005c2c:	681b      	ldr	r3, [r3, #0]
90005c2e:	f003 0301 	and.w	r3, r3, #1
90005c32:	2b00      	cmp	r3, #0
90005c34:	d055      	beq.n	90005ce2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90005c36:	4b43      	ldr	r3, [pc, #268]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c38:	699b      	ldr	r3, [r3, #24]
90005c3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
90005c3e:	687b      	ldr	r3, [r7, #4]
90005c40:	689b      	ldr	r3, [r3, #8]
90005c42:	4940      	ldr	r1, [pc, #256]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c44:	4313      	orrs	r3, r2
90005c46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90005c48:	687b      	ldr	r3, [r7, #4]
90005c4a:	685b      	ldr	r3, [r3, #4]
90005c4c:	2b02      	cmp	r3, #2
90005c4e:	d107      	bne.n	90005c60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90005c50:	4b3c      	ldr	r3, [pc, #240]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c52:	681b      	ldr	r3, [r3, #0]
90005c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90005c58:	2b00      	cmp	r3, #0
90005c5a:	d121      	bne.n	90005ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90005c5c:	2301      	movs	r3, #1
90005c5e:	e0f6      	b.n	90005e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90005c60:	687b      	ldr	r3, [r7, #4]
90005c62:	685b      	ldr	r3, [r3, #4]
90005c64:	2b03      	cmp	r3, #3
90005c66:	d107      	bne.n	90005c78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90005c68:	4b36      	ldr	r3, [pc, #216]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c6a:	681b      	ldr	r3, [r3, #0]
90005c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90005c70:	2b00      	cmp	r3, #0
90005c72:	d115      	bne.n	90005ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90005c74:	2301      	movs	r3, #1
90005c76:	e0ea      	b.n	90005e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90005c78:	687b      	ldr	r3, [r7, #4]
90005c7a:	685b      	ldr	r3, [r3, #4]
90005c7c:	2b01      	cmp	r3, #1
90005c7e:	d107      	bne.n	90005c90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90005c80:	4b30      	ldr	r3, [pc, #192]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c82:	681b      	ldr	r3, [r3, #0]
90005c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90005c88:	2b00      	cmp	r3, #0
90005c8a:	d109      	bne.n	90005ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90005c8c:	2301      	movs	r3, #1
90005c8e:	e0de      	b.n	90005e4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90005c90:	4b2c      	ldr	r3, [pc, #176]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005c92:	681b      	ldr	r3, [r3, #0]
90005c94:	f003 0304 	and.w	r3, r3, #4
90005c98:	2b00      	cmp	r3, #0
90005c9a:	d101      	bne.n	90005ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90005c9c:	2301      	movs	r3, #1
90005c9e:	e0d6      	b.n	90005e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90005ca0:	4b28      	ldr	r3, [pc, #160]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005ca2:	691b      	ldr	r3, [r3, #16]
90005ca4:	f023 0207 	bic.w	r2, r3, #7
90005ca8:	687b      	ldr	r3, [r7, #4]
90005caa:	685b      	ldr	r3, [r3, #4]
90005cac:	4925      	ldr	r1, [pc, #148]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005cae:	4313      	orrs	r3, r2
90005cb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90005cb2:	f7fd fbc9 	bl	90003448 <HAL_GetTick>
90005cb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90005cb8:	e00a      	b.n	90005cd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90005cba:	f7fd fbc5 	bl	90003448 <HAL_GetTick>
90005cbe:	4602      	mov	r2, r0
90005cc0:	697b      	ldr	r3, [r7, #20]
90005cc2:	1ad3      	subs	r3, r2, r3
90005cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
90005cc8:	4293      	cmp	r3, r2
90005cca:	d901      	bls.n	90005cd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90005ccc:	2303      	movs	r3, #3
90005cce:	e0be      	b.n	90005e4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90005cd0:	4b1c      	ldr	r3, [pc, #112]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005cd2:	691b      	ldr	r3, [r3, #16]
90005cd4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
90005cd8:	687b      	ldr	r3, [r7, #4]
90005cda:	685b      	ldr	r3, [r3, #4]
90005cdc:	00db      	lsls	r3, r3, #3
90005cde:	429a      	cmp	r2, r3
90005ce0:	d1eb      	bne.n	90005cba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90005ce2:	687b      	ldr	r3, [r7, #4]
90005ce4:	681b      	ldr	r3, [r3, #0]
90005ce6:	f003 0302 	and.w	r3, r3, #2
90005cea:	2b00      	cmp	r3, #0
90005cec:	d010      	beq.n	90005d10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90005cee:	687b      	ldr	r3, [r7, #4]
90005cf0:	68da      	ldr	r2, [r3, #12]
90005cf2:	4b14      	ldr	r3, [pc, #80]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005cf4:	699b      	ldr	r3, [r3, #24]
90005cf6:	f003 030f 	and.w	r3, r3, #15
90005cfa:	429a      	cmp	r2, r3
90005cfc:	d208      	bcs.n	90005d10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90005cfe:	4b11      	ldr	r3, [pc, #68]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005d00:	699b      	ldr	r3, [r3, #24]
90005d02:	f023 020f 	bic.w	r2, r3, #15
90005d06:	687b      	ldr	r3, [r7, #4]
90005d08:	68db      	ldr	r3, [r3, #12]
90005d0a:	490e      	ldr	r1, [pc, #56]	@ (90005d44 <HAL_RCC_ClockConfig+0x244>)
90005d0c:	4313      	orrs	r3, r2
90005d0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90005d10:	4b0b      	ldr	r3, [pc, #44]	@ (90005d40 <HAL_RCC_ClockConfig+0x240>)
90005d12:	681b      	ldr	r3, [r3, #0]
90005d14:	f003 030f 	and.w	r3, r3, #15
90005d18:	683a      	ldr	r2, [r7, #0]
90005d1a:	429a      	cmp	r2, r3
90005d1c:	d214      	bcs.n	90005d48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90005d1e:	4b08      	ldr	r3, [pc, #32]	@ (90005d40 <HAL_RCC_ClockConfig+0x240>)
90005d20:	681b      	ldr	r3, [r3, #0]
90005d22:	f023 020f 	bic.w	r2, r3, #15
90005d26:	4906      	ldr	r1, [pc, #24]	@ (90005d40 <HAL_RCC_ClockConfig+0x240>)
90005d28:	683b      	ldr	r3, [r7, #0]
90005d2a:	4313      	orrs	r3, r2
90005d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90005d2e:	4b04      	ldr	r3, [pc, #16]	@ (90005d40 <HAL_RCC_ClockConfig+0x240>)
90005d30:	681b      	ldr	r3, [r3, #0]
90005d32:	f003 030f 	and.w	r3, r3, #15
90005d36:	683a      	ldr	r2, [r7, #0]
90005d38:	429a      	cmp	r2, r3
90005d3a:	d005      	beq.n	90005d48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90005d3c:	2301      	movs	r3, #1
90005d3e:	e086      	b.n	90005e4e <HAL_RCC_ClockConfig+0x34e>
90005d40:	52002000 	.word	0x52002000
90005d44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90005d48:	687b      	ldr	r3, [r7, #4]
90005d4a:	681b      	ldr	r3, [r3, #0]
90005d4c:	f003 0304 	and.w	r3, r3, #4
90005d50:	2b00      	cmp	r3, #0
90005d52:	d010      	beq.n	90005d76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90005d54:	687b      	ldr	r3, [r7, #4]
90005d56:	691a      	ldr	r2, [r3, #16]
90005d58:	4b3f      	ldr	r3, [pc, #252]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005d5a:	699b      	ldr	r3, [r3, #24]
90005d5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90005d60:	429a      	cmp	r2, r3
90005d62:	d208      	bcs.n	90005d76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90005d64:	4b3c      	ldr	r3, [pc, #240]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005d66:	699b      	ldr	r3, [r3, #24]
90005d68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90005d6c:	687b      	ldr	r3, [r7, #4]
90005d6e:	691b      	ldr	r3, [r3, #16]
90005d70:	4939      	ldr	r1, [pc, #228]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005d72:	4313      	orrs	r3, r2
90005d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90005d76:	687b      	ldr	r3, [r7, #4]
90005d78:	681b      	ldr	r3, [r3, #0]
90005d7a:	f003 0308 	and.w	r3, r3, #8
90005d7e:	2b00      	cmp	r3, #0
90005d80:	d010      	beq.n	90005da4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90005d82:	687b      	ldr	r3, [r7, #4]
90005d84:	695a      	ldr	r2, [r3, #20]
90005d86:	4b34      	ldr	r3, [pc, #208]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005d88:	69db      	ldr	r3, [r3, #28]
90005d8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90005d8e:	429a      	cmp	r2, r3
90005d90:	d208      	bcs.n	90005da4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90005d92:	4b31      	ldr	r3, [pc, #196]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005d94:	69db      	ldr	r3, [r3, #28]
90005d96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90005d9a:	687b      	ldr	r3, [r7, #4]
90005d9c:	695b      	ldr	r3, [r3, #20]
90005d9e:	492e      	ldr	r1, [pc, #184]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005da0:	4313      	orrs	r3, r2
90005da2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90005da4:	687b      	ldr	r3, [r7, #4]
90005da6:	681b      	ldr	r3, [r3, #0]
90005da8:	f003 0310 	and.w	r3, r3, #16
90005dac:	2b00      	cmp	r3, #0
90005dae:	d010      	beq.n	90005dd2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90005db0:	687b      	ldr	r3, [r7, #4]
90005db2:	699a      	ldr	r2, [r3, #24]
90005db4:	4b28      	ldr	r3, [pc, #160]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005db6:	69db      	ldr	r3, [r3, #28]
90005db8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90005dbc:	429a      	cmp	r2, r3
90005dbe:	d208      	bcs.n	90005dd2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90005dc0:	4b25      	ldr	r3, [pc, #148]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005dc2:	69db      	ldr	r3, [r3, #28]
90005dc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90005dc8:	687b      	ldr	r3, [r7, #4]
90005dca:	699b      	ldr	r3, [r3, #24]
90005dcc:	4922      	ldr	r1, [pc, #136]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005dce:	4313      	orrs	r3, r2
90005dd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90005dd2:	687b      	ldr	r3, [r7, #4]
90005dd4:	681b      	ldr	r3, [r3, #0]
90005dd6:	f003 0320 	and.w	r3, r3, #32
90005dda:	2b00      	cmp	r3, #0
90005ddc:	d010      	beq.n	90005e00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90005dde:	687b      	ldr	r3, [r7, #4]
90005de0:	69da      	ldr	r2, [r3, #28]
90005de2:	4b1d      	ldr	r3, [pc, #116]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005de4:	6a1b      	ldr	r3, [r3, #32]
90005de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90005dea:	429a      	cmp	r2, r3
90005dec:	d208      	bcs.n	90005e00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90005dee:	4b1a      	ldr	r3, [pc, #104]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005df0:	6a1b      	ldr	r3, [r3, #32]
90005df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90005df6:	687b      	ldr	r3, [r7, #4]
90005df8:	69db      	ldr	r3, [r3, #28]
90005dfa:	4917      	ldr	r1, [pc, #92]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005dfc:	4313      	orrs	r3, r2
90005dfe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90005e00:	f000 f834 	bl	90005e6c <HAL_RCC_GetSysClockFreq>
90005e04:	4602      	mov	r2, r0
90005e06:	4b14      	ldr	r3, [pc, #80]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005e08:	699b      	ldr	r3, [r3, #24]
90005e0a:	0a1b      	lsrs	r3, r3, #8
90005e0c:	f003 030f 	and.w	r3, r3, #15
90005e10:	4912      	ldr	r1, [pc, #72]	@ (90005e5c <HAL_RCC_ClockConfig+0x35c>)
90005e12:	5ccb      	ldrb	r3, [r1, r3]
90005e14:	f003 031f 	and.w	r3, r3, #31
90005e18:	fa22 f303 	lsr.w	r3, r2, r3
90005e1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90005e1e:	4b0e      	ldr	r3, [pc, #56]	@ (90005e58 <HAL_RCC_ClockConfig+0x358>)
90005e20:	699b      	ldr	r3, [r3, #24]
90005e22:	f003 030f 	and.w	r3, r3, #15
90005e26:	4a0d      	ldr	r2, [pc, #52]	@ (90005e5c <HAL_RCC_ClockConfig+0x35c>)
90005e28:	5cd3      	ldrb	r3, [r2, r3]
90005e2a:	f003 031f 	and.w	r3, r3, #31
90005e2e:	693a      	ldr	r2, [r7, #16]
90005e30:	fa22 f303 	lsr.w	r3, r2, r3
90005e34:	4a0a      	ldr	r2, [pc, #40]	@ (90005e60 <HAL_RCC_ClockConfig+0x360>)
90005e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90005e38:	4a0a      	ldr	r2, [pc, #40]	@ (90005e64 <HAL_RCC_ClockConfig+0x364>)
90005e3a:	693b      	ldr	r3, [r7, #16]
90005e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90005e3e:	4b0a      	ldr	r3, [pc, #40]	@ (90005e68 <HAL_RCC_ClockConfig+0x368>)
90005e40:	681b      	ldr	r3, [r3, #0]
90005e42:	4618      	mov	r0, r3
90005e44:	f7fd fab6 	bl	900033b4 <HAL_InitTick>
90005e48:	4603      	mov	r3, r0
90005e4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
90005e4e:	4618      	mov	r0, r3
90005e50:	3718      	adds	r7, #24
90005e52:	46bd      	mov	sp, r7
90005e54:	bd80      	pop	{r7, pc}
90005e56:	bf00      	nop
90005e58:	58024400 	.word	0x58024400
90005e5c:	9000c1d0 	.word	0x9000c1d0
90005e60:	20000004 	.word	0x20000004
90005e64:	20000000 	.word	0x20000000
90005e68:	20000008 	.word	0x20000008

90005e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90005e6c:	b480      	push	{r7}
90005e6e:	b089      	sub	sp, #36	@ 0x24
90005e70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90005e72:	4bb3      	ldr	r3, [pc, #716]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005e74:	691b      	ldr	r3, [r3, #16]
90005e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90005e7a:	2b18      	cmp	r3, #24
90005e7c:	f200 8155 	bhi.w	9000612a <HAL_RCC_GetSysClockFreq+0x2be>
90005e80:	a201      	add	r2, pc, #4	@ (adr r2, 90005e88 <HAL_RCC_GetSysClockFreq+0x1c>)
90005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005e86:	bf00      	nop
90005e88:	90005eed 	.word	0x90005eed
90005e8c:	9000612b 	.word	0x9000612b
90005e90:	9000612b 	.word	0x9000612b
90005e94:	9000612b 	.word	0x9000612b
90005e98:	9000612b 	.word	0x9000612b
90005e9c:	9000612b 	.word	0x9000612b
90005ea0:	9000612b 	.word	0x9000612b
90005ea4:	9000612b 	.word	0x9000612b
90005ea8:	90005f13 	.word	0x90005f13
90005eac:	9000612b 	.word	0x9000612b
90005eb0:	9000612b 	.word	0x9000612b
90005eb4:	9000612b 	.word	0x9000612b
90005eb8:	9000612b 	.word	0x9000612b
90005ebc:	9000612b 	.word	0x9000612b
90005ec0:	9000612b 	.word	0x9000612b
90005ec4:	9000612b 	.word	0x9000612b
90005ec8:	90005f19 	.word	0x90005f19
90005ecc:	9000612b 	.word	0x9000612b
90005ed0:	9000612b 	.word	0x9000612b
90005ed4:	9000612b 	.word	0x9000612b
90005ed8:	9000612b 	.word	0x9000612b
90005edc:	9000612b 	.word	0x9000612b
90005ee0:	9000612b 	.word	0x9000612b
90005ee4:	9000612b 	.word	0x9000612b
90005ee8:	90005f1f 	.word	0x90005f1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90005eec:	4b94      	ldr	r3, [pc, #592]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005eee:	681b      	ldr	r3, [r3, #0]
90005ef0:	f003 0320 	and.w	r3, r3, #32
90005ef4:	2b00      	cmp	r3, #0
90005ef6:	d009      	beq.n	90005f0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90005ef8:	4b91      	ldr	r3, [pc, #580]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005efa:	681b      	ldr	r3, [r3, #0]
90005efc:	08db      	lsrs	r3, r3, #3
90005efe:	f003 0303 	and.w	r3, r3, #3
90005f02:	4a90      	ldr	r2, [pc, #576]	@ (90006144 <HAL_RCC_GetSysClockFreq+0x2d8>)
90005f04:	fa22 f303 	lsr.w	r3, r2, r3
90005f08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
90005f0a:	e111      	b.n	90006130 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90005f0c:	4b8d      	ldr	r3, [pc, #564]	@ (90006144 <HAL_RCC_GetSysClockFreq+0x2d8>)
90005f0e:	61bb      	str	r3, [r7, #24]
      break;
90005f10:	e10e      	b.n	90006130 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
90005f12:	4b8d      	ldr	r3, [pc, #564]	@ (90006148 <HAL_RCC_GetSysClockFreq+0x2dc>)
90005f14:	61bb      	str	r3, [r7, #24]
      break;
90005f16:	e10b      	b.n	90006130 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
90005f18:	4b8c      	ldr	r3, [pc, #560]	@ (9000614c <HAL_RCC_GetSysClockFreq+0x2e0>)
90005f1a:	61bb      	str	r3, [r7, #24]
      break;
90005f1c:	e108      	b.n	90006130 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90005f1e:	4b88      	ldr	r3, [pc, #544]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90005f22:	f003 0303 	and.w	r3, r3, #3
90005f26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90005f28:	4b85      	ldr	r3, [pc, #532]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90005f2c:	091b      	lsrs	r3, r3, #4
90005f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90005f32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90005f34:	4b82      	ldr	r3, [pc, #520]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90005f38:	f003 0301 	and.w	r3, r3, #1
90005f3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90005f3e:	4b80      	ldr	r3, [pc, #512]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90005f42:	08db      	lsrs	r3, r3, #3
90005f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
90005f48:	68fa      	ldr	r2, [r7, #12]
90005f4a:	fb02 f303 	mul.w	r3, r2, r3
90005f4e:	ee07 3a90 	vmov	s15, r3
90005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
90005f56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90005f5a:	693b      	ldr	r3, [r7, #16]
90005f5c:	2b00      	cmp	r3, #0
90005f5e:	f000 80e1 	beq.w	90006124 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90005f62:	697b      	ldr	r3, [r7, #20]
90005f64:	2b02      	cmp	r3, #2
90005f66:	f000 8083 	beq.w	90006070 <HAL_RCC_GetSysClockFreq+0x204>
90005f6a:	697b      	ldr	r3, [r7, #20]
90005f6c:	2b02      	cmp	r3, #2
90005f6e:	f200 80a1 	bhi.w	900060b4 <HAL_RCC_GetSysClockFreq+0x248>
90005f72:	697b      	ldr	r3, [r7, #20]
90005f74:	2b00      	cmp	r3, #0
90005f76:	d003      	beq.n	90005f80 <HAL_RCC_GetSysClockFreq+0x114>
90005f78:	697b      	ldr	r3, [r7, #20]
90005f7a:	2b01      	cmp	r3, #1
90005f7c:	d056      	beq.n	9000602c <HAL_RCC_GetSysClockFreq+0x1c0>
90005f7e:	e099      	b.n	900060b4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90005f80:	4b6f      	ldr	r3, [pc, #444]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005f82:	681b      	ldr	r3, [r3, #0]
90005f84:	f003 0320 	and.w	r3, r3, #32
90005f88:	2b00      	cmp	r3, #0
90005f8a:	d02d      	beq.n	90005fe8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90005f8c:	4b6c      	ldr	r3, [pc, #432]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005f8e:	681b      	ldr	r3, [r3, #0]
90005f90:	08db      	lsrs	r3, r3, #3
90005f92:	f003 0303 	and.w	r3, r3, #3
90005f96:	4a6b      	ldr	r2, [pc, #428]	@ (90006144 <HAL_RCC_GetSysClockFreq+0x2d8>)
90005f98:	fa22 f303 	lsr.w	r3, r2, r3
90005f9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90005f9e:	687b      	ldr	r3, [r7, #4]
90005fa0:	ee07 3a90 	vmov	s15, r3
90005fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
90005fa8:	693b      	ldr	r3, [r7, #16]
90005faa:	ee07 3a90 	vmov	s15, r3
90005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
90005fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90005fb6:	4b62      	ldr	r3, [pc, #392]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90005fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
90005fbe:	ee07 3a90 	vmov	s15, r3
90005fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90005fc6:	ed97 6a02 	vldr	s12, [r7, #8]
90005fca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90006150 <HAL_RCC_GetSysClockFreq+0x2e4>
90005fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
90005fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90005fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90005fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
90005fde:	ee67 7a27 	vmul.f32	s15, s14, s15
90005fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
90005fe6:	e087      	b.n	900060f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90005fe8:	693b      	ldr	r3, [r7, #16]
90005fea:	ee07 3a90 	vmov	s15, r3
90005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
90005ff2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90006154 <HAL_RCC_GetSysClockFreq+0x2e8>
90005ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90005ffa:	4b51      	ldr	r3, [pc, #324]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90005ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006002:	ee07 3a90 	vmov	s15, r3
90006006:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000600a:	ed97 6a02 	vldr	s12, [r7, #8]
9000600e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90006150 <HAL_RCC_GetSysClockFreq+0x2e4>
90006012:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006016:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000601a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000601e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006022:	ee67 7a27 	vmul.f32	s15, s14, s15
90006026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000602a:	e065      	b.n	900060f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000602c:	693b      	ldr	r3, [r7, #16]
9000602e:	ee07 3a90 	vmov	s15, r3
90006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006036:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90006158 <HAL_RCC_GetSysClockFreq+0x2ec>
9000603a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000603e:	4b40      	ldr	r3, [pc, #256]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90006042:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006046:	ee07 3a90 	vmov	s15, r3
9000604a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000604e:	ed97 6a02 	vldr	s12, [r7, #8]
90006052:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90006150 <HAL_RCC_GetSysClockFreq+0x2e4>
90006056:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000605a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000605e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90006062:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006066:	ee67 7a27 	vmul.f32	s15, s14, s15
9000606a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000606e:	e043      	b.n	900060f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90006070:	693b      	ldr	r3, [r7, #16]
90006072:	ee07 3a90 	vmov	s15, r3
90006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000607a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 9000615c <HAL_RCC_GetSysClockFreq+0x2f0>
9000607e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006082:	4b2f      	ldr	r3, [pc, #188]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
90006084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90006086:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000608a:	ee07 3a90 	vmov	s15, r3
9000608e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006092:	ed97 6a02 	vldr	s12, [r7, #8]
90006096:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90006150 <HAL_RCC_GetSysClockFreq+0x2e4>
9000609a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000609e:	ee76 7aa7 	vadd.f32	s15, s13, s15
900060a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900060a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900060aa:	ee67 7a27 	vmul.f32	s15, s14, s15
900060ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900060b2:	e021      	b.n	900060f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900060b4:	693b      	ldr	r3, [r7, #16]
900060b6:	ee07 3a90 	vmov	s15, r3
900060ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
900060be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90006158 <HAL_RCC_GetSysClockFreq+0x2ec>
900060c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900060c6:	4b1e      	ldr	r3, [pc, #120]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
900060c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900060ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
900060ce:	ee07 3a90 	vmov	s15, r3
900060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900060d6:	ed97 6a02 	vldr	s12, [r7, #8]
900060da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90006150 <HAL_RCC_GetSysClockFreq+0x2e4>
900060de:	eec6 7a25 	vdiv.f32	s15, s12, s11
900060e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900060e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900060ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
900060ee:	ee67 7a27 	vmul.f32	s15, s14, s15
900060f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900060f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
900060f8:	4b11      	ldr	r3, [pc, #68]	@ (90006140 <HAL_RCC_GetSysClockFreq+0x2d4>)
900060fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900060fc:	0a5b      	lsrs	r3, r3, #9
900060fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90006102:	3301      	adds	r3, #1
90006104:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90006106:	683b      	ldr	r3, [r7, #0]
90006108:	ee07 3a90 	vmov	s15, r3
9000610c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90006110:	edd7 6a07 	vldr	s13, [r7, #28]
90006114:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000611c:	ee17 3a90 	vmov	r3, s15
90006120:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90006122:	e005      	b.n	90006130 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90006124:	2300      	movs	r3, #0
90006126:	61bb      	str	r3, [r7, #24]
      break;
90006128:	e002      	b.n	90006130 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
9000612a:	4b07      	ldr	r3, [pc, #28]	@ (90006148 <HAL_RCC_GetSysClockFreq+0x2dc>)
9000612c:	61bb      	str	r3, [r7, #24]
      break;
9000612e:	bf00      	nop
  }

  return sysclockfreq;
90006130:	69bb      	ldr	r3, [r7, #24]
}
90006132:	4618      	mov	r0, r3
90006134:	3724      	adds	r7, #36	@ 0x24
90006136:	46bd      	mov	sp, r7
90006138:	f85d 7b04 	ldr.w	r7, [sp], #4
9000613c:	4770      	bx	lr
9000613e:	bf00      	nop
90006140:	58024400 	.word	0x58024400
90006144:	03d09000 	.word	0x03d09000
90006148:	003d0900 	.word	0x003d0900
9000614c:	017d7840 	.word	0x017d7840
90006150:	46000000 	.word	0x46000000
90006154:	4c742400 	.word	0x4c742400
90006158:	4a742400 	.word	0x4a742400
9000615c:	4bbebc20 	.word	0x4bbebc20

90006160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90006160:	b580      	push	{r7, lr}
90006162:	b082      	sub	sp, #8
90006164:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90006166:	f7ff fe81 	bl	90005e6c <HAL_RCC_GetSysClockFreq>
9000616a:	4602      	mov	r2, r0
9000616c:	4b10      	ldr	r3, [pc, #64]	@ (900061b0 <HAL_RCC_GetHCLKFreq+0x50>)
9000616e:	699b      	ldr	r3, [r3, #24]
90006170:	0a1b      	lsrs	r3, r3, #8
90006172:	f003 030f 	and.w	r3, r3, #15
90006176:	490f      	ldr	r1, [pc, #60]	@ (900061b4 <HAL_RCC_GetHCLKFreq+0x54>)
90006178:	5ccb      	ldrb	r3, [r1, r3]
9000617a:	f003 031f 	and.w	r3, r3, #31
9000617e:	fa22 f303 	lsr.w	r3, r2, r3
90006182:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006184:	4b0a      	ldr	r3, [pc, #40]	@ (900061b0 <HAL_RCC_GetHCLKFreq+0x50>)
90006186:	699b      	ldr	r3, [r3, #24]
90006188:	f003 030f 	and.w	r3, r3, #15
9000618c:	4a09      	ldr	r2, [pc, #36]	@ (900061b4 <HAL_RCC_GetHCLKFreq+0x54>)
9000618e:	5cd3      	ldrb	r3, [r2, r3]
90006190:	f003 031f 	and.w	r3, r3, #31
90006194:	687a      	ldr	r2, [r7, #4]
90006196:	fa22 f303 	lsr.w	r3, r2, r3
9000619a:	4a07      	ldr	r2, [pc, #28]	@ (900061b8 <HAL_RCC_GetHCLKFreq+0x58>)
9000619c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000619e:	4a07      	ldr	r2, [pc, #28]	@ (900061bc <HAL_RCC_GetHCLKFreq+0x5c>)
900061a0:	687b      	ldr	r3, [r7, #4]
900061a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
900061a4:	4b04      	ldr	r3, [pc, #16]	@ (900061b8 <HAL_RCC_GetHCLKFreq+0x58>)
900061a6:	681b      	ldr	r3, [r3, #0]
}
900061a8:	4618      	mov	r0, r3
900061aa:	3708      	adds	r7, #8
900061ac:	46bd      	mov	sp, r7
900061ae:	bd80      	pop	{r7, pc}
900061b0:	58024400 	.word	0x58024400
900061b4:	9000c1d0 	.word	0x9000c1d0
900061b8:	20000004 	.word	0x20000004
900061bc:	20000000 	.word	0x20000000

900061c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
900061c0:	b580      	push	{r7, lr}
900061c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
900061c4:	f7ff ffcc 	bl	90006160 <HAL_RCC_GetHCLKFreq>
900061c8:	4602      	mov	r2, r0
900061ca:	4b06      	ldr	r3, [pc, #24]	@ (900061e4 <HAL_RCC_GetPCLK1Freq+0x24>)
900061cc:	69db      	ldr	r3, [r3, #28]
900061ce:	091b      	lsrs	r3, r3, #4
900061d0:	f003 0307 	and.w	r3, r3, #7
900061d4:	4904      	ldr	r1, [pc, #16]	@ (900061e8 <HAL_RCC_GetPCLK1Freq+0x28>)
900061d6:	5ccb      	ldrb	r3, [r1, r3]
900061d8:	f003 031f 	and.w	r3, r3, #31
900061dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
900061e0:	4618      	mov	r0, r3
900061e2:	bd80      	pop	{r7, pc}
900061e4:	58024400 	.word	0x58024400
900061e8:	9000c1d0 	.word	0x9000c1d0

900061ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
900061ec:	b580      	push	{r7, lr}
900061ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
900061f0:	f7ff ffb6 	bl	90006160 <HAL_RCC_GetHCLKFreq>
900061f4:	4602      	mov	r2, r0
900061f6:	4b06      	ldr	r3, [pc, #24]	@ (90006210 <HAL_RCC_GetPCLK2Freq+0x24>)
900061f8:	69db      	ldr	r3, [r3, #28]
900061fa:	0a1b      	lsrs	r3, r3, #8
900061fc:	f003 0307 	and.w	r3, r3, #7
90006200:	4904      	ldr	r1, [pc, #16]	@ (90006214 <HAL_RCC_GetPCLK2Freq+0x28>)
90006202:	5ccb      	ldrb	r3, [r1, r3]
90006204:	f003 031f 	and.w	r3, r3, #31
90006208:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000620c:	4618      	mov	r0, r3
9000620e:	bd80      	pop	{r7, pc}
90006210:	58024400 	.word	0x58024400
90006214:	9000c1d0 	.word	0x9000c1d0

90006218 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90006218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
9000621c:	b0ca      	sub	sp, #296	@ 0x128
9000621e:	af00      	add	r7, sp, #0
90006220:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90006224:	2300      	movs	r3, #0
90006226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
9000622a:	2300      	movs	r3, #0
9000622c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006234:	e9d3 2300 	ldrd	r2, r3, [r3]
90006238:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
9000623c:	2500      	movs	r5, #0
9000623e:	ea54 0305 	orrs.w	r3, r4, r5
90006242:	d049      	beq.n	900062d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
9000624a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000624e:	d02f      	beq.n	900062b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
90006250:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90006254:	d828      	bhi.n	900062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
90006256:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000625a:	d01a      	beq.n	90006292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
9000625c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90006260:	d822      	bhi.n	900062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
90006262:	2b00      	cmp	r3, #0
90006264:	d003      	beq.n	9000626e <HAL_RCCEx_PeriphCLKConfig+0x56>
90006266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000626a:	d007      	beq.n	9000627c <HAL_RCCEx_PeriphCLKConfig+0x64>
9000626c:	e01c      	b.n	900062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000626e:	4bb8      	ldr	r3, [pc, #736]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006272:	4ab7      	ldr	r2, [pc, #732]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90006274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006278:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
9000627a:	e01a      	b.n	900062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006280:	3308      	adds	r3, #8
90006282:	2102      	movs	r1, #2
90006284:	4618      	mov	r0, r3
90006286:	f001 fc8f 	bl	90007ba8 <RCCEx_PLL2_Config>
9000628a:	4603      	mov	r3, r0
9000628c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90006290:	e00f      	b.n	900062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006296:	3328      	adds	r3, #40	@ 0x28
90006298:	2102      	movs	r1, #2
9000629a:	4618      	mov	r0, r3
9000629c:	f001 fd36 	bl	90007d0c <RCCEx_PLL3_Config>
900062a0:	4603      	mov	r3, r0
900062a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
900062a6:	e004      	b.n	900062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900062a8:	2301      	movs	r3, #1
900062aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900062ae:	e000      	b.n	900062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
900062b0:	bf00      	nop
    }

    if (ret == HAL_OK)
900062b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900062b6:	2b00      	cmp	r3, #0
900062b8:	d10a      	bne.n	900062d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
900062ba:	4ba5      	ldr	r3, [pc, #660]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900062bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900062be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900062c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
900062c8:	4aa1      	ldr	r2, [pc, #644]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900062ca:	430b      	orrs	r3, r1
900062cc:	6513      	str	r3, [r2, #80]	@ 0x50
900062ce:	e003      	b.n	900062d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
900062d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900062d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
900062d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
900062e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
900062e4:	f04f 0900 	mov.w	r9, #0
900062e8:	ea58 0309 	orrs.w	r3, r8, r9
900062ec:	d047      	beq.n	9000637e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
900062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900062f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900062f4:	2b04      	cmp	r3, #4
900062f6:	d82a      	bhi.n	9000634e <HAL_RCCEx_PeriphCLKConfig+0x136>
900062f8:	a201      	add	r2, pc, #4	@ (adr r2, 90006300 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
900062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900062fe:	bf00      	nop
90006300:	90006315 	.word	0x90006315
90006304:	90006323 	.word	0x90006323
90006308:	90006339 	.word	0x90006339
9000630c:	90006357 	.word	0x90006357
90006310:	90006357 	.word	0x90006357
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90006314:	4b8e      	ldr	r3, [pc, #568]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006318:	4a8d      	ldr	r2, [pc, #564]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000631a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000631e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90006320:	e01a      	b.n	90006358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006326:	3308      	adds	r3, #8
90006328:	2100      	movs	r1, #0
9000632a:	4618      	mov	r0, r3
9000632c:	f001 fc3c 	bl	90007ba8 <RCCEx_PLL2_Config>
90006330:	4603      	mov	r3, r0
90006332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90006336:	e00f      	b.n	90006358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000633c:	3328      	adds	r3, #40	@ 0x28
9000633e:	2100      	movs	r1, #0
90006340:	4618      	mov	r0, r3
90006342:	f001 fce3 	bl	90007d0c <RCCEx_PLL3_Config>
90006346:	4603      	mov	r3, r0
90006348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000634c:	e004      	b.n	90006358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000634e:	2301      	movs	r3, #1
90006350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006354:	e000      	b.n	90006358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90006356:	bf00      	nop
    }

    if (ret == HAL_OK)
90006358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000635c:	2b00      	cmp	r3, #0
9000635e:	d10a      	bne.n	90006376 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90006360:	4b7b      	ldr	r3, [pc, #492]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90006362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90006364:	f023 0107 	bic.w	r1, r3, #7
90006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000636e:	4a78      	ldr	r2, [pc, #480]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90006370:	430b      	orrs	r3, r1
90006372:	6513      	str	r3, [r2, #80]	@ 0x50
90006374:	e003      	b.n	9000637e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000637a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006382:	e9d3 2300 	ldrd	r2, r3, [r3]
90006386:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
9000638a:	f04f 0b00 	mov.w	fp, #0
9000638e:	ea5a 030b 	orrs.w	r3, sl, fp
90006392:	d04c      	beq.n	9000642e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
9000639a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000639e:	d030      	beq.n	90006402 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
900063a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900063a4:	d829      	bhi.n	900063fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900063a6:	2bc0      	cmp	r3, #192	@ 0xc0
900063a8:	d02d      	beq.n	90006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
900063aa:	2bc0      	cmp	r3, #192	@ 0xc0
900063ac:	d825      	bhi.n	900063fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900063ae:	2b80      	cmp	r3, #128	@ 0x80
900063b0:	d018      	beq.n	900063e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
900063b2:	2b80      	cmp	r3, #128	@ 0x80
900063b4:	d821      	bhi.n	900063fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900063b6:	2b00      	cmp	r3, #0
900063b8:	d002      	beq.n	900063c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
900063ba:	2b40      	cmp	r3, #64	@ 0x40
900063bc:	d007      	beq.n	900063ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
900063be:	e01c      	b.n	900063fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900063c0:	4b63      	ldr	r3, [pc, #396]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900063c4:	4a62      	ldr	r2, [pc, #392]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900063c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900063ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
900063cc:	e01c      	b.n	90006408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900063d2:	3308      	adds	r3, #8
900063d4:	2100      	movs	r1, #0
900063d6:	4618      	mov	r0, r3
900063d8:	f001 fbe6 	bl	90007ba8 <RCCEx_PLL2_Config>
900063dc:	4603      	mov	r3, r0
900063de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
900063e2:	e011      	b.n	90006408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900063e8:	3328      	adds	r3, #40	@ 0x28
900063ea:	2100      	movs	r1, #0
900063ec:	4618      	mov	r0, r3
900063ee:	f001 fc8d 	bl	90007d0c <RCCEx_PLL3_Config>
900063f2:	4603      	mov	r3, r0
900063f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
900063f8:	e006      	b.n	90006408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900063fa:	2301      	movs	r3, #1
900063fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006400:	e002      	b.n	90006408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90006402:	bf00      	nop
90006404:	e000      	b.n	90006408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90006406:	bf00      	nop
    }

    if (ret == HAL_OK)
90006408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000640c:	2b00      	cmp	r3, #0
9000640e:	d10a      	bne.n	90006426 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90006410:	4b4f      	ldr	r3, [pc, #316]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90006412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90006414:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90006418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000641c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
9000641e:	4a4c      	ldr	r2, [pc, #304]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90006420:	430b      	orrs	r3, r1
90006422:	6513      	str	r3, [r2, #80]	@ 0x50
90006424:	e003      	b.n	9000642e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000642a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006432:	e9d3 2300 	ldrd	r2, r3, [r3]
90006436:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
9000643a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
9000643e:	2300      	movs	r3, #0
90006440:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90006444:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90006448:	460b      	mov	r3, r1
9000644a:	4313      	orrs	r3, r2
9000644c:	d053      	beq.n	900064f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
9000644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90006456:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
9000645a:	d035      	beq.n	900064c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
9000645c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90006460:	d82e      	bhi.n	900064c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90006462:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90006466:	d031      	beq.n	900064cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90006468:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
9000646c:	d828      	bhi.n	900064c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000646e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90006472:	d01a      	beq.n	900064aa <HAL_RCCEx_PeriphCLKConfig+0x292>
90006474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90006478:	d822      	bhi.n	900064c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000647a:	2b00      	cmp	r3, #0
9000647c:	d003      	beq.n	90006486 <HAL_RCCEx_PeriphCLKConfig+0x26e>
9000647e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90006482:	d007      	beq.n	90006494 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90006484:	e01c      	b.n	900064c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90006486:	4b32      	ldr	r3, [pc, #200]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000648a:	4a31      	ldr	r2, [pc, #196]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000648c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90006492:	e01c      	b.n	900064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006498:	3308      	adds	r3, #8
9000649a:	2100      	movs	r1, #0
9000649c:	4618      	mov	r0, r3
9000649e:	f001 fb83 	bl	90007ba8 <RCCEx_PLL2_Config>
900064a2:	4603      	mov	r3, r0
900064a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
900064a8:	e011      	b.n	900064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900064ae:	3328      	adds	r3, #40	@ 0x28
900064b0:	2100      	movs	r1, #0
900064b2:	4618      	mov	r0, r3
900064b4:	f001 fc2a 	bl	90007d0c <RCCEx_PLL3_Config>
900064b8:	4603      	mov	r3, r0
900064ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900064be:	e006      	b.n	900064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
900064c0:	2301      	movs	r3, #1
900064c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900064c6:	e002      	b.n	900064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900064c8:	bf00      	nop
900064ca:	e000      	b.n	900064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900064cc:	bf00      	nop
    }

    if (ret == HAL_OK)
900064ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900064d2:	2b00      	cmp	r3, #0
900064d4:	d10b      	bne.n	900064ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
900064d6:	4b1e      	ldr	r3, [pc, #120]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900064d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900064da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
900064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900064e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
900064e6:	4a1a      	ldr	r2, [pc, #104]	@ (90006550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900064e8:	430b      	orrs	r3, r1
900064ea:	6593      	str	r3, [r2, #88]	@ 0x58
900064ec:	e003      	b.n	900064f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
900064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900064f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
900064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
900064fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90006502:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90006506:	2300      	movs	r3, #0
90006508:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
9000650c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90006510:	460b      	mov	r3, r1
90006512:	4313      	orrs	r3, r2
90006514:	d056      	beq.n	900065c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000651a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
9000651e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90006522:	d038      	beq.n	90006596 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90006524:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90006528:	d831      	bhi.n	9000658e <HAL_RCCEx_PeriphCLKConfig+0x376>
9000652a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
9000652e:	d034      	beq.n	9000659a <HAL_RCCEx_PeriphCLKConfig+0x382>
90006530:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90006534:	d82b      	bhi.n	9000658e <HAL_RCCEx_PeriphCLKConfig+0x376>
90006536:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000653a:	d01d      	beq.n	90006578 <HAL_RCCEx_PeriphCLKConfig+0x360>
9000653c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90006540:	d825      	bhi.n	9000658e <HAL_RCCEx_PeriphCLKConfig+0x376>
90006542:	2b00      	cmp	r3, #0
90006544:	d006      	beq.n	90006554 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90006546:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
9000654a:	d00a      	beq.n	90006562 <HAL_RCCEx_PeriphCLKConfig+0x34a>
9000654c:	e01f      	b.n	9000658e <HAL_RCCEx_PeriphCLKConfig+0x376>
9000654e:	bf00      	nop
90006550:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90006554:	4ba2      	ldr	r3, [pc, #648]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90006556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006558:	4aa1      	ldr	r2, [pc, #644]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000655a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000655e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90006560:	e01c      	b.n	9000659c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90006562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006566:	3308      	adds	r3, #8
90006568:	2100      	movs	r1, #0
9000656a:	4618      	mov	r0, r3
9000656c:	f001 fb1c 	bl	90007ba8 <RCCEx_PLL2_Config>
90006570:	4603      	mov	r3, r0
90006572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90006576:	e011      	b.n	9000659c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000657c:	3328      	adds	r3, #40	@ 0x28
9000657e:	2100      	movs	r1, #0
90006580:	4618      	mov	r0, r3
90006582:	f001 fbc3 	bl	90007d0c <RCCEx_PLL3_Config>
90006586:	4603      	mov	r3, r0
90006588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000658c:	e006      	b.n	9000659c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
9000658e:	2301      	movs	r3, #1
90006590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006594:	e002      	b.n	9000659c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90006596:	bf00      	nop
90006598:	e000      	b.n	9000659c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
9000659a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000659c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900065a0:	2b00      	cmp	r3, #0
900065a2:	d10b      	bne.n	900065bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
900065a4:	4b8e      	ldr	r3, [pc, #568]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900065a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900065a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
900065ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900065b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
900065b4:	4a8a      	ldr	r2, [pc, #552]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900065b6:	430b      	orrs	r3, r1
900065b8:	6593      	str	r3, [r2, #88]	@ 0x58
900065ba:	e003      	b.n	900065c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
900065bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900065c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
900065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
900065cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
900065d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
900065d4:	2300      	movs	r3, #0
900065d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
900065da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
900065de:	460b      	mov	r3, r1
900065e0:	4313      	orrs	r3, r2
900065e2:	d03a      	beq.n	9000665a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
900065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900065e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900065ea:	2b30      	cmp	r3, #48	@ 0x30
900065ec:	d01f      	beq.n	9000662e <HAL_RCCEx_PeriphCLKConfig+0x416>
900065ee:	2b30      	cmp	r3, #48	@ 0x30
900065f0:	d819      	bhi.n	90006626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
900065f2:	2b20      	cmp	r3, #32
900065f4:	d00c      	beq.n	90006610 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
900065f6:	2b20      	cmp	r3, #32
900065f8:	d815      	bhi.n	90006626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
900065fa:	2b00      	cmp	r3, #0
900065fc:	d019      	beq.n	90006632 <HAL_RCCEx_PeriphCLKConfig+0x41a>
900065fe:	2b10      	cmp	r3, #16
90006600:	d111      	bne.n	90006626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90006602:	4b77      	ldr	r3, [pc, #476]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006606:	4a76      	ldr	r2, [pc, #472]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90006608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000660c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
9000660e:	e011      	b.n	90006634 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006614:	3308      	adds	r3, #8
90006616:	2102      	movs	r1, #2
90006618:	4618      	mov	r0, r3
9000661a:	f001 fac5 	bl	90007ba8 <RCCEx_PLL2_Config>
9000661e:	4603      	mov	r3, r0
90006620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90006624:	e006      	b.n	90006634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90006626:	2301      	movs	r3, #1
90006628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000662c:	e002      	b.n	90006634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000662e:	bf00      	nop
90006630:	e000      	b.n	90006634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90006632:	bf00      	nop
    }

    if (ret == HAL_OK)
90006634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006638:	2b00      	cmp	r3, #0
9000663a:	d10a      	bne.n	90006652 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000663c:	4b68      	ldr	r3, [pc, #416]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000663e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90006640:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000664a:	4a65      	ldr	r2, [pc, #404]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000664c:	430b      	orrs	r3, r1
9000664e:	64d3      	str	r3, [r2, #76]	@ 0x4c
90006650:	e003      	b.n	9000665a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000665e:	e9d3 2300 	ldrd	r2, r3, [r3]
90006662:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90006666:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
9000666a:	2300      	movs	r3, #0
9000666c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90006670:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90006674:	460b      	mov	r3, r1
90006676:	4313      	orrs	r3, r2
90006678:	d051      	beq.n	9000671e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
9000667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000667e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90006680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90006684:	d035      	beq.n	900066f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
90006686:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000668a:	d82e      	bhi.n	900066ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
9000668c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90006690:	d031      	beq.n	900066f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
90006692:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90006696:	d828      	bhi.n	900066ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90006698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
9000669c:	d01a      	beq.n	900066d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
9000669e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900066a2:	d822      	bhi.n	900066ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900066a4:	2b00      	cmp	r3, #0
900066a6:	d003      	beq.n	900066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
900066a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900066ac:	d007      	beq.n	900066be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
900066ae:	e01c      	b.n	900066ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900066b0:	4b4b      	ldr	r3, [pc, #300]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900066b4:	4a4a      	ldr	r2, [pc, #296]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900066b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900066ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900066bc:	e01c      	b.n	900066f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900066c2:	3308      	adds	r3, #8
900066c4:	2100      	movs	r1, #0
900066c6:	4618      	mov	r0, r3
900066c8:	f001 fa6e 	bl	90007ba8 <RCCEx_PLL2_Config>
900066cc:	4603      	mov	r3, r0
900066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900066d2:	e011      	b.n	900066f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900066d8:	3328      	adds	r3, #40	@ 0x28
900066da:	2100      	movs	r1, #0
900066dc:	4618      	mov	r0, r3
900066de:	f001 fb15 	bl	90007d0c <RCCEx_PLL3_Config>
900066e2:	4603      	mov	r3, r0
900066e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900066e8:	e006      	b.n	900066f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900066ea:	2301      	movs	r3, #1
900066ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900066f0:	e002      	b.n	900066f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900066f2:	bf00      	nop
900066f4:	e000      	b.n	900066f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900066f6:	bf00      	nop
    }

    if (ret == HAL_OK)
900066f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900066fc:	2b00      	cmp	r3, #0
900066fe:	d10a      	bne.n	90006716 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90006700:	4b37      	ldr	r3, [pc, #220]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90006702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90006704:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
90006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000670c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
9000670e:	4a34      	ldr	r2, [pc, #208]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90006710:	430b      	orrs	r3, r1
90006712:	6513      	str	r3, [r2, #80]	@ 0x50
90006714:	e003      	b.n	9000671e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000671a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006722:	e9d3 2300 	ldrd	r2, r3, [r3]
90006726:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
9000672a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
9000672e:	2300      	movs	r3, #0
90006730:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90006734:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90006738:	460b      	mov	r3, r1
9000673a:	4313      	orrs	r3, r2
9000673c:	d056      	beq.n	900067ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
9000673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90006744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006748:	d033      	beq.n	900067b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
9000674a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000674e:	d82c      	bhi.n	900067aa <HAL_RCCEx_PeriphCLKConfig+0x592>
90006750:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90006754:	d02f      	beq.n	900067b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90006756:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000675a:	d826      	bhi.n	900067aa <HAL_RCCEx_PeriphCLKConfig+0x592>
9000675c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90006760:	d02b      	beq.n	900067ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90006762:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90006766:	d820      	bhi.n	900067aa <HAL_RCCEx_PeriphCLKConfig+0x592>
90006768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000676c:	d012      	beq.n	90006794 <HAL_RCCEx_PeriphCLKConfig+0x57c>
9000676e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90006772:	d81a      	bhi.n	900067aa <HAL_RCCEx_PeriphCLKConfig+0x592>
90006774:	2b00      	cmp	r3, #0
90006776:	d022      	beq.n	900067be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90006778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000677c:	d115      	bne.n	900067aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006782:	3308      	adds	r3, #8
90006784:	2101      	movs	r1, #1
90006786:	4618      	mov	r0, r3
90006788:	f001 fa0e 	bl	90007ba8 <RCCEx_PLL2_Config>
9000678c:	4603      	mov	r3, r0
9000678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90006792:	e015      	b.n	900067c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90006794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006798:	3328      	adds	r3, #40	@ 0x28
9000679a:	2101      	movs	r1, #1
9000679c:	4618      	mov	r0, r3
9000679e:	f001 fab5 	bl	90007d0c <RCCEx_PLL3_Config>
900067a2:	4603      	mov	r3, r0
900067a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900067a8:	e00a      	b.n	900067c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900067aa:	2301      	movs	r3, #1
900067ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900067b0:	e006      	b.n	900067c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900067b2:	bf00      	nop
900067b4:	e004      	b.n	900067c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900067b6:	bf00      	nop
900067b8:	e002      	b.n	900067c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900067ba:	bf00      	nop
900067bc:	e000      	b.n	900067c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900067be:	bf00      	nop
    }

    if (ret == HAL_OK)
900067c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900067c4:	2b00      	cmp	r3, #0
900067c6:	d10d      	bne.n	900067e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900067c8:	4b05      	ldr	r3, [pc, #20]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900067ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900067cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
900067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900067d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900067d6:	4a02      	ldr	r2, [pc, #8]	@ (900067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900067d8:	430b      	orrs	r3, r1
900067da:	6513      	str	r3, [r2, #80]	@ 0x50
900067dc:	e006      	b.n	900067ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
900067de:	bf00      	nop
900067e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900067e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900067e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
900067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
900067f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
900067f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
900067fc:	2300      	movs	r3, #0
900067fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90006802:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
90006806:	460b      	mov	r3, r1
90006808:	4313      	orrs	r3, r2
9000680a:	d055      	beq.n	900068b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
9000680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90006814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90006818:	d033      	beq.n	90006882 <HAL_RCCEx_PeriphCLKConfig+0x66a>
9000681a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000681e:	d82c      	bhi.n	9000687a <HAL_RCCEx_PeriphCLKConfig+0x662>
90006820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006824:	d02f      	beq.n	90006886 <HAL_RCCEx_PeriphCLKConfig+0x66e>
90006826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000682a:	d826      	bhi.n	9000687a <HAL_RCCEx_PeriphCLKConfig+0x662>
9000682c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90006830:	d02b      	beq.n	9000688a <HAL_RCCEx_PeriphCLKConfig+0x672>
90006832:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90006836:	d820      	bhi.n	9000687a <HAL_RCCEx_PeriphCLKConfig+0x662>
90006838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000683c:	d012      	beq.n	90006864 <HAL_RCCEx_PeriphCLKConfig+0x64c>
9000683e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90006842:	d81a      	bhi.n	9000687a <HAL_RCCEx_PeriphCLKConfig+0x662>
90006844:	2b00      	cmp	r3, #0
90006846:	d022      	beq.n	9000688e <HAL_RCCEx_PeriphCLKConfig+0x676>
90006848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000684c:	d115      	bne.n	9000687a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006852:	3308      	adds	r3, #8
90006854:	2101      	movs	r1, #1
90006856:	4618      	mov	r0, r3
90006858:	f001 f9a6 	bl	90007ba8 <RCCEx_PLL2_Config>
9000685c:	4603      	mov	r3, r0
9000685e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90006862:	e015      	b.n	90006890 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90006864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006868:	3328      	adds	r3, #40	@ 0x28
9000686a:	2101      	movs	r1, #1
9000686c:	4618      	mov	r0, r3
9000686e:	f001 fa4d 	bl	90007d0c <RCCEx_PLL3_Config>
90006872:	4603      	mov	r3, r0
90006874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90006878:	e00a      	b.n	90006890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
9000687a:	2301      	movs	r3, #1
9000687c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006880:	e006      	b.n	90006890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90006882:	bf00      	nop
90006884:	e004      	b.n	90006890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90006886:	bf00      	nop
90006888:	e002      	b.n	90006890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000688a:	bf00      	nop
9000688c:	e000      	b.n	90006890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000688e:	bf00      	nop
    }

    if (ret == HAL_OK)
90006890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006894:	2b00      	cmp	r3, #0
90006896:	d10b      	bne.n	900068b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90006898:	4ba3      	ldr	r3, [pc, #652]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000689a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000689c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900068a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900068a8:	4a9f      	ldr	r2, [pc, #636]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900068aa:	430b      	orrs	r3, r1
900068ac:	6593      	str	r3, [r2, #88]	@ 0x58
900068ae:	e003      	b.n	900068b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
900068b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900068b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
900068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
900068c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
900068c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
900068c8:	2300      	movs	r3, #0
900068ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
900068ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
900068d2:	460b      	mov	r3, r1
900068d4:	4313      	orrs	r3, r2
900068d6:	d037      	beq.n	90006948 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
900068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900068dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900068de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900068e2:	d00e      	beq.n	90006902 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900068e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900068e8:	d816      	bhi.n	90006918 <HAL_RCCEx_PeriphCLKConfig+0x700>
900068ea:	2b00      	cmp	r3, #0
900068ec:	d018      	beq.n	90006920 <HAL_RCCEx_PeriphCLKConfig+0x708>
900068ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900068f2:	d111      	bne.n	90006918 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900068f4:	4b8c      	ldr	r3, [pc, #560]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900068f8:	4a8b      	ldr	r2, [pc, #556]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900068fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900068fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90006900:	e00f      	b.n	90006922 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006906:	3308      	adds	r3, #8
90006908:	2101      	movs	r1, #1
9000690a:	4618      	mov	r0, r3
9000690c:	f001 f94c 	bl	90007ba8 <RCCEx_PLL2_Config>
90006910:	4603      	mov	r3, r0
90006912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90006916:	e004      	b.n	90006922 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90006918:	2301      	movs	r3, #1
9000691a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000691e:	e000      	b.n	90006922 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90006920:	bf00      	nop
    }

    if (ret == HAL_OK)
90006922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006926:	2b00      	cmp	r3, #0
90006928:	d10a      	bne.n	90006940 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000692a:	4b7f      	ldr	r3, [pc, #508]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000692c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000692e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006938:	4a7b      	ldr	r2, [pc, #492]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000693a:	430b      	orrs	r3, r1
9000693c:	6513      	str	r3, [r2, #80]	@ 0x50
9000693e:	e003      	b.n	90006948 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90006948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000694c:	e9d3 2300 	ldrd	r2, r3, [r3]
90006950:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90006954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90006958:	2300      	movs	r3, #0
9000695a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
9000695e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90006962:	460b      	mov	r3, r1
90006964:	4313      	orrs	r3, r2
90006966:	d039      	beq.n	900069dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90006968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000696c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000696e:	2b03      	cmp	r3, #3
90006970:	d81c      	bhi.n	900069ac <HAL_RCCEx_PeriphCLKConfig+0x794>
90006972:	a201      	add	r2, pc, #4	@ (adr r2, 90006978 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90006978:	900069b5 	.word	0x900069b5
9000697c:	90006989 	.word	0x90006989
90006980:	90006997 	.word	0x90006997
90006984:	900069b5 	.word	0x900069b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90006988:	4b67      	ldr	r3, [pc, #412]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000698a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000698c:	4a66      	ldr	r2, [pc, #408]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000698e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90006994:	e00f      	b.n	900069b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000699a:	3308      	adds	r3, #8
9000699c:	2102      	movs	r1, #2
9000699e:	4618      	mov	r0, r3
900069a0:	f001 f902 	bl	90007ba8 <RCCEx_PLL2_Config>
900069a4:	4603      	mov	r3, r0
900069a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
900069aa:	e004      	b.n	900069b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
900069ac:	2301      	movs	r3, #1
900069ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900069b2:	e000      	b.n	900069b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
900069b4:	bf00      	nop
    }

    if (ret == HAL_OK)
900069b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900069ba:	2b00      	cmp	r3, #0
900069bc:	d10a      	bne.n	900069d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
900069be:	4b5a      	ldr	r3, [pc, #360]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900069c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900069c2:	f023 0103 	bic.w	r1, r3, #3
900069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900069ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900069cc:	4a56      	ldr	r2, [pc, #344]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900069ce:	430b      	orrs	r3, r1
900069d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
900069d2:	e003      	b.n	900069dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
900069d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900069d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
900069e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
900069e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
900069ec:	2300      	movs	r3, #0
900069ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
900069f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
900069f6:	460b      	mov	r3, r1
900069f8:	4313      	orrs	r3, r2
900069fa:	f000 809f 	beq.w	90006b3c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900069fe:	4b4b      	ldr	r3, [pc, #300]	@ (90006b2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
90006a00:	681b      	ldr	r3, [r3, #0]
90006a02:	4a4a      	ldr	r2, [pc, #296]	@ (90006b2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
90006a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90006a08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90006a0a:	f7fc fd1d 	bl	90003448 <HAL_GetTick>
90006a0e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90006a12:	e00b      	b.n	90006a2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90006a14:	f7fc fd18 	bl	90003448 <HAL_GetTick>
90006a18:	4602      	mov	r2, r0
90006a1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90006a1e:	1ad3      	subs	r3, r2, r3
90006a20:	2b64      	cmp	r3, #100	@ 0x64
90006a22:	d903      	bls.n	90006a2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90006a24:	2303      	movs	r3, #3
90006a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006a2a:	e005      	b.n	90006a38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90006a2c:	4b3f      	ldr	r3, [pc, #252]	@ (90006b2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
90006a2e:	681b      	ldr	r3, [r3, #0]
90006a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006a34:	2b00      	cmp	r3, #0
90006a36:	d0ed      	beq.n	90006a14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90006a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006a3c:	2b00      	cmp	r3, #0
90006a3e:	d179      	bne.n	90006b34 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90006a40:	4b39      	ldr	r3, [pc, #228]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006a42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90006a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006a48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90006a4c:	4053      	eors	r3, r2
90006a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90006a52:	2b00      	cmp	r3, #0
90006a54:	d015      	beq.n	90006a82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90006a56:	4b34      	ldr	r3, [pc, #208]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90006a5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90006a62:	4b31      	ldr	r3, [pc, #196]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006a66:	4a30      	ldr	r2, [pc, #192]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006a6c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90006a6e:	4b2e      	ldr	r3, [pc, #184]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006a72:	4a2d      	ldr	r2, [pc, #180]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006a78:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90006a7a:	4a2b      	ldr	r2, [pc, #172]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90006a80:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90006a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90006a8e:	d118      	bne.n	90006ac2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006a90:	f7fc fcda 	bl	90003448 <HAL_GetTick>
90006a94:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90006a98:	e00d      	b.n	90006ab6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90006a9a:	f7fc fcd5 	bl	90003448 <HAL_GetTick>
90006a9e:	4602      	mov	r2, r0
90006aa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90006aa4:	1ad2      	subs	r2, r2, r3
90006aa6:	f241 3388 	movw	r3, #5000	@ 0x1388
90006aaa:	429a      	cmp	r2, r3
90006aac:	d903      	bls.n	90006ab6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90006aae:	2303      	movs	r3, #3
90006ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90006ab4:	e005      	b.n	90006ac2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90006ab6:	4b1c      	ldr	r3, [pc, #112]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006aba:	f003 0302 	and.w	r3, r3, #2
90006abe:	2b00      	cmp	r3, #0
90006ac0:	d0eb      	beq.n	90006a9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90006ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006ac6:	2b00      	cmp	r3, #0
90006ac8:	d129      	bne.n	90006b1e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006ace:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90006ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90006ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90006ada:	d10e      	bne.n	90006afa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90006adc:	4b12      	ldr	r3, [pc, #72]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006ade:	691b      	ldr	r3, [r3, #16]
90006ae0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
90006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006ae8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90006aec:	091a      	lsrs	r2, r3, #4
90006aee:	4b10      	ldr	r3, [pc, #64]	@ (90006b30 <HAL_RCCEx_PeriphCLKConfig+0x918>)
90006af0:	4013      	ands	r3, r2
90006af2:	4a0d      	ldr	r2, [pc, #52]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006af4:	430b      	orrs	r3, r1
90006af6:	6113      	str	r3, [r2, #16]
90006af8:	e005      	b.n	90006b06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
90006afa:	4b0b      	ldr	r3, [pc, #44]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006afc:	691b      	ldr	r3, [r3, #16]
90006afe:	4a0a      	ldr	r2, [pc, #40]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006b00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90006b04:	6113      	str	r3, [r2, #16]
90006b06:	4b08      	ldr	r3, [pc, #32]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006b08:	6f19      	ldr	r1, [r3, #112]	@ 0x70
90006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006b0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90006b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006b16:	4a04      	ldr	r2, [pc, #16]	@ (90006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90006b18:	430b      	orrs	r3, r1
90006b1a:	6713      	str	r3, [r2, #112]	@ 0x70
90006b1c:	e00e      	b.n	90006b3c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
90006b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
90006b26:	e009      	b.n	90006b3c <HAL_RCCEx_PeriphCLKConfig+0x924>
90006b28:	58024400 	.word	0x58024400
90006b2c:	58024800 	.word	0x58024800
90006b30:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90006b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90006b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
90006b44:	f002 0301 	and.w	r3, r2, #1
90006b48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90006b4c:	2300      	movs	r3, #0
90006b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90006b52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
90006b56:	460b      	mov	r3, r1
90006b58:	4313      	orrs	r3, r2
90006b5a:	f000 8089 	beq.w	90006c70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006b62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90006b64:	2b28      	cmp	r3, #40	@ 0x28
90006b66:	d86b      	bhi.n	90006c40 <HAL_RCCEx_PeriphCLKConfig+0xa28>
90006b68:	a201      	add	r2, pc, #4	@ (adr r2, 90006b70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
90006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90006b6e:	bf00      	nop
90006b70:	90006c49 	.word	0x90006c49
90006b74:	90006c41 	.word	0x90006c41
90006b78:	90006c41 	.word	0x90006c41
90006b7c:	90006c41 	.word	0x90006c41
90006b80:	90006c41 	.word	0x90006c41
90006b84:	90006c41 	.word	0x90006c41
90006b88:	90006c41 	.word	0x90006c41
90006b8c:	90006c41 	.word	0x90006c41
90006b90:	90006c15 	.word	0x90006c15
90006b94:	90006c41 	.word	0x90006c41
90006b98:	90006c41 	.word	0x90006c41
90006b9c:	90006c41 	.word	0x90006c41
90006ba0:	90006c41 	.word	0x90006c41
90006ba4:	90006c41 	.word	0x90006c41
90006ba8:	90006c41 	.word	0x90006c41
90006bac:	90006c41 	.word	0x90006c41
90006bb0:	90006c2b 	.word	0x90006c2b
90006bb4:	90006c41 	.word	0x90006c41
90006bb8:	90006c41 	.word	0x90006c41
90006bbc:	90006c41 	.word	0x90006c41
90006bc0:	90006c41 	.word	0x90006c41
90006bc4:	90006c41 	.word	0x90006c41
90006bc8:	90006c41 	.word	0x90006c41
90006bcc:	90006c41 	.word	0x90006c41
90006bd0:	90006c49 	.word	0x90006c49
90006bd4:	90006c41 	.word	0x90006c41
90006bd8:	90006c41 	.word	0x90006c41
90006bdc:	90006c41 	.word	0x90006c41
90006be0:	90006c41 	.word	0x90006c41
90006be4:	90006c41 	.word	0x90006c41
90006be8:	90006c41 	.word	0x90006c41
90006bec:	90006c41 	.word	0x90006c41
90006bf0:	90006c49 	.word	0x90006c49
90006bf4:	90006c41 	.word	0x90006c41
90006bf8:	90006c41 	.word	0x90006c41
90006bfc:	90006c41 	.word	0x90006c41
90006c00:	90006c41 	.word	0x90006c41
90006c04:	90006c41 	.word	0x90006c41
90006c08:	90006c41 	.word	0x90006c41
90006c0c:	90006c41 	.word	0x90006c41
90006c10:	90006c49 	.word	0x90006c49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90006c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006c18:	3308      	adds	r3, #8
90006c1a:	2101      	movs	r1, #1
90006c1c:	4618      	mov	r0, r3
90006c1e:	f000 ffc3 	bl	90007ba8 <RCCEx_PLL2_Config>
90006c22:	4603      	mov	r3, r0
90006c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90006c28:	e00f      	b.n	90006c4a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006c2e:	3328      	adds	r3, #40	@ 0x28
90006c30:	2101      	movs	r1, #1
90006c32:	4618      	mov	r0, r3
90006c34:	f001 f86a 	bl	90007d0c <RCCEx_PLL3_Config>
90006c38:	4603      	mov	r3, r0
90006c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90006c3e:	e004      	b.n	90006c4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90006c40:	2301      	movs	r3, #1
90006c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006c46:	e000      	b.n	90006c4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
90006c48:	bf00      	nop
    }

    if (ret == HAL_OK)
90006c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006c4e:	2b00      	cmp	r3, #0
90006c50:	d10a      	bne.n	90006c68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90006c52:	4bbf      	ldr	r3, [pc, #764]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90006c56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
90006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90006c60:	4abb      	ldr	r2, [pc, #748]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006c62:	430b      	orrs	r3, r1
90006c64:	6553      	str	r3, [r2, #84]	@ 0x54
90006c66:	e003      	b.n	90006c70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
90006c78:	f002 0302 	and.w	r3, r2, #2
90006c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90006c80:	2300      	movs	r3, #0
90006c82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
90006c86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
90006c8a:	460b      	mov	r3, r1
90006c8c:	4313      	orrs	r3, r2
90006c8e:	d041      	beq.n	90006d14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90006c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90006c96:	2b05      	cmp	r3, #5
90006c98:	d824      	bhi.n	90006ce4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
90006c9a:	a201      	add	r2, pc, #4	@ (adr r2, 90006ca0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90006ca0:	90006ced 	.word	0x90006ced
90006ca4:	90006cb9 	.word	0x90006cb9
90006ca8:	90006ccf 	.word	0x90006ccf
90006cac:	90006ced 	.word	0x90006ced
90006cb0:	90006ced 	.word	0x90006ced
90006cb4:	90006ced 	.word	0x90006ced
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90006cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006cbc:	3308      	adds	r3, #8
90006cbe:	2101      	movs	r1, #1
90006cc0:	4618      	mov	r0, r3
90006cc2:	f000 ff71 	bl	90007ba8 <RCCEx_PLL2_Config>
90006cc6:	4603      	mov	r3, r0
90006cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90006ccc:	e00f      	b.n	90006cee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006cd2:	3328      	adds	r3, #40	@ 0x28
90006cd4:	2101      	movs	r1, #1
90006cd6:	4618      	mov	r0, r3
90006cd8:	f001 f818 	bl	90007d0c <RCCEx_PLL3_Config>
90006cdc:	4603      	mov	r3, r0
90006cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90006ce2:	e004      	b.n	90006cee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90006ce4:	2301      	movs	r3, #1
90006ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006cea:	e000      	b.n	90006cee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90006cec:	bf00      	nop
    }

    if (ret == HAL_OK)
90006cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006cf2:	2b00      	cmp	r3, #0
90006cf4:	d10a      	bne.n	90006d0c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90006cf6:	4b96      	ldr	r3, [pc, #600]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90006cfa:	f023 0107 	bic.w	r1, r3, #7
90006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90006d04:	4a92      	ldr	r2, [pc, #584]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006d06:	430b      	orrs	r3, r1
90006d08:	6553      	str	r3, [r2, #84]	@ 0x54
90006d0a:	e003      	b.n	90006d14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006d10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90006d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
90006d1c:	f002 0304 	and.w	r3, r2, #4
90006d20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90006d24:	2300      	movs	r3, #0
90006d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
90006d2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
90006d2e:	460b      	mov	r3, r1
90006d30:	4313      	orrs	r3, r2
90006d32:	d044      	beq.n	90006dbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90006d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90006d3c:	2b05      	cmp	r3, #5
90006d3e:	d825      	bhi.n	90006d8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
90006d40:	a201      	add	r2, pc, #4	@ (adr r2, 90006d48 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90006d46:	bf00      	nop
90006d48:	90006d95 	.word	0x90006d95
90006d4c:	90006d61 	.word	0x90006d61
90006d50:	90006d77 	.word	0x90006d77
90006d54:	90006d95 	.word	0x90006d95
90006d58:	90006d95 	.word	0x90006d95
90006d5c:	90006d95 	.word	0x90006d95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90006d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006d64:	3308      	adds	r3, #8
90006d66:	2101      	movs	r1, #1
90006d68:	4618      	mov	r0, r3
90006d6a:	f000 ff1d 	bl	90007ba8 <RCCEx_PLL2_Config>
90006d6e:	4603      	mov	r3, r0
90006d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90006d74:	e00f      	b.n	90006d96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006d7a:	3328      	adds	r3, #40	@ 0x28
90006d7c:	2101      	movs	r1, #1
90006d7e:	4618      	mov	r0, r3
90006d80:	f000 ffc4 	bl	90007d0c <RCCEx_PLL3_Config>
90006d84:	4603      	mov	r3, r0
90006d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90006d8a:	e004      	b.n	90006d96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90006d8c:	2301      	movs	r3, #1
90006d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006d92:	e000      	b.n	90006d96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90006d94:	bf00      	nop
    }

    if (ret == HAL_OK)
90006d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006d9a:	2b00      	cmp	r3, #0
90006d9c:	d10b      	bne.n	90006db6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90006d9e:	4b6c      	ldr	r3, [pc, #432]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90006da2:	f023 0107 	bic.w	r1, r3, #7
90006da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90006dae:	4a68      	ldr	r2, [pc, #416]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006db0:	430b      	orrs	r3, r1
90006db2:	6593      	str	r3, [r2, #88]	@ 0x58
90006db4:	e003      	b.n	90006dbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
90006dc6:	f002 0320 	and.w	r3, r2, #32
90006dca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
90006dce:	2300      	movs	r3, #0
90006dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90006dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
90006dd8:	460b      	mov	r3, r1
90006dda:	4313      	orrs	r3, r2
90006ddc:	d055      	beq.n	90006e8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
90006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90006de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90006dea:	d033      	beq.n	90006e54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90006dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90006df0:	d82c      	bhi.n	90006e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
90006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006df6:	d02f      	beq.n	90006e58 <HAL_RCCEx_PeriphCLKConfig+0xc40>
90006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006dfc:	d826      	bhi.n	90006e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
90006dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90006e02:	d02b      	beq.n	90006e5c <HAL_RCCEx_PeriphCLKConfig+0xc44>
90006e04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90006e08:	d820      	bhi.n	90006e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
90006e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90006e0e:	d012      	beq.n	90006e36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
90006e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90006e14:	d81a      	bhi.n	90006e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
90006e16:	2b00      	cmp	r3, #0
90006e18:	d022      	beq.n	90006e60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
90006e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90006e1e:	d115      	bne.n	90006e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006e24:	3308      	adds	r3, #8
90006e26:	2100      	movs	r1, #0
90006e28:	4618      	mov	r0, r3
90006e2a:	f000 febd 	bl	90007ba8 <RCCEx_PLL2_Config>
90006e2e:	4603      	mov	r3, r0
90006e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90006e34:	e015      	b.n	90006e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006e3a:	3328      	adds	r3, #40	@ 0x28
90006e3c:	2102      	movs	r1, #2
90006e3e:	4618      	mov	r0, r3
90006e40:	f000 ff64 	bl	90007d0c <RCCEx_PLL3_Config>
90006e44:	4603      	mov	r3, r0
90006e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90006e4a:	e00a      	b.n	90006e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90006e4c:	2301      	movs	r3, #1
90006e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006e52:	e006      	b.n	90006e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90006e54:	bf00      	nop
90006e56:	e004      	b.n	90006e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90006e58:	bf00      	nop
90006e5a:	e002      	b.n	90006e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90006e5c:	bf00      	nop
90006e5e:	e000      	b.n	90006e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90006e60:	bf00      	nop
    }

    if (ret == HAL_OK)
90006e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006e66:	2b00      	cmp	r3, #0
90006e68:	d10b      	bne.n	90006e82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90006e6a:	4b39      	ldr	r3, [pc, #228]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90006e6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90006e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90006e7a:	4a35      	ldr	r2, [pc, #212]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006e7c:	430b      	orrs	r3, r1
90006e7e:	6553      	str	r3, [r2, #84]	@ 0x54
90006e80:	e003      	b.n	90006e8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
90006e92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
90006e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
90006e9a:	2300      	movs	r3, #0
90006e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90006ea0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90006ea4:	460b      	mov	r3, r1
90006ea6:	4313      	orrs	r3, r2
90006ea8:	d058      	beq.n	90006f5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90006eb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90006eb6:	d033      	beq.n	90006f20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
90006eb8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90006ebc:	d82c      	bhi.n	90006f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90006ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90006ec2:	d02f      	beq.n	90006f24 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90006ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90006ec8:	d826      	bhi.n	90006f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90006eca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90006ece:	d02b      	beq.n	90006f28 <HAL_RCCEx_PeriphCLKConfig+0xd10>
90006ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90006ed4:	d820      	bhi.n	90006f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90006ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90006eda:	d012      	beq.n	90006f02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90006edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90006ee0:	d81a      	bhi.n	90006f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90006ee2:	2b00      	cmp	r3, #0
90006ee4:	d022      	beq.n	90006f2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
90006ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90006eea:	d115      	bne.n	90006f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006ef0:	3308      	adds	r3, #8
90006ef2:	2100      	movs	r1, #0
90006ef4:	4618      	mov	r0, r3
90006ef6:	f000 fe57 	bl	90007ba8 <RCCEx_PLL2_Config>
90006efa:	4603      	mov	r3, r0
90006efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90006f00:	e015      	b.n	90006f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006f06:	3328      	adds	r3, #40	@ 0x28
90006f08:	2102      	movs	r1, #2
90006f0a:	4618      	mov	r0, r3
90006f0c:	f000 fefe 	bl	90007d0c <RCCEx_PLL3_Config>
90006f10:	4603      	mov	r3, r0
90006f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90006f16:	e00a      	b.n	90006f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90006f18:	2301      	movs	r3, #1
90006f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006f1e:	e006      	b.n	90006f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90006f20:	bf00      	nop
90006f22:	e004      	b.n	90006f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90006f24:	bf00      	nop
90006f26:	e002      	b.n	90006f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90006f28:	bf00      	nop
90006f2a:	e000      	b.n	90006f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90006f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
90006f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006f32:	2b00      	cmp	r3, #0
90006f34:	d10e      	bne.n	90006f54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90006f36:	4b06      	ldr	r3, [pc, #24]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90006f3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90006f46:	4a02      	ldr	r2, [pc, #8]	@ (90006f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90006f48:	430b      	orrs	r3, r1
90006f4a:	6593      	str	r3, [r2, #88]	@ 0x58
90006f4c:	e006      	b.n	90006f5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
90006f4e:	bf00      	nop
90006f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90006f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90006f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90006f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
90006f64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
90006f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
90006f6c:	2300      	movs	r3, #0
90006f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
90006f72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
90006f76:	460b      	mov	r3, r1
90006f78:	4313      	orrs	r3, r2
90006f7a:	d055      	beq.n	90007028 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90006f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006f80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90006f84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90006f88:	d033      	beq.n	90006ff2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
90006f8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90006f8e:	d82c      	bhi.n	90006fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90006f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006f94:	d02f      	beq.n	90006ff6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
90006f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006f9a:	d826      	bhi.n	90006fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90006f9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90006fa0:	d02b      	beq.n	90006ffa <HAL_RCCEx_PeriphCLKConfig+0xde2>
90006fa2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90006fa6:	d820      	bhi.n	90006fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90006fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90006fac:	d012      	beq.n	90006fd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90006fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90006fb2:	d81a      	bhi.n	90006fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90006fb4:	2b00      	cmp	r3, #0
90006fb6:	d022      	beq.n	90006ffe <HAL_RCCEx_PeriphCLKConfig+0xde6>
90006fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90006fbc:	d115      	bne.n	90006fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006fc2:	3308      	adds	r3, #8
90006fc4:	2100      	movs	r1, #0
90006fc6:	4618      	mov	r0, r3
90006fc8:	f000 fdee 	bl	90007ba8 <RCCEx_PLL2_Config>
90006fcc:	4603      	mov	r3, r0
90006fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90006fd2:	e015      	b.n	90007000 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90006fd8:	3328      	adds	r3, #40	@ 0x28
90006fda:	2102      	movs	r1, #2
90006fdc:	4618      	mov	r0, r3
90006fde:	f000 fe95 	bl	90007d0c <RCCEx_PLL3_Config>
90006fe2:	4603      	mov	r3, r0
90006fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90006fe8:	e00a      	b.n	90007000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90006fea:	2301      	movs	r3, #1
90006fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90006ff0:	e006      	b.n	90007000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90006ff2:	bf00      	nop
90006ff4:	e004      	b.n	90007000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90006ff6:	bf00      	nop
90006ff8:	e002      	b.n	90007000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90006ffa:	bf00      	nop
90006ffc:	e000      	b.n	90007000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90006ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
90007000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007004:	2b00      	cmp	r3, #0
90007006:	d10b      	bne.n	90007020 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90007008:	4ba1      	ldr	r3, [pc, #644]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000700a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000700c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
90007010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90007018:	4a9d      	ldr	r2, [pc, #628]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000701a:	430b      	orrs	r3, r1
9000701c:	6593      	str	r3, [r2, #88]	@ 0x58
9000701e:	e003      	b.n	90007028 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000702c:	e9d3 2300 	ldrd	r2, r3, [r3]
90007030:	f002 0308 	and.w	r3, r2, #8
90007034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90007038:	2300      	movs	r3, #0
9000703a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
9000703e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90007042:	460b      	mov	r3, r1
90007044:	4313      	orrs	r3, r2
90007046:	d01e      	beq.n	90007086 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000704c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90007050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90007054:	d10c      	bne.n	90007070 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000705a:	3328      	adds	r3, #40	@ 0x28
9000705c:	2102      	movs	r1, #2
9000705e:	4618      	mov	r0, r3
90007060:	f000 fe54 	bl	90007d0c <RCCEx_PLL3_Config>
90007064:	4603      	mov	r3, r0
90007066:	2b00      	cmp	r3, #0
90007068:	d002      	beq.n	90007070 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
9000706a:	2301      	movs	r3, #1
9000706c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90007070:	4b87      	ldr	r3, [pc, #540]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90007072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90007074:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000707c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90007080:	4a83      	ldr	r2, [pc, #524]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90007082:	430b      	orrs	r3, r1
90007084:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000708a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000708e:	f002 0310 	and.w	r3, r2, #16
90007092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90007096:	2300      	movs	r3, #0
90007098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
9000709c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
900070a0:	460b      	mov	r3, r1
900070a2:	4313      	orrs	r3, r2
900070a4:	d01e      	beq.n	900070e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
900070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900070aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
900070ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900070b2:	d10c      	bne.n	900070ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900070b8:	3328      	adds	r3, #40	@ 0x28
900070ba:	2102      	movs	r1, #2
900070bc:	4618      	mov	r0, r3
900070be:	f000 fe25 	bl	90007d0c <RCCEx_PLL3_Config>
900070c2:	4603      	mov	r3, r0
900070c4:	2b00      	cmp	r3, #0
900070c6:	d002      	beq.n	900070ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
900070c8:	2301      	movs	r3, #1
900070ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
900070ce:	4b70      	ldr	r3, [pc, #448]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900070d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900070d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
900070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900070da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
900070de:	4a6c      	ldr	r2, [pc, #432]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900070e0:	430b      	orrs	r3, r1
900070e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
900070e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
900070ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
900070f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
900070f4:	2300      	movs	r3, #0
900070f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
900070fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
900070fe:	460b      	mov	r3, r1
90007100:	4313      	orrs	r3, r2
90007102:	d03e      	beq.n	90007182 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90007104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007108:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
9000710c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90007110:	d022      	beq.n	90007158 <HAL_RCCEx_PeriphCLKConfig+0xf40>
90007112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90007116:	d81b      	bhi.n	90007150 <HAL_RCCEx_PeriphCLKConfig+0xf38>
90007118:	2b00      	cmp	r3, #0
9000711a:	d003      	beq.n	90007124 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
9000711c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90007120:	d00b      	beq.n	9000713a <HAL_RCCEx_PeriphCLKConfig+0xf22>
90007122:	e015      	b.n	90007150 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007128:	3308      	adds	r3, #8
9000712a:	2100      	movs	r1, #0
9000712c:	4618      	mov	r0, r3
9000712e:	f000 fd3b 	bl	90007ba8 <RCCEx_PLL2_Config>
90007132:	4603      	mov	r3, r0
90007134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90007138:	e00f      	b.n	9000715a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000713e:	3328      	adds	r3, #40	@ 0x28
90007140:	2102      	movs	r1, #2
90007142:	4618      	mov	r0, r3
90007144:	f000 fde2 	bl	90007d0c <RCCEx_PLL3_Config>
90007148:	4603      	mov	r3, r0
9000714a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
9000714e:	e004      	b.n	9000715a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007150:	2301      	movs	r3, #1
90007152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007156:	e000      	b.n	9000715a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90007158:	bf00      	nop
    }

    if (ret == HAL_OK)
9000715a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000715e:	2b00      	cmp	r3, #0
90007160:	d10b      	bne.n	9000717a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90007162:	4b4b      	ldr	r3, [pc, #300]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90007164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007166:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
9000716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000716e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90007172:	4a47      	ldr	r2, [pc, #284]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90007174:	430b      	orrs	r3, r1
90007176:	6593      	str	r3, [r2, #88]	@ 0x58
90007178:	e003      	b.n	90007182 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000717a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000717e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90007182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007186:	e9d3 2300 	ldrd	r2, r3, [r3]
9000718a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
9000718e:	67bb      	str	r3, [r7, #120]	@ 0x78
90007190:	2300      	movs	r3, #0
90007192:	67fb      	str	r3, [r7, #124]	@ 0x7c
90007194:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90007198:	460b      	mov	r3, r1
9000719a:	4313      	orrs	r3, r2
9000719c:	d03b      	beq.n	90007216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
9000719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900071a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
900071aa:	d01f      	beq.n	900071ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
900071ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
900071b0:	d818      	bhi.n	900071e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
900071b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
900071b6:	d003      	beq.n	900071c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
900071b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900071bc:	d007      	beq.n	900071ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
900071be:	e011      	b.n	900071e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900071c0:	4b33      	ldr	r3, [pc, #204]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900071c4:	4a32      	ldr	r2, [pc, #200]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900071c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900071ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
900071cc:	e00f      	b.n	900071ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900071d2:	3328      	adds	r3, #40	@ 0x28
900071d4:	2101      	movs	r1, #1
900071d6:	4618      	mov	r0, r3
900071d8:	f000 fd98 	bl	90007d0c <RCCEx_PLL3_Config>
900071dc:	4603      	mov	r3, r0
900071de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
900071e2:	e004      	b.n	900071ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900071e4:	2301      	movs	r3, #1
900071e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900071ea:	e000      	b.n	900071ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
900071ec:	bf00      	nop
    }

    if (ret == HAL_OK)
900071ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900071f2:	2b00      	cmp	r3, #0
900071f4:	d10b      	bne.n	9000720e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
900071f6:	4b26      	ldr	r3, [pc, #152]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900071f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900071fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90007206:	4a22      	ldr	r2, [pc, #136]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90007208:	430b      	orrs	r3, r1
9000720a:	6553      	str	r3, [r2, #84]	@ 0x54
9000720c:	e003      	b.n	90007216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000720e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007212:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90007216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000721a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000721e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90007222:	673b      	str	r3, [r7, #112]	@ 0x70
90007224:	2300      	movs	r3, #0
90007226:	677b      	str	r3, [r7, #116]	@ 0x74
90007228:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
9000722c:	460b      	mov	r3, r1
9000722e:	4313      	orrs	r3, r2
90007230:	d034      	beq.n	9000729c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007238:	2b00      	cmp	r3, #0
9000723a:	d003      	beq.n	90007244 <HAL_RCCEx_PeriphCLKConfig+0x102c>
9000723c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90007240:	d007      	beq.n	90007252 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90007242:	e011      	b.n	90007268 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007244:	4b12      	ldr	r3, [pc, #72]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90007246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007248:	4a11      	ldr	r2, [pc, #68]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000724a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000724e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90007250:	e00e      	b.n	90007270 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007256:	3308      	adds	r3, #8
90007258:	2102      	movs	r1, #2
9000725a:	4618      	mov	r0, r3
9000725c:	f000 fca4 	bl	90007ba8 <RCCEx_PLL2_Config>
90007260:	4603      	mov	r3, r0
90007262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90007266:	e003      	b.n	90007270 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90007268:	2301      	movs	r3, #1
9000726a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000726e:	bf00      	nop
    }

    if (ret == HAL_OK)
90007270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007274:	2b00      	cmp	r3, #0
90007276:	d10d      	bne.n	90007294 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90007278:	4b05      	ldr	r3, [pc, #20]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000727a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000727c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007286:	4a02      	ldr	r2, [pc, #8]	@ (90007290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90007288:	430b      	orrs	r3, r1
9000728a:	64d3      	str	r3, [r2, #76]	@ 0x4c
9000728c:	e006      	b.n	9000729c <HAL_RCCEx_PeriphCLKConfig+0x1084>
9000728e:	bf00      	nop
90007290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90007294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
900072a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
900072a8:	66bb      	str	r3, [r7, #104]	@ 0x68
900072aa:	2300      	movs	r3, #0
900072ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
900072ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
900072b2:	460b      	mov	r3, r1
900072b4:	4313      	orrs	r3, r2
900072b6:	d00c      	beq.n	900072d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900072b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900072bc:	3328      	adds	r3, #40	@ 0x28
900072be:	2102      	movs	r1, #2
900072c0:	4618      	mov	r0, r3
900072c2:	f000 fd23 	bl	90007d0c <RCCEx_PLL3_Config>
900072c6:	4603      	mov	r3, r0
900072c8:	2b00      	cmp	r3, #0
900072ca:	d002      	beq.n	900072d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
900072cc:	2301      	movs	r3, #1
900072ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
900072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
900072da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
900072de:	663b      	str	r3, [r7, #96]	@ 0x60
900072e0:	2300      	movs	r3, #0
900072e2:	667b      	str	r3, [r7, #100]	@ 0x64
900072e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
900072e8:	460b      	mov	r3, r1
900072ea:	4313      	orrs	r3, r2
900072ec:	d038      	beq.n	90007360 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
900072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900072f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
900072f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
900072fa:	d018      	beq.n	9000732e <HAL_RCCEx_PeriphCLKConfig+0x1116>
900072fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90007300:	d811      	bhi.n	90007326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90007302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90007306:	d014      	beq.n	90007332 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90007308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000730c:	d80b      	bhi.n	90007326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
9000730e:	2b00      	cmp	r3, #0
90007310:	d011      	beq.n	90007336 <HAL_RCCEx_PeriphCLKConfig+0x111e>
90007312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007316:	d106      	bne.n	90007326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007318:	4bc3      	ldr	r3, [pc, #780]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000731c:	4ac2      	ldr	r2, [pc, #776]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000731e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90007324:	e008      	b.n	90007338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007326:	2301      	movs	r3, #1
90007328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000732c:	e004      	b.n	90007338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000732e:	bf00      	nop
90007330:	e002      	b.n	90007338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90007332:	bf00      	nop
90007334:	e000      	b.n	90007338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90007336:	bf00      	nop
    }

    if (ret == HAL_OK)
90007338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000733c:	2b00      	cmp	r3, #0
9000733e:	d10b      	bne.n	90007358 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90007340:	4bb9      	ldr	r3, [pc, #740]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90007342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90007344:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90007348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000734c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90007350:	4ab5      	ldr	r2, [pc, #724]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90007352:	430b      	orrs	r3, r1
90007354:	6553      	str	r3, [r2, #84]	@ 0x54
90007356:	e003      	b.n	90007360 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000735c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007364:	e9d3 2300 	ldrd	r2, r3, [r3]
90007368:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
9000736c:	65bb      	str	r3, [r7, #88]	@ 0x58
9000736e:	2300      	movs	r3, #0
90007370:	65fb      	str	r3, [r7, #92]	@ 0x5c
90007372:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90007376:	460b      	mov	r3, r1
90007378:	4313      	orrs	r3, r2
9000737a:	d009      	beq.n	90007390 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000737c:	4baa      	ldr	r3, [pc, #680]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000737e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007380:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
9000738a:	4aa7      	ldr	r2, [pc, #668]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000738c:	430b      	orrs	r3, r1
9000738e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007394:	e9d3 2300 	ldrd	r2, r3, [r3]
90007398:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
9000739c:	653b      	str	r3, [r7, #80]	@ 0x50
9000739e:	2300      	movs	r3, #0
900073a0:	657b      	str	r3, [r7, #84]	@ 0x54
900073a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
900073a6:	460b      	mov	r3, r1
900073a8:	4313      	orrs	r3, r2
900073aa:	d00a      	beq.n	900073c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
900073ac:	4b9e      	ldr	r3, [pc, #632]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900073ae:	691b      	ldr	r3, [r3, #16]
900073b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
900073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900073b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
900073bc:	4a9a      	ldr	r2, [pc, #616]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900073be:	430b      	orrs	r3, r1
900073c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
900073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
900073ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
900073ce:	64bb      	str	r3, [r7, #72]	@ 0x48
900073d0:	2300      	movs	r3, #0
900073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
900073d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
900073d8:	460b      	mov	r3, r1
900073da:	4313      	orrs	r3, r2
900073dc:	d009      	beq.n	900073f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
900073de:	4b92      	ldr	r3, [pc, #584]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900073e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900073e2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
900073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900073ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
900073ec:	4a8e      	ldr	r2, [pc, #568]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900073ee:	430b      	orrs	r3, r1
900073f0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
900073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
900073fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
900073fe:	643b      	str	r3, [r7, #64]	@ 0x40
90007400:	2300      	movs	r3, #0
90007402:	647b      	str	r3, [r7, #68]	@ 0x44
90007404:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90007408:	460b      	mov	r3, r1
9000740a:	4313      	orrs	r3, r2
9000740c:	d00e      	beq.n	9000742c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000740e:	4b86      	ldr	r3, [pc, #536]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90007410:	691b      	ldr	r3, [r3, #16]
90007412:	4a85      	ldr	r2, [pc, #532]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90007414:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90007418:	6113      	str	r3, [r2, #16]
9000741a:	4b83      	ldr	r3, [pc, #524]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000741c:	6919      	ldr	r1, [r3, #16]
9000741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007422:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90007426:	4a80      	ldr	r2, [pc, #512]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90007428:	430b      	orrs	r3, r1
9000742a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007430:	e9d3 2300 	ldrd	r2, r3, [r3]
90007434:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90007438:	63bb      	str	r3, [r7, #56]	@ 0x38
9000743a:	2300      	movs	r3, #0
9000743c:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000743e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90007442:	460b      	mov	r3, r1
90007444:	4313      	orrs	r3, r2
90007446:	d009      	beq.n	9000745c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90007448:	4b77      	ldr	r3, [pc, #476]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000744a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000744c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90007456:	4a74      	ldr	r2, [pc, #464]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90007458:	430b      	orrs	r3, r1
9000745a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000745c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007460:	e9d3 2300 	ldrd	r2, r3, [r3]
90007464:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90007468:	633b      	str	r3, [r7, #48]	@ 0x30
9000746a:	2300      	movs	r3, #0
9000746c:	637b      	str	r3, [r7, #52]	@ 0x34
9000746e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90007472:	460b      	mov	r3, r1
90007474:	4313      	orrs	r3, r2
90007476:	d00a      	beq.n	9000748e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90007478:	4b6b      	ldr	r3, [pc, #428]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000747a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000747c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90007488:	4a67      	ldr	r2, [pc, #412]	@ (90007628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000748a:	430b      	orrs	r3, r1
9000748c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007492:	e9d3 2300 	ldrd	r2, r3, [r3]
90007496:	2100      	movs	r1, #0
90007498:	62b9      	str	r1, [r7, #40]	@ 0x28
9000749a:	f003 0301 	and.w	r3, r3, #1
9000749e:	62fb      	str	r3, [r7, #44]	@ 0x2c
900074a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
900074a4:	460b      	mov	r3, r1
900074a6:	4313      	orrs	r3, r2
900074a8:	d011      	beq.n	900074ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900074aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900074ae:	3308      	adds	r3, #8
900074b0:	2100      	movs	r1, #0
900074b2:	4618      	mov	r0, r3
900074b4:	f000 fb78 	bl	90007ba8 <RCCEx_PLL2_Config>
900074b8:	4603      	mov	r3, r0
900074ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900074be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900074c2:	2b00      	cmp	r3, #0
900074c4:	d003      	beq.n	900074ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900074c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900074ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
900074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
900074d6:	2100      	movs	r1, #0
900074d8:	6239      	str	r1, [r7, #32]
900074da:	f003 0302 	and.w	r3, r3, #2
900074de:	627b      	str	r3, [r7, #36]	@ 0x24
900074e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
900074e4:	460b      	mov	r3, r1
900074e6:	4313      	orrs	r3, r2
900074e8:	d011      	beq.n	9000750e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900074ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900074ee:	3308      	adds	r3, #8
900074f0:	2101      	movs	r1, #1
900074f2:	4618      	mov	r0, r3
900074f4:	f000 fb58 	bl	90007ba8 <RCCEx_PLL2_Config>
900074f8:	4603      	mov	r3, r0
900074fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900074fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007502:	2b00      	cmp	r3, #0
90007504:	d003      	beq.n	9000750e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90007506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000750a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007512:	e9d3 2300 	ldrd	r2, r3, [r3]
90007516:	2100      	movs	r1, #0
90007518:	61b9      	str	r1, [r7, #24]
9000751a:	f003 0304 	and.w	r3, r3, #4
9000751e:	61fb      	str	r3, [r7, #28]
90007520:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90007524:	460b      	mov	r3, r1
90007526:	4313      	orrs	r3, r2
90007528:	d011      	beq.n	9000754e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000752e:	3308      	adds	r3, #8
90007530:	2102      	movs	r1, #2
90007532:	4618      	mov	r0, r3
90007534:	f000 fb38 	bl	90007ba8 <RCCEx_PLL2_Config>
90007538:	4603      	mov	r3, r0
9000753a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000753e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007542:	2b00      	cmp	r3, #0
90007544:	d003      	beq.n	9000754e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90007546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000754a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007552:	e9d3 2300 	ldrd	r2, r3, [r3]
90007556:	2100      	movs	r1, #0
90007558:	6139      	str	r1, [r7, #16]
9000755a:	f003 0308 	and.w	r3, r3, #8
9000755e:	617b      	str	r3, [r7, #20]
90007560:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90007564:	460b      	mov	r3, r1
90007566:	4313      	orrs	r3, r2
90007568:	d011      	beq.n	9000758e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000756e:	3328      	adds	r3, #40	@ 0x28
90007570:	2100      	movs	r1, #0
90007572:	4618      	mov	r0, r3
90007574:	f000 fbca 	bl	90007d0c <RCCEx_PLL3_Config>
90007578:	4603      	mov	r3, r0
9000757a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
9000757e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007582:	2b00      	cmp	r3, #0
90007584:	d003      	beq.n	9000758e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90007586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000758a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007592:	e9d3 2300 	ldrd	r2, r3, [r3]
90007596:	2100      	movs	r1, #0
90007598:	60b9      	str	r1, [r7, #8]
9000759a:	f003 0310 	and.w	r3, r3, #16
9000759e:	60fb      	str	r3, [r7, #12]
900075a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
900075a4:	460b      	mov	r3, r1
900075a6:	4313      	orrs	r3, r2
900075a8:	d011      	beq.n	900075ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900075ae:	3328      	adds	r3, #40	@ 0x28
900075b0:	2101      	movs	r1, #1
900075b2:	4618      	mov	r0, r3
900075b4:	f000 fbaa 	bl	90007d0c <RCCEx_PLL3_Config>
900075b8:	4603      	mov	r3, r0
900075ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900075be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900075c2:	2b00      	cmp	r3, #0
900075c4:	d003      	beq.n	900075ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900075c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900075ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
900075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
900075d6:	2100      	movs	r1, #0
900075d8:	6039      	str	r1, [r7, #0]
900075da:	f003 0320 	and.w	r3, r3, #32
900075de:	607b      	str	r3, [r7, #4]
900075e0:	e9d7 1200 	ldrd	r1, r2, [r7]
900075e4:	460b      	mov	r3, r1
900075e6:	4313      	orrs	r3, r2
900075e8:	d011      	beq.n	9000760e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900075ee:	3328      	adds	r3, #40	@ 0x28
900075f0:	2102      	movs	r1, #2
900075f2:	4618      	mov	r0, r3
900075f4:	f000 fb8a 	bl	90007d0c <RCCEx_PLL3_Config>
900075f8:	4603      	mov	r3, r0
900075fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900075fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007602:	2b00      	cmp	r3, #0
90007604:	d003      	beq.n	9000760e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90007606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000760a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
9000760e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90007612:	2b00      	cmp	r3, #0
90007614:	d101      	bne.n	9000761a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90007616:	2300      	movs	r3, #0
90007618:	e000      	b.n	9000761c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
9000761a:	2301      	movs	r3, #1
}
9000761c:	4618      	mov	r0, r3
9000761e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90007622:	46bd      	mov	sp, r7
90007624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90007628:	58024400 	.word	0x58024400

9000762c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
9000762c:	b580      	push	{r7, lr}
9000762e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90007630:	f7fe fd96 	bl	90006160 <HAL_RCC_GetHCLKFreq>
90007634:	4602      	mov	r2, r0
90007636:	4b06      	ldr	r3, [pc, #24]	@ (90007650 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90007638:	6a1b      	ldr	r3, [r3, #32]
9000763a:	091b      	lsrs	r3, r3, #4
9000763c:	f003 0307 	and.w	r3, r3, #7
90007640:	4904      	ldr	r1, [pc, #16]	@ (90007654 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90007642:	5ccb      	ldrb	r3, [r1, r3]
90007644:	f003 031f 	and.w	r3, r3, #31
90007648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
9000764c:	4618      	mov	r0, r3
9000764e:	bd80      	pop	{r7, pc}
90007650:	58024400 	.word	0x58024400
90007654:	9000c1d0 	.word	0x9000c1d0

90007658 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90007658:	b480      	push	{r7}
9000765a:	b089      	sub	sp, #36	@ 0x24
9000765c:	af00      	add	r7, sp, #0
9000765e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90007660:	4ba1      	ldr	r3, [pc, #644]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90007662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007664:	f003 0303 	and.w	r3, r3, #3
90007668:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000766a:	4b9f      	ldr	r3, [pc, #636]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000766e:	0b1b      	lsrs	r3, r3, #12
90007670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90007674:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90007676:	4b9c      	ldr	r3, [pc, #624]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000767a:	091b      	lsrs	r3, r3, #4
9000767c:	f003 0301 	and.w	r3, r3, #1
90007680:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90007682:	4b99      	ldr	r3, [pc, #612]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90007684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007686:	08db      	lsrs	r3, r3, #3
90007688:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000768c:	693a      	ldr	r2, [r7, #16]
9000768e:	fb02 f303 	mul.w	r3, r2, r3
90007692:	ee07 3a90 	vmov	s15, r3
90007696:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000769a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
9000769e:	697b      	ldr	r3, [r7, #20]
900076a0:	2b00      	cmp	r3, #0
900076a2:	f000 8111 	beq.w	900078c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
900076a6:	69bb      	ldr	r3, [r7, #24]
900076a8:	2b02      	cmp	r3, #2
900076aa:	f000 8083 	beq.w	900077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
900076ae:	69bb      	ldr	r3, [r7, #24]
900076b0:	2b02      	cmp	r3, #2
900076b2:	f200 80a1 	bhi.w	900077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
900076b6:	69bb      	ldr	r3, [r7, #24]
900076b8:	2b00      	cmp	r3, #0
900076ba:	d003      	beq.n	900076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
900076bc:	69bb      	ldr	r3, [r7, #24]
900076be:	2b01      	cmp	r3, #1
900076c0:	d056      	beq.n	90007770 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
900076c2:	e099      	b.n	900077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900076c4:	4b88      	ldr	r3, [pc, #544]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900076c6:	681b      	ldr	r3, [r3, #0]
900076c8:	f003 0320 	and.w	r3, r3, #32
900076cc:	2b00      	cmp	r3, #0
900076ce:	d02d      	beq.n	9000772c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900076d0:	4b85      	ldr	r3, [pc, #532]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900076d2:	681b      	ldr	r3, [r3, #0]
900076d4:	08db      	lsrs	r3, r3, #3
900076d6:	f003 0303 	and.w	r3, r3, #3
900076da:	4a84      	ldr	r2, [pc, #528]	@ (900078ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
900076dc:	fa22 f303 	lsr.w	r3, r2, r3
900076e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900076e2:	68bb      	ldr	r3, [r7, #8]
900076e4:	ee07 3a90 	vmov	s15, r3
900076e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900076ec:	697b      	ldr	r3, [r7, #20]
900076ee:	ee07 3a90 	vmov	s15, r3
900076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900076f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900076fa:	4b7b      	ldr	r3, [pc, #492]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900076fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007702:	ee07 3a90 	vmov	s15, r3
90007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000770a:	ed97 6a03 	vldr	s12, [r7, #12]
9000770e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900078f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90007712:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007716:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000771a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007722:	ee67 7a27 	vmul.f32	s15, s14, s15
90007726:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
9000772a:	e087      	b.n	9000783c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000772c:	697b      	ldr	r3, [r7, #20]
9000772e:	ee07 3a90 	vmov	s15, r3
90007732:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007736:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
9000773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000773e:	4b6a      	ldr	r3, [pc, #424]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90007740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007746:	ee07 3a90 	vmov	s15, r3
9000774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000774e:	ed97 6a03 	vldr	s12, [r7, #12]
90007752:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900078f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000775e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007766:	ee67 7a27 	vmul.f32	s15, s14, s15
9000776a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000776e:	e065      	b.n	9000783c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90007770:	697b      	ldr	r3, [r7, #20]
90007772:	ee07 3a90 	vmov	s15, r3
90007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000777a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007782:	4b59      	ldr	r3, [pc, #356]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000778a:	ee07 3a90 	vmov	s15, r3
9000778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007792:	ed97 6a03 	vldr	s12, [r7, #12]
90007796:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900078f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
900077a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
900077ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900077b2:	e043      	b.n	9000783c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900077b4:	697b      	ldr	r3, [r7, #20]
900077b6:	ee07 3a90 	vmov	s15, r3
900077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
900077be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900078fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
900077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900077c6:	4b48      	ldr	r3, [pc, #288]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
900077ce:	ee07 3a90 	vmov	s15, r3
900077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900077d6:	ed97 6a03 	vldr	s12, [r7, #12]
900077da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900078f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
900077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900077e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
900077f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900077f6:	e021      	b.n	9000783c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900077f8:	697b      	ldr	r3, [r7, #20]
900077fa:	ee07 3a90 	vmov	s15, r3
900077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007802:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000780a:	4b37      	ldr	r3, [pc, #220]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000780c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007812:	ee07 3a90 	vmov	s15, r3
90007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000781a:	ed97 6a03 	vldr	s12, [r7, #12]
9000781e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900078f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000782a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007832:	ee67 7a27 	vmul.f32	s15, s14, s15
90007836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000783a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000783c:	4b2a      	ldr	r3, [pc, #168]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000783e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007840:	0a5b      	lsrs	r3, r3, #9
90007842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007846:	ee07 3a90 	vmov	s15, r3
9000784a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000784e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90007852:	ee37 7a87 	vadd.f32	s14, s15, s14
90007856:	edd7 6a07 	vldr	s13, [r7, #28]
9000785a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000785e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007862:	ee17 2a90 	vmov	r2, s15
90007866:	687b      	ldr	r3, [r7, #4]
90007868:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000786a:	4b1f      	ldr	r3, [pc, #124]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000786e:	0c1b      	lsrs	r3, r3, #16
90007870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007874:	ee07 3a90 	vmov	s15, r3
90007878:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000787c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90007880:	ee37 7a87 	vadd.f32	s14, s15, s14
90007884:	edd7 6a07 	vldr	s13, [r7, #28]
90007888:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000788c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007890:	ee17 2a90 	vmov	r2, s15
90007894:	687b      	ldr	r3, [r7, #4]
90007896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90007898:	4b13      	ldr	r3, [pc, #76]	@ (900078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000789c:	0e1b      	lsrs	r3, r3, #24
9000789e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900078a2:	ee07 3a90 	vmov	s15, r3
900078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900078aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900078ae:	ee37 7a87 	vadd.f32	s14, s15, s14
900078b2:	edd7 6a07 	vldr	s13, [r7, #28]
900078b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
900078ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900078be:	ee17 2a90 	vmov	r2, s15
900078c2:	687b      	ldr	r3, [r7, #4]
900078c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
900078c6:	e008      	b.n	900078da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900078c8:	687b      	ldr	r3, [r7, #4]
900078ca:	2200      	movs	r2, #0
900078cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
900078ce:	687b      	ldr	r3, [r7, #4]
900078d0:	2200      	movs	r2, #0
900078d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
900078d4:	687b      	ldr	r3, [r7, #4]
900078d6:	2200      	movs	r2, #0
900078d8:	609a      	str	r2, [r3, #8]
}
900078da:	bf00      	nop
900078dc:	3724      	adds	r7, #36	@ 0x24
900078de:	46bd      	mov	sp, r7
900078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900078e4:	4770      	bx	lr
900078e6:	bf00      	nop
900078e8:	58024400 	.word	0x58024400
900078ec:	03d09000 	.word	0x03d09000
900078f0:	46000000 	.word	0x46000000
900078f4:	4c742400 	.word	0x4c742400
900078f8:	4a742400 	.word	0x4a742400
900078fc:	4bbebc20 	.word	0x4bbebc20

90007900 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
90007900:	b480      	push	{r7}
90007902:	b089      	sub	sp, #36	@ 0x24
90007904:	af00      	add	r7, sp, #0
90007906:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90007908:	4ba1      	ldr	r3, [pc, #644]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000790a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000790c:	f003 0303 	and.w	r3, r3, #3
90007910:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
90007912:	4b9f      	ldr	r3, [pc, #636]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90007914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007916:	0d1b      	lsrs	r3, r3, #20
90007918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000791c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000791e:	4b9c      	ldr	r3, [pc, #624]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90007920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007922:	0a1b      	lsrs	r3, r3, #8
90007924:	f003 0301 	and.w	r3, r3, #1
90007928:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000792a:	4b99      	ldr	r3, [pc, #612]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000792c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000792e:	08db      	lsrs	r3, r3, #3
90007930:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007934:	693a      	ldr	r2, [r7, #16]
90007936:	fb02 f303 	mul.w	r3, r2, r3
9000793a:	ee07 3a90 	vmov	s15, r3
9000793e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90007946:	697b      	ldr	r3, [r7, #20]
90007948:	2b00      	cmp	r3, #0
9000794a:	f000 8111 	beq.w	90007b70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
9000794e:	69bb      	ldr	r3, [r7, #24]
90007950:	2b02      	cmp	r3, #2
90007952:	f000 8083 	beq.w	90007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90007956:	69bb      	ldr	r3, [r7, #24]
90007958:	2b02      	cmp	r3, #2
9000795a:	f200 80a1 	bhi.w	90007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
9000795e:	69bb      	ldr	r3, [r7, #24]
90007960:	2b00      	cmp	r3, #0
90007962:	d003      	beq.n	9000796c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90007964:	69bb      	ldr	r3, [r7, #24]
90007966:	2b01      	cmp	r3, #1
90007968:	d056      	beq.n	90007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
9000796a:	e099      	b.n	90007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000796c:	4b88      	ldr	r3, [pc, #544]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000796e:	681b      	ldr	r3, [r3, #0]
90007970:	f003 0320 	and.w	r3, r3, #32
90007974:	2b00      	cmp	r3, #0
90007976:	d02d      	beq.n	900079d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007978:	4b85      	ldr	r3, [pc, #532]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000797a:	681b      	ldr	r3, [r3, #0]
9000797c:	08db      	lsrs	r3, r3, #3
9000797e:	f003 0303 	and.w	r3, r3, #3
90007982:	4a84      	ldr	r2, [pc, #528]	@ (90007b94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90007984:	fa22 f303 	lsr.w	r3, r2, r3
90007988:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000798a:	68bb      	ldr	r3, [r7, #8]
9000798c:	ee07 3a90 	vmov	s15, r3
90007990:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007994:	697b      	ldr	r3, [r7, #20]
90007996:	ee07 3a90 	vmov	s15, r3
9000799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000799e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079a2:	4b7b      	ldr	r3, [pc, #492]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079aa:	ee07 3a90 	vmov	s15, r3
900079ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079b2:	ed97 6a03 	vldr	s12, [r7, #12]
900079b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90007b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900079ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079be:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900079c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
900079ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
900079d2:	e087      	b.n	90007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900079d4:	697b      	ldr	r3, [r7, #20]
900079d6:	ee07 3a90 	vmov	s15, r3
900079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
900079e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079e6:	4b6a      	ldr	r3, [pc, #424]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900079e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079ee:	ee07 3a90 	vmov	s15, r3
900079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079f6:	ed97 6a03 	vldr	s12, [r7, #12]
900079fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90007b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900079fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90007a16:	e065      	b.n	90007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90007a18:	697b      	ldr	r3, [r7, #20]
90007a1a:	ee07 3a90 	vmov	s15, r3
90007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90007a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a2a:	4b59      	ldr	r3, [pc, #356]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90007a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a32:	ee07 3a90 	vmov	s15, r3
90007a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a3a:	ed97 6a03 	vldr	s12, [r7, #12]
90007a3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90007b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90007a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90007a5a:	e043      	b.n	90007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90007a5c:	697b      	ldr	r3, [r7, #20]
90007a5e:	ee07 3a90 	vmov	s15, r3
90007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90007ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90007a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a6e:	4b48      	ldr	r3, [pc, #288]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90007a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a76:	ee07 3a90 	vmov	s15, r3
90007a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a7e:	ed97 6a03 	vldr	s12, [r7, #12]
90007a82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90007b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90007a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a96:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90007a9e:	e021      	b.n	90007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90007aa0:	697b      	ldr	r3, [r7, #20]
90007aa2:	ee07 3a90 	vmov	s15, r3
90007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007aaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90007aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007ab2:	4b37      	ldr	r3, [pc, #220]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90007ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007aba:	ee07 3a90 	vmov	s15, r3
90007abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007ac2:	ed97 6a03 	vldr	s12, [r7, #12]
90007ac6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90007b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90007aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007ada:	ee67 7a27 	vmul.f32	s15, s14, s15
90007ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90007ae2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
90007ae4:	4b2a      	ldr	r3, [pc, #168]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90007ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007ae8:	0a5b      	lsrs	r3, r3, #9
90007aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007aee:	ee07 3a90 	vmov	s15, r3
90007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007af6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90007afa:	ee37 7a87 	vadd.f32	s14, s15, s14
90007afe:	edd7 6a07 	vldr	s13, [r7, #28]
90007b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007b0a:	ee17 2a90 	vmov	r2, s15
90007b0e:	687b      	ldr	r3, [r7, #4]
90007b10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
90007b12:	4b1f      	ldr	r3, [pc, #124]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90007b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007b16:	0c1b      	lsrs	r3, r3, #16
90007b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007b1c:	ee07 3a90 	vmov	s15, r3
90007b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007b24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90007b28:	ee37 7a87 	vadd.f32	s14, s15, s14
90007b2c:	edd7 6a07 	vldr	s13, [r7, #28]
90007b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007b38:	ee17 2a90 	vmov	r2, s15
90007b3c:	687b      	ldr	r3, [r7, #4]
90007b3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90007b40:	4b13      	ldr	r3, [pc, #76]	@ (90007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90007b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007b44:	0e1b      	lsrs	r3, r3, #24
90007b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007b4a:	ee07 3a90 	vmov	s15, r3
90007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90007b56:	ee37 7a87 	vadd.f32	s14, s15, s14
90007b5a:	edd7 6a07 	vldr	s13, [r7, #28]
90007b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007b66:	ee17 2a90 	vmov	r2, s15
90007b6a:	687b      	ldr	r3, [r7, #4]
90007b6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90007b6e:	e008      	b.n	90007b82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90007b70:	687b      	ldr	r3, [r7, #4]
90007b72:	2200      	movs	r2, #0
90007b74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90007b76:	687b      	ldr	r3, [r7, #4]
90007b78:	2200      	movs	r2, #0
90007b7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90007b7c:	687b      	ldr	r3, [r7, #4]
90007b7e:	2200      	movs	r2, #0
90007b80:	609a      	str	r2, [r3, #8]
}
90007b82:	bf00      	nop
90007b84:	3724      	adds	r7, #36	@ 0x24
90007b86:	46bd      	mov	sp, r7
90007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
90007b8c:	4770      	bx	lr
90007b8e:	bf00      	nop
90007b90:	58024400 	.word	0x58024400
90007b94:	03d09000 	.word	0x03d09000
90007b98:	46000000 	.word	0x46000000
90007b9c:	4c742400 	.word	0x4c742400
90007ba0:	4a742400 	.word	0x4a742400
90007ba4:	4bbebc20 	.word	0x4bbebc20

90007ba8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90007ba8:	b580      	push	{r7, lr}
90007baa:	b084      	sub	sp, #16
90007bac:	af00      	add	r7, sp, #0
90007bae:	6078      	str	r0, [r7, #4]
90007bb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90007bb2:	2300      	movs	r3, #0
90007bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90007bb6:	4b53      	ldr	r3, [pc, #332]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007bba:	f003 0303 	and.w	r3, r3, #3
90007bbe:	2b03      	cmp	r3, #3
90007bc0:	d101      	bne.n	90007bc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90007bc2:	2301      	movs	r3, #1
90007bc4:	e099      	b.n	90007cfa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
90007bc6:	4b4f      	ldr	r3, [pc, #316]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007bc8:	681b      	ldr	r3, [r3, #0]
90007bca:	4a4e      	ldr	r2, [pc, #312]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007bcc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90007bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007bd2:	f7fb fc39 	bl	90003448 <HAL_GetTick>
90007bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90007bd8:	e008      	b.n	90007bec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90007bda:	f7fb fc35 	bl	90003448 <HAL_GetTick>
90007bde:	4602      	mov	r2, r0
90007be0:	68bb      	ldr	r3, [r7, #8]
90007be2:	1ad3      	subs	r3, r2, r3
90007be4:	2b02      	cmp	r3, #2
90007be6:	d901      	bls.n	90007bec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90007be8:	2303      	movs	r3, #3
90007bea:	e086      	b.n	90007cfa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90007bec:	4b45      	ldr	r3, [pc, #276]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007bee:	681b      	ldr	r3, [r3, #0]
90007bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90007bf4:	2b00      	cmp	r3, #0
90007bf6:	d1f0      	bne.n	90007bda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90007bf8:	4b42      	ldr	r3, [pc, #264]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007bfc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90007c00:	687b      	ldr	r3, [r7, #4]
90007c02:	681b      	ldr	r3, [r3, #0]
90007c04:	031b      	lsls	r3, r3, #12
90007c06:	493f      	ldr	r1, [pc, #252]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c08:	4313      	orrs	r3, r2
90007c0a:	628b      	str	r3, [r1, #40]	@ 0x28
90007c0c:	687b      	ldr	r3, [r7, #4]
90007c0e:	685b      	ldr	r3, [r3, #4]
90007c10:	3b01      	subs	r3, #1
90007c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007c16:	687b      	ldr	r3, [r7, #4]
90007c18:	689b      	ldr	r3, [r3, #8]
90007c1a:	3b01      	subs	r3, #1
90007c1c:	025b      	lsls	r3, r3, #9
90007c1e:	b29b      	uxth	r3, r3
90007c20:	431a      	orrs	r2, r3
90007c22:	687b      	ldr	r3, [r7, #4]
90007c24:	68db      	ldr	r3, [r3, #12]
90007c26:	3b01      	subs	r3, #1
90007c28:	041b      	lsls	r3, r3, #16
90007c2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90007c2e:	431a      	orrs	r2, r3
90007c30:	687b      	ldr	r3, [r7, #4]
90007c32:	691b      	ldr	r3, [r3, #16]
90007c34:	3b01      	subs	r3, #1
90007c36:	061b      	lsls	r3, r3, #24
90007c38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007c3c:	4931      	ldr	r1, [pc, #196]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c3e:	4313      	orrs	r3, r2
90007c40:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90007c42:	4b30      	ldr	r3, [pc, #192]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
90007c4a:	687b      	ldr	r3, [r7, #4]
90007c4c:	695b      	ldr	r3, [r3, #20]
90007c4e:	492d      	ldr	r1, [pc, #180]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c50:	4313      	orrs	r3, r2
90007c52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90007c54:	4b2b      	ldr	r3, [pc, #172]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c58:	f023 0220 	bic.w	r2, r3, #32
90007c5c:	687b      	ldr	r3, [r7, #4]
90007c5e:	699b      	ldr	r3, [r3, #24]
90007c60:	4928      	ldr	r1, [pc, #160]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c62:	4313      	orrs	r3, r2
90007c64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90007c66:	4b27      	ldr	r3, [pc, #156]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c6a:	4a26      	ldr	r2, [pc, #152]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c6c:	f023 0310 	bic.w	r3, r3, #16
90007c70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90007c72:	4b24      	ldr	r3, [pc, #144]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
90007c76:	4b24      	ldr	r3, [pc, #144]	@ (90007d08 <RCCEx_PLL2_Config+0x160>)
90007c78:	4013      	ands	r3, r2
90007c7a:	687a      	ldr	r2, [r7, #4]
90007c7c:	69d2      	ldr	r2, [r2, #28]
90007c7e:	00d2      	lsls	r2, r2, #3
90007c80:	4920      	ldr	r1, [pc, #128]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c82:	4313      	orrs	r3, r2
90007c84:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90007c86:	4b1f      	ldr	r3, [pc, #124]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c8a:	4a1e      	ldr	r2, [pc, #120]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c8c:	f043 0310 	orr.w	r3, r3, #16
90007c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90007c92:	683b      	ldr	r3, [r7, #0]
90007c94:	2b00      	cmp	r3, #0
90007c96:	d106      	bne.n	90007ca6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90007c98:	4b1a      	ldr	r3, [pc, #104]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c9c:	4a19      	ldr	r2, [pc, #100]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007c9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
90007ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
90007ca4:	e00f      	b.n	90007cc6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90007ca6:	683b      	ldr	r3, [r7, #0]
90007ca8:	2b01      	cmp	r3, #1
90007caa:	d106      	bne.n	90007cba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90007cac:	4b15      	ldr	r3, [pc, #84]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cb0:	4a14      	ldr	r2, [pc, #80]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
90007cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
90007cb8:	e005      	b.n	90007cc6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
90007cba:	4b12      	ldr	r3, [pc, #72]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cbe:	4a11      	ldr	r2, [pc, #68]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007cc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
90007cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
90007cc6:	4b0f      	ldr	r3, [pc, #60]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007cc8:	681b      	ldr	r3, [r3, #0]
90007cca:	4a0e      	ldr	r2, [pc, #56]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90007cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007cd2:	f7fb fbb9 	bl	90003448 <HAL_GetTick>
90007cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90007cd8:	e008      	b.n	90007cec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90007cda:	f7fb fbb5 	bl	90003448 <HAL_GetTick>
90007cde:	4602      	mov	r2, r0
90007ce0:	68bb      	ldr	r3, [r7, #8]
90007ce2:	1ad3      	subs	r3, r2, r3
90007ce4:	2b02      	cmp	r3, #2
90007ce6:	d901      	bls.n	90007cec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90007ce8:	2303      	movs	r3, #3
90007cea:	e006      	b.n	90007cfa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90007cec:	4b05      	ldr	r3, [pc, #20]	@ (90007d04 <RCCEx_PLL2_Config+0x15c>)
90007cee:	681b      	ldr	r3, [r3, #0]
90007cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90007cf4:	2b00      	cmp	r3, #0
90007cf6:	d0f0      	beq.n	90007cda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
90007cfa:	4618      	mov	r0, r3
90007cfc:	3710      	adds	r7, #16
90007cfe:	46bd      	mov	sp, r7
90007d00:	bd80      	pop	{r7, pc}
90007d02:	bf00      	nop
90007d04:	58024400 	.word	0x58024400
90007d08:	ffff0007 	.word	0xffff0007

90007d0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90007d0c:	b580      	push	{r7, lr}
90007d0e:	b084      	sub	sp, #16
90007d10:	af00      	add	r7, sp, #0
90007d12:	6078      	str	r0, [r7, #4]
90007d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90007d16:	2300      	movs	r3, #0
90007d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90007d1a:	4b53      	ldr	r3, [pc, #332]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007d1e:	f003 0303 	and.w	r3, r3, #3
90007d22:	2b03      	cmp	r3, #3
90007d24:	d101      	bne.n	90007d2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90007d26:	2301      	movs	r3, #1
90007d28:	e099      	b.n	90007e5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
90007d2a:	4b4f      	ldr	r3, [pc, #316]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007d2c:	681b      	ldr	r3, [r3, #0]
90007d2e:	4a4e      	ldr	r2, [pc, #312]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
90007d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007d36:	f7fb fb87 	bl	90003448 <HAL_GetTick>
90007d3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90007d3c:	e008      	b.n	90007d50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90007d3e:	f7fb fb83 	bl	90003448 <HAL_GetTick>
90007d42:	4602      	mov	r2, r0
90007d44:	68bb      	ldr	r3, [r7, #8]
90007d46:	1ad3      	subs	r3, r2, r3
90007d48:	2b02      	cmp	r3, #2
90007d4a:	d901      	bls.n	90007d50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90007d4c:	2303      	movs	r3, #3
90007d4e:	e086      	b.n	90007e5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90007d50:	4b45      	ldr	r3, [pc, #276]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007d52:	681b      	ldr	r3, [r3, #0]
90007d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90007d58:	2b00      	cmp	r3, #0
90007d5a:	d1f0      	bne.n	90007d3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90007d5c:	4b42      	ldr	r3, [pc, #264]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007d60:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
90007d64:	687b      	ldr	r3, [r7, #4]
90007d66:	681b      	ldr	r3, [r3, #0]
90007d68:	051b      	lsls	r3, r3, #20
90007d6a:	493f      	ldr	r1, [pc, #252]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007d6c:	4313      	orrs	r3, r2
90007d6e:	628b      	str	r3, [r1, #40]	@ 0x28
90007d70:	687b      	ldr	r3, [r7, #4]
90007d72:	685b      	ldr	r3, [r3, #4]
90007d74:	3b01      	subs	r3, #1
90007d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007d7a:	687b      	ldr	r3, [r7, #4]
90007d7c:	689b      	ldr	r3, [r3, #8]
90007d7e:	3b01      	subs	r3, #1
90007d80:	025b      	lsls	r3, r3, #9
90007d82:	b29b      	uxth	r3, r3
90007d84:	431a      	orrs	r2, r3
90007d86:	687b      	ldr	r3, [r7, #4]
90007d88:	68db      	ldr	r3, [r3, #12]
90007d8a:	3b01      	subs	r3, #1
90007d8c:	041b      	lsls	r3, r3, #16
90007d8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90007d92:	431a      	orrs	r2, r3
90007d94:	687b      	ldr	r3, [r7, #4]
90007d96:	691b      	ldr	r3, [r3, #16]
90007d98:	3b01      	subs	r3, #1
90007d9a:	061b      	lsls	r3, r3, #24
90007d9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007da0:	4931      	ldr	r1, [pc, #196]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007da2:	4313      	orrs	r3, r2
90007da4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
90007da6:	4b30      	ldr	r3, [pc, #192]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007daa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
90007dae:	687b      	ldr	r3, [r7, #4]
90007db0:	695b      	ldr	r3, [r3, #20]
90007db2:	492d      	ldr	r1, [pc, #180]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007db4:	4313      	orrs	r3, r2
90007db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90007db8:	4b2b      	ldr	r3, [pc, #172]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007dbc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
90007dc0:	687b      	ldr	r3, [r7, #4]
90007dc2:	699b      	ldr	r3, [r3, #24]
90007dc4:	4928      	ldr	r1, [pc, #160]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007dc6:	4313      	orrs	r3, r2
90007dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
90007dca:	4b27      	ldr	r3, [pc, #156]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007dce:	4a26      	ldr	r2, [pc, #152]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
90007dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
90007dd6:	4b24      	ldr	r3, [pc, #144]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90007dda:	4b24      	ldr	r3, [pc, #144]	@ (90007e6c <RCCEx_PLL3_Config+0x160>)
90007ddc:	4013      	ands	r3, r2
90007dde:	687a      	ldr	r2, [r7, #4]
90007de0:	69d2      	ldr	r2, [r2, #28]
90007de2:	00d2      	lsls	r2, r2, #3
90007de4:	4920      	ldr	r1, [pc, #128]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007de6:	4313      	orrs	r3, r2
90007de8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
90007dea:	4b1f      	ldr	r3, [pc, #124]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007dee:	4a1e      	ldr	r2, [pc, #120]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90007df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90007df6:	683b      	ldr	r3, [r7, #0]
90007df8:	2b00      	cmp	r3, #0
90007dfa:	d106      	bne.n	90007e0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90007dfc:	4b1a      	ldr	r3, [pc, #104]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e00:	4a19      	ldr	r2, [pc, #100]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007e02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
90007e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
90007e08:	e00f      	b.n	90007e2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90007e0a:	683b      	ldr	r3, [r7, #0]
90007e0c:	2b01      	cmp	r3, #1
90007e0e:	d106      	bne.n	90007e1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90007e10:	4b15      	ldr	r3, [pc, #84]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e14:	4a14      	ldr	r2, [pc, #80]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007e16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
90007e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
90007e1c:	e005      	b.n	90007e2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90007e1e:	4b12      	ldr	r3, [pc, #72]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e22:	4a11      	ldr	r2, [pc, #68]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007e24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90007e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90007e2a:	4b0f      	ldr	r3, [pc, #60]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007e2c:	681b      	ldr	r3, [r3, #0]
90007e2e:	4a0e      	ldr	r2, [pc, #56]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
90007e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007e36:	f7fb fb07 	bl	90003448 <HAL_GetTick>
90007e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90007e3c:	e008      	b.n	90007e50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90007e3e:	f7fb fb03 	bl	90003448 <HAL_GetTick>
90007e42:	4602      	mov	r2, r0
90007e44:	68bb      	ldr	r3, [r7, #8]
90007e46:	1ad3      	subs	r3, r2, r3
90007e48:	2b02      	cmp	r3, #2
90007e4a:	d901      	bls.n	90007e50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90007e4c:	2303      	movs	r3, #3
90007e4e:	e006      	b.n	90007e5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90007e50:	4b05      	ldr	r3, [pc, #20]	@ (90007e68 <RCCEx_PLL3_Config+0x15c>)
90007e52:	681b      	ldr	r3, [r3, #0]
90007e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90007e58:	2b00      	cmp	r3, #0
90007e5a:	d0f0      	beq.n	90007e3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90007e5c:	7bfb      	ldrb	r3, [r7, #15]
}
90007e5e:	4618      	mov	r0, r3
90007e60:	3710      	adds	r7, #16
90007e62:	46bd      	mov	sp, r7
90007e64:	bd80      	pop	{r7, pc}
90007e66:	bf00      	nop
90007e68:	58024400 	.word	0x58024400
90007e6c:	ffff0007 	.word	0xffff0007

90007e70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90007e70:	b580      	push	{r7, lr}
90007e72:	b082      	sub	sp, #8
90007e74:	af00      	add	r7, sp, #0
90007e76:	6078      	str	r0, [r7, #4]
90007e78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
90007e7a:	687b      	ldr	r3, [r7, #4]
90007e7c:	2b00      	cmp	r3, #0
90007e7e:	d101      	bne.n	90007e84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90007e80:	2301      	movs	r3, #1
90007e82:	e02b      	b.n	90007edc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
90007e84:	687b      	ldr	r3, [r7, #4]
90007e86:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90007e8a:	b2db      	uxtb	r3, r3
90007e8c:	2b00      	cmp	r3, #0
90007e8e:	d106      	bne.n	90007e9e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90007e90:	687b      	ldr	r3, [r7, #4]
90007e92:	2200      	movs	r2, #0
90007e94:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90007e98:	6878      	ldr	r0, [r7, #4]
90007e9a:	f000 f825 	bl	90007ee8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90007e9e:	687b      	ldr	r3, [r7, #4]
90007ea0:	2202      	movs	r2, #2
90007ea2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90007ea6:	687b      	ldr	r3, [r7, #4]
90007ea8:	681a      	ldr	r2, [r3, #0]
90007eaa:	687b      	ldr	r3, [r7, #4]
90007eac:	3304      	adds	r3, #4
90007eae:	4619      	mov	r1, r3
90007eb0:	4610      	mov	r0, r2
90007eb2:	f002 f905 	bl	9000a0c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
90007eb6:	687b      	ldr	r3, [r7, #4]
90007eb8:	6818      	ldr	r0, [r3, #0]
90007eba:	687b      	ldr	r3, [r7, #4]
90007ebc:	685b      	ldr	r3, [r3, #4]
90007ebe:	461a      	mov	r2, r3
90007ec0:	6839      	ldr	r1, [r7, #0]
90007ec2:	f002 f959 	bl	9000a178 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
90007ec6:	4b07      	ldr	r3, [pc, #28]	@ (90007ee4 <HAL_SDRAM_Init+0x74>)
90007ec8:	681b      	ldr	r3, [r3, #0]
90007eca:	4a06      	ldr	r2, [pc, #24]	@ (90007ee4 <HAL_SDRAM_Init+0x74>)
90007ecc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90007ed0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90007ed2:	687b      	ldr	r3, [r7, #4]
90007ed4:	2201      	movs	r2, #1
90007ed6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
90007eda:	2300      	movs	r3, #0
}
90007edc:	4618      	mov	r0, r3
90007ede:	3708      	adds	r7, #8
90007ee0:	46bd      	mov	sp, r7
90007ee2:	bd80      	pop	{r7, pc}
90007ee4:	52004000 	.word	0x52004000

90007ee8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
90007ee8:	b480      	push	{r7}
90007eea:	b083      	sub	sp, #12
90007eec:	af00      	add	r7, sp, #0
90007eee:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90007ef0:	bf00      	nop
90007ef2:	370c      	adds	r7, #12
90007ef4:	46bd      	mov	sp, r7
90007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
90007efa:	4770      	bx	lr

90007efc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
90007efc:	b580      	push	{r7, lr}
90007efe:	b086      	sub	sp, #24
90007f00:	af00      	add	r7, sp, #0
90007f02:	60f8      	str	r0, [r7, #12]
90007f04:	60b9      	str	r1, [r7, #8]
90007f06:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
90007f08:	68fb      	ldr	r3, [r7, #12]
90007f0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90007f0e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
90007f10:	7dfb      	ldrb	r3, [r7, #23]
90007f12:	2b02      	cmp	r3, #2
90007f14:	d101      	bne.n	90007f1a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
90007f16:	2302      	movs	r3, #2
90007f18:	e021      	b.n	90007f5e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
90007f1a:	7dfb      	ldrb	r3, [r7, #23]
90007f1c:	2b01      	cmp	r3, #1
90007f1e:	d002      	beq.n	90007f26 <HAL_SDRAM_SendCommand+0x2a>
90007f20:	7dfb      	ldrb	r3, [r7, #23]
90007f22:	2b05      	cmp	r3, #5
90007f24:	d118      	bne.n	90007f58 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90007f26:	68fb      	ldr	r3, [r7, #12]
90007f28:	2202      	movs	r2, #2
90007f2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90007f2e:	68fb      	ldr	r3, [r7, #12]
90007f30:	681b      	ldr	r3, [r3, #0]
90007f32:	687a      	ldr	r2, [r7, #4]
90007f34:	68b9      	ldr	r1, [r7, #8]
90007f36:	4618      	mov	r0, r3
90007f38:	f002 f988 	bl	9000a24c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90007f3c:	68bb      	ldr	r3, [r7, #8]
90007f3e:	681b      	ldr	r3, [r3, #0]
90007f40:	2b02      	cmp	r3, #2
90007f42:	d104      	bne.n	90007f4e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90007f44:	68fb      	ldr	r3, [r7, #12]
90007f46:	2205      	movs	r2, #5
90007f48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90007f4c:	e006      	b.n	90007f5c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
90007f4e:	68fb      	ldr	r3, [r7, #12]
90007f50:	2201      	movs	r2, #1
90007f52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90007f56:	e001      	b.n	90007f5c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
90007f58:	2301      	movs	r3, #1
90007f5a:	e000      	b.n	90007f5e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
90007f5c:	2300      	movs	r3, #0
}
90007f5e:	4618      	mov	r0, r3
90007f60:	3718      	adds	r7, #24
90007f62:	46bd      	mov	sp, r7
90007f64:	bd80      	pop	{r7, pc}

90007f66 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90007f66:	b580      	push	{r7, lr}
90007f68:	b082      	sub	sp, #8
90007f6a:	af00      	add	r7, sp, #0
90007f6c:	6078      	str	r0, [r7, #4]
90007f6e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90007f70:	687b      	ldr	r3, [r7, #4]
90007f72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90007f76:	b2db      	uxtb	r3, r3
90007f78:	2b02      	cmp	r3, #2
90007f7a:	d101      	bne.n	90007f80 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90007f7c:	2302      	movs	r3, #2
90007f7e:	e016      	b.n	90007fae <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90007f80:	687b      	ldr	r3, [r7, #4]
90007f82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90007f86:	b2db      	uxtb	r3, r3
90007f88:	2b01      	cmp	r3, #1
90007f8a:	d10f      	bne.n	90007fac <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90007f8c:	687b      	ldr	r3, [r7, #4]
90007f8e:	2202      	movs	r2, #2
90007f90:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
90007f94:	687b      	ldr	r3, [r7, #4]
90007f96:	681b      	ldr	r3, [r3, #0]
90007f98:	6839      	ldr	r1, [r7, #0]
90007f9a:	4618      	mov	r0, r3
90007f9c:	f002 f97a 	bl	9000a294 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90007fa0:	687b      	ldr	r3, [r7, #4]
90007fa2:	2201      	movs	r2, #1
90007fa4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
90007fa8:	2300      	movs	r3, #0
90007faa:	e000      	b.n	90007fae <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90007fac:	2301      	movs	r3, #1
}
90007fae:	4618      	mov	r0, r3
90007fb0:	3708      	adds	r7, #8
90007fb2:	46bd      	mov	sp, r7
90007fb4:	bd80      	pop	{r7, pc}

90007fb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
90007fb6:	b580      	push	{r7, lr}
90007fb8:	b082      	sub	sp, #8
90007fba:	af00      	add	r7, sp, #0
90007fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90007fbe:	687b      	ldr	r3, [r7, #4]
90007fc0:	2b00      	cmp	r3, #0
90007fc2:	d101      	bne.n	90007fc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
90007fc4:	2301      	movs	r3, #1
90007fc6:	e049      	b.n	9000805c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90007fc8:	687b      	ldr	r3, [r7, #4]
90007fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90007fce:	b2db      	uxtb	r3, r3
90007fd0:	2b00      	cmp	r3, #0
90007fd2:	d106      	bne.n	90007fe2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90007fd4:	687b      	ldr	r3, [r7, #4]
90007fd6:	2200      	movs	r2, #0
90007fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
90007fdc:	6878      	ldr	r0, [r7, #4]
90007fde:	f000 f89d 	bl	9000811c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90007fe2:	687b      	ldr	r3, [r7, #4]
90007fe4:	2202      	movs	r2, #2
90007fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90007fea:	687b      	ldr	r3, [r7, #4]
90007fec:	681a      	ldr	r2, [r3, #0]
90007fee:	687b      	ldr	r3, [r7, #4]
90007ff0:	3304      	adds	r3, #4
90007ff2:	4619      	mov	r1, r3
90007ff4:	4610      	mov	r0, r2
90007ff6:	f000 fb5d 	bl	900086b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90007ffa:	687b      	ldr	r3, [r7, #4]
90007ffc:	2201      	movs	r2, #1
90007ffe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90008002:	687b      	ldr	r3, [r7, #4]
90008004:	2201      	movs	r2, #1
90008006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000800a:	687b      	ldr	r3, [r7, #4]
9000800c:	2201      	movs	r2, #1
9000800e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90008012:	687b      	ldr	r3, [r7, #4]
90008014:	2201      	movs	r2, #1
90008016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000801a:	687b      	ldr	r3, [r7, #4]
9000801c:	2201      	movs	r2, #1
9000801e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90008022:	687b      	ldr	r3, [r7, #4]
90008024:	2201      	movs	r2, #1
90008026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000802a:	687b      	ldr	r3, [r7, #4]
9000802c:	2201      	movs	r2, #1
9000802e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90008032:	687b      	ldr	r3, [r7, #4]
90008034:	2201      	movs	r2, #1
90008036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000803a:	687b      	ldr	r3, [r7, #4]
9000803c:	2201      	movs	r2, #1
9000803e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90008042:	687b      	ldr	r3, [r7, #4]
90008044:	2201      	movs	r2, #1
90008046:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000804a:	687b      	ldr	r3, [r7, #4]
9000804c:	2201      	movs	r2, #1
9000804e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90008052:	687b      	ldr	r3, [r7, #4]
90008054:	2201      	movs	r2, #1
90008056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000805a:	2300      	movs	r3, #0
}
9000805c:	4618      	mov	r0, r3
9000805e:	3708      	adds	r7, #8
90008060:	46bd      	mov	sp, r7
90008062:	bd80      	pop	{r7, pc}

90008064 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90008064:	b580      	push	{r7, lr}
90008066:	b082      	sub	sp, #8
90008068:	af00      	add	r7, sp, #0
9000806a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
9000806c:	687b      	ldr	r3, [r7, #4]
9000806e:	2202      	movs	r2, #2
90008070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90008074:	687b      	ldr	r3, [r7, #4]
90008076:	681b      	ldr	r3, [r3, #0]
90008078:	6a1a      	ldr	r2, [r3, #32]
9000807a:	f241 1311 	movw	r3, #4369	@ 0x1111
9000807e:	4013      	ands	r3, r2
90008080:	2b00      	cmp	r3, #0
90008082:	d10f      	bne.n	900080a4 <HAL_TIM_PWM_DeInit+0x40>
90008084:	687b      	ldr	r3, [r7, #4]
90008086:	681b      	ldr	r3, [r3, #0]
90008088:	6a1a      	ldr	r2, [r3, #32]
9000808a:	f240 4344 	movw	r3, #1092	@ 0x444
9000808e:	4013      	ands	r3, r2
90008090:	2b00      	cmp	r3, #0
90008092:	d107      	bne.n	900080a4 <HAL_TIM_PWM_DeInit+0x40>
90008094:	687b      	ldr	r3, [r7, #4]
90008096:	681b      	ldr	r3, [r3, #0]
90008098:	681a      	ldr	r2, [r3, #0]
9000809a:	687b      	ldr	r3, [r7, #4]
9000809c:	681b      	ldr	r3, [r3, #0]
9000809e:	f022 0201 	bic.w	r2, r2, #1
900080a2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
900080a4:	6878      	ldr	r0, [r7, #4]
900080a6:	f000 f843 	bl	90008130 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
900080aa:	687b      	ldr	r3, [r7, #4]
900080ac:	2200      	movs	r2, #0
900080ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900080b2:	687b      	ldr	r3, [r7, #4]
900080b4:	2200      	movs	r2, #0
900080b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900080ba:	687b      	ldr	r3, [r7, #4]
900080bc:	2200      	movs	r2, #0
900080be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900080c2:	687b      	ldr	r3, [r7, #4]
900080c4:	2200      	movs	r2, #0
900080c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900080ca:	687b      	ldr	r3, [r7, #4]
900080cc:	2200      	movs	r2, #0
900080ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
900080d2:	687b      	ldr	r3, [r7, #4]
900080d4:	2200      	movs	r2, #0
900080d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
900080da:	687b      	ldr	r3, [r7, #4]
900080dc:	2200      	movs	r2, #0
900080de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900080e2:	687b      	ldr	r3, [r7, #4]
900080e4:	2200      	movs	r2, #0
900080e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
900080ea:	687b      	ldr	r3, [r7, #4]
900080ec:	2200      	movs	r2, #0
900080ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
900080f2:	687b      	ldr	r3, [r7, #4]
900080f4:	2200      	movs	r2, #0
900080f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
900080fa:	687b      	ldr	r3, [r7, #4]
900080fc:	2200      	movs	r2, #0
900080fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90008102:	687b      	ldr	r3, [r7, #4]
90008104:	2200      	movs	r2, #0
90008106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
9000810a:	687b      	ldr	r3, [r7, #4]
9000810c:	2200      	movs	r2, #0
9000810e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90008112:	2300      	movs	r3, #0
}
90008114:	4618      	mov	r0, r3
90008116:	3708      	adds	r7, #8
90008118:	46bd      	mov	sp, r7
9000811a:	bd80      	pop	{r7, pc}

9000811c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
9000811c:	b480      	push	{r7}
9000811e:	b083      	sub	sp, #12
90008120:	af00      	add	r7, sp, #0
90008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90008124:	bf00      	nop
90008126:	370c      	adds	r7, #12
90008128:	46bd      	mov	sp, r7
9000812a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000812e:	4770      	bx	lr

90008130 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90008130:	b480      	push	{r7}
90008132:	b083      	sub	sp, #12
90008134:	af00      	add	r7, sp, #0
90008136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90008138:	bf00      	nop
9000813a:	370c      	adds	r7, #12
9000813c:	46bd      	mov	sp, r7
9000813e:	f85d 7b04 	ldr.w	r7, [sp], #4
90008142:	4770      	bx	lr

90008144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
90008144:	b580      	push	{r7, lr}
90008146:	b084      	sub	sp, #16
90008148:	af00      	add	r7, sp, #0
9000814a:	6078      	str	r0, [r7, #4]
9000814c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
9000814e:	683b      	ldr	r3, [r7, #0]
90008150:	2b00      	cmp	r3, #0
90008152:	d109      	bne.n	90008168 <HAL_TIM_PWM_Start+0x24>
90008154:	687b      	ldr	r3, [r7, #4]
90008156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
9000815a:	b2db      	uxtb	r3, r3
9000815c:	2b01      	cmp	r3, #1
9000815e:	bf14      	ite	ne
90008160:	2301      	movne	r3, #1
90008162:	2300      	moveq	r3, #0
90008164:	b2db      	uxtb	r3, r3
90008166:	e03c      	b.n	900081e2 <HAL_TIM_PWM_Start+0x9e>
90008168:	683b      	ldr	r3, [r7, #0]
9000816a:	2b04      	cmp	r3, #4
9000816c:	d109      	bne.n	90008182 <HAL_TIM_PWM_Start+0x3e>
9000816e:	687b      	ldr	r3, [r7, #4]
90008170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
90008174:	b2db      	uxtb	r3, r3
90008176:	2b01      	cmp	r3, #1
90008178:	bf14      	ite	ne
9000817a:	2301      	movne	r3, #1
9000817c:	2300      	moveq	r3, #0
9000817e:	b2db      	uxtb	r3, r3
90008180:	e02f      	b.n	900081e2 <HAL_TIM_PWM_Start+0x9e>
90008182:	683b      	ldr	r3, [r7, #0]
90008184:	2b08      	cmp	r3, #8
90008186:	d109      	bne.n	9000819c <HAL_TIM_PWM_Start+0x58>
90008188:	687b      	ldr	r3, [r7, #4]
9000818a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
9000818e:	b2db      	uxtb	r3, r3
90008190:	2b01      	cmp	r3, #1
90008192:	bf14      	ite	ne
90008194:	2301      	movne	r3, #1
90008196:	2300      	moveq	r3, #0
90008198:	b2db      	uxtb	r3, r3
9000819a:	e022      	b.n	900081e2 <HAL_TIM_PWM_Start+0x9e>
9000819c:	683b      	ldr	r3, [r7, #0]
9000819e:	2b0c      	cmp	r3, #12
900081a0:	d109      	bne.n	900081b6 <HAL_TIM_PWM_Start+0x72>
900081a2:	687b      	ldr	r3, [r7, #4]
900081a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900081a8:	b2db      	uxtb	r3, r3
900081aa:	2b01      	cmp	r3, #1
900081ac:	bf14      	ite	ne
900081ae:	2301      	movne	r3, #1
900081b0:	2300      	moveq	r3, #0
900081b2:	b2db      	uxtb	r3, r3
900081b4:	e015      	b.n	900081e2 <HAL_TIM_PWM_Start+0x9e>
900081b6:	683b      	ldr	r3, [r7, #0]
900081b8:	2b10      	cmp	r3, #16
900081ba:	d109      	bne.n	900081d0 <HAL_TIM_PWM_Start+0x8c>
900081bc:	687b      	ldr	r3, [r7, #4]
900081be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
900081c2:	b2db      	uxtb	r3, r3
900081c4:	2b01      	cmp	r3, #1
900081c6:	bf14      	ite	ne
900081c8:	2301      	movne	r3, #1
900081ca:	2300      	moveq	r3, #0
900081cc:	b2db      	uxtb	r3, r3
900081ce:	e008      	b.n	900081e2 <HAL_TIM_PWM_Start+0x9e>
900081d0:	687b      	ldr	r3, [r7, #4]
900081d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
900081d6:	b2db      	uxtb	r3, r3
900081d8:	2b01      	cmp	r3, #1
900081da:	bf14      	ite	ne
900081dc:	2301      	movne	r3, #1
900081de:	2300      	moveq	r3, #0
900081e0:	b2db      	uxtb	r3, r3
900081e2:	2b00      	cmp	r3, #0
900081e4:	d001      	beq.n	900081ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
900081e6:	2301      	movs	r3, #1
900081e8:	e0a1      	b.n	9000832e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
900081ea:	683b      	ldr	r3, [r7, #0]
900081ec:	2b00      	cmp	r3, #0
900081ee:	d104      	bne.n	900081fa <HAL_TIM_PWM_Start+0xb6>
900081f0:	687b      	ldr	r3, [r7, #4]
900081f2:	2202      	movs	r2, #2
900081f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900081f8:	e023      	b.n	90008242 <HAL_TIM_PWM_Start+0xfe>
900081fa:	683b      	ldr	r3, [r7, #0]
900081fc:	2b04      	cmp	r3, #4
900081fe:	d104      	bne.n	9000820a <HAL_TIM_PWM_Start+0xc6>
90008200:	687b      	ldr	r3, [r7, #4]
90008202:	2202      	movs	r2, #2
90008204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90008208:	e01b      	b.n	90008242 <HAL_TIM_PWM_Start+0xfe>
9000820a:	683b      	ldr	r3, [r7, #0]
9000820c:	2b08      	cmp	r3, #8
9000820e:	d104      	bne.n	9000821a <HAL_TIM_PWM_Start+0xd6>
90008210:	687b      	ldr	r3, [r7, #4]
90008212:	2202      	movs	r2, #2
90008214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90008218:	e013      	b.n	90008242 <HAL_TIM_PWM_Start+0xfe>
9000821a:	683b      	ldr	r3, [r7, #0]
9000821c:	2b0c      	cmp	r3, #12
9000821e:	d104      	bne.n	9000822a <HAL_TIM_PWM_Start+0xe6>
90008220:	687b      	ldr	r3, [r7, #4]
90008222:	2202      	movs	r2, #2
90008224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90008228:	e00b      	b.n	90008242 <HAL_TIM_PWM_Start+0xfe>
9000822a:	683b      	ldr	r3, [r7, #0]
9000822c:	2b10      	cmp	r3, #16
9000822e:	d104      	bne.n	9000823a <HAL_TIM_PWM_Start+0xf6>
90008230:	687b      	ldr	r3, [r7, #4]
90008232:	2202      	movs	r2, #2
90008234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90008238:	e003      	b.n	90008242 <HAL_TIM_PWM_Start+0xfe>
9000823a:	687b      	ldr	r3, [r7, #4]
9000823c:	2202      	movs	r2, #2
9000823e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
90008242:	687b      	ldr	r3, [r7, #4]
90008244:	681b      	ldr	r3, [r3, #0]
90008246:	2201      	movs	r2, #1
90008248:	6839      	ldr	r1, [r7, #0]
9000824a:	4618      	mov	r0, r3
9000824c:	f000 fda8 	bl	90008da0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
90008250:	687b      	ldr	r3, [r7, #4]
90008252:	681b      	ldr	r3, [r3, #0]
90008254:	4a38      	ldr	r2, [pc, #224]	@ (90008338 <HAL_TIM_PWM_Start+0x1f4>)
90008256:	4293      	cmp	r3, r2
90008258:	d013      	beq.n	90008282 <HAL_TIM_PWM_Start+0x13e>
9000825a:	687b      	ldr	r3, [r7, #4]
9000825c:	681b      	ldr	r3, [r3, #0]
9000825e:	4a37      	ldr	r2, [pc, #220]	@ (9000833c <HAL_TIM_PWM_Start+0x1f8>)
90008260:	4293      	cmp	r3, r2
90008262:	d00e      	beq.n	90008282 <HAL_TIM_PWM_Start+0x13e>
90008264:	687b      	ldr	r3, [r7, #4]
90008266:	681b      	ldr	r3, [r3, #0]
90008268:	4a35      	ldr	r2, [pc, #212]	@ (90008340 <HAL_TIM_PWM_Start+0x1fc>)
9000826a:	4293      	cmp	r3, r2
9000826c:	d009      	beq.n	90008282 <HAL_TIM_PWM_Start+0x13e>
9000826e:	687b      	ldr	r3, [r7, #4]
90008270:	681b      	ldr	r3, [r3, #0]
90008272:	4a34      	ldr	r2, [pc, #208]	@ (90008344 <HAL_TIM_PWM_Start+0x200>)
90008274:	4293      	cmp	r3, r2
90008276:	d004      	beq.n	90008282 <HAL_TIM_PWM_Start+0x13e>
90008278:	687b      	ldr	r3, [r7, #4]
9000827a:	681b      	ldr	r3, [r3, #0]
9000827c:	4a32      	ldr	r2, [pc, #200]	@ (90008348 <HAL_TIM_PWM_Start+0x204>)
9000827e:	4293      	cmp	r3, r2
90008280:	d101      	bne.n	90008286 <HAL_TIM_PWM_Start+0x142>
90008282:	2301      	movs	r3, #1
90008284:	e000      	b.n	90008288 <HAL_TIM_PWM_Start+0x144>
90008286:	2300      	movs	r3, #0
90008288:	2b00      	cmp	r3, #0
9000828a:	d007      	beq.n	9000829c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
9000828c:	687b      	ldr	r3, [r7, #4]
9000828e:	681b      	ldr	r3, [r3, #0]
90008290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90008292:	687b      	ldr	r3, [r7, #4]
90008294:	681b      	ldr	r3, [r3, #0]
90008296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
9000829a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000829c:	687b      	ldr	r3, [r7, #4]
9000829e:	681b      	ldr	r3, [r3, #0]
900082a0:	4a25      	ldr	r2, [pc, #148]	@ (90008338 <HAL_TIM_PWM_Start+0x1f4>)
900082a2:	4293      	cmp	r3, r2
900082a4:	d022      	beq.n	900082ec <HAL_TIM_PWM_Start+0x1a8>
900082a6:	687b      	ldr	r3, [r7, #4]
900082a8:	681b      	ldr	r3, [r3, #0]
900082aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900082ae:	d01d      	beq.n	900082ec <HAL_TIM_PWM_Start+0x1a8>
900082b0:	687b      	ldr	r3, [r7, #4]
900082b2:	681b      	ldr	r3, [r3, #0]
900082b4:	4a25      	ldr	r2, [pc, #148]	@ (9000834c <HAL_TIM_PWM_Start+0x208>)
900082b6:	4293      	cmp	r3, r2
900082b8:	d018      	beq.n	900082ec <HAL_TIM_PWM_Start+0x1a8>
900082ba:	687b      	ldr	r3, [r7, #4]
900082bc:	681b      	ldr	r3, [r3, #0]
900082be:	4a24      	ldr	r2, [pc, #144]	@ (90008350 <HAL_TIM_PWM_Start+0x20c>)
900082c0:	4293      	cmp	r3, r2
900082c2:	d013      	beq.n	900082ec <HAL_TIM_PWM_Start+0x1a8>
900082c4:	687b      	ldr	r3, [r7, #4]
900082c6:	681b      	ldr	r3, [r3, #0]
900082c8:	4a22      	ldr	r2, [pc, #136]	@ (90008354 <HAL_TIM_PWM_Start+0x210>)
900082ca:	4293      	cmp	r3, r2
900082cc:	d00e      	beq.n	900082ec <HAL_TIM_PWM_Start+0x1a8>
900082ce:	687b      	ldr	r3, [r7, #4]
900082d0:	681b      	ldr	r3, [r3, #0]
900082d2:	4a1a      	ldr	r2, [pc, #104]	@ (9000833c <HAL_TIM_PWM_Start+0x1f8>)
900082d4:	4293      	cmp	r3, r2
900082d6:	d009      	beq.n	900082ec <HAL_TIM_PWM_Start+0x1a8>
900082d8:	687b      	ldr	r3, [r7, #4]
900082da:	681b      	ldr	r3, [r3, #0]
900082dc:	4a1e      	ldr	r2, [pc, #120]	@ (90008358 <HAL_TIM_PWM_Start+0x214>)
900082de:	4293      	cmp	r3, r2
900082e0:	d004      	beq.n	900082ec <HAL_TIM_PWM_Start+0x1a8>
900082e2:	687b      	ldr	r3, [r7, #4]
900082e4:	681b      	ldr	r3, [r3, #0]
900082e6:	4a16      	ldr	r2, [pc, #88]	@ (90008340 <HAL_TIM_PWM_Start+0x1fc>)
900082e8:	4293      	cmp	r3, r2
900082ea:	d115      	bne.n	90008318 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
900082ec:	687b      	ldr	r3, [r7, #4]
900082ee:	681b      	ldr	r3, [r3, #0]
900082f0:	689a      	ldr	r2, [r3, #8]
900082f2:	4b1a      	ldr	r3, [pc, #104]	@ (9000835c <HAL_TIM_PWM_Start+0x218>)
900082f4:	4013      	ands	r3, r2
900082f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
900082f8:	68fb      	ldr	r3, [r7, #12]
900082fa:	2b06      	cmp	r3, #6
900082fc:	d015      	beq.n	9000832a <HAL_TIM_PWM_Start+0x1e6>
900082fe:	68fb      	ldr	r3, [r7, #12]
90008300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008304:	d011      	beq.n	9000832a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
90008306:	687b      	ldr	r3, [r7, #4]
90008308:	681b      	ldr	r3, [r3, #0]
9000830a:	681a      	ldr	r2, [r3, #0]
9000830c:	687b      	ldr	r3, [r7, #4]
9000830e:	681b      	ldr	r3, [r3, #0]
90008310:	f042 0201 	orr.w	r2, r2, #1
90008314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90008316:	e008      	b.n	9000832a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
90008318:	687b      	ldr	r3, [r7, #4]
9000831a:	681b      	ldr	r3, [r3, #0]
9000831c:	681a      	ldr	r2, [r3, #0]
9000831e:	687b      	ldr	r3, [r7, #4]
90008320:	681b      	ldr	r3, [r3, #0]
90008322:	f042 0201 	orr.w	r2, r2, #1
90008326:	601a      	str	r2, [r3, #0]
90008328:	e000      	b.n	9000832c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000832a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
9000832c:	2300      	movs	r3, #0
}
9000832e:	4618      	mov	r0, r3
90008330:	3710      	adds	r7, #16
90008332:	46bd      	mov	sp, r7
90008334:	bd80      	pop	{r7, pc}
90008336:	bf00      	nop
90008338:	40010000 	.word	0x40010000
9000833c:	40010400 	.word	0x40010400
90008340:	40014000 	.word	0x40014000
90008344:	40014400 	.word	0x40014400
90008348:	40014800 	.word	0x40014800
9000834c:	40000400 	.word	0x40000400
90008350:	40000800 	.word	0x40000800
90008354:	40000c00 	.word	0x40000c00
90008358:	40001800 	.word	0x40001800
9000835c:	00010007 	.word	0x00010007

90008360 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
90008360:	b580      	push	{r7, lr}
90008362:	b082      	sub	sp, #8
90008364:	af00      	add	r7, sp, #0
90008366:	6078      	str	r0, [r7, #4]
90008368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
9000836a:	687b      	ldr	r3, [r7, #4]
9000836c:	681b      	ldr	r3, [r3, #0]
9000836e:	2200      	movs	r2, #0
90008370:	6839      	ldr	r1, [r7, #0]
90008372:	4618      	mov	r0, r3
90008374:	f000 fd14 	bl	90008da0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
90008378:	687b      	ldr	r3, [r7, #4]
9000837a:	681b      	ldr	r3, [r3, #0]
9000837c:	4a3e      	ldr	r2, [pc, #248]	@ (90008478 <HAL_TIM_PWM_Stop+0x118>)
9000837e:	4293      	cmp	r3, r2
90008380:	d013      	beq.n	900083aa <HAL_TIM_PWM_Stop+0x4a>
90008382:	687b      	ldr	r3, [r7, #4]
90008384:	681b      	ldr	r3, [r3, #0]
90008386:	4a3d      	ldr	r2, [pc, #244]	@ (9000847c <HAL_TIM_PWM_Stop+0x11c>)
90008388:	4293      	cmp	r3, r2
9000838a:	d00e      	beq.n	900083aa <HAL_TIM_PWM_Stop+0x4a>
9000838c:	687b      	ldr	r3, [r7, #4]
9000838e:	681b      	ldr	r3, [r3, #0]
90008390:	4a3b      	ldr	r2, [pc, #236]	@ (90008480 <HAL_TIM_PWM_Stop+0x120>)
90008392:	4293      	cmp	r3, r2
90008394:	d009      	beq.n	900083aa <HAL_TIM_PWM_Stop+0x4a>
90008396:	687b      	ldr	r3, [r7, #4]
90008398:	681b      	ldr	r3, [r3, #0]
9000839a:	4a3a      	ldr	r2, [pc, #232]	@ (90008484 <HAL_TIM_PWM_Stop+0x124>)
9000839c:	4293      	cmp	r3, r2
9000839e:	d004      	beq.n	900083aa <HAL_TIM_PWM_Stop+0x4a>
900083a0:	687b      	ldr	r3, [r7, #4]
900083a2:	681b      	ldr	r3, [r3, #0]
900083a4:	4a38      	ldr	r2, [pc, #224]	@ (90008488 <HAL_TIM_PWM_Stop+0x128>)
900083a6:	4293      	cmp	r3, r2
900083a8:	d101      	bne.n	900083ae <HAL_TIM_PWM_Stop+0x4e>
900083aa:	2301      	movs	r3, #1
900083ac:	e000      	b.n	900083b0 <HAL_TIM_PWM_Stop+0x50>
900083ae:	2300      	movs	r3, #0
900083b0:	2b00      	cmp	r3, #0
900083b2:	d017      	beq.n	900083e4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
900083b4:	687b      	ldr	r3, [r7, #4]
900083b6:	681b      	ldr	r3, [r3, #0]
900083b8:	6a1a      	ldr	r2, [r3, #32]
900083ba:	f241 1311 	movw	r3, #4369	@ 0x1111
900083be:	4013      	ands	r3, r2
900083c0:	2b00      	cmp	r3, #0
900083c2:	d10f      	bne.n	900083e4 <HAL_TIM_PWM_Stop+0x84>
900083c4:	687b      	ldr	r3, [r7, #4]
900083c6:	681b      	ldr	r3, [r3, #0]
900083c8:	6a1a      	ldr	r2, [r3, #32]
900083ca:	f240 4344 	movw	r3, #1092	@ 0x444
900083ce:	4013      	ands	r3, r2
900083d0:	2b00      	cmp	r3, #0
900083d2:	d107      	bne.n	900083e4 <HAL_TIM_PWM_Stop+0x84>
900083d4:	687b      	ldr	r3, [r7, #4]
900083d6:	681b      	ldr	r3, [r3, #0]
900083d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
900083da:	687b      	ldr	r3, [r7, #4]
900083dc:	681b      	ldr	r3, [r3, #0]
900083de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
900083e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
900083e4:	687b      	ldr	r3, [r7, #4]
900083e6:	681b      	ldr	r3, [r3, #0]
900083e8:	6a1a      	ldr	r2, [r3, #32]
900083ea:	f241 1311 	movw	r3, #4369	@ 0x1111
900083ee:	4013      	ands	r3, r2
900083f0:	2b00      	cmp	r3, #0
900083f2:	d10f      	bne.n	90008414 <HAL_TIM_PWM_Stop+0xb4>
900083f4:	687b      	ldr	r3, [r7, #4]
900083f6:	681b      	ldr	r3, [r3, #0]
900083f8:	6a1a      	ldr	r2, [r3, #32]
900083fa:	f240 4344 	movw	r3, #1092	@ 0x444
900083fe:	4013      	ands	r3, r2
90008400:	2b00      	cmp	r3, #0
90008402:	d107      	bne.n	90008414 <HAL_TIM_PWM_Stop+0xb4>
90008404:	687b      	ldr	r3, [r7, #4]
90008406:	681b      	ldr	r3, [r3, #0]
90008408:	681a      	ldr	r2, [r3, #0]
9000840a:	687b      	ldr	r3, [r7, #4]
9000840c:	681b      	ldr	r3, [r3, #0]
9000840e:	f022 0201 	bic.w	r2, r2, #1
90008412:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
90008414:	683b      	ldr	r3, [r7, #0]
90008416:	2b00      	cmp	r3, #0
90008418:	d104      	bne.n	90008424 <HAL_TIM_PWM_Stop+0xc4>
9000841a:	687b      	ldr	r3, [r7, #4]
9000841c:	2201      	movs	r2, #1
9000841e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90008422:	e023      	b.n	9000846c <HAL_TIM_PWM_Stop+0x10c>
90008424:	683b      	ldr	r3, [r7, #0]
90008426:	2b04      	cmp	r3, #4
90008428:	d104      	bne.n	90008434 <HAL_TIM_PWM_Stop+0xd4>
9000842a:	687b      	ldr	r3, [r7, #4]
9000842c:	2201      	movs	r2, #1
9000842e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90008432:	e01b      	b.n	9000846c <HAL_TIM_PWM_Stop+0x10c>
90008434:	683b      	ldr	r3, [r7, #0]
90008436:	2b08      	cmp	r3, #8
90008438:	d104      	bne.n	90008444 <HAL_TIM_PWM_Stop+0xe4>
9000843a:	687b      	ldr	r3, [r7, #4]
9000843c:	2201      	movs	r2, #1
9000843e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90008442:	e013      	b.n	9000846c <HAL_TIM_PWM_Stop+0x10c>
90008444:	683b      	ldr	r3, [r7, #0]
90008446:	2b0c      	cmp	r3, #12
90008448:	d104      	bne.n	90008454 <HAL_TIM_PWM_Stop+0xf4>
9000844a:	687b      	ldr	r3, [r7, #4]
9000844c:	2201      	movs	r2, #1
9000844e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90008452:	e00b      	b.n	9000846c <HAL_TIM_PWM_Stop+0x10c>
90008454:	683b      	ldr	r3, [r7, #0]
90008456:	2b10      	cmp	r3, #16
90008458:	d104      	bne.n	90008464 <HAL_TIM_PWM_Stop+0x104>
9000845a:	687b      	ldr	r3, [r7, #4]
9000845c:	2201      	movs	r2, #1
9000845e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90008462:	e003      	b.n	9000846c <HAL_TIM_PWM_Stop+0x10c>
90008464:	687b      	ldr	r3, [r7, #4]
90008466:	2201      	movs	r2, #1
90008468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
9000846c:	2300      	movs	r3, #0
}
9000846e:	4618      	mov	r0, r3
90008470:	3708      	adds	r7, #8
90008472:	46bd      	mov	sp, r7
90008474:	bd80      	pop	{r7, pc}
90008476:	bf00      	nop
90008478:	40010000 	.word	0x40010000
9000847c:	40010400 	.word	0x40010400
90008480:	40014000 	.word	0x40014000
90008484:	40014400 	.word	0x40014400
90008488:	40014800 	.word	0x40014800

9000848c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
9000848c:	b580      	push	{r7, lr}
9000848e:	b086      	sub	sp, #24
90008490:	af00      	add	r7, sp, #0
90008492:	60f8      	str	r0, [r7, #12]
90008494:	60b9      	str	r1, [r7, #8]
90008496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90008498:	2300      	movs	r3, #0
9000849a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
9000849c:	68fb      	ldr	r3, [r7, #12]
9000849e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
900084a2:	2b01      	cmp	r3, #1
900084a4:	d101      	bne.n	900084aa <HAL_TIM_PWM_ConfigChannel+0x1e>
900084a6:	2302      	movs	r3, #2
900084a8:	e0ff      	b.n	900086aa <HAL_TIM_PWM_ConfigChannel+0x21e>
900084aa:	68fb      	ldr	r3, [r7, #12]
900084ac:	2201      	movs	r2, #1
900084ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
900084b2:	687b      	ldr	r3, [r7, #4]
900084b4:	2b14      	cmp	r3, #20
900084b6:	f200 80f0 	bhi.w	9000869a <HAL_TIM_PWM_ConfigChannel+0x20e>
900084ba:	a201      	add	r2, pc, #4	@ (adr r2, 900084c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
900084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900084c0:	90008515 	.word	0x90008515
900084c4:	9000869b 	.word	0x9000869b
900084c8:	9000869b 	.word	0x9000869b
900084cc:	9000869b 	.word	0x9000869b
900084d0:	90008555 	.word	0x90008555
900084d4:	9000869b 	.word	0x9000869b
900084d8:	9000869b 	.word	0x9000869b
900084dc:	9000869b 	.word	0x9000869b
900084e0:	90008597 	.word	0x90008597
900084e4:	9000869b 	.word	0x9000869b
900084e8:	9000869b 	.word	0x9000869b
900084ec:	9000869b 	.word	0x9000869b
900084f0:	900085d7 	.word	0x900085d7
900084f4:	9000869b 	.word	0x9000869b
900084f8:	9000869b 	.word	0x9000869b
900084fc:	9000869b 	.word	0x9000869b
90008500:	90008619 	.word	0x90008619
90008504:	9000869b 	.word	0x9000869b
90008508:	9000869b 	.word	0x9000869b
9000850c:	9000869b 	.word	0x9000869b
90008510:	90008659 	.word	0x90008659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
90008514:	68fb      	ldr	r3, [r7, #12]
90008516:	681b      	ldr	r3, [r3, #0]
90008518:	68b9      	ldr	r1, [r7, #8]
9000851a:	4618      	mov	r0, r3
9000851c:	f000 f96a 	bl	900087f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
90008520:	68fb      	ldr	r3, [r7, #12]
90008522:	681b      	ldr	r3, [r3, #0]
90008524:	699a      	ldr	r2, [r3, #24]
90008526:	68fb      	ldr	r3, [r7, #12]
90008528:	681b      	ldr	r3, [r3, #0]
9000852a:	f042 0208 	orr.w	r2, r2, #8
9000852e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
90008530:	68fb      	ldr	r3, [r7, #12]
90008532:	681b      	ldr	r3, [r3, #0]
90008534:	699a      	ldr	r2, [r3, #24]
90008536:	68fb      	ldr	r3, [r7, #12]
90008538:	681b      	ldr	r3, [r3, #0]
9000853a:	f022 0204 	bic.w	r2, r2, #4
9000853e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
90008540:	68fb      	ldr	r3, [r7, #12]
90008542:	681b      	ldr	r3, [r3, #0]
90008544:	6999      	ldr	r1, [r3, #24]
90008546:	68bb      	ldr	r3, [r7, #8]
90008548:	691a      	ldr	r2, [r3, #16]
9000854a:	68fb      	ldr	r3, [r7, #12]
9000854c:	681b      	ldr	r3, [r3, #0]
9000854e:	430a      	orrs	r2, r1
90008550:	619a      	str	r2, [r3, #24]
      break;
90008552:	e0a5      	b.n	900086a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
90008554:	68fb      	ldr	r3, [r7, #12]
90008556:	681b      	ldr	r3, [r3, #0]
90008558:	68b9      	ldr	r1, [r7, #8]
9000855a:	4618      	mov	r0, r3
9000855c:	f000 f9da 	bl	90008914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
90008560:	68fb      	ldr	r3, [r7, #12]
90008562:	681b      	ldr	r3, [r3, #0]
90008564:	699a      	ldr	r2, [r3, #24]
90008566:	68fb      	ldr	r3, [r7, #12]
90008568:	681b      	ldr	r3, [r3, #0]
9000856a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
9000856e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
90008570:	68fb      	ldr	r3, [r7, #12]
90008572:	681b      	ldr	r3, [r3, #0]
90008574:	699a      	ldr	r2, [r3, #24]
90008576:	68fb      	ldr	r3, [r7, #12]
90008578:	681b      	ldr	r3, [r3, #0]
9000857a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
9000857e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
90008580:	68fb      	ldr	r3, [r7, #12]
90008582:	681b      	ldr	r3, [r3, #0]
90008584:	6999      	ldr	r1, [r3, #24]
90008586:	68bb      	ldr	r3, [r7, #8]
90008588:	691b      	ldr	r3, [r3, #16]
9000858a:	021a      	lsls	r2, r3, #8
9000858c:	68fb      	ldr	r3, [r7, #12]
9000858e:	681b      	ldr	r3, [r3, #0]
90008590:	430a      	orrs	r2, r1
90008592:	619a      	str	r2, [r3, #24]
      break;
90008594:	e084      	b.n	900086a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
90008596:	68fb      	ldr	r3, [r7, #12]
90008598:	681b      	ldr	r3, [r3, #0]
9000859a:	68b9      	ldr	r1, [r7, #8]
9000859c:	4618      	mov	r0, r3
9000859e:	f000 fa43 	bl	90008a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
900085a2:	68fb      	ldr	r3, [r7, #12]
900085a4:	681b      	ldr	r3, [r3, #0]
900085a6:	69da      	ldr	r2, [r3, #28]
900085a8:	68fb      	ldr	r3, [r7, #12]
900085aa:	681b      	ldr	r3, [r3, #0]
900085ac:	f042 0208 	orr.w	r2, r2, #8
900085b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
900085b2:	68fb      	ldr	r3, [r7, #12]
900085b4:	681b      	ldr	r3, [r3, #0]
900085b6:	69da      	ldr	r2, [r3, #28]
900085b8:	68fb      	ldr	r3, [r7, #12]
900085ba:	681b      	ldr	r3, [r3, #0]
900085bc:	f022 0204 	bic.w	r2, r2, #4
900085c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
900085c2:	68fb      	ldr	r3, [r7, #12]
900085c4:	681b      	ldr	r3, [r3, #0]
900085c6:	69d9      	ldr	r1, [r3, #28]
900085c8:	68bb      	ldr	r3, [r7, #8]
900085ca:	691a      	ldr	r2, [r3, #16]
900085cc:	68fb      	ldr	r3, [r7, #12]
900085ce:	681b      	ldr	r3, [r3, #0]
900085d0:	430a      	orrs	r2, r1
900085d2:	61da      	str	r2, [r3, #28]
      break;
900085d4:	e064      	b.n	900086a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
900085d6:	68fb      	ldr	r3, [r7, #12]
900085d8:	681b      	ldr	r3, [r3, #0]
900085da:	68b9      	ldr	r1, [r7, #8]
900085dc:	4618      	mov	r0, r3
900085de:	f000 faab 	bl	90008b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
900085e2:	68fb      	ldr	r3, [r7, #12]
900085e4:	681b      	ldr	r3, [r3, #0]
900085e6:	69da      	ldr	r2, [r3, #28]
900085e8:	68fb      	ldr	r3, [r7, #12]
900085ea:	681b      	ldr	r3, [r3, #0]
900085ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
900085f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
900085f2:	68fb      	ldr	r3, [r7, #12]
900085f4:	681b      	ldr	r3, [r3, #0]
900085f6:	69da      	ldr	r2, [r3, #28]
900085f8:	68fb      	ldr	r3, [r7, #12]
900085fa:	681b      	ldr	r3, [r3, #0]
900085fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
90008600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
90008602:	68fb      	ldr	r3, [r7, #12]
90008604:	681b      	ldr	r3, [r3, #0]
90008606:	69d9      	ldr	r1, [r3, #28]
90008608:	68bb      	ldr	r3, [r7, #8]
9000860a:	691b      	ldr	r3, [r3, #16]
9000860c:	021a      	lsls	r2, r3, #8
9000860e:	68fb      	ldr	r3, [r7, #12]
90008610:	681b      	ldr	r3, [r3, #0]
90008612:	430a      	orrs	r2, r1
90008614:	61da      	str	r2, [r3, #28]
      break;
90008616:	e043      	b.n	900086a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
90008618:	68fb      	ldr	r3, [r7, #12]
9000861a:	681b      	ldr	r3, [r3, #0]
9000861c:	68b9      	ldr	r1, [r7, #8]
9000861e:	4618      	mov	r0, r3
90008620:	f000 faf4 	bl	90008c0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
90008624:	68fb      	ldr	r3, [r7, #12]
90008626:	681b      	ldr	r3, [r3, #0]
90008628:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
9000862a:	68fb      	ldr	r3, [r7, #12]
9000862c:	681b      	ldr	r3, [r3, #0]
9000862e:	f042 0208 	orr.w	r2, r2, #8
90008632:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
90008634:	68fb      	ldr	r3, [r7, #12]
90008636:	681b      	ldr	r3, [r3, #0]
90008638:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
9000863a:	68fb      	ldr	r3, [r7, #12]
9000863c:	681b      	ldr	r3, [r3, #0]
9000863e:	f022 0204 	bic.w	r2, r2, #4
90008642:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
90008644:	68fb      	ldr	r3, [r7, #12]
90008646:	681b      	ldr	r3, [r3, #0]
90008648:	6d59      	ldr	r1, [r3, #84]	@ 0x54
9000864a:	68bb      	ldr	r3, [r7, #8]
9000864c:	691a      	ldr	r2, [r3, #16]
9000864e:	68fb      	ldr	r3, [r7, #12]
90008650:	681b      	ldr	r3, [r3, #0]
90008652:	430a      	orrs	r2, r1
90008654:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
90008656:	e023      	b.n	900086a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
90008658:	68fb      	ldr	r3, [r7, #12]
9000865a:	681b      	ldr	r3, [r3, #0]
9000865c:	68b9      	ldr	r1, [r7, #8]
9000865e:	4618      	mov	r0, r3
90008660:	f000 fb38 	bl	90008cd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
90008664:	68fb      	ldr	r3, [r7, #12]
90008666:	681b      	ldr	r3, [r3, #0]
90008668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
9000866a:	68fb      	ldr	r3, [r7, #12]
9000866c:	681b      	ldr	r3, [r3, #0]
9000866e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90008672:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
90008674:	68fb      	ldr	r3, [r7, #12]
90008676:	681b      	ldr	r3, [r3, #0]
90008678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
9000867a:	68fb      	ldr	r3, [r7, #12]
9000867c:	681b      	ldr	r3, [r3, #0]
9000867e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
90008682:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
90008684:	68fb      	ldr	r3, [r7, #12]
90008686:	681b      	ldr	r3, [r3, #0]
90008688:	6d59      	ldr	r1, [r3, #84]	@ 0x54
9000868a:	68bb      	ldr	r3, [r7, #8]
9000868c:	691b      	ldr	r3, [r3, #16]
9000868e:	021a      	lsls	r2, r3, #8
90008690:	68fb      	ldr	r3, [r7, #12]
90008692:	681b      	ldr	r3, [r3, #0]
90008694:	430a      	orrs	r2, r1
90008696:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
90008698:	e002      	b.n	900086a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
9000869a:	2301      	movs	r3, #1
9000869c:	75fb      	strb	r3, [r7, #23]
      break;
9000869e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
900086a0:	68fb      	ldr	r3, [r7, #12]
900086a2:	2200      	movs	r2, #0
900086a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
900086a8:	7dfb      	ldrb	r3, [r7, #23]
}
900086aa:	4618      	mov	r0, r3
900086ac:	3718      	adds	r7, #24
900086ae:	46bd      	mov	sp, r7
900086b0:	bd80      	pop	{r7, pc}
900086b2:	bf00      	nop

900086b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
900086b4:	b480      	push	{r7}
900086b6:	b085      	sub	sp, #20
900086b8:	af00      	add	r7, sp, #0
900086ba:	6078      	str	r0, [r7, #4]
900086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
900086be:	687b      	ldr	r3, [r7, #4]
900086c0:	681b      	ldr	r3, [r3, #0]
900086c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
900086c4:	687b      	ldr	r3, [r7, #4]
900086c6:	4a43      	ldr	r2, [pc, #268]	@ (900087d4 <TIM_Base_SetConfig+0x120>)
900086c8:	4293      	cmp	r3, r2
900086ca:	d013      	beq.n	900086f4 <TIM_Base_SetConfig+0x40>
900086cc:	687b      	ldr	r3, [r7, #4]
900086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900086d2:	d00f      	beq.n	900086f4 <TIM_Base_SetConfig+0x40>
900086d4:	687b      	ldr	r3, [r7, #4]
900086d6:	4a40      	ldr	r2, [pc, #256]	@ (900087d8 <TIM_Base_SetConfig+0x124>)
900086d8:	4293      	cmp	r3, r2
900086da:	d00b      	beq.n	900086f4 <TIM_Base_SetConfig+0x40>
900086dc:	687b      	ldr	r3, [r7, #4]
900086de:	4a3f      	ldr	r2, [pc, #252]	@ (900087dc <TIM_Base_SetConfig+0x128>)
900086e0:	4293      	cmp	r3, r2
900086e2:	d007      	beq.n	900086f4 <TIM_Base_SetConfig+0x40>
900086e4:	687b      	ldr	r3, [r7, #4]
900086e6:	4a3e      	ldr	r2, [pc, #248]	@ (900087e0 <TIM_Base_SetConfig+0x12c>)
900086e8:	4293      	cmp	r3, r2
900086ea:	d003      	beq.n	900086f4 <TIM_Base_SetConfig+0x40>
900086ec:	687b      	ldr	r3, [r7, #4]
900086ee:	4a3d      	ldr	r2, [pc, #244]	@ (900087e4 <TIM_Base_SetConfig+0x130>)
900086f0:	4293      	cmp	r3, r2
900086f2:	d108      	bne.n	90008706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
900086f4:	68fb      	ldr	r3, [r7, #12]
900086f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
900086fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
900086fc:	683b      	ldr	r3, [r7, #0]
900086fe:	685b      	ldr	r3, [r3, #4]
90008700:	68fa      	ldr	r2, [r7, #12]
90008702:	4313      	orrs	r3, r2
90008704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90008706:	687b      	ldr	r3, [r7, #4]
90008708:	4a32      	ldr	r2, [pc, #200]	@ (900087d4 <TIM_Base_SetConfig+0x120>)
9000870a:	4293      	cmp	r3, r2
9000870c:	d01f      	beq.n	9000874e <TIM_Base_SetConfig+0x9a>
9000870e:	687b      	ldr	r3, [r7, #4]
90008710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008714:	d01b      	beq.n	9000874e <TIM_Base_SetConfig+0x9a>
90008716:	687b      	ldr	r3, [r7, #4]
90008718:	4a2f      	ldr	r2, [pc, #188]	@ (900087d8 <TIM_Base_SetConfig+0x124>)
9000871a:	4293      	cmp	r3, r2
9000871c:	d017      	beq.n	9000874e <TIM_Base_SetConfig+0x9a>
9000871e:	687b      	ldr	r3, [r7, #4]
90008720:	4a2e      	ldr	r2, [pc, #184]	@ (900087dc <TIM_Base_SetConfig+0x128>)
90008722:	4293      	cmp	r3, r2
90008724:	d013      	beq.n	9000874e <TIM_Base_SetConfig+0x9a>
90008726:	687b      	ldr	r3, [r7, #4]
90008728:	4a2d      	ldr	r2, [pc, #180]	@ (900087e0 <TIM_Base_SetConfig+0x12c>)
9000872a:	4293      	cmp	r3, r2
9000872c:	d00f      	beq.n	9000874e <TIM_Base_SetConfig+0x9a>
9000872e:	687b      	ldr	r3, [r7, #4]
90008730:	4a2c      	ldr	r2, [pc, #176]	@ (900087e4 <TIM_Base_SetConfig+0x130>)
90008732:	4293      	cmp	r3, r2
90008734:	d00b      	beq.n	9000874e <TIM_Base_SetConfig+0x9a>
90008736:	687b      	ldr	r3, [r7, #4]
90008738:	4a2b      	ldr	r2, [pc, #172]	@ (900087e8 <TIM_Base_SetConfig+0x134>)
9000873a:	4293      	cmp	r3, r2
9000873c:	d007      	beq.n	9000874e <TIM_Base_SetConfig+0x9a>
9000873e:	687b      	ldr	r3, [r7, #4]
90008740:	4a2a      	ldr	r2, [pc, #168]	@ (900087ec <TIM_Base_SetConfig+0x138>)
90008742:	4293      	cmp	r3, r2
90008744:	d003      	beq.n	9000874e <TIM_Base_SetConfig+0x9a>
90008746:	687b      	ldr	r3, [r7, #4]
90008748:	4a29      	ldr	r2, [pc, #164]	@ (900087f0 <TIM_Base_SetConfig+0x13c>)
9000874a:	4293      	cmp	r3, r2
9000874c:	d108      	bne.n	90008760 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
9000874e:	68fb      	ldr	r3, [r7, #12]
90008750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90008754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90008756:	683b      	ldr	r3, [r7, #0]
90008758:	68db      	ldr	r3, [r3, #12]
9000875a:	68fa      	ldr	r2, [r7, #12]
9000875c:	4313      	orrs	r3, r2
9000875e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90008760:	68fb      	ldr	r3, [r7, #12]
90008762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
90008766:	683b      	ldr	r3, [r7, #0]
90008768:	695b      	ldr	r3, [r3, #20]
9000876a:	4313      	orrs	r3, r2
9000876c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000876e:	683b      	ldr	r3, [r7, #0]
90008770:	689a      	ldr	r2, [r3, #8]
90008772:	687b      	ldr	r3, [r7, #4]
90008774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90008776:	683b      	ldr	r3, [r7, #0]
90008778:	681a      	ldr	r2, [r3, #0]
9000877a:	687b      	ldr	r3, [r7, #4]
9000877c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000877e:	687b      	ldr	r3, [r7, #4]
90008780:	4a14      	ldr	r2, [pc, #80]	@ (900087d4 <TIM_Base_SetConfig+0x120>)
90008782:	4293      	cmp	r3, r2
90008784:	d00f      	beq.n	900087a6 <TIM_Base_SetConfig+0xf2>
90008786:	687b      	ldr	r3, [r7, #4]
90008788:	4a16      	ldr	r2, [pc, #88]	@ (900087e4 <TIM_Base_SetConfig+0x130>)
9000878a:	4293      	cmp	r3, r2
9000878c:	d00b      	beq.n	900087a6 <TIM_Base_SetConfig+0xf2>
9000878e:	687b      	ldr	r3, [r7, #4]
90008790:	4a15      	ldr	r2, [pc, #84]	@ (900087e8 <TIM_Base_SetConfig+0x134>)
90008792:	4293      	cmp	r3, r2
90008794:	d007      	beq.n	900087a6 <TIM_Base_SetConfig+0xf2>
90008796:	687b      	ldr	r3, [r7, #4]
90008798:	4a14      	ldr	r2, [pc, #80]	@ (900087ec <TIM_Base_SetConfig+0x138>)
9000879a:	4293      	cmp	r3, r2
9000879c:	d003      	beq.n	900087a6 <TIM_Base_SetConfig+0xf2>
9000879e:	687b      	ldr	r3, [r7, #4]
900087a0:	4a13      	ldr	r2, [pc, #76]	@ (900087f0 <TIM_Base_SetConfig+0x13c>)
900087a2:	4293      	cmp	r3, r2
900087a4:	d103      	bne.n	900087ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
900087a6:	683b      	ldr	r3, [r7, #0]
900087a8:	691a      	ldr	r2, [r3, #16]
900087aa:	687b      	ldr	r3, [r7, #4]
900087ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
900087ae:	687b      	ldr	r3, [r7, #4]
900087b0:	681b      	ldr	r3, [r3, #0]
900087b2:	f043 0204 	orr.w	r2, r3, #4
900087b6:	687b      	ldr	r3, [r7, #4]
900087b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
900087ba:	687b      	ldr	r3, [r7, #4]
900087bc:	2201      	movs	r2, #1
900087be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
900087c0:	687b      	ldr	r3, [r7, #4]
900087c2:	68fa      	ldr	r2, [r7, #12]
900087c4:	601a      	str	r2, [r3, #0]
}
900087c6:	bf00      	nop
900087c8:	3714      	adds	r7, #20
900087ca:	46bd      	mov	sp, r7
900087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900087d0:	4770      	bx	lr
900087d2:	bf00      	nop
900087d4:	40010000 	.word	0x40010000
900087d8:	40000400 	.word	0x40000400
900087dc:	40000800 	.word	0x40000800
900087e0:	40000c00 	.word	0x40000c00
900087e4:	40010400 	.word	0x40010400
900087e8:	40014000 	.word	0x40014000
900087ec:	40014400 	.word	0x40014400
900087f0:	40014800 	.word	0x40014800

900087f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
900087f4:	b480      	push	{r7}
900087f6:	b087      	sub	sp, #28
900087f8:	af00      	add	r7, sp, #0
900087fa:	6078      	str	r0, [r7, #4]
900087fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
900087fe:	687b      	ldr	r3, [r7, #4]
90008800:	6a1b      	ldr	r3, [r3, #32]
90008802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
90008804:	687b      	ldr	r3, [r7, #4]
90008806:	6a1b      	ldr	r3, [r3, #32]
90008808:	f023 0201 	bic.w	r2, r3, #1
9000880c:	687b      	ldr	r3, [r7, #4]
9000880e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
90008810:	687b      	ldr	r3, [r7, #4]
90008812:	685b      	ldr	r3, [r3, #4]
90008814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
90008816:	687b      	ldr	r3, [r7, #4]
90008818:	699b      	ldr	r3, [r3, #24]
9000881a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
9000881c:	68fa      	ldr	r2, [r7, #12]
9000881e:	4b37      	ldr	r3, [pc, #220]	@ (900088fc <TIM_OC1_SetConfig+0x108>)
90008820:	4013      	ands	r3, r2
90008822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
90008824:	68fb      	ldr	r3, [r7, #12]
90008826:	f023 0303 	bic.w	r3, r3, #3
9000882a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
9000882c:	683b      	ldr	r3, [r7, #0]
9000882e:	681b      	ldr	r3, [r3, #0]
90008830:	68fa      	ldr	r2, [r7, #12]
90008832:	4313      	orrs	r3, r2
90008834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
90008836:	697b      	ldr	r3, [r7, #20]
90008838:	f023 0302 	bic.w	r3, r3, #2
9000883c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
9000883e:	683b      	ldr	r3, [r7, #0]
90008840:	689b      	ldr	r3, [r3, #8]
90008842:	697a      	ldr	r2, [r7, #20]
90008844:	4313      	orrs	r3, r2
90008846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
90008848:	687b      	ldr	r3, [r7, #4]
9000884a:	4a2d      	ldr	r2, [pc, #180]	@ (90008900 <TIM_OC1_SetConfig+0x10c>)
9000884c:	4293      	cmp	r3, r2
9000884e:	d00f      	beq.n	90008870 <TIM_OC1_SetConfig+0x7c>
90008850:	687b      	ldr	r3, [r7, #4]
90008852:	4a2c      	ldr	r2, [pc, #176]	@ (90008904 <TIM_OC1_SetConfig+0x110>)
90008854:	4293      	cmp	r3, r2
90008856:	d00b      	beq.n	90008870 <TIM_OC1_SetConfig+0x7c>
90008858:	687b      	ldr	r3, [r7, #4]
9000885a:	4a2b      	ldr	r2, [pc, #172]	@ (90008908 <TIM_OC1_SetConfig+0x114>)
9000885c:	4293      	cmp	r3, r2
9000885e:	d007      	beq.n	90008870 <TIM_OC1_SetConfig+0x7c>
90008860:	687b      	ldr	r3, [r7, #4]
90008862:	4a2a      	ldr	r2, [pc, #168]	@ (9000890c <TIM_OC1_SetConfig+0x118>)
90008864:	4293      	cmp	r3, r2
90008866:	d003      	beq.n	90008870 <TIM_OC1_SetConfig+0x7c>
90008868:	687b      	ldr	r3, [r7, #4]
9000886a:	4a29      	ldr	r2, [pc, #164]	@ (90008910 <TIM_OC1_SetConfig+0x11c>)
9000886c:	4293      	cmp	r3, r2
9000886e:	d10c      	bne.n	9000888a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
90008870:	697b      	ldr	r3, [r7, #20]
90008872:	f023 0308 	bic.w	r3, r3, #8
90008876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
90008878:	683b      	ldr	r3, [r7, #0]
9000887a:	68db      	ldr	r3, [r3, #12]
9000887c:	697a      	ldr	r2, [r7, #20]
9000887e:	4313      	orrs	r3, r2
90008880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
90008882:	697b      	ldr	r3, [r7, #20]
90008884:	f023 0304 	bic.w	r3, r3, #4
90008888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000888a:	687b      	ldr	r3, [r7, #4]
9000888c:	4a1c      	ldr	r2, [pc, #112]	@ (90008900 <TIM_OC1_SetConfig+0x10c>)
9000888e:	4293      	cmp	r3, r2
90008890:	d00f      	beq.n	900088b2 <TIM_OC1_SetConfig+0xbe>
90008892:	687b      	ldr	r3, [r7, #4]
90008894:	4a1b      	ldr	r2, [pc, #108]	@ (90008904 <TIM_OC1_SetConfig+0x110>)
90008896:	4293      	cmp	r3, r2
90008898:	d00b      	beq.n	900088b2 <TIM_OC1_SetConfig+0xbe>
9000889a:	687b      	ldr	r3, [r7, #4]
9000889c:	4a1a      	ldr	r2, [pc, #104]	@ (90008908 <TIM_OC1_SetConfig+0x114>)
9000889e:	4293      	cmp	r3, r2
900088a0:	d007      	beq.n	900088b2 <TIM_OC1_SetConfig+0xbe>
900088a2:	687b      	ldr	r3, [r7, #4]
900088a4:	4a19      	ldr	r2, [pc, #100]	@ (9000890c <TIM_OC1_SetConfig+0x118>)
900088a6:	4293      	cmp	r3, r2
900088a8:	d003      	beq.n	900088b2 <TIM_OC1_SetConfig+0xbe>
900088aa:	687b      	ldr	r3, [r7, #4]
900088ac:	4a18      	ldr	r2, [pc, #96]	@ (90008910 <TIM_OC1_SetConfig+0x11c>)
900088ae:	4293      	cmp	r3, r2
900088b0:	d111      	bne.n	900088d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
900088b2:	693b      	ldr	r3, [r7, #16]
900088b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
900088b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
900088ba:	693b      	ldr	r3, [r7, #16]
900088bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
900088c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
900088c2:	683b      	ldr	r3, [r7, #0]
900088c4:	695b      	ldr	r3, [r3, #20]
900088c6:	693a      	ldr	r2, [r7, #16]
900088c8:	4313      	orrs	r3, r2
900088ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
900088cc:	683b      	ldr	r3, [r7, #0]
900088ce:	699b      	ldr	r3, [r3, #24]
900088d0:	693a      	ldr	r2, [r7, #16]
900088d2:	4313      	orrs	r3, r2
900088d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
900088d6:	687b      	ldr	r3, [r7, #4]
900088d8:	693a      	ldr	r2, [r7, #16]
900088da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
900088dc:	687b      	ldr	r3, [r7, #4]
900088de:	68fa      	ldr	r2, [r7, #12]
900088e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
900088e2:	683b      	ldr	r3, [r7, #0]
900088e4:	685a      	ldr	r2, [r3, #4]
900088e6:	687b      	ldr	r3, [r7, #4]
900088e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
900088ea:	687b      	ldr	r3, [r7, #4]
900088ec:	697a      	ldr	r2, [r7, #20]
900088ee:	621a      	str	r2, [r3, #32]
}
900088f0:	bf00      	nop
900088f2:	371c      	adds	r7, #28
900088f4:	46bd      	mov	sp, r7
900088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
900088fa:	4770      	bx	lr
900088fc:	fffeff8f 	.word	0xfffeff8f
90008900:	40010000 	.word	0x40010000
90008904:	40010400 	.word	0x40010400
90008908:	40014000 	.word	0x40014000
9000890c:	40014400 	.word	0x40014400
90008910:	40014800 	.word	0x40014800

90008914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
90008914:	b480      	push	{r7}
90008916:	b087      	sub	sp, #28
90008918:	af00      	add	r7, sp, #0
9000891a:	6078      	str	r0, [r7, #4]
9000891c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
9000891e:	687b      	ldr	r3, [r7, #4]
90008920:	6a1b      	ldr	r3, [r3, #32]
90008922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
90008924:	687b      	ldr	r3, [r7, #4]
90008926:	6a1b      	ldr	r3, [r3, #32]
90008928:	f023 0210 	bic.w	r2, r3, #16
9000892c:	687b      	ldr	r3, [r7, #4]
9000892e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
90008930:	687b      	ldr	r3, [r7, #4]
90008932:	685b      	ldr	r3, [r3, #4]
90008934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
90008936:	687b      	ldr	r3, [r7, #4]
90008938:	699b      	ldr	r3, [r3, #24]
9000893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
9000893c:	68fa      	ldr	r2, [r7, #12]
9000893e:	4b34      	ldr	r3, [pc, #208]	@ (90008a10 <TIM_OC2_SetConfig+0xfc>)
90008940:	4013      	ands	r3, r2
90008942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
90008944:	68fb      	ldr	r3, [r7, #12]
90008946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000894a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
9000894c:	683b      	ldr	r3, [r7, #0]
9000894e:	681b      	ldr	r3, [r3, #0]
90008950:	021b      	lsls	r3, r3, #8
90008952:	68fa      	ldr	r2, [r7, #12]
90008954:	4313      	orrs	r3, r2
90008956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
90008958:	697b      	ldr	r3, [r7, #20]
9000895a:	f023 0320 	bic.w	r3, r3, #32
9000895e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
90008960:	683b      	ldr	r3, [r7, #0]
90008962:	689b      	ldr	r3, [r3, #8]
90008964:	011b      	lsls	r3, r3, #4
90008966:	697a      	ldr	r2, [r7, #20]
90008968:	4313      	orrs	r3, r2
9000896a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
9000896c:	687b      	ldr	r3, [r7, #4]
9000896e:	4a29      	ldr	r2, [pc, #164]	@ (90008a14 <TIM_OC2_SetConfig+0x100>)
90008970:	4293      	cmp	r3, r2
90008972:	d003      	beq.n	9000897c <TIM_OC2_SetConfig+0x68>
90008974:	687b      	ldr	r3, [r7, #4]
90008976:	4a28      	ldr	r2, [pc, #160]	@ (90008a18 <TIM_OC2_SetConfig+0x104>)
90008978:	4293      	cmp	r3, r2
9000897a:	d10d      	bne.n	90008998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
9000897c:	697b      	ldr	r3, [r7, #20]
9000897e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90008982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
90008984:	683b      	ldr	r3, [r7, #0]
90008986:	68db      	ldr	r3, [r3, #12]
90008988:	011b      	lsls	r3, r3, #4
9000898a:	697a      	ldr	r2, [r7, #20]
9000898c:	4313      	orrs	r3, r2
9000898e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
90008990:	697b      	ldr	r3, [r7, #20]
90008992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
90008996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
90008998:	687b      	ldr	r3, [r7, #4]
9000899a:	4a1e      	ldr	r2, [pc, #120]	@ (90008a14 <TIM_OC2_SetConfig+0x100>)
9000899c:	4293      	cmp	r3, r2
9000899e:	d00f      	beq.n	900089c0 <TIM_OC2_SetConfig+0xac>
900089a0:	687b      	ldr	r3, [r7, #4]
900089a2:	4a1d      	ldr	r2, [pc, #116]	@ (90008a18 <TIM_OC2_SetConfig+0x104>)
900089a4:	4293      	cmp	r3, r2
900089a6:	d00b      	beq.n	900089c0 <TIM_OC2_SetConfig+0xac>
900089a8:	687b      	ldr	r3, [r7, #4]
900089aa:	4a1c      	ldr	r2, [pc, #112]	@ (90008a1c <TIM_OC2_SetConfig+0x108>)
900089ac:	4293      	cmp	r3, r2
900089ae:	d007      	beq.n	900089c0 <TIM_OC2_SetConfig+0xac>
900089b0:	687b      	ldr	r3, [r7, #4]
900089b2:	4a1b      	ldr	r2, [pc, #108]	@ (90008a20 <TIM_OC2_SetConfig+0x10c>)
900089b4:	4293      	cmp	r3, r2
900089b6:	d003      	beq.n	900089c0 <TIM_OC2_SetConfig+0xac>
900089b8:	687b      	ldr	r3, [r7, #4]
900089ba:	4a1a      	ldr	r2, [pc, #104]	@ (90008a24 <TIM_OC2_SetConfig+0x110>)
900089bc:	4293      	cmp	r3, r2
900089be:	d113      	bne.n	900089e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
900089c0:	693b      	ldr	r3, [r7, #16]
900089c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
900089c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
900089c8:	693b      	ldr	r3, [r7, #16]
900089ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
900089ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
900089d0:	683b      	ldr	r3, [r7, #0]
900089d2:	695b      	ldr	r3, [r3, #20]
900089d4:	009b      	lsls	r3, r3, #2
900089d6:	693a      	ldr	r2, [r7, #16]
900089d8:	4313      	orrs	r3, r2
900089da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
900089dc:	683b      	ldr	r3, [r7, #0]
900089de:	699b      	ldr	r3, [r3, #24]
900089e0:	009b      	lsls	r3, r3, #2
900089e2:	693a      	ldr	r2, [r7, #16]
900089e4:	4313      	orrs	r3, r2
900089e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
900089e8:	687b      	ldr	r3, [r7, #4]
900089ea:	693a      	ldr	r2, [r7, #16]
900089ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
900089ee:	687b      	ldr	r3, [r7, #4]
900089f0:	68fa      	ldr	r2, [r7, #12]
900089f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
900089f4:	683b      	ldr	r3, [r7, #0]
900089f6:	685a      	ldr	r2, [r3, #4]
900089f8:	687b      	ldr	r3, [r7, #4]
900089fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
900089fc:	687b      	ldr	r3, [r7, #4]
900089fe:	697a      	ldr	r2, [r7, #20]
90008a00:	621a      	str	r2, [r3, #32]
}
90008a02:	bf00      	nop
90008a04:	371c      	adds	r7, #28
90008a06:	46bd      	mov	sp, r7
90008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
90008a0c:	4770      	bx	lr
90008a0e:	bf00      	nop
90008a10:	feff8fff 	.word	0xfeff8fff
90008a14:	40010000 	.word	0x40010000
90008a18:	40010400 	.word	0x40010400
90008a1c:	40014000 	.word	0x40014000
90008a20:	40014400 	.word	0x40014400
90008a24:	40014800 	.word	0x40014800

90008a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
90008a28:	b480      	push	{r7}
90008a2a:	b087      	sub	sp, #28
90008a2c:	af00      	add	r7, sp, #0
90008a2e:	6078      	str	r0, [r7, #4]
90008a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
90008a32:	687b      	ldr	r3, [r7, #4]
90008a34:	6a1b      	ldr	r3, [r3, #32]
90008a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
90008a38:	687b      	ldr	r3, [r7, #4]
90008a3a:	6a1b      	ldr	r3, [r3, #32]
90008a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
90008a40:	687b      	ldr	r3, [r7, #4]
90008a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
90008a44:	687b      	ldr	r3, [r7, #4]
90008a46:	685b      	ldr	r3, [r3, #4]
90008a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
90008a4a:	687b      	ldr	r3, [r7, #4]
90008a4c:	69db      	ldr	r3, [r3, #28]
90008a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
90008a50:	68fa      	ldr	r2, [r7, #12]
90008a52:	4b33      	ldr	r3, [pc, #204]	@ (90008b20 <TIM_OC3_SetConfig+0xf8>)
90008a54:	4013      	ands	r3, r2
90008a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
90008a58:	68fb      	ldr	r3, [r7, #12]
90008a5a:	f023 0303 	bic.w	r3, r3, #3
90008a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
90008a60:	683b      	ldr	r3, [r7, #0]
90008a62:	681b      	ldr	r3, [r3, #0]
90008a64:	68fa      	ldr	r2, [r7, #12]
90008a66:	4313      	orrs	r3, r2
90008a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
90008a6a:	697b      	ldr	r3, [r7, #20]
90008a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
90008a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
90008a72:	683b      	ldr	r3, [r7, #0]
90008a74:	689b      	ldr	r3, [r3, #8]
90008a76:	021b      	lsls	r3, r3, #8
90008a78:	697a      	ldr	r2, [r7, #20]
90008a7a:	4313      	orrs	r3, r2
90008a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
90008a7e:	687b      	ldr	r3, [r7, #4]
90008a80:	4a28      	ldr	r2, [pc, #160]	@ (90008b24 <TIM_OC3_SetConfig+0xfc>)
90008a82:	4293      	cmp	r3, r2
90008a84:	d003      	beq.n	90008a8e <TIM_OC3_SetConfig+0x66>
90008a86:	687b      	ldr	r3, [r7, #4]
90008a88:	4a27      	ldr	r2, [pc, #156]	@ (90008b28 <TIM_OC3_SetConfig+0x100>)
90008a8a:	4293      	cmp	r3, r2
90008a8c:	d10d      	bne.n	90008aaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
90008a8e:	697b      	ldr	r3, [r7, #20]
90008a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
90008a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
90008a96:	683b      	ldr	r3, [r7, #0]
90008a98:	68db      	ldr	r3, [r3, #12]
90008a9a:	021b      	lsls	r3, r3, #8
90008a9c:	697a      	ldr	r2, [r7, #20]
90008a9e:	4313      	orrs	r3, r2
90008aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
90008aa2:	697b      	ldr	r3, [r7, #20]
90008aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
90008aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
90008aaa:	687b      	ldr	r3, [r7, #4]
90008aac:	4a1d      	ldr	r2, [pc, #116]	@ (90008b24 <TIM_OC3_SetConfig+0xfc>)
90008aae:	4293      	cmp	r3, r2
90008ab0:	d00f      	beq.n	90008ad2 <TIM_OC3_SetConfig+0xaa>
90008ab2:	687b      	ldr	r3, [r7, #4]
90008ab4:	4a1c      	ldr	r2, [pc, #112]	@ (90008b28 <TIM_OC3_SetConfig+0x100>)
90008ab6:	4293      	cmp	r3, r2
90008ab8:	d00b      	beq.n	90008ad2 <TIM_OC3_SetConfig+0xaa>
90008aba:	687b      	ldr	r3, [r7, #4]
90008abc:	4a1b      	ldr	r2, [pc, #108]	@ (90008b2c <TIM_OC3_SetConfig+0x104>)
90008abe:	4293      	cmp	r3, r2
90008ac0:	d007      	beq.n	90008ad2 <TIM_OC3_SetConfig+0xaa>
90008ac2:	687b      	ldr	r3, [r7, #4]
90008ac4:	4a1a      	ldr	r2, [pc, #104]	@ (90008b30 <TIM_OC3_SetConfig+0x108>)
90008ac6:	4293      	cmp	r3, r2
90008ac8:	d003      	beq.n	90008ad2 <TIM_OC3_SetConfig+0xaa>
90008aca:	687b      	ldr	r3, [r7, #4]
90008acc:	4a19      	ldr	r2, [pc, #100]	@ (90008b34 <TIM_OC3_SetConfig+0x10c>)
90008ace:	4293      	cmp	r3, r2
90008ad0:	d113      	bne.n	90008afa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
90008ad2:	693b      	ldr	r3, [r7, #16]
90008ad4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90008ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
90008ada:	693b      	ldr	r3, [r7, #16]
90008adc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
90008ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
90008ae2:	683b      	ldr	r3, [r7, #0]
90008ae4:	695b      	ldr	r3, [r3, #20]
90008ae6:	011b      	lsls	r3, r3, #4
90008ae8:	693a      	ldr	r2, [r7, #16]
90008aea:	4313      	orrs	r3, r2
90008aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
90008aee:	683b      	ldr	r3, [r7, #0]
90008af0:	699b      	ldr	r3, [r3, #24]
90008af2:	011b      	lsls	r3, r3, #4
90008af4:	693a      	ldr	r2, [r7, #16]
90008af6:	4313      	orrs	r3, r2
90008af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
90008afa:	687b      	ldr	r3, [r7, #4]
90008afc:	693a      	ldr	r2, [r7, #16]
90008afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
90008b00:	687b      	ldr	r3, [r7, #4]
90008b02:	68fa      	ldr	r2, [r7, #12]
90008b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
90008b06:	683b      	ldr	r3, [r7, #0]
90008b08:	685a      	ldr	r2, [r3, #4]
90008b0a:	687b      	ldr	r3, [r7, #4]
90008b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
90008b0e:	687b      	ldr	r3, [r7, #4]
90008b10:	697a      	ldr	r2, [r7, #20]
90008b12:	621a      	str	r2, [r3, #32]
}
90008b14:	bf00      	nop
90008b16:	371c      	adds	r7, #28
90008b18:	46bd      	mov	sp, r7
90008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b1e:	4770      	bx	lr
90008b20:	fffeff8f 	.word	0xfffeff8f
90008b24:	40010000 	.word	0x40010000
90008b28:	40010400 	.word	0x40010400
90008b2c:	40014000 	.word	0x40014000
90008b30:	40014400 	.word	0x40014400
90008b34:	40014800 	.word	0x40014800

90008b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
90008b38:	b480      	push	{r7}
90008b3a:	b087      	sub	sp, #28
90008b3c:	af00      	add	r7, sp, #0
90008b3e:	6078      	str	r0, [r7, #4]
90008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
90008b42:	687b      	ldr	r3, [r7, #4]
90008b44:	6a1b      	ldr	r3, [r3, #32]
90008b46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
90008b48:	687b      	ldr	r3, [r7, #4]
90008b4a:	6a1b      	ldr	r3, [r3, #32]
90008b4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
90008b50:	687b      	ldr	r3, [r7, #4]
90008b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
90008b54:	687b      	ldr	r3, [r7, #4]
90008b56:	685b      	ldr	r3, [r3, #4]
90008b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
90008b5a:	687b      	ldr	r3, [r7, #4]
90008b5c:	69db      	ldr	r3, [r3, #28]
90008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
90008b60:	68fa      	ldr	r2, [r7, #12]
90008b62:	4b24      	ldr	r3, [pc, #144]	@ (90008bf4 <TIM_OC4_SetConfig+0xbc>)
90008b64:	4013      	ands	r3, r2
90008b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
90008b68:	68fb      	ldr	r3, [r7, #12]
90008b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90008b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
90008b70:	683b      	ldr	r3, [r7, #0]
90008b72:	681b      	ldr	r3, [r3, #0]
90008b74:	021b      	lsls	r3, r3, #8
90008b76:	68fa      	ldr	r2, [r7, #12]
90008b78:	4313      	orrs	r3, r2
90008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
90008b7c:	693b      	ldr	r3, [r7, #16]
90008b7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
90008b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
90008b84:	683b      	ldr	r3, [r7, #0]
90008b86:	689b      	ldr	r3, [r3, #8]
90008b88:	031b      	lsls	r3, r3, #12
90008b8a:	693a      	ldr	r2, [r7, #16]
90008b8c:	4313      	orrs	r3, r2
90008b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
90008b90:	687b      	ldr	r3, [r7, #4]
90008b92:	4a19      	ldr	r2, [pc, #100]	@ (90008bf8 <TIM_OC4_SetConfig+0xc0>)
90008b94:	4293      	cmp	r3, r2
90008b96:	d00f      	beq.n	90008bb8 <TIM_OC4_SetConfig+0x80>
90008b98:	687b      	ldr	r3, [r7, #4]
90008b9a:	4a18      	ldr	r2, [pc, #96]	@ (90008bfc <TIM_OC4_SetConfig+0xc4>)
90008b9c:	4293      	cmp	r3, r2
90008b9e:	d00b      	beq.n	90008bb8 <TIM_OC4_SetConfig+0x80>
90008ba0:	687b      	ldr	r3, [r7, #4]
90008ba2:	4a17      	ldr	r2, [pc, #92]	@ (90008c00 <TIM_OC4_SetConfig+0xc8>)
90008ba4:	4293      	cmp	r3, r2
90008ba6:	d007      	beq.n	90008bb8 <TIM_OC4_SetConfig+0x80>
90008ba8:	687b      	ldr	r3, [r7, #4]
90008baa:	4a16      	ldr	r2, [pc, #88]	@ (90008c04 <TIM_OC4_SetConfig+0xcc>)
90008bac:	4293      	cmp	r3, r2
90008bae:	d003      	beq.n	90008bb8 <TIM_OC4_SetConfig+0x80>
90008bb0:	687b      	ldr	r3, [r7, #4]
90008bb2:	4a15      	ldr	r2, [pc, #84]	@ (90008c08 <TIM_OC4_SetConfig+0xd0>)
90008bb4:	4293      	cmp	r3, r2
90008bb6:	d109      	bne.n	90008bcc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
90008bb8:	697b      	ldr	r3, [r7, #20]
90008bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
90008bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
90008bc0:	683b      	ldr	r3, [r7, #0]
90008bc2:	695b      	ldr	r3, [r3, #20]
90008bc4:	019b      	lsls	r3, r3, #6
90008bc6:	697a      	ldr	r2, [r7, #20]
90008bc8:	4313      	orrs	r3, r2
90008bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
90008bcc:	687b      	ldr	r3, [r7, #4]
90008bce:	697a      	ldr	r2, [r7, #20]
90008bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
90008bd2:	687b      	ldr	r3, [r7, #4]
90008bd4:	68fa      	ldr	r2, [r7, #12]
90008bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
90008bd8:	683b      	ldr	r3, [r7, #0]
90008bda:	685a      	ldr	r2, [r3, #4]
90008bdc:	687b      	ldr	r3, [r7, #4]
90008bde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
90008be0:	687b      	ldr	r3, [r7, #4]
90008be2:	693a      	ldr	r2, [r7, #16]
90008be4:	621a      	str	r2, [r3, #32]
}
90008be6:	bf00      	nop
90008be8:	371c      	adds	r7, #28
90008bea:	46bd      	mov	sp, r7
90008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
90008bf0:	4770      	bx	lr
90008bf2:	bf00      	nop
90008bf4:	feff8fff 	.word	0xfeff8fff
90008bf8:	40010000 	.word	0x40010000
90008bfc:	40010400 	.word	0x40010400
90008c00:	40014000 	.word	0x40014000
90008c04:	40014400 	.word	0x40014400
90008c08:	40014800 	.word	0x40014800

90008c0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
90008c0c:	b480      	push	{r7}
90008c0e:	b087      	sub	sp, #28
90008c10:	af00      	add	r7, sp, #0
90008c12:	6078      	str	r0, [r7, #4]
90008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
90008c16:	687b      	ldr	r3, [r7, #4]
90008c18:	6a1b      	ldr	r3, [r3, #32]
90008c1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
90008c1c:	687b      	ldr	r3, [r7, #4]
90008c1e:	6a1b      	ldr	r3, [r3, #32]
90008c20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
90008c24:	687b      	ldr	r3, [r7, #4]
90008c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
90008c28:	687b      	ldr	r3, [r7, #4]
90008c2a:	685b      	ldr	r3, [r3, #4]
90008c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
90008c2e:	687b      	ldr	r3, [r7, #4]
90008c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
90008c34:	68fa      	ldr	r2, [r7, #12]
90008c36:	4b21      	ldr	r3, [pc, #132]	@ (90008cbc <TIM_OC5_SetConfig+0xb0>)
90008c38:	4013      	ands	r3, r2
90008c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
90008c3c:	683b      	ldr	r3, [r7, #0]
90008c3e:	681b      	ldr	r3, [r3, #0]
90008c40:	68fa      	ldr	r2, [r7, #12]
90008c42:	4313      	orrs	r3, r2
90008c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
90008c46:	693b      	ldr	r3, [r7, #16]
90008c48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
90008c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
90008c4e:	683b      	ldr	r3, [r7, #0]
90008c50:	689b      	ldr	r3, [r3, #8]
90008c52:	041b      	lsls	r3, r3, #16
90008c54:	693a      	ldr	r2, [r7, #16]
90008c56:	4313      	orrs	r3, r2
90008c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
90008c5a:	687b      	ldr	r3, [r7, #4]
90008c5c:	4a18      	ldr	r2, [pc, #96]	@ (90008cc0 <TIM_OC5_SetConfig+0xb4>)
90008c5e:	4293      	cmp	r3, r2
90008c60:	d00f      	beq.n	90008c82 <TIM_OC5_SetConfig+0x76>
90008c62:	687b      	ldr	r3, [r7, #4]
90008c64:	4a17      	ldr	r2, [pc, #92]	@ (90008cc4 <TIM_OC5_SetConfig+0xb8>)
90008c66:	4293      	cmp	r3, r2
90008c68:	d00b      	beq.n	90008c82 <TIM_OC5_SetConfig+0x76>
90008c6a:	687b      	ldr	r3, [r7, #4]
90008c6c:	4a16      	ldr	r2, [pc, #88]	@ (90008cc8 <TIM_OC5_SetConfig+0xbc>)
90008c6e:	4293      	cmp	r3, r2
90008c70:	d007      	beq.n	90008c82 <TIM_OC5_SetConfig+0x76>
90008c72:	687b      	ldr	r3, [r7, #4]
90008c74:	4a15      	ldr	r2, [pc, #84]	@ (90008ccc <TIM_OC5_SetConfig+0xc0>)
90008c76:	4293      	cmp	r3, r2
90008c78:	d003      	beq.n	90008c82 <TIM_OC5_SetConfig+0x76>
90008c7a:	687b      	ldr	r3, [r7, #4]
90008c7c:	4a14      	ldr	r2, [pc, #80]	@ (90008cd0 <TIM_OC5_SetConfig+0xc4>)
90008c7e:	4293      	cmp	r3, r2
90008c80:	d109      	bne.n	90008c96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
90008c82:	697b      	ldr	r3, [r7, #20]
90008c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90008c88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
90008c8a:	683b      	ldr	r3, [r7, #0]
90008c8c:	695b      	ldr	r3, [r3, #20]
90008c8e:	021b      	lsls	r3, r3, #8
90008c90:	697a      	ldr	r2, [r7, #20]
90008c92:	4313      	orrs	r3, r2
90008c94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
90008c96:	687b      	ldr	r3, [r7, #4]
90008c98:	697a      	ldr	r2, [r7, #20]
90008c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
90008c9c:	687b      	ldr	r3, [r7, #4]
90008c9e:	68fa      	ldr	r2, [r7, #12]
90008ca0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
90008ca2:	683b      	ldr	r3, [r7, #0]
90008ca4:	685a      	ldr	r2, [r3, #4]
90008ca6:	687b      	ldr	r3, [r7, #4]
90008ca8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
90008caa:	687b      	ldr	r3, [r7, #4]
90008cac:	693a      	ldr	r2, [r7, #16]
90008cae:	621a      	str	r2, [r3, #32]
}
90008cb0:	bf00      	nop
90008cb2:	371c      	adds	r7, #28
90008cb4:	46bd      	mov	sp, r7
90008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
90008cba:	4770      	bx	lr
90008cbc:	fffeff8f 	.word	0xfffeff8f
90008cc0:	40010000 	.word	0x40010000
90008cc4:	40010400 	.word	0x40010400
90008cc8:	40014000 	.word	0x40014000
90008ccc:	40014400 	.word	0x40014400
90008cd0:	40014800 	.word	0x40014800

90008cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
90008cd4:	b480      	push	{r7}
90008cd6:	b087      	sub	sp, #28
90008cd8:	af00      	add	r7, sp, #0
90008cda:	6078      	str	r0, [r7, #4]
90008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
90008cde:	687b      	ldr	r3, [r7, #4]
90008ce0:	6a1b      	ldr	r3, [r3, #32]
90008ce2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
90008ce4:	687b      	ldr	r3, [r7, #4]
90008ce6:	6a1b      	ldr	r3, [r3, #32]
90008ce8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
90008cec:	687b      	ldr	r3, [r7, #4]
90008cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
90008cf0:	687b      	ldr	r3, [r7, #4]
90008cf2:	685b      	ldr	r3, [r3, #4]
90008cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
90008cf6:	687b      	ldr	r3, [r7, #4]
90008cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
90008cfc:	68fa      	ldr	r2, [r7, #12]
90008cfe:	4b22      	ldr	r3, [pc, #136]	@ (90008d88 <TIM_OC6_SetConfig+0xb4>)
90008d00:	4013      	ands	r3, r2
90008d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
90008d04:	683b      	ldr	r3, [r7, #0]
90008d06:	681b      	ldr	r3, [r3, #0]
90008d08:	021b      	lsls	r3, r3, #8
90008d0a:	68fa      	ldr	r2, [r7, #12]
90008d0c:	4313      	orrs	r3, r2
90008d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
90008d10:	693b      	ldr	r3, [r7, #16]
90008d12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
90008d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
90008d18:	683b      	ldr	r3, [r7, #0]
90008d1a:	689b      	ldr	r3, [r3, #8]
90008d1c:	051b      	lsls	r3, r3, #20
90008d1e:	693a      	ldr	r2, [r7, #16]
90008d20:	4313      	orrs	r3, r2
90008d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
90008d24:	687b      	ldr	r3, [r7, #4]
90008d26:	4a19      	ldr	r2, [pc, #100]	@ (90008d8c <TIM_OC6_SetConfig+0xb8>)
90008d28:	4293      	cmp	r3, r2
90008d2a:	d00f      	beq.n	90008d4c <TIM_OC6_SetConfig+0x78>
90008d2c:	687b      	ldr	r3, [r7, #4]
90008d2e:	4a18      	ldr	r2, [pc, #96]	@ (90008d90 <TIM_OC6_SetConfig+0xbc>)
90008d30:	4293      	cmp	r3, r2
90008d32:	d00b      	beq.n	90008d4c <TIM_OC6_SetConfig+0x78>
90008d34:	687b      	ldr	r3, [r7, #4]
90008d36:	4a17      	ldr	r2, [pc, #92]	@ (90008d94 <TIM_OC6_SetConfig+0xc0>)
90008d38:	4293      	cmp	r3, r2
90008d3a:	d007      	beq.n	90008d4c <TIM_OC6_SetConfig+0x78>
90008d3c:	687b      	ldr	r3, [r7, #4]
90008d3e:	4a16      	ldr	r2, [pc, #88]	@ (90008d98 <TIM_OC6_SetConfig+0xc4>)
90008d40:	4293      	cmp	r3, r2
90008d42:	d003      	beq.n	90008d4c <TIM_OC6_SetConfig+0x78>
90008d44:	687b      	ldr	r3, [r7, #4]
90008d46:	4a15      	ldr	r2, [pc, #84]	@ (90008d9c <TIM_OC6_SetConfig+0xc8>)
90008d48:	4293      	cmp	r3, r2
90008d4a:	d109      	bne.n	90008d60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
90008d4c:	697b      	ldr	r3, [r7, #20]
90008d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90008d52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
90008d54:	683b      	ldr	r3, [r7, #0]
90008d56:	695b      	ldr	r3, [r3, #20]
90008d58:	029b      	lsls	r3, r3, #10
90008d5a:	697a      	ldr	r2, [r7, #20]
90008d5c:	4313      	orrs	r3, r2
90008d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
90008d60:	687b      	ldr	r3, [r7, #4]
90008d62:	697a      	ldr	r2, [r7, #20]
90008d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
90008d66:	687b      	ldr	r3, [r7, #4]
90008d68:	68fa      	ldr	r2, [r7, #12]
90008d6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
90008d6c:	683b      	ldr	r3, [r7, #0]
90008d6e:	685a      	ldr	r2, [r3, #4]
90008d70:	687b      	ldr	r3, [r7, #4]
90008d72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
90008d74:	687b      	ldr	r3, [r7, #4]
90008d76:	693a      	ldr	r2, [r7, #16]
90008d78:	621a      	str	r2, [r3, #32]
}
90008d7a:	bf00      	nop
90008d7c:	371c      	adds	r7, #28
90008d7e:	46bd      	mov	sp, r7
90008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
90008d84:	4770      	bx	lr
90008d86:	bf00      	nop
90008d88:	feff8fff 	.word	0xfeff8fff
90008d8c:	40010000 	.word	0x40010000
90008d90:	40010400 	.word	0x40010400
90008d94:	40014000 	.word	0x40014000
90008d98:	40014400 	.word	0x40014400
90008d9c:	40014800 	.word	0x40014800

90008da0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
90008da0:	b480      	push	{r7}
90008da2:	b087      	sub	sp, #28
90008da4:	af00      	add	r7, sp, #0
90008da6:	60f8      	str	r0, [r7, #12]
90008da8:	60b9      	str	r1, [r7, #8]
90008daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
90008dac:	68bb      	ldr	r3, [r7, #8]
90008dae:	f003 031f 	and.w	r3, r3, #31
90008db2:	2201      	movs	r2, #1
90008db4:	fa02 f303 	lsl.w	r3, r2, r3
90008db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
90008dba:	68fb      	ldr	r3, [r7, #12]
90008dbc:	6a1a      	ldr	r2, [r3, #32]
90008dbe:	697b      	ldr	r3, [r7, #20]
90008dc0:	43db      	mvns	r3, r3
90008dc2:	401a      	ands	r2, r3
90008dc4:	68fb      	ldr	r3, [r7, #12]
90008dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
90008dc8:	68fb      	ldr	r3, [r7, #12]
90008dca:	6a1a      	ldr	r2, [r3, #32]
90008dcc:	68bb      	ldr	r3, [r7, #8]
90008dce:	f003 031f 	and.w	r3, r3, #31
90008dd2:	6879      	ldr	r1, [r7, #4]
90008dd4:	fa01 f303 	lsl.w	r3, r1, r3
90008dd8:	431a      	orrs	r2, r3
90008dda:	68fb      	ldr	r3, [r7, #12]
90008ddc:	621a      	str	r2, [r3, #32]
}
90008dde:	bf00      	nop
90008de0:	371c      	adds	r7, #28
90008de2:	46bd      	mov	sp, r7
90008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
90008de8:	4770      	bx	lr

90008dea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90008dea:	b580      	push	{r7, lr}
90008dec:	b082      	sub	sp, #8
90008dee:	af00      	add	r7, sp, #0
90008df0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90008df2:	687b      	ldr	r3, [r7, #4]
90008df4:	2b00      	cmp	r3, #0
90008df6:	d101      	bne.n	90008dfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90008df8:	2301      	movs	r3, #1
90008dfa:	e042      	b.n	90008e82 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90008dfc:	687b      	ldr	r3, [r7, #4]
90008dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008e02:	2b00      	cmp	r3, #0
90008e04:	d106      	bne.n	90008e14 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90008e06:	687b      	ldr	r3, [r7, #4]
90008e08:	2200      	movs	r2, #0
90008e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90008e0e:	6878      	ldr	r0, [r7, #4]
90008e10:	f7f7 ff7c 	bl	90000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90008e14:	687b      	ldr	r3, [r7, #4]
90008e16:	2224      	movs	r2, #36	@ 0x24
90008e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90008e1c:	687b      	ldr	r3, [r7, #4]
90008e1e:	681b      	ldr	r3, [r3, #0]
90008e20:	681a      	ldr	r2, [r3, #0]
90008e22:	687b      	ldr	r3, [r7, #4]
90008e24:	681b      	ldr	r3, [r3, #0]
90008e26:	f022 0201 	bic.w	r2, r2, #1
90008e2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90008e2c:	687b      	ldr	r3, [r7, #4]
90008e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008e30:	2b00      	cmp	r3, #0
90008e32:	d002      	beq.n	90008e3a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90008e34:	6878      	ldr	r0, [r7, #4]
90008e36:	f000 fe1f 	bl	90009a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90008e3a:	6878      	ldr	r0, [r7, #4]
90008e3c:	f000 f8b4 	bl	90008fa8 <UART_SetConfig>
90008e40:	4603      	mov	r3, r0
90008e42:	2b01      	cmp	r3, #1
90008e44:	d101      	bne.n	90008e4a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90008e46:	2301      	movs	r3, #1
90008e48:	e01b      	b.n	90008e82 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90008e4a:	687b      	ldr	r3, [r7, #4]
90008e4c:	681b      	ldr	r3, [r3, #0]
90008e4e:	685a      	ldr	r2, [r3, #4]
90008e50:	687b      	ldr	r3, [r7, #4]
90008e52:	681b      	ldr	r3, [r3, #0]
90008e54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90008e58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90008e5a:	687b      	ldr	r3, [r7, #4]
90008e5c:	681b      	ldr	r3, [r3, #0]
90008e5e:	689a      	ldr	r2, [r3, #8]
90008e60:	687b      	ldr	r3, [r7, #4]
90008e62:	681b      	ldr	r3, [r3, #0]
90008e64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90008e68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90008e6a:	687b      	ldr	r3, [r7, #4]
90008e6c:	681b      	ldr	r3, [r3, #0]
90008e6e:	681a      	ldr	r2, [r3, #0]
90008e70:	687b      	ldr	r3, [r7, #4]
90008e72:	681b      	ldr	r3, [r3, #0]
90008e74:	f042 0201 	orr.w	r2, r2, #1
90008e78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90008e7a:	6878      	ldr	r0, [r7, #4]
90008e7c:	f000 fe9e 	bl	90009bbc <UART_CheckIdleState>
90008e80:	4603      	mov	r3, r0
}
90008e82:	4618      	mov	r0, r3
90008e84:	3708      	adds	r7, #8
90008e86:	46bd      	mov	sp, r7
90008e88:	bd80      	pop	{r7, pc}

90008e8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90008e8a:	b580      	push	{r7, lr}
90008e8c:	b08a      	sub	sp, #40	@ 0x28
90008e8e:	af02      	add	r7, sp, #8
90008e90:	60f8      	str	r0, [r7, #12]
90008e92:	60b9      	str	r1, [r7, #8]
90008e94:	603b      	str	r3, [r7, #0]
90008e96:	4613      	mov	r3, r2
90008e98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90008e9a:	68fb      	ldr	r3, [r7, #12]
90008e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008ea0:	2b20      	cmp	r3, #32
90008ea2:	d17b      	bne.n	90008f9c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90008ea4:	68bb      	ldr	r3, [r7, #8]
90008ea6:	2b00      	cmp	r3, #0
90008ea8:	d002      	beq.n	90008eb0 <HAL_UART_Transmit+0x26>
90008eaa:	88fb      	ldrh	r3, [r7, #6]
90008eac:	2b00      	cmp	r3, #0
90008eae:	d101      	bne.n	90008eb4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90008eb0:	2301      	movs	r3, #1
90008eb2:	e074      	b.n	90008f9e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90008eb4:	68fb      	ldr	r3, [r7, #12]
90008eb6:	2200      	movs	r2, #0
90008eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90008ebc:	68fb      	ldr	r3, [r7, #12]
90008ebe:	2221      	movs	r2, #33	@ 0x21
90008ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90008ec4:	f7fa fac0 	bl	90003448 <HAL_GetTick>
90008ec8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90008eca:	68fb      	ldr	r3, [r7, #12]
90008ecc:	88fa      	ldrh	r2, [r7, #6]
90008ece:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90008ed2:	68fb      	ldr	r3, [r7, #12]
90008ed4:	88fa      	ldrh	r2, [r7, #6]
90008ed6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90008eda:	68fb      	ldr	r3, [r7, #12]
90008edc:	689b      	ldr	r3, [r3, #8]
90008ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008ee2:	d108      	bne.n	90008ef6 <HAL_UART_Transmit+0x6c>
90008ee4:	68fb      	ldr	r3, [r7, #12]
90008ee6:	691b      	ldr	r3, [r3, #16]
90008ee8:	2b00      	cmp	r3, #0
90008eea:	d104      	bne.n	90008ef6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90008eec:	2300      	movs	r3, #0
90008eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90008ef0:	68bb      	ldr	r3, [r7, #8]
90008ef2:	61bb      	str	r3, [r7, #24]
90008ef4:	e003      	b.n	90008efe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90008ef6:	68bb      	ldr	r3, [r7, #8]
90008ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90008efa:	2300      	movs	r3, #0
90008efc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90008efe:	e030      	b.n	90008f62 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90008f00:	683b      	ldr	r3, [r7, #0]
90008f02:	9300      	str	r3, [sp, #0]
90008f04:	697b      	ldr	r3, [r7, #20]
90008f06:	2200      	movs	r2, #0
90008f08:	2180      	movs	r1, #128	@ 0x80
90008f0a:	68f8      	ldr	r0, [r7, #12]
90008f0c:	f000 ff00 	bl	90009d10 <UART_WaitOnFlagUntilTimeout>
90008f10:	4603      	mov	r3, r0
90008f12:	2b00      	cmp	r3, #0
90008f14:	d005      	beq.n	90008f22 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90008f16:	68fb      	ldr	r3, [r7, #12]
90008f18:	2220      	movs	r2, #32
90008f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90008f1e:	2303      	movs	r3, #3
90008f20:	e03d      	b.n	90008f9e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90008f22:	69fb      	ldr	r3, [r7, #28]
90008f24:	2b00      	cmp	r3, #0
90008f26:	d10b      	bne.n	90008f40 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90008f28:	69bb      	ldr	r3, [r7, #24]
90008f2a:	881b      	ldrh	r3, [r3, #0]
90008f2c:	461a      	mov	r2, r3
90008f2e:	68fb      	ldr	r3, [r7, #12]
90008f30:	681b      	ldr	r3, [r3, #0]
90008f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
90008f36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90008f38:	69bb      	ldr	r3, [r7, #24]
90008f3a:	3302      	adds	r3, #2
90008f3c:	61bb      	str	r3, [r7, #24]
90008f3e:	e007      	b.n	90008f50 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90008f40:	69fb      	ldr	r3, [r7, #28]
90008f42:	781a      	ldrb	r2, [r3, #0]
90008f44:	68fb      	ldr	r3, [r7, #12]
90008f46:	681b      	ldr	r3, [r3, #0]
90008f48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90008f4a:	69fb      	ldr	r3, [r7, #28]
90008f4c:	3301      	adds	r3, #1
90008f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90008f50:	68fb      	ldr	r3, [r7, #12]
90008f52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90008f56:	b29b      	uxth	r3, r3
90008f58:	3b01      	subs	r3, #1
90008f5a:	b29a      	uxth	r2, r3
90008f5c:	68fb      	ldr	r3, [r7, #12]
90008f5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90008f62:	68fb      	ldr	r3, [r7, #12]
90008f64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90008f68:	b29b      	uxth	r3, r3
90008f6a:	2b00      	cmp	r3, #0
90008f6c:	d1c8      	bne.n	90008f00 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90008f6e:	683b      	ldr	r3, [r7, #0]
90008f70:	9300      	str	r3, [sp, #0]
90008f72:	697b      	ldr	r3, [r7, #20]
90008f74:	2200      	movs	r2, #0
90008f76:	2140      	movs	r1, #64	@ 0x40
90008f78:	68f8      	ldr	r0, [r7, #12]
90008f7a:	f000 fec9 	bl	90009d10 <UART_WaitOnFlagUntilTimeout>
90008f7e:	4603      	mov	r3, r0
90008f80:	2b00      	cmp	r3, #0
90008f82:	d005      	beq.n	90008f90 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90008f84:	68fb      	ldr	r3, [r7, #12]
90008f86:	2220      	movs	r2, #32
90008f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90008f8c:	2303      	movs	r3, #3
90008f8e:	e006      	b.n	90008f9e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90008f90:	68fb      	ldr	r3, [r7, #12]
90008f92:	2220      	movs	r2, #32
90008f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90008f98:	2300      	movs	r3, #0
90008f9a:	e000      	b.n	90008f9e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90008f9c:	2302      	movs	r3, #2
  }
}
90008f9e:	4618      	mov	r0, r3
90008fa0:	3720      	adds	r7, #32
90008fa2:	46bd      	mov	sp, r7
90008fa4:	bd80      	pop	{r7, pc}
	...

90008fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90008fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90008fac:	b092      	sub	sp, #72	@ 0x48
90008fae:	af00      	add	r7, sp, #0
90008fb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90008fb2:	2300      	movs	r3, #0
90008fb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90008fb8:	697b      	ldr	r3, [r7, #20]
90008fba:	689a      	ldr	r2, [r3, #8]
90008fbc:	697b      	ldr	r3, [r7, #20]
90008fbe:	691b      	ldr	r3, [r3, #16]
90008fc0:	431a      	orrs	r2, r3
90008fc2:	697b      	ldr	r3, [r7, #20]
90008fc4:	695b      	ldr	r3, [r3, #20]
90008fc6:	431a      	orrs	r2, r3
90008fc8:	697b      	ldr	r3, [r7, #20]
90008fca:	69db      	ldr	r3, [r3, #28]
90008fcc:	4313      	orrs	r3, r2
90008fce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90008fd0:	697b      	ldr	r3, [r7, #20]
90008fd2:	681b      	ldr	r3, [r3, #0]
90008fd4:	681a      	ldr	r2, [r3, #0]
90008fd6:	4bbe      	ldr	r3, [pc, #760]	@ (900092d0 <UART_SetConfig+0x328>)
90008fd8:	4013      	ands	r3, r2
90008fda:	697a      	ldr	r2, [r7, #20]
90008fdc:	6812      	ldr	r2, [r2, #0]
90008fde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90008fe0:	430b      	orrs	r3, r1
90008fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90008fe4:	697b      	ldr	r3, [r7, #20]
90008fe6:	681b      	ldr	r3, [r3, #0]
90008fe8:	685b      	ldr	r3, [r3, #4]
90008fea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008fee:	697b      	ldr	r3, [r7, #20]
90008ff0:	68da      	ldr	r2, [r3, #12]
90008ff2:	697b      	ldr	r3, [r7, #20]
90008ff4:	681b      	ldr	r3, [r3, #0]
90008ff6:	430a      	orrs	r2, r1
90008ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90008ffa:	697b      	ldr	r3, [r7, #20]
90008ffc:	699b      	ldr	r3, [r3, #24]
90008ffe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009000:	697b      	ldr	r3, [r7, #20]
90009002:	681b      	ldr	r3, [r3, #0]
90009004:	4ab3      	ldr	r2, [pc, #716]	@ (900092d4 <UART_SetConfig+0x32c>)
90009006:	4293      	cmp	r3, r2
90009008:	d004      	beq.n	90009014 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
9000900a:	697b      	ldr	r3, [r7, #20]
9000900c:	6a1b      	ldr	r3, [r3, #32]
9000900e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009010:	4313      	orrs	r3, r2
90009012:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009014:	697b      	ldr	r3, [r7, #20]
90009016:	681b      	ldr	r3, [r3, #0]
90009018:	689a      	ldr	r2, [r3, #8]
9000901a:	4baf      	ldr	r3, [pc, #700]	@ (900092d8 <UART_SetConfig+0x330>)
9000901c:	4013      	ands	r3, r2
9000901e:	697a      	ldr	r2, [r7, #20]
90009020:	6812      	ldr	r2, [r2, #0]
90009022:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009024:	430b      	orrs	r3, r1
90009026:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009028:	697b      	ldr	r3, [r7, #20]
9000902a:	681b      	ldr	r3, [r3, #0]
9000902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000902e:	f023 010f 	bic.w	r1, r3, #15
90009032:	697b      	ldr	r3, [r7, #20]
90009034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009036:	697b      	ldr	r3, [r7, #20]
90009038:	681b      	ldr	r3, [r3, #0]
9000903a:	430a      	orrs	r2, r1
9000903c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000903e:	697b      	ldr	r3, [r7, #20]
90009040:	681b      	ldr	r3, [r3, #0]
90009042:	4aa6      	ldr	r2, [pc, #664]	@ (900092dc <UART_SetConfig+0x334>)
90009044:	4293      	cmp	r3, r2
90009046:	d177      	bne.n	90009138 <UART_SetConfig+0x190>
90009048:	4ba5      	ldr	r3, [pc, #660]	@ (900092e0 <UART_SetConfig+0x338>)
9000904a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000904c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009050:	2b28      	cmp	r3, #40	@ 0x28
90009052:	d86d      	bhi.n	90009130 <UART_SetConfig+0x188>
90009054:	a201      	add	r2, pc, #4	@ (adr r2, 9000905c <UART_SetConfig+0xb4>)
90009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000905a:	bf00      	nop
9000905c:	90009101 	.word	0x90009101
90009060:	90009131 	.word	0x90009131
90009064:	90009131 	.word	0x90009131
90009068:	90009131 	.word	0x90009131
9000906c:	90009131 	.word	0x90009131
90009070:	90009131 	.word	0x90009131
90009074:	90009131 	.word	0x90009131
90009078:	90009131 	.word	0x90009131
9000907c:	90009109 	.word	0x90009109
90009080:	90009131 	.word	0x90009131
90009084:	90009131 	.word	0x90009131
90009088:	90009131 	.word	0x90009131
9000908c:	90009131 	.word	0x90009131
90009090:	90009131 	.word	0x90009131
90009094:	90009131 	.word	0x90009131
90009098:	90009131 	.word	0x90009131
9000909c:	90009111 	.word	0x90009111
900090a0:	90009131 	.word	0x90009131
900090a4:	90009131 	.word	0x90009131
900090a8:	90009131 	.word	0x90009131
900090ac:	90009131 	.word	0x90009131
900090b0:	90009131 	.word	0x90009131
900090b4:	90009131 	.word	0x90009131
900090b8:	90009131 	.word	0x90009131
900090bc:	90009119 	.word	0x90009119
900090c0:	90009131 	.word	0x90009131
900090c4:	90009131 	.word	0x90009131
900090c8:	90009131 	.word	0x90009131
900090cc:	90009131 	.word	0x90009131
900090d0:	90009131 	.word	0x90009131
900090d4:	90009131 	.word	0x90009131
900090d8:	90009131 	.word	0x90009131
900090dc:	90009121 	.word	0x90009121
900090e0:	90009131 	.word	0x90009131
900090e4:	90009131 	.word	0x90009131
900090e8:	90009131 	.word	0x90009131
900090ec:	90009131 	.word	0x90009131
900090f0:	90009131 	.word	0x90009131
900090f4:	90009131 	.word	0x90009131
900090f8:	90009131 	.word	0x90009131
900090fc:	90009129 	.word	0x90009129
90009100:	2301      	movs	r3, #1
90009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009106:	e222      	b.n	9000954e <UART_SetConfig+0x5a6>
90009108:	2304      	movs	r3, #4
9000910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000910e:	e21e      	b.n	9000954e <UART_SetConfig+0x5a6>
90009110:	2308      	movs	r3, #8
90009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009116:	e21a      	b.n	9000954e <UART_SetConfig+0x5a6>
90009118:	2310      	movs	r3, #16
9000911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000911e:	e216      	b.n	9000954e <UART_SetConfig+0x5a6>
90009120:	2320      	movs	r3, #32
90009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009126:	e212      	b.n	9000954e <UART_SetConfig+0x5a6>
90009128:	2340      	movs	r3, #64	@ 0x40
9000912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000912e:	e20e      	b.n	9000954e <UART_SetConfig+0x5a6>
90009130:	2380      	movs	r3, #128	@ 0x80
90009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009136:	e20a      	b.n	9000954e <UART_SetConfig+0x5a6>
90009138:	697b      	ldr	r3, [r7, #20]
9000913a:	681b      	ldr	r3, [r3, #0]
9000913c:	4a69      	ldr	r2, [pc, #420]	@ (900092e4 <UART_SetConfig+0x33c>)
9000913e:	4293      	cmp	r3, r2
90009140:	d130      	bne.n	900091a4 <UART_SetConfig+0x1fc>
90009142:	4b67      	ldr	r3, [pc, #412]	@ (900092e0 <UART_SetConfig+0x338>)
90009144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009146:	f003 0307 	and.w	r3, r3, #7
9000914a:	2b05      	cmp	r3, #5
9000914c:	d826      	bhi.n	9000919c <UART_SetConfig+0x1f4>
9000914e:	a201      	add	r2, pc, #4	@ (adr r2, 90009154 <UART_SetConfig+0x1ac>)
90009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009154:	9000916d 	.word	0x9000916d
90009158:	90009175 	.word	0x90009175
9000915c:	9000917d 	.word	0x9000917d
90009160:	90009185 	.word	0x90009185
90009164:	9000918d 	.word	0x9000918d
90009168:	90009195 	.word	0x90009195
9000916c:	2300      	movs	r3, #0
9000916e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009172:	e1ec      	b.n	9000954e <UART_SetConfig+0x5a6>
90009174:	2304      	movs	r3, #4
90009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000917a:	e1e8      	b.n	9000954e <UART_SetConfig+0x5a6>
9000917c:	2308      	movs	r3, #8
9000917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009182:	e1e4      	b.n	9000954e <UART_SetConfig+0x5a6>
90009184:	2310      	movs	r3, #16
90009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000918a:	e1e0      	b.n	9000954e <UART_SetConfig+0x5a6>
9000918c:	2320      	movs	r3, #32
9000918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009192:	e1dc      	b.n	9000954e <UART_SetConfig+0x5a6>
90009194:	2340      	movs	r3, #64	@ 0x40
90009196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000919a:	e1d8      	b.n	9000954e <UART_SetConfig+0x5a6>
9000919c:	2380      	movs	r3, #128	@ 0x80
9000919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900091a2:	e1d4      	b.n	9000954e <UART_SetConfig+0x5a6>
900091a4:	697b      	ldr	r3, [r7, #20]
900091a6:	681b      	ldr	r3, [r3, #0]
900091a8:	4a4f      	ldr	r2, [pc, #316]	@ (900092e8 <UART_SetConfig+0x340>)
900091aa:	4293      	cmp	r3, r2
900091ac:	d130      	bne.n	90009210 <UART_SetConfig+0x268>
900091ae:	4b4c      	ldr	r3, [pc, #304]	@ (900092e0 <UART_SetConfig+0x338>)
900091b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900091b2:	f003 0307 	and.w	r3, r3, #7
900091b6:	2b05      	cmp	r3, #5
900091b8:	d826      	bhi.n	90009208 <UART_SetConfig+0x260>
900091ba:	a201      	add	r2, pc, #4	@ (adr r2, 900091c0 <UART_SetConfig+0x218>)
900091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900091c0:	900091d9 	.word	0x900091d9
900091c4:	900091e1 	.word	0x900091e1
900091c8:	900091e9 	.word	0x900091e9
900091cc:	900091f1 	.word	0x900091f1
900091d0:	900091f9 	.word	0x900091f9
900091d4:	90009201 	.word	0x90009201
900091d8:	2300      	movs	r3, #0
900091da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900091de:	e1b6      	b.n	9000954e <UART_SetConfig+0x5a6>
900091e0:	2304      	movs	r3, #4
900091e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900091e6:	e1b2      	b.n	9000954e <UART_SetConfig+0x5a6>
900091e8:	2308      	movs	r3, #8
900091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900091ee:	e1ae      	b.n	9000954e <UART_SetConfig+0x5a6>
900091f0:	2310      	movs	r3, #16
900091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900091f6:	e1aa      	b.n	9000954e <UART_SetConfig+0x5a6>
900091f8:	2320      	movs	r3, #32
900091fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900091fe:	e1a6      	b.n	9000954e <UART_SetConfig+0x5a6>
90009200:	2340      	movs	r3, #64	@ 0x40
90009202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009206:	e1a2      	b.n	9000954e <UART_SetConfig+0x5a6>
90009208:	2380      	movs	r3, #128	@ 0x80
9000920a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000920e:	e19e      	b.n	9000954e <UART_SetConfig+0x5a6>
90009210:	697b      	ldr	r3, [r7, #20]
90009212:	681b      	ldr	r3, [r3, #0]
90009214:	4a35      	ldr	r2, [pc, #212]	@ (900092ec <UART_SetConfig+0x344>)
90009216:	4293      	cmp	r3, r2
90009218:	d130      	bne.n	9000927c <UART_SetConfig+0x2d4>
9000921a:	4b31      	ldr	r3, [pc, #196]	@ (900092e0 <UART_SetConfig+0x338>)
9000921c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000921e:	f003 0307 	and.w	r3, r3, #7
90009222:	2b05      	cmp	r3, #5
90009224:	d826      	bhi.n	90009274 <UART_SetConfig+0x2cc>
90009226:	a201      	add	r2, pc, #4	@ (adr r2, 9000922c <UART_SetConfig+0x284>)
90009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000922c:	90009245 	.word	0x90009245
90009230:	9000924d 	.word	0x9000924d
90009234:	90009255 	.word	0x90009255
90009238:	9000925d 	.word	0x9000925d
9000923c:	90009265 	.word	0x90009265
90009240:	9000926d 	.word	0x9000926d
90009244:	2300      	movs	r3, #0
90009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000924a:	e180      	b.n	9000954e <UART_SetConfig+0x5a6>
9000924c:	2304      	movs	r3, #4
9000924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009252:	e17c      	b.n	9000954e <UART_SetConfig+0x5a6>
90009254:	2308      	movs	r3, #8
90009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000925a:	e178      	b.n	9000954e <UART_SetConfig+0x5a6>
9000925c:	2310      	movs	r3, #16
9000925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009262:	e174      	b.n	9000954e <UART_SetConfig+0x5a6>
90009264:	2320      	movs	r3, #32
90009266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000926a:	e170      	b.n	9000954e <UART_SetConfig+0x5a6>
9000926c:	2340      	movs	r3, #64	@ 0x40
9000926e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009272:	e16c      	b.n	9000954e <UART_SetConfig+0x5a6>
90009274:	2380      	movs	r3, #128	@ 0x80
90009276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000927a:	e168      	b.n	9000954e <UART_SetConfig+0x5a6>
9000927c:	697b      	ldr	r3, [r7, #20]
9000927e:	681b      	ldr	r3, [r3, #0]
90009280:	4a1b      	ldr	r2, [pc, #108]	@ (900092f0 <UART_SetConfig+0x348>)
90009282:	4293      	cmp	r3, r2
90009284:	d142      	bne.n	9000930c <UART_SetConfig+0x364>
90009286:	4b16      	ldr	r3, [pc, #88]	@ (900092e0 <UART_SetConfig+0x338>)
90009288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000928a:	f003 0307 	and.w	r3, r3, #7
9000928e:	2b05      	cmp	r3, #5
90009290:	d838      	bhi.n	90009304 <UART_SetConfig+0x35c>
90009292:	a201      	add	r2, pc, #4	@ (adr r2, 90009298 <UART_SetConfig+0x2f0>)
90009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009298:	900092b1 	.word	0x900092b1
9000929c:	900092b9 	.word	0x900092b9
900092a0:	900092c1 	.word	0x900092c1
900092a4:	900092c9 	.word	0x900092c9
900092a8:	900092f5 	.word	0x900092f5
900092ac:	900092fd 	.word	0x900092fd
900092b0:	2300      	movs	r3, #0
900092b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900092b6:	e14a      	b.n	9000954e <UART_SetConfig+0x5a6>
900092b8:	2304      	movs	r3, #4
900092ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900092be:	e146      	b.n	9000954e <UART_SetConfig+0x5a6>
900092c0:	2308      	movs	r3, #8
900092c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900092c6:	e142      	b.n	9000954e <UART_SetConfig+0x5a6>
900092c8:	2310      	movs	r3, #16
900092ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900092ce:	e13e      	b.n	9000954e <UART_SetConfig+0x5a6>
900092d0:	cfff69f3 	.word	0xcfff69f3
900092d4:	58000c00 	.word	0x58000c00
900092d8:	11fff4ff 	.word	0x11fff4ff
900092dc:	40011000 	.word	0x40011000
900092e0:	58024400 	.word	0x58024400
900092e4:	40004400 	.word	0x40004400
900092e8:	40004800 	.word	0x40004800
900092ec:	40004c00 	.word	0x40004c00
900092f0:	40005000 	.word	0x40005000
900092f4:	2320      	movs	r3, #32
900092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900092fa:	e128      	b.n	9000954e <UART_SetConfig+0x5a6>
900092fc:	2340      	movs	r3, #64	@ 0x40
900092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009302:	e124      	b.n	9000954e <UART_SetConfig+0x5a6>
90009304:	2380      	movs	r3, #128	@ 0x80
90009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000930a:	e120      	b.n	9000954e <UART_SetConfig+0x5a6>
9000930c:	697b      	ldr	r3, [r7, #20]
9000930e:	681b      	ldr	r3, [r3, #0]
90009310:	4acb      	ldr	r2, [pc, #812]	@ (90009640 <UART_SetConfig+0x698>)
90009312:	4293      	cmp	r3, r2
90009314:	d176      	bne.n	90009404 <UART_SetConfig+0x45c>
90009316:	4bcb      	ldr	r3, [pc, #812]	@ (90009644 <UART_SetConfig+0x69c>)
90009318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000931a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000931e:	2b28      	cmp	r3, #40	@ 0x28
90009320:	d86c      	bhi.n	900093fc <UART_SetConfig+0x454>
90009322:	a201      	add	r2, pc, #4	@ (adr r2, 90009328 <UART_SetConfig+0x380>)
90009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009328:	900093cd 	.word	0x900093cd
9000932c:	900093fd 	.word	0x900093fd
90009330:	900093fd 	.word	0x900093fd
90009334:	900093fd 	.word	0x900093fd
90009338:	900093fd 	.word	0x900093fd
9000933c:	900093fd 	.word	0x900093fd
90009340:	900093fd 	.word	0x900093fd
90009344:	900093fd 	.word	0x900093fd
90009348:	900093d5 	.word	0x900093d5
9000934c:	900093fd 	.word	0x900093fd
90009350:	900093fd 	.word	0x900093fd
90009354:	900093fd 	.word	0x900093fd
90009358:	900093fd 	.word	0x900093fd
9000935c:	900093fd 	.word	0x900093fd
90009360:	900093fd 	.word	0x900093fd
90009364:	900093fd 	.word	0x900093fd
90009368:	900093dd 	.word	0x900093dd
9000936c:	900093fd 	.word	0x900093fd
90009370:	900093fd 	.word	0x900093fd
90009374:	900093fd 	.word	0x900093fd
90009378:	900093fd 	.word	0x900093fd
9000937c:	900093fd 	.word	0x900093fd
90009380:	900093fd 	.word	0x900093fd
90009384:	900093fd 	.word	0x900093fd
90009388:	900093e5 	.word	0x900093e5
9000938c:	900093fd 	.word	0x900093fd
90009390:	900093fd 	.word	0x900093fd
90009394:	900093fd 	.word	0x900093fd
90009398:	900093fd 	.word	0x900093fd
9000939c:	900093fd 	.word	0x900093fd
900093a0:	900093fd 	.word	0x900093fd
900093a4:	900093fd 	.word	0x900093fd
900093a8:	900093ed 	.word	0x900093ed
900093ac:	900093fd 	.word	0x900093fd
900093b0:	900093fd 	.word	0x900093fd
900093b4:	900093fd 	.word	0x900093fd
900093b8:	900093fd 	.word	0x900093fd
900093bc:	900093fd 	.word	0x900093fd
900093c0:	900093fd 	.word	0x900093fd
900093c4:	900093fd 	.word	0x900093fd
900093c8:	900093f5 	.word	0x900093f5
900093cc:	2301      	movs	r3, #1
900093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900093d2:	e0bc      	b.n	9000954e <UART_SetConfig+0x5a6>
900093d4:	2304      	movs	r3, #4
900093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900093da:	e0b8      	b.n	9000954e <UART_SetConfig+0x5a6>
900093dc:	2308      	movs	r3, #8
900093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900093e2:	e0b4      	b.n	9000954e <UART_SetConfig+0x5a6>
900093e4:	2310      	movs	r3, #16
900093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900093ea:	e0b0      	b.n	9000954e <UART_SetConfig+0x5a6>
900093ec:	2320      	movs	r3, #32
900093ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900093f2:	e0ac      	b.n	9000954e <UART_SetConfig+0x5a6>
900093f4:	2340      	movs	r3, #64	@ 0x40
900093f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900093fa:	e0a8      	b.n	9000954e <UART_SetConfig+0x5a6>
900093fc:	2380      	movs	r3, #128	@ 0x80
900093fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009402:	e0a4      	b.n	9000954e <UART_SetConfig+0x5a6>
90009404:	697b      	ldr	r3, [r7, #20]
90009406:	681b      	ldr	r3, [r3, #0]
90009408:	4a8f      	ldr	r2, [pc, #572]	@ (90009648 <UART_SetConfig+0x6a0>)
9000940a:	4293      	cmp	r3, r2
9000940c:	d130      	bne.n	90009470 <UART_SetConfig+0x4c8>
9000940e:	4b8d      	ldr	r3, [pc, #564]	@ (90009644 <UART_SetConfig+0x69c>)
90009410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009412:	f003 0307 	and.w	r3, r3, #7
90009416:	2b05      	cmp	r3, #5
90009418:	d826      	bhi.n	90009468 <UART_SetConfig+0x4c0>
9000941a:	a201      	add	r2, pc, #4	@ (adr r2, 90009420 <UART_SetConfig+0x478>)
9000941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009420:	90009439 	.word	0x90009439
90009424:	90009441 	.word	0x90009441
90009428:	90009449 	.word	0x90009449
9000942c:	90009451 	.word	0x90009451
90009430:	90009459 	.word	0x90009459
90009434:	90009461 	.word	0x90009461
90009438:	2300      	movs	r3, #0
9000943a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000943e:	e086      	b.n	9000954e <UART_SetConfig+0x5a6>
90009440:	2304      	movs	r3, #4
90009442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009446:	e082      	b.n	9000954e <UART_SetConfig+0x5a6>
90009448:	2308      	movs	r3, #8
9000944a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000944e:	e07e      	b.n	9000954e <UART_SetConfig+0x5a6>
90009450:	2310      	movs	r3, #16
90009452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009456:	e07a      	b.n	9000954e <UART_SetConfig+0x5a6>
90009458:	2320      	movs	r3, #32
9000945a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000945e:	e076      	b.n	9000954e <UART_SetConfig+0x5a6>
90009460:	2340      	movs	r3, #64	@ 0x40
90009462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009466:	e072      	b.n	9000954e <UART_SetConfig+0x5a6>
90009468:	2380      	movs	r3, #128	@ 0x80
9000946a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000946e:	e06e      	b.n	9000954e <UART_SetConfig+0x5a6>
90009470:	697b      	ldr	r3, [r7, #20]
90009472:	681b      	ldr	r3, [r3, #0]
90009474:	4a75      	ldr	r2, [pc, #468]	@ (9000964c <UART_SetConfig+0x6a4>)
90009476:	4293      	cmp	r3, r2
90009478:	d130      	bne.n	900094dc <UART_SetConfig+0x534>
9000947a:	4b72      	ldr	r3, [pc, #456]	@ (90009644 <UART_SetConfig+0x69c>)
9000947c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000947e:	f003 0307 	and.w	r3, r3, #7
90009482:	2b05      	cmp	r3, #5
90009484:	d826      	bhi.n	900094d4 <UART_SetConfig+0x52c>
90009486:	a201      	add	r2, pc, #4	@ (adr r2, 9000948c <UART_SetConfig+0x4e4>)
90009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000948c:	900094a5 	.word	0x900094a5
90009490:	900094ad 	.word	0x900094ad
90009494:	900094b5 	.word	0x900094b5
90009498:	900094bd 	.word	0x900094bd
9000949c:	900094c5 	.word	0x900094c5
900094a0:	900094cd 	.word	0x900094cd
900094a4:	2300      	movs	r3, #0
900094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900094aa:	e050      	b.n	9000954e <UART_SetConfig+0x5a6>
900094ac:	2304      	movs	r3, #4
900094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900094b2:	e04c      	b.n	9000954e <UART_SetConfig+0x5a6>
900094b4:	2308      	movs	r3, #8
900094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900094ba:	e048      	b.n	9000954e <UART_SetConfig+0x5a6>
900094bc:	2310      	movs	r3, #16
900094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900094c2:	e044      	b.n	9000954e <UART_SetConfig+0x5a6>
900094c4:	2320      	movs	r3, #32
900094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900094ca:	e040      	b.n	9000954e <UART_SetConfig+0x5a6>
900094cc:	2340      	movs	r3, #64	@ 0x40
900094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900094d2:	e03c      	b.n	9000954e <UART_SetConfig+0x5a6>
900094d4:	2380      	movs	r3, #128	@ 0x80
900094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
900094da:	e038      	b.n	9000954e <UART_SetConfig+0x5a6>
900094dc:	697b      	ldr	r3, [r7, #20]
900094de:	681b      	ldr	r3, [r3, #0]
900094e0:	4a5b      	ldr	r2, [pc, #364]	@ (90009650 <UART_SetConfig+0x6a8>)
900094e2:	4293      	cmp	r3, r2
900094e4:	d130      	bne.n	90009548 <UART_SetConfig+0x5a0>
900094e6:	4b57      	ldr	r3, [pc, #348]	@ (90009644 <UART_SetConfig+0x69c>)
900094e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900094ea:	f003 0307 	and.w	r3, r3, #7
900094ee:	2b05      	cmp	r3, #5
900094f0:	d826      	bhi.n	90009540 <UART_SetConfig+0x598>
900094f2:	a201      	add	r2, pc, #4	@ (adr r2, 900094f8 <UART_SetConfig+0x550>)
900094f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900094f8:	90009511 	.word	0x90009511
900094fc:	90009519 	.word	0x90009519
90009500:	90009521 	.word	0x90009521
90009504:	90009529 	.word	0x90009529
90009508:	90009531 	.word	0x90009531
9000950c:	90009539 	.word	0x90009539
90009510:	2302      	movs	r3, #2
90009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009516:	e01a      	b.n	9000954e <UART_SetConfig+0x5a6>
90009518:	2304      	movs	r3, #4
9000951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000951e:	e016      	b.n	9000954e <UART_SetConfig+0x5a6>
90009520:	2308      	movs	r3, #8
90009522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009526:	e012      	b.n	9000954e <UART_SetConfig+0x5a6>
90009528:	2310      	movs	r3, #16
9000952a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000952e:	e00e      	b.n	9000954e <UART_SetConfig+0x5a6>
90009530:	2320      	movs	r3, #32
90009532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009536:	e00a      	b.n	9000954e <UART_SetConfig+0x5a6>
90009538:	2340      	movs	r3, #64	@ 0x40
9000953a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000953e:	e006      	b.n	9000954e <UART_SetConfig+0x5a6>
90009540:	2380      	movs	r3, #128	@ 0x80
90009542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009546:	e002      	b.n	9000954e <UART_SetConfig+0x5a6>
90009548:	2380      	movs	r3, #128	@ 0x80
9000954a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000954e:	697b      	ldr	r3, [r7, #20]
90009550:	681b      	ldr	r3, [r3, #0]
90009552:	4a3f      	ldr	r2, [pc, #252]	@ (90009650 <UART_SetConfig+0x6a8>)
90009554:	4293      	cmp	r3, r2
90009556:	f040 80f8 	bne.w	9000974a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000955a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000955e:	2b20      	cmp	r3, #32
90009560:	dc46      	bgt.n	900095f0 <UART_SetConfig+0x648>
90009562:	2b02      	cmp	r3, #2
90009564:	f2c0 8082 	blt.w	9000966c <UART_SetConfig+0x6c4>
90009568:	3b02      	subs	r3, #2
9000956a:	2b1e      	cmp	r3, #30
9000956c:	d87e      	bhi.n	9000966c <UART_SetConfig+0x6c4>
9000956e:	a201      	add	r2, pc, #4	@ (adr r2, 90009574 <UART_SetConfig+0x5cc>)
90009570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009574:	900095f7 	.word	0x900095f7
90009578:	9000966d 	.word	0x9000966d
9000957c:	900095ff 	.word	0x900095ff
90009580:	9000966d 	.word	0x9000966d
90009584:	9000966d 	.word	0x9000966d
90009588:	9000966d 	.word	0x9000966d
9000958c:	9000960f 	.word	0x9000960f
90009590:	9000966d 	.word	0x9000966d
90009594:	9000966d 	.word	0x9000966d
90009598:	9000966d 	.word	0x9000966d
9000959c:	9000966d 	.word	0x9000966d
900095a0:	9000966d 	.word	0x9000966d
900095a4:	9000966d 	.word	0x9000966d
900095a8:	9000966d 	.word	0x9000966d
900095ac:	9000961f 	.word	0x9000961f
900095b0:	9000966d 	.word	0x9000966d
900095b4:	9000966d 	.word	0x9000966d
900095b8:	9000966d 	.word	0x9000966d
900095bc:	9000966d 	.word	0x9000966d
900095c0:	9000966d 	.word	0x9000966d
900095c4:	9000966d 	.word	0x9000966d
900095c8:	9000966d 	.word	0x9000966d
900095cc:	9000966d 	.word	0x9000966d
900095d0:	9000966d 	.word	0x9000966d
900095d4:	9000966d 	.word	0x9000966d
900095d8:	9000966d 	.word	0x9000966d
900095dc:	9000966d 	.word	0x9000966d
900095e0:	9000966d 	.word	0x9000966d
900095e4:	9000966d 	.word	0x9000966d
900095e8:	9000966d 	.word	0x9000966d
900095ec:	9000965f 	.word	0x9000965f
900095f0:	2b40      	cmp	r3, #64	@ 0x40
900095f2:	d037      	beq.n	90009664 <UART_SetConfig+0x6bc>
900095f4:	e03a      	b.n	9000966c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
900095f6:	f7fe f819 	bl	9000762c <HAL_RCCEx_GetD3PCLK1Freq>
900095fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
900095fc:	e03c      	b.n	90009678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900095fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90009602:	4618      	mov	r0, r3
90009604:	f7fe f828 	bl	90007658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90009608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000960a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000960c:	e034      	b.n	90009678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000960e:	f107 0318 	add.w	r3, r7, #24
90009612:	4618      	mov	r0, r3
90009614:	f7fe f974 	bl	90007900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90009618:	69fb      	ldr	r3, [r7, #28]
9000961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000961c:	e02c      	b.n	90009678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000961e:	4b09      	ldr	r3, [pc, #36]	@ (90009644 <UART_SetConfig+0x69c>)
90009620:	681b      	ldr	r3, [r3, #0]
90009622:	f003 0320 	and.w	r3, r3, #32
90009626:	2b00      	cmp	r3, #0
90009628:	d016      	beq.n	90009658 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000962a:	4b06      	ldr	r3, [pc, #24]	@ (90009644 <UART_SetConfig+0x69c>)
9000962c:	681b      	ldr	r3, [r3, #0]
9000962e:	08db      	lsrs	r3, r3, #3
90009630:	f003 0303 	and.w	r3, r3, #3
90009634:	4a07      	ldr	r2, [pc, #28]	@ (90009654 <UART_SetConfig+0x6ac>)
90009636:	fa22 f303 	lsr.w	r3, r2, r3
9000963a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000963c:	e01c      	b.n	90009678 <UART_SetConfig+0x6d0>
9000963e:	bf00      	nop
90009640:	40011400 	.word	0x40011400
90009644:	58024400 	.word	0x58024400
90009648:	40007800 	.word	0x40007800
9000964c:	40007c00 	.word	0x40007c00
90009650:	58000c00 	.word	0x58000c00
90009654:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
90009658:	4b9d      	ldr	r3, [pc, #628]	@ (900098d0 <UART_SetConfig+0x928>)
9000965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000965c:	e00c      	b.n	90009678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000965e:	4b9d      	ldr	r3, [pc, #628]	@ (900098d4 <UART_SetConfig+0x92c>)
90009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
90009662:	e009      	b.n	90009678 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90009664:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
90009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000966a:	e005      	b.n	90009678 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000966c:	2300      	movs	r3, #0
9000966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
90009670:	2301      	movs	r3, #1
90009672:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
90009676:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
90009678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000967a:	2b00      	cmp	r3, #0
9000967c:	f000 81de 	beq.w	90009a3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
90009680:	697b      	ldr	r3, [r7, #20]
90009682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90009684:	4a94      	ldr	r2, [pc, #592]	@ (900098d8 <UART_SetConfig+0x930>)
90009686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000968a:	461a      	mov	r2, r3
9000968c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000968e:	fbb3 f3f2 	udiv	r3, r3, r2
90009692:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90009694:	697b      	ldr	r3, [r7, #20]
90009696:	685a      	ldr	r2, [r3, #4]
90009698:	4613      	mov	r3, r2
9000969a:	005b      	lsls	r3, r3, #1
9000969c:	4413      	add	r3, r2
9000969e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
900096a0:	429a      	cmp	r2, r3
900096a2:	d305      	bcc.n	900096b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
900096a4:	697b      	ldr	r3, [r7, #20]
900096a6:	685b      	ldr	r3, [r3, #4]
900096a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
900096aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
900096ac:	429a      	cmp	r2, r3
900096ae:	d903      	bls.n	900096b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
900096b0:	2301      	movs	r3, #1
900096b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
900096b6:	e1c1      	b.n	90009a3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900096b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900096ba:	2200      	movs	r2, #0
900096bc:	60bb      	str	r3, [r7, #8]
900096be:	60fa      	str	r2, [r7, #12]
900096c0:	697b      	ldr	r3, [r7, #20]
900096c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900096c4:	4a84      	ldr	r2, [pc, #528]	@ (900098d8 <UART_SetConfig+0x930>)
900096c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
900096ca:	b29b      	uxth	r3, r3
900096cc:	2200      	movs	r2, #0
900096ce:	603b      	str	r3, [r7, #0]
900096d0:	607a      	str	r2, [r7, #4]
900096d2:	e9d7 2300 	ldrd	r2, r3, [r7]
900096d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
900096da:	f7f6 fe59 	bl	90000390 <__aeabi_uldivmod>
900096de:	4602      	mov	r2, r0
900096e0:	460b      	mov	r3, r1
900096e2:	4610      	mov	r0, r2
900096e4:	4619      	mov	r1, r3
900096e6:	f04f 0200 	mov.w	r2, #0
900096ea:	f04f 0300 	mov.w	r3, #0
900096ee:	020b      	lsls	r3, r1, #8
900096f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
900096f4:	0202      	lsls	r2, r0, #8
900096f6:	6979      	ldr	r1, [r7, #20]
900096f8:	6849      	ldr	r1, [r1, #4]
900096fa:	0849      	lsrs	r1, r1, #1
900096fc:	2000      	movs	r0, #0
900096fe:	460c      	mov	r4, r1
90009700:	4605      	mov	r5, r0
90009702:	eb12 0804 	adds.w	r8, r2, r4
90009706:	eb43 0905 	adc.w	r9, r3, r5
9000970a:	697b      	ldr	r3, [r7, #20]
9000970c:	685b      	ldr	r3, [r3, #4]
9000970e:	2200      	movs	r2, #0
90009710:	469a      	mov	sl, r3
90009712:	4693      	mov	fp, r2
90009714:	4652      	mov	r2, sl
90009716:	465b      	mov	r3, fp
90009718:	4640      	mov	r0, r8
9000971a:	4649      	mov	r1, r9
9000971c:	f7f6 fe38 	bl	90000390 <__aeabi_uldivmod>
90009720:	4602      	mov	r2, r0
90009722:	460b      	mov	r3, r1
90009724:	4613      	mov	r3, r2
90009726:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
90009728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000972a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000972e:	d308      	bcc.n	90009742 <UART_SetConfig+0x79a>
90009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90009732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90009736:	d204      	bcs.n	90009742 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
90009738:	697b      	ldr	r3, [r7, #20]
9000973a:	681b      	ldr	r3, [r3, #0]
9000973c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000973e:	60da      	str	r2, [r3, #12]
90009740:	e17c      	b.n	90009a3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
90009742:	2301      	movs	r3, #1
90009744:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
90009748:	e178      	b.n	90009a3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000974a:	697b      	ldr	r3, [r7, #20]
9000974c:	69db      	ldr	r3, [r3, #28]
9000974e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90009752:	f040 80c5 	bne.w	900098e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
90009756:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000975a:	2b20      	cmp	r3, #32
9000975c:	dc48      	bgt.n	900097f0 <UART_SetConfig+0x848>
9000975e:	2b00      	cmp	r3, #0
90009760:	db7b      	blt.n	9000985a <UART_SetConfig+0x8b2>
90009762:	2b20      	cmp	r3, #32
90009764:	d879      	bhi.n	9000985a <UART_SetConfig+0x8b2>
90009766:	a201      	add	r2, pc, #4	@ (adr r2, 9000976c <UART_SetConfig+0x7c4>)
90009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000976c:	900097f7 	.word	0x900097f7
90009770:	900097ff 	.word	0x900097ff
90009774:	9000985b 	.word	0x9000985b
90009778:	9000985b 	.word	0x9000985b
9000977c:	90009807 	.word	0x90009807
90009780:	9000985b 	.word	0x9000985b
90009784:	9000985b 	.word	0x9000985b
90009788:	9000985b 	.word	0x9000985b
9000978c:	90009817 	.word	0x90009817
90009790:	9000985b 	.word	0x9000985b
90009794:	9000985b 	.word	0x9000985b
90009798:	9000985b 	.word	0x9000985b
9000979c:	9000985b 	.word	0x9000985b
900097a0:	9000985b 	.word	0x9000985b
900097a4:	9000985b 	.word	0x9000985b
900097a8:	9000985b 	.word	0x9000985b
900097ac:	90009827 	.word	0x90009827
900097b0:	9000985b 	.word	0x9000985b
900097b4:	9000985b 	.word	0x9000985b
900097b8:	9000985b 	.word	0x9000985b
900097bc:	9000985b 	.word	0x9000985b
900097c0:	9000985b 	.word	0x9000985b
900097c4:	9000985b 	.word	0x9000985b
900097c8:	9000985b 	.word	0x9000985b
900097cc:	9000985b 	.word	0x9000985b
900097d0:	9000985b 	.word	0x9000985b
900097d4:	9000985b 	.word	0x9000985b
900097d8:	9000985b 	.word	0x9000985b
900097dc:	9000985b 	.word	0x9000985b
900097e0:	9000985b 	.word	0x9000985b
900097e4:	9000985b 	.word	0x9000985b
900097e8:	9000985b 	.word	0x9000985b
900097ec:	9000984d 	.word	0x9000984d
900097f0:	2b40      	cmp	r3, #64	@ 0x40
900097f2:	d02e      	beq.n	90009852 <UART_SetConfig+0x8aa>
900097f4:	e031      	b.n	9000985a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
900097f6:	f7fc fce3 	bl	900061c0 <HAL_RCC_GetPCLK1Freq>
900097fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
900097fc:	e033      	b.n	90009866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
900097fe:	f7fc fcf5 	bl	900061ec <HAL_RCC_GetPCLK2Freq>
90009802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
90009804:	e02f      	b.n	90009866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90009806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000980a:	4618      	mov	r0, r3
9000980c:	f7fd ff24 	bl	90007658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90009812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
90009814:	e027      	b.n	90009866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90009816:	f107 0318 	add.w	r3, r7, #24
9000981a:	4618      	mov	r0, r3
9000981c:	f7fe f870 	bl	90007900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90009820:	69fb      	ldr	r3, [r7, #28]
90009822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
90009824:	e01f      	b.n	90009866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009826:	4b2d      	ldr	r3, [pc, #180]	@ (900098dc <UART_SetConfig+0x934>)
90009828:	681b      	ldr	r3, [r3, #0]
9000982a:	f003 0320 	and.w	r3, r3, #32
9000982e:	2b00      	cmp	r3, #0
90009830:	d009      	beq.n	90009846 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90009832:	4b2a      	ldr	r3, [pc, #168]	@ (900098dc <UART_SetConfig+0x934>)
90009834:	681b      	ldr	r3, [r3, #0]
90009836:	08db      	lsrs	r3, r3, #3
90009838:	f003 0303 	and.w	r3, r3, #3
9000983c:	4a24      	ldr	r2, [pc, #144]	@ (900098d0 <UART_SetConfig+0x928>)
9000983e:	fa22 f303 	lsr.w	r3, r2, r3
90009842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90009844:	e00f      	b.n	90009866 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
90009846:	4b22      	ldr	r3, [pc, #136]	@ (900098d0 <UART_SetConfig+0x928>)
90009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000984a:	e00c      	b.n	90009866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000984c:	4b21      	ldr	r3, [pc, #132]	@ (900098d4 <UART_SetConfig+0x92c>)
9000984e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
90009850:	e009      	b.n	90009866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90009852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
90009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
90009858:	e005      	b.n	90009866 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000985a:	2300      	movs	r3, #0
9000985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000985e:	2301      	movs	r3, #1
90009860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
90009864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
90009866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90009868:	2b00      	cmp	r3, #0
9000986a:	f000 80e7 	beq.w	90009a3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000986e:	697b      	ldr	r3, [r7, #20]
90009870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90009872:	4a19      	ldr	r2, [pc, #100]	@ (900098d8 <UART_SetConfig+0x930>)
90009874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90009878:	461a      	mov	r2, r3
9000987a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000987c:	fbb3 f3f2 	udiv	r3, r3, r2
90009880:	005a      	lsls	r2, r3, #1
90009882:	697b      	ldr	r3, [r7, #20]
90009884:	685b      	ldr	r3, [r3, #4]
90009886:	085b      	lsrs	r3, r3, #1
90009888:	441a      	add	r2, r3
9000988a:	697b      	ldr	r3, [r7, #20]
9000988c:	685b      	ldr	r3, [r3, #4]
9000988e:	fbb2 f3f3 	udiv	r3, r2, r3
90009892:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90009894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90009896:	2b0f      	cmp	r3, #15
90009898:	d916      	bls.n	900098c8 <UART_SetConfig+0x920>
9000989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000989c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900098a0:	d212      	bcs.n	900098c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
900098a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900098a4:	b29b      	uxth	r3, r3
900098a6:	f023 030f 	bic.w	r3, r3, #15
900098aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
900098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900098ae:	085b      	lsrs	r3, r3, #1
900098b0:	b29b      	uxth	r3, r3
900098b2:	f003 0307 	and.w	r3, r3, #7
900098b6:	b29a      	uxth	r2, r3
900098b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
900098ba:	4313      	orrs	r3, r2
900098bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
900098be:	697b      	ldr	r3, [r7, #20]
900098c0:	681b      	ldr	r3, [r3, #0]
900098c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
900098c4:	60da      	str	r2, [r3, #12]
900098c6:	e0b9      	b.n	90009a3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
900098c8:	2301      	movs	r3, #1
900098ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
900098ce:	e0b5      	b.n	90009a3c <UART_SetConfig+0xa94>
900098d0:	03d09000 	.word	0x03d09000
900098d4:	003d0900 	.word	0x003d0900
900098d8:	9000c1e0 	.word	0x9000c1e0
900098dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
900098e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
900098e4:	2b20      	cmp	r3, #32
900098e6:	dc49      	bgt.n	9000997c <UART_SetConfig+0x9d4>
900098e8:	2b00      	cmp	r3, #0
900098ea:	db7c      	blt.n	900099e6 <UART_SetConfig+0xa3e>
900098ec:	2b20      	cmp	r3, #32
900098ee:	d87a      	bhi.n	900099e6 <UART_SetConfig+0xa3e>
900098f0:	a201      	add	r2, pc, #4	@ (adr r2, 900098f8 <UART_SetConfig+0x950>)
900098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900098f6:	bf00      	nop
900098f8:	90009983 	.word	0x90009983
900098fc:	9000998b 	.word	0x9000998b
90009900:	900099e7 	.word	0x900099e7
90009904:	900099e7 	.word	0x900099e7
90009908:	90009993 	.word	0x90009993
9000990c:	900099e7 	.word	0x900099e7
90009910:	900099e7 	.word	0x900099e7
90009914:	900099e7 	.word	0x900099e7
90009918:	900099a3 	.word	0x900099a3
9000991c:	900099e7 	.word	0x900099e7
90009920:	900099e7 	.word	0x900099e7
90009924:	900099e7 	.word	0x900099e7
90009928:	900099e7 	.word	0x900099e7
9000992c:	900099e7 	.word	0x900099e7
90009930:	900099e7 	.word	0x900099e7
90009934:	900099e7 	.word	0x900099e7
90009938:	900099b3 	.word	0x900099b3
9000993c:	900099e7 	.word	0x900099e7
90009940:	900099e7 	.word	0x900099e7
90009944:	900099e7 	.word	0x900099e7
90009948:	900099e7 	.word	0x900099e7
9000994c:	900099e7 	.word	0x900099e7
90009950:	900099e7 	.word	0x900099e7
90009954:	900099e7 	.word	0x900099e7
90009958:	900099e7 	.word	0x900099e7
9000995c:	900099e7 	.word	0x900099e7
90009960:	900099e7 	.word	0x900099e7
90009964:	900099e7 	.word	0x900099e7
90009968:	900099e7 	.word	0x900099e7
9000996c:	900099e7 	.word	0x900099e7
90009970:	900099e7 	.word	0x900099e7
90009974:	900099e7 	.word	0x900099e7
90009978:	900099d9 	.word	0x900099d9
9000997c:	2b40      	cmp	r3, #64	@ 0x40
9000997e:	d02e      	beq.n	900099de <UART_SetConfig+0xa36>
90009980:	e031      	b.n	900099e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90009982:	f7fc fc1d 	bl	900061c0 <HAL_RCC_GetPCLK1Freq>
90009986:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
90009988:	e033      	b.n	900099f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000998a:	f7fc fc2f 	bl	900061ec <HAL_RCC_GetPCLK2Freq>
9000998e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
90009990:	e02f      	b.n	900099f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90009992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90009996:	4618      	mov	r0, r3
90009998:	f7fd fe5e 	bl	90007658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000999c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000999e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
900099a0:	e027      	b.n	900099f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
900099a2:	f107 0318 	add.w	r3, r7, #24
900099a6:	4618      	mov	r0, r3
900099a8:	f7fd ffaa 	bl	90007900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
900099ac:	69fb      	ldr	r3, [r7, #28]
900099ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
900099b0:	e01f      	b.n	900099f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900099b2:	4b2d      	ldr	r3, [pc, #180]	@ (90009a68 <UART_SetConfig+0xac0>)
900099b4:	681b      	ldr	r3, [r3, #0]
900099b6:	f003 0320 	and.w	r3, r3, #32
900099ba:	2b00      	cmp	r3, #0
900099bc:	d009      	beq.n	900099d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
900099be:	4b2a      	ldr	r3, [pc, #168]	@ (90009a68 <UART_SetConfig+0xac0>)
900099c0:	681b      	ldr	r3, [r3, #0]
900099c2:	08db      	lsrs	r3, r3, #3
900099c4:	f003 0303 	and.w	r3, r3, #3
900099c8:	4a28      	ldr	r2, [pc, #160]	@ (90009a6c <UART_SetConfig+0xac4>)
900099ca:	fa22 f303 	lsr.w	r3, r2, r3
900099ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
900099d0:	e00f      	b.n	900099f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
900099d2:	4b26      	ldr	r3, [pc, #152]	@ (90009a6c <UART_SetConfig+0xac4>)
900099d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
900099d6:	e00c      	b.n	900099f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
900099d8:	4b25      	ldr	r3, [pc, #148]	@ (90009a70 <UART_SetConfig+0xac8>)
900099da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
900099dc:	e009      	b.n	900099f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
900099de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
900099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
900099e4:	e005      	b.n	900099f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
900099e6:	2300      	movs	r3, #0
900099e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
900099ea:	2301      	movs	r3, #1
900099ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
900099f0:	bf00      	nop
    }

    if (pclk != 0U)
900099f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900099f4:	2b00      	cmp	r3, #0
900099f6:	d021      	beq.n	90009a3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900099f8:	697b      	ldr	r3, [r7, #20]
900099fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900099fc:	4a1d      	ldr	r2, [pc, #116]	@ (90009a74 <UART_SetConfig+0xacc>)
900099fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90009a02:	461a      	mov	r2, r3
90009a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90009a06:	fbb3 f2f2 	udiv	r2, r3, r2
90009a0a:	697b      	ldr	r3, [r7, #20]
90009a0c:	685b      	ldr	r3, [r3, #4]
90009a0e:	085b      	lsrs	r3, r3, #1
90009a10:	441a      	add	r2, r3
90009a12:	697b      	ldr	r3, [r7, #20]
90009a14:	685b      	ldr	r3, [r3, #4]
90009a16:	fbb2 f3f3 	udiv	r3, r2, r3
90009a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90009a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90009a1e:	2b0f      	cmp	r3, #15
90009a20:	d909      	bls.n	90009a36 <UART_SetConfig+0xa8e>
90009a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90009a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90009a28:	d205      	bcs.n	90009a36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
90009a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90009a2c:	b29a      	uxth	r2, r3
90009a2e:	697b      	ldr	r3, [r7, #20]
90009a30:	681b      	ldr	r3, [r3, #0]
90009a32:	60da      	str	r2, [r3, #12]
90009a34:	e002      	b.n	90009a3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
90009a36:	2301      	movs	r3, #1
90009a38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
90009a3c:	697b      	ldr	r3, [r7, #20]
90009a3e:	2201      	movs	r2, #1
90009a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
90009a44:	697b      	ldr	r3, [r7, #20]
90009a46:	2201      	movs	r2, #1
90009a48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
90009a4c:	697b      	ldr	r3, [r7, #20]
90009a4e:	2200      	movs	r2, #0
90009a50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
90009a52:	697b      	ldr	r3, [r7, #20]
90009a54:	2200      	movs	r2, #0
90009a56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
90009a58:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
90009a5c:	4618      	mov	r0, r3
90009a5e:	3748      	adds	r7, #72	@ 0x48
90009a60:	46bd      	mov	sp, r7
90009a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90009a66:	bf00      	nop
90009a68:	58024400 	.word	0x58024400
90009a6c:	03d09000 	.word	0x03d09000
90009a70:	003d0900 	.word	0x003d0900
90009a74:	9000c1e0 	.word	0x9000c1e0

90009a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
90009a78:	b480      	push	{r7}
90009a7a:	b083      	sub	sp, #12
90009a7c:	af00      	add	r7, sp, #0
90009a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90009a80:	687b      	ldr	r3, [r7, #4]
90009a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009a84:	f003 0308 	and.w	r3, r3, #8
90009a88:	2b00      	cmp	r3, #0
90009a8a:	d00a      	beq.n	90009aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
90009a8c:	687b      	ldr	r3, [r7, #4]
90009a8e:	681b      	ldr	r3, [r3, #0]
90009a90:	685b      	ldr	r3, [r3, #4]
90009a92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
90009a96:	687b      	ldr	r3, [r7, #4]
90009a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
90009a9a:	687b      	ldr	r3, [r7, #4]
90009a9c:	681b      	ldr	r3, [r3, #0]
90009a9e:	430a      	orrs	r2, r1
90009aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
90009aa2:	687b      	ldr	r3, [r7, #4]
90009aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009aa6:	f003 0301 	and.w	r3, r3, #1
90009aaa:	2b00      	cmp	r3, #0
90009aac:	d00a      	beq.n	90009ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
90009aae:	687b      	ldr	r3, [r7, #4]
90009ab0:	681b      	ldr	r3, [r3, #0]
90009ab2:	685b      	ldr	r3, [r3, #4]
90009ab4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
90009ab8:	687b      	ldr	r3, [r7, #4]
90009aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
90009abc:	687b      	ldr	r3, [r7, #4]
90009abe:	681b      	ldr	r3, [r3, #0]
90009ac0:	430a      	orrs	r2, r1
90009ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
90009ac4:	687b      	ldr	r3, [r7, #4]
90009ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009ac8:	f003 0302 	and.w	r3, r3, #2
90009acc:	2b00      	cmp	r3, #0
90009ace:	d00a      	beq.n	90009ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
90009ad0:	687b      	ldr	r3, [r7, #4]
90009ad2:	681b      	ldr	r3, [r3, #0]
90009ad4:	685b      	ldr	r3, [r3, #4]
90009ad6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90009ada:	687b      	ldr	r3, [r7, #4]
90009adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90009ade:	687b      	ldr	r3, [r7, #4]
90009ae0:	681b      	ldr	r3, [r3, #0]
90009ae2:	430a      	orrs	r2, r1
90009ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
90009ae6:	687b      	ldr	r3, [r7, #4]
90009ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009aea:	f003 0304 	and.w	r3, r3, #4
90009aee:	2b00      	cmp	r3, #0
90009af0:	d00a      	beq.n	90009b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
90009af2:	687b      	ldr	r3, [r7, #4]
90009af4:	681b      	ldr	r3, [r3, #0]
90009af6:	685b      	ldr	r3, [r3, #4]
90009af8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
90009afc:	687b      	ldr	r3, [r7, #4]
90009afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009b00:	687b      	ldr	r3, [r7, #4]
90009b02:	681b      	ldr	r3, [r3, #0]
90009b04:	430a      	orrs	r2, r1
90009b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90009b08:	687b      	ldr	r3, [r7, #4]
90009b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009b0c:	f003 0310 	and.w	r3, r3, #16
90009b10:	2b00      	cmp	r3, #0
90009b12:	d00a      	beq.n	90009b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
90009b14:	687b      	ldr	r3, [r7, #4]
90009b16:	681b      	ldr	r3, [r3, #0]
90009b18:	689b      	ldr	r3, [r3, #8]
90009b1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
90009b1e:	687b      	ldr	r3, [r7, #4]
90009b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
90009b22:	687b      	ldr	r3, [r7, #4]
90009b24:	681b      	ldr	r3, [r3, #0]
90009b26:	430a      	orrs	r2, r1
90009b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
90009b2a:	687b      	ldr	r3, [r7, #4]
90009b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009b2e:	f003 0320 	and.w	r3, r3, #32
90009b32:	2b00      	cmp	r3, #0
90009b34:	d00a      	beq.n	90009b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
90009b36:	687b      	ldr	r3, [r7, #4]
90009b38:	681b      	ldr	r3, [r3, #0]
90009b3a:	689b      	ldr	r3, [r3, #8]
90009b3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
90009b40:	687b      	ldr	r3, [r7, #4]
90009b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
90009b44:	687b      	ldr	r3, [r7, #4]
90009b46:	681b      	ldr	r3, [r3, #0]
90009b48:	430a      	orrs	r2, r1
90009b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
90009b4c:	687b      	ldr	r3, [r7, #4]
90009b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90009b54:	2b00      	cmp	r3, #0
90009b56:	d01a      	beq.n	90009b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90009b58:	687b      	ldr	r3, [r7, #4]
90009b5a:	681b      	ldr	r3, [r3, #0]
90009b5c:	685b      	ldr	r3, [r3, #4]
90009b5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
90009b62:	687b      	ldr	r3, [r7, #4]
90009b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90009b66:	687b      	ldr	r3, [r7, #4]
90009b68:	681b      	ldr	r3, [r3, #0]
90009b6a:	430a      	orrs	r2, r1
90009b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
90009b6e:	687b      	ldr	r3, [r7, #4]
90009b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90009b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90009b76:	d10a      	bne.n	90009b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
90009b78:	687b      	ldr	r3, [r7, #4]
90009b7a:	681b      	ldr	r3, [r3, #0]
90009b7c:	685b      	ldr	r3, [r3, #4]
90009b7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
90009b82:	687b      	ldr	r3, [r7, #4]
90009b84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
90009b86:	687b      	ldr	r3, [r7, #4]
90009b88:	681b      	ldr	r3, [r3, #0]
90009b8a:	430a      	orrs	r2, r1
90009b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
90009b8e:	687b      	ldr	r3, [r7, #4]
90009b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90009b96:	2b00      	cmp	r3, #0
90009b98:	d00a      	beq.n	90009bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
90009b9a:	687b      	ldr	r3, [r7, #4]
90009b9c:	681b      	ldr	r3, [r3, #0]
90009b9e:	685b      	ldr	r3, [r3, #4]
90009ba0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
90009ba4:	687b      	ldr	r3, [r7, #4]
90009ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
90009ba8:	687b      	ldr	r3, [r7, #4]
90009baa:	681b      	ldr	r3, [r3, #0]
90009bac:	430a      	orrs	r2, r1
90009bae:	605a      	str	r2, [r3, #4]
  }
}
90009bb0:	bf00      	nop
90009bb2:	370c      	adds	r7, #12
90009bb4:	46bd      	mov	sp, r7
90009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
90009bba:	4770      	bx	lr

90009bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
90009bbc:	b580      	push	{r7, lr}
90009bbe:	b098      	sub	sp, #96	@ 0x60
90009bc0:	af02      	add	r7, sp, #8
90009bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
90009bc4:	687b      	ldr	r3, [r7, #4]
90009bc6:	2200      	movs	r2, #0
90009bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
90009bcc:	f7f9 fc3c 	bl	90003448 <HAL_GetTick>
90009bd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
90009bd2:	687b      	ldr	r3, [r7, #4]
90009bd4:	681b      	ldr	r3, [r3, #0]
90009bd6:	681b      	ldr	r3, [r3, #0]
90009bd8:	f003 0308 	and.w	r3, r3, #8
90009bdc:	2b08      	cmp	r3, #8
90009bde:	d12f      	bne.n	90009c40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90009be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
90009be4:	9300      	str	r3, [sp, #0]
90009be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
90009be8:	2200      	movs	r2, #0
90009bea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
90009bee:	6878      	ldr	r0, [r7, #4]
90009bf0:	f000 f88e 	bl	90009d10 <UART_WaitOnFlagUntilTimeout>
90009bf4:	4603      	mov	r3, r0
90009bf6:	2b00      	cmp	r3, #0
90009bf8:	d022      	beq.n	90009c40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
90009bfa:	687b      	ldr	r3, [r7, #4]
90009bfc:	681b      	ldr	r3, [r3, #0]
90009bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90009c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90009c02:	e853 3f00 	ldrex	r3, [r3]
90009c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
90009c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90009c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90009c0e:	653b      	str	r3, [r7, #80]	@ 0x50
90009c10:	687b      	ldr	r3, [r7, #4]
90009c12:	681b      	ldr	r3, [r3, #0]
90009c14:	461a      	mov	r2, r3
90009c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
90009c18:	647b      	str	r3, [r7, #68]	@ 0x44
90009c1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90009c1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
90009c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009c20:	e841 2300 	strex	r3, r2, [r1]
90009c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
90009c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90009c28:	2b00      	cmp	r3, #0
90009c2a:	d1e6      	bne.n	90009bfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
90009c2c:	687b      	ldr	r3, [r7, #4]
90009c2e:	2220      	movs	r2, #32
90009c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
90009c34:	687b      	ldr	r3, [r7, #4]
90009c36:	2200      	movs	r2, #0
90009c38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
90009c3c:	2303      	movs	r3, #3
90009c3e:	e063      	b.n	90009d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
90009c40:	687b      	ldr	r3, [r7, #4]
90009c42:	681b      	ldr	r3, [r3, #0]
90009c44:	681b      	ldr	r3, [r3, #0]
90009c46:	f003 0304 	and.w	r3, r3, #4
90009c4a:	2b04      	cmp	r3, #4
90009c4c:	d149      	bne.n	90009ce2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90009c4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
90009c52:	9300      	str	r3, [sp, #0]
90009c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
90009c56:	2200      	movs	r2, #0
90009c58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
90009c5c:	6878      	ldr	r0, [r7, #4]
90009c5e:	f000 f857 	bl	90009d10 <UART_WaitOnFlagUntilTimeout>
90009c62:	4603      	mov	r3, r0
90009c64:	2b00      	cmp	r3, #0
90009c66:	d03c      	beq.n	90009ce2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
90009c68:	687b      	ldr	r3, [r7, #4]
90009c6a:	681b      	ldr	r3, [r3, #0]
90009c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009c70:	e853 3f00 	ldrex	r3, [r3]
90009c74:	623b      	str	r3, [r7, #32]
   return(result);
90009c76:	6a3b      	ldr	r3, [r7, #32]
90009c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
90009c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
90009c7e:	687b      	ldr	r3, [r7, #4]
90009c80:	681b      	ldr	r3, [r3, #0]
90009c82:	461a      	mov	r2, r3
90009c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
90009c86:	633b      	str	r3, [r7, #48]	@ 0x30
90009c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90009c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
90009c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
90009c8e:	e841 2300 	strex	r3, r2, [r1]
90009c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
90009c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90009c96:	2b00      	cmp	r3, #0
90009c98:	d1e6      	bne.n	90009c68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90009c9a:	687b      	ldr	r3, [r7, #4]
90009c9c:	681b      	ldr	r3, [r3, #0]
90009c9e:	3308      	adds	r3, #8
90009ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90009ca2:	693b      	ldr	r3, [r7, #16]
90009ca4:	e853 3f00 	ldrex	r3, [r3]
90009ca8:	60fb      	str	r3, [r7, #12]
   return(result);
90009caa:	68fb      	ldr	r3, [r7, #12]
90009cac:	f023 0301 	bic.w	r3, r3, #1
90009cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
90009cb2:	687b      	ldr	r3, [r7, #4]
90009cb4:	681b      	ldr	r3, [r3, #0]
90009cb6:	3308      	adds	r3, #8
90009cb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
90009cba:	61fa      	str	r2, [r7, #28]
90009cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90009cbe:	69b9      	ldr	r1, [r7, #24]
90009cc0:	69fa      	ldr	r2, [r7, #28]
90009cc2:	e841 2300 	strex	r3, r2, [r1]
90009cc6:	617b      	str	r3, [r7, #20]
   return(result);
90009cc8:	697b      	ldr	r3, [r7, #20]
90009cca:	2b00      	cmp	r3, #0
90009ccc:	d1e5      	bne.n	90009c9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
90009cce:	687b      	ldr	r3, [r7, #4]
90009cd0:	2220      	movs	r2, #32
90009cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
90009cd6:	687b      	ldr	r3, [r7, #4]
90009cd8:	2200      	movs	r2, #0
90009cda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
90009cde:	2303      	movs	r3, #3
90009ce0:	e012      	b.n	90009d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
90009ce2:	687b      	ldr	r3, [r7, #4]
90009ce4:	2220      	movs	r2, #32
90009ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
90009cea:	687b      	ldr	r3, [r7, #4]
90009cec:	2220      	movs	r2, #32
90009cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90009cf2:	687b      	ldr	r3, [r7, #4]
90009cf4:	2200      	movs	r2, #0
90009cf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
90009cf8:	687b      	ldr	r3, [r7, #4]
90009cfa:	2200      	movs	r2, #0
90009cfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
90009cfe:	687b      	ldr	r3, [r7, #4]
90009d00:	2200      	movs	r2, #0
90009d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
90009d06:	2300      	movs	r3, #0
}
90009d08:	4618      	mov	r0, r3
90009d0a:	3758      	adds	r7, #88	@ 0x58
90009d0c:	46bd      	mov	sp, r7
90009d0e:	bd80      	pop	{r7, pc}

90009d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
90009d10:	b580      	push	{r7, lr}
90009d12:	b084      	sub	sp, #16
90009d14:	af00      	add	r7, sp, #0
90009d16:	60f8      	str	r0, [r7, #12]
90009d18:	60b9      	str	r1, [r7, #8]
90009d1a:	603b      	str	r3, [r7, #0]
90009d1c:	4613      	mov	r3, r2
90009d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90009d20:	e04f      	b.n	90009dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90009d22:	69bb      	ldr	r3, [r7, #24]
90009d24:	f1b3 3fff 	cmp.w	r3, #4294967295
90009d28:	d04b      	beq.n	90009dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90009d2a:	f7f9 fb8d 	bl	90003448 <HAL_GetTick>
90009d2e:	4602      	mov	r2, r0
90009d30:	683b      	ldr	r3, [r7, #0]
90009d32:	1ad3      	subs	r3, r2, r3
90009d34:	69ba      	ldr	r2, [r7, #24]
90009d36:	429a      	cmp	r2, r3
90009d38:	d302      	bcc.n	90009d40 <UART_WaitOnFlagUntilTimeout+0x30>
90009d3a:	69bb      	ldr	r3, [r7, #24]
90009d3c:	2b00      	cmp	r3, #0
90009d3e:	d101      	bne.n	90009d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
90009d40:	2303      	movs	r3, #3
90009d42:	e04e      	b.n	90009de2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
90009d44:	68fb      	ldr	r3, [r7, #12]
90009d46:	681b      	ldr	r3, [r3, #0]
90009d48:	681b      	ldr	r3, [r3, #0]
90009d4a:	f003 0304 	and.w	r3, r3, #4
90009d4e:	2b00      	cmp	r3, #0
90009d50:	d037      	beq.n	90009dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
90009d52:	68bb      	ldr	r3, [r7, #8]
90009d54:	2b80      	cmp	r3, #128	@ 0x80
90009d56:	d034      	beq.n	90009dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
90009d58:	68bb      	ldr	r3, [r7, #8]
90009d5a:	2b40      	cmp	r3, #64	@ 0x40
90009d5c:	d031      	beq.n	90009dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
90009d5e:	68fb      	ldr	r3, [r7, #12]
90009d60:	681b      	ldr	r3, [r3, #0]
90009d62:	69db      	ldr	r3, [r3, #28]
90009d64:	f003 0308 	and.w	r3, r3, #8
90009d68:	2b08      	cmp	r3, #8
90009d6a:	d110      	bne.n	90009d8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
90009d6c:	68fb      	ldr	r3, [r7, #12]
90009d6e:	681b      	ldr	r3, [r3, #0]
90009d70:	2208      	movs	r2, #8
90009d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
90009d74:	68f8      	ldr	r0, [r7, #12]
90009d76:	f000 f839 	bl	90009dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
90009d7a:	68fb      	ldr	r3, [r7, #12]
90009d7c:	2208      	movs	r2, #8
90009d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
90009d82:	68fb      	ldr	r3, [r7, #12]
90009d84:	2200      	movs	r2, #0
90009d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
90009d8a:	2301      	movs	r3, #1
90009d8c:	e029      	b.n	90009de2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
90009d8e:	68fb      	ldr	r3, [r7, #12]
90009d90:	681b      	ldr	r3, [r3, #0]
90009d92:	69db      	ldr	r3, [r3, #28]
90009d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
90009d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90009d9c:	d111      	bne.n	90009dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
90009d9e:	68fb      	ldr	r3, [r7, #12]
90009da0:	681b      	ldr	r3, [r3, #0]
90009da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90009da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
90009da8:	68f8      	ldr	r0, [r7, #12]
90009daa:	f000 f81f 	bl	90009dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
90009dae:	68fb      	ldr	r3, [r7, #12]
90009db0:	2220      	movs	r2, #32
90009db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
90009db6:	68fb      	ldr	r3, [r7, #12]
90009db8:	2200      	movs	r2, #0
90009dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
90009dbe:	2303      	movs	r3, #3
90009dc0:	e00f      	b.n	90009de2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90009dc2:	68fb      	ldr	r3, [r7, #12]
90009dc4:	681b      	ldr	r3, [r3, #0]
90009dc6:	69da      	ldr	r2, [r3, #28]
90009dc8:	68bb      	ldr	r3, [r7, #8]
90009dca:	4013      	ands	r3, r2
90009dcc:	68ba      	ldr	r2, [r7, #8]
90009dce:	429a      	cmp	r2, r3
90009dd0:	bf0c      	ite	eq
90009dd2:	2301      	moveq	r3, #1
90009dd4:	2300      	movne	r3, #0
90009dd6:	b2db      	uxtb	r3, r3
90009dd8:	461a      	mov	r2, r3
90009dda:	79fb      	ldrb	r3, [r7, #7]
90009ddc:	429a      	cmp	r2, r3
90009dde:	d0a0      	beq.n	90009d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90009de0:	2300      	movs	r3, #0
}
90009de2:	4618      	mov	r0, r3
90009de4:	3710      	adds	r7, #16
90009de6:	46bd      	mov	sp, r7
90009de8:	bd80      	pop	{r7, pc}
	...

90009dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
90009dec:	b480      	push	{r7}
90009dee:	b095      	sub	sp, #84	@ 0x54
90009df0:	af00      	add	r7, sp, #0
90009df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
90009df4:	687b      	ldr	r3, [r7, #4]
90009df6:	681b      	ldr	r3, [r3, #0]
90009df8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90009dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90009dfc:	e853 3f00 	ldrex	r3, [r3]
90009e00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
90009e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90009e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
90009e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
90009e0a:	687b      	ldr	r3, [r7, #4]
90009e0c:	681b      	ldr	r3, [r3, #0]
90009e0e:	461a      	mov	r2, r3
90009e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
90009e12:	643b      	str	r3, [r7, #64]	@ 0x40
90009e14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90009e16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
90009e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90009e1a:	e841 2300 	strex	r3, r2, [r1]
90009e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
90009e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90009e22:	2b00      	cmp	r3, #0
90009e24:	d1e6      	bne.n	90009df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
90009e26:	687b      	ldr	r3, [r7, #4]
90009e28:	681b      	ldr	r3, [r3, #0]
90009e2a:	3308      	adds	r3, #8
90009e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90009e2e:	6a3b      	ldr	r3, [r7, #32]
90009e30:	e853 3f00 	ldrex	r3, [r3]
90009e34:	61fb      	str	r3, [r7, #28]
   return(result);
90009e36:	69fa      	ldr	r2, [r7, #28]
90009e38:	4b1e      	ldr	r3, [pc, #120]	@ (90009eb4 <UART_EndRxTransfer+0xc8>)
90009e3a:	4013      	ands	r3, r2
90009e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
90009e3e:	687b      	ldr	r3, [r7, #4]
90009e40:	681b      	ldr	r3, [r3, #0]
90009e42:	3308      	adds	r3, #8
90009e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
90009e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
90009e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90009e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90009e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90009e4e:	e841 2300 	strex	r3, r2, [r1]
90009e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
90009e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009e56:	2b00      	cmp	r3, #0
90009e58:	d1e5      	bne.n	90009e26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
90009e5a:	687b      	ldr	r3, [r7, #4]
90009e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90009e5e:	2b01      	cmp	r3, #1
90009e60:	d118      	bne.n	90009e94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
90009e62:	687b      	ldr	r3, [r7, #4]
90009e64:	681b      	ldr	r3, [r3, #0]
90009e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90009e68:	68fb      	ldr	r3, [r7, #12]
90009e6a:	e853 3f00 	ldrex	r3, [r3]
90009e6e:	60bb      	str	r3, [r7, #8]
   return(result);
90009e70:	68bb      	ldr	r3, [r7, #8]
90009e72:	f023 0310 	bic.w	r3, r3, #16
90009e76:	647b      	str	r3, [r7, #68]	@ 0x44
90009e78:	687b      	ldr	r3, [r7, #4]
90009e7a:	681b      	ldr	r3, [r3, #0]
90009e7c:	461a      	mov	r2, r3
90009e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
90009e80:	61bb      	str	r3, [r7, #24]
90009e82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90009e84:	6979      	ldr	r1, [r7, #20]
90009e86:	69ba      	ldr	r2, [r7, #24]
90009e88:	e841 2300 	strex	r3, r2, [r1]
90009e8c:	613b      	str	r3, [r7, #16]
   return(result);
90009e8e:	693b      	ldr	r3, [r7, #16]
90009e90:	2b00      	cmp	r3, #0
90009e92:	d1e6      	bne.n	90009e62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
90009e94:	687b      	ldr	r3, [r7, #4]
90009e96:	2220      	movs	r2, #32
90009e98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90009e9c:	687b      	ldr	r3, [r7, #4]
90009e9e:	2200      	movs	r2, #0
90009ea0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
90009ea2:	687b      	ldr	r3, [r7, #4]
90009ea4:	2200      	movs	r2, #0
90009ea6:	675a      	str	r2, [r3, #116]	@ 0x74
}
90009ea8:	bf00      	nop
90009eaa:	3754      	adds	r7, #84	@ 0x54
90009eac:	46bd      	mov	sp, r7
90009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
90009eb2:	4770      	bx	lr
90009eb4:	effffffe 	.word	0xeffffffe

90009eb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
90009eb8:	b480      	push	{r7}
90009eba:	b085      	sub	sp, #20
90009ebc:	af00      	add	r7, sp, #0
90009ebe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
90009ec0:	687b      	ldr	r3, [r7, #4]
90009ec2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
90009ec6:	2b01      	cmp	r3, #1
90009ec8:	d101      	bne.n	90009ece <HAL_UARTEx_DisableFifoMode+0x16>
90009eca:	2302      	movs	r3, #2
90009ecc:	e027      	b.n	90009f1e <HAL_UARTEx_DisableFifoMode+0x66>
90009ece:	687b      	ldr	r3, [r7, #4]
90009ed0:	2201      	movs	r2, #1
90009ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
90009ed6:	687b      	ldr	r3, [r7, #4]
90009ed8:	2224      	movs	r2, #36	@ 0x24
90009eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90009ede:	687b      	ldr	r3, [r7, #4]
90009ee0:	681b      	ldr	r3, [r3, #0]
90009ee2:	681b      	ldr	r3, [r3, #0]
90009ee4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90009ee6:	687b      	ldr	r3, [r7, #4]
90009ee8:	681b      	ldr	r3, [r3, #0]
90009eea:	681a      	ldr	r2, [r3, #0]
90009eec:	687b      	ldr	r3, [r7, #4]
90009eee:	681b      	ldr	r3, [r3, #0]
90009ef0:	f022 0201 	bic.w	r2, r2, #1
90009ef4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
90009ef6:	68fb      	ldr	r3, [r7, #12]
90009ef8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
90009efc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
90009efe:	687b      	ldr	r3, [r7, #4]
90009f00:	2200      	movs	r2, #0
90009f02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90009f04:	687b      	ldr	r3, [r7, #4]
90009f06:	681b      	ldr	r3, [r3, #0]
90009f08:	68fa      	ldr	r2, [r7, #12]
90009f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90009f0c:	687b      	ldr	r3, [r7, #4]
90009f0e:	2220      	movs	r2, #32
90009f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
90009f14:	687b      	ldr	r3, [r7, #4]
90009f16:	2200      	movs	r2, #0
90009f18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
90009f1c:	2300      	movs	r3, #0
}
90009f1e:	4618      	mov	r0, r3
90009f20:	3714      	adds	r7, #20
90009f22:	46bd      	mov	sp, r7
90009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f28:	4770      	bx	lr

90009f2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
90009f2a:	b580      	push	{r7, lr}
90009f2c:	b084      	sub	sp, #16
90009f2e:	af00      	add	r7, sp, #0
90009f30:	6078      	str	r0, [r7, #4]
90009f32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
90009f34:	687b      	ldr	r3, [r7, #4]
90009f36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
90009f3a:	2b01      	cmp	r3, #1
90009f3c:	d101      	bne.n	90009f42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
90009f3e:	2302      	movs	r3, #2
90009f40:	e02d      	b.n	90009f9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
90009f42:	687b      	ldr	r3, [r7, #4]
90009f44:	2201      	movs	r2, #1
90009f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
90009f4a:	687b      	ldr	r3, [r7, #4]
90009f4c:	2224      	movs	r2, #36	@ 0x24
90009f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90009f52:	687b      	ldr	r3, [r7, #4]
90009f54:	681b      	ldr	r3, [r3, #0]
90009f56:	681b      	ldr	r3, [r3, #0]
90009f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90009f5a:	687b      	ldr	r3, [r7, #4]
90009f5c:	681b      	ldr	r3, [r3, #0]
90009f5e:	681a      	ldr	r2, [r3, #0]
90009f60:	687b      	ldr	r3, [r7, #4]
90009f62:	681b      	ldr	r3, [r3, #0]
90009f64:	f022 0201 	bic.w	r2, r2, #1
90009f68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
90009f6a:	687b      	ldr	r3, [r7, #4]
90009f6c:	681b      	ldr	r3, [r3, #0]
90009f6e:	689b      	ldr	r3, [r3, #8]
90009f70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
90009f74:	687b      	ldr	r3, [r7, #4]
90009f76:	681b      	ldr	r3, [r3, #0]
90009f78:	683a      	ldr	r2, [r7, #0]
90009f7a:	430a      	orrs	r2, r1
90009f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
90009f7e:	6878      	ldr	r0, [r7, #4]
90009f80:	f000 f850 	bl	9000a024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90009f84:	687b      	ldr	r3, [r7, #4]
90009f86:	681b      	ldr	r3, [r3, #0]
90009f88:	68fa      	ldr	r2, [r7, #12]
90009f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90009f8c:	687b      	ldr	r3, [r7, #4]
90009f8e:	2220      	movs	r2, #32
90009f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
90009f94:	687b      	ldr	r3, [r7, #4]
90009f96:	2200      	movs	r2, #0
90009f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
90009f9c:	2300      	movs	r3, #0
}
90009f9e:	4618      	mov	r0, r3
90009fa0:	3710      	adds	r7, #16
90009fa2:	46bd      	mov	sp, r7
90009fa4:	bd80      	pop	{r7, pc}

90009fa6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
90009fa6:	b580      	push	{r7, lr}
90009fa8:	b084      	sub	sp, #16
90009faa:	af00      	add	r7, sp, #0
90009fac:	6078      	str	r0, [r7, #4]
90009fae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
90009fb0:	687b      	ldr	r3, [r7, #4]
90009fb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
90009fb6:	2b01      	cmp	r3, #1
90009fb8:	d101      	bne.n	90009fbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
90009fba:	2302      	movs	r3, #2
90009fbc:	e02d      	b.n	9000a01a <HAL_UARTEx_SetRxFifoThreshold+0x74>
90009fbe:	687b      	ldr	r3, [r7, #4]
90009fc0:	2201      	movs	r2, #1
90009fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
90009fc6:	687b      	ldr	r3, [r7, #4]
90009fc8:	2224      	movs	r2, #36	@ 0x24
90009fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90009fce:	687b      	ldr	r3, [r7, #4]
90009fd0:	681b      	ldr	r3, [r3, #0]
90009fd2:	681b      	ldr	r3, [r3, #0]
90009fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90009fd6:	687b      	ldr	r3, [r7, #4]
90009fd8:	681b      	ldr	r3, [r3, #0]
90009fda:	681a      	ldr	r2, [r3, #0]
90009fdc:	687b      	ldr	r3, [r7, #4]
90009fde:	681b      	ldr	r3, [r3, #0]
90009fe0:	f022 0201 	bic.w	r2, r2, #1
90009fe4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
90009fe6:	687b      	ldr	r3, [r7, #4]
90009fe8:	681b      	ldr	r3, [r3, #0]
90009fea:	689b      	ldr	r3, [r3, #8]
90009fec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
90009ff0:	687b      	ldr	r3, [r7, #4]
90009ff2:	681b      	ldr	r3, [r3, #0]
90009ff4:	683a      	ldr	r2, [r7, #0]
90009ff6:	430a      	orrs	r2, r1
90009ff8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
90009ffa:	6878      	ldr	r0, [r7, #4]
90009ffc:	f000 f812 	bl	9000a024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000a000:	687b      	ldr	r3, [r7, #4]
9000a002:	681b      	ldr	r3, [r3, #0]
9000a004:	68fa      	ldr	r2, [r7, #12]
9000a006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000a008:	687b      	ldr	r3, [r7, #4]
9000a00a:	2220      	movs	r2, #32
9000a00c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000a010:	687b      	ldr	r3, [r7, #4]
9000a012:	2200      	movs	r2, #0
9000a014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000a018:	2300      	movs	r3, #0
}
9000a01a:	4618      	mov	r0, r3
9000a01c:	3710      	adds	r7, #16
9000a01e:	46bd      	mov	sp, r7
9000a020:	bd80      	pop	{r7, pc}
	...

9000a024 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000a024:	b480      	push	{r7}
9000a026:	b085      	sub	sp, #20
9000a028:	af00      	add	r7, sp, #0
9000a02a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000a02c:	687b      	ldr	r3, [r7, #4]
9000a02e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000a030:	2b00      	cmp	r3, #0
9000a032:	d108      	bne.n	9000a046 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000a034:	687b      	ldr	r3, [r7, #4]
9000a036:	2201      	movs	r2, #1
9000a038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000a03c:	687b      	ldr	r3, [r7, #4]
9000a03e:	2201      	movs	r2, #1
9000a040:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000a044:	e031      	b.n	9000a0aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000a046:	2310      	movs	r3, #16
9000a048:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000a04a:	2310      	movs	r3, #16
9000a04c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000a04e:	687b      	ldr	r3, [r7, #4]
9000a050:	681b      	ldr	r3, [r3, #0]
9000a052:	689b      	ldr	r3, [r3, #8]
9000a054:	0e5b      	lsrs	r3, r3, #25
9000a056:	b2db      	uxtb	r3, r3
9000a058:	f003 0307 	and.w	r3, r3, #7
9000a05c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000a05e:	687b      	ldr	r3, [r7, #4]
9000a060:	681b      	ldr	r3, [r3, #0]
9000a062:	689b      	ldr	r3, [r3, #8]
9000a064:	0f5b      	lsrs	r3, r3, #29
9000a066:	b2db      	uxtb	r3, r3
9000a068:	f003 0307 	and.w	r3, r3, #7
9000a06c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000a06e:	7bbb      	ldrb	r3, [r7, #14]
9000a070:	7b3a      	ldrb	r2, [r7, #12]
9000a072:	4911      	ldr	r1, [pc, #68]	@ (9000a0b8 <UARTEx_SetNbDataToProcess+0x94>)
9000a074:	5c8a      	ldrb	r2, [r1, r2]
9000a076:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000a07a:	7b3a      	ldrb	r2, [r7, #12]
9000a07c:	490f      	ldr	r1, [pc, #60]	@ (9000a0bc <UARTEx_SetNbDataToProcess+0x98>)
9000a07e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000a080:	fb93 f3f2 	sdiv	r3, r3, r2
9000a084:	b29a      	uxth	r2, r3
9000a086:	687b      	ldr	r3, [r7, #4]
9000a088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000a08c:	7bfb      	ldrb	r3, [r7, #15]
9000a08e:	7b7a      	ldrb	r2, [r7, #13]
9000a090:	4909      	ldr	r1, [pc, #36]	@ (9000a0b8 <UARTEx_SetNbDataToProcess+0x94>)
9000a092:	5c8a      	ldrb	r2, [r1, r2]
9000a094:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000a098:	7b7a      	ldrb	r2, [r7, #13]
9000a09a:	4908      	ldr	r1, [pc, #32]	@ (9000a0bc <UARTEx_SetNbDataToProcess+0x98>)
9000a09c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000a09e:	fb93 f3f2 	sdiv	r3, r3, r2
9000a0a2:	b29a      	uxth	r2, r3
9000a0a4:	687b      	ldr	r3, [r7, #4]
9000a0a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000a0aa:	bf00      	nop
9000a0ac:	3714      	adds	r7, #20
9000a0ae:	46bd      	mov	sp, r7
9000a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a0b4:	4770      	bx	lr
9000a0b6:	bf00      	nop
9000a0b8:	9000c1f8 	.word	0x9000c1f8
9000a0bc:	9000c200 	.word	0x9000c200

9000a0c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000a0c0:	b480      	push	{r7}
9000a0c2:	b083      	sub	sp, #12
9000a0c4:	af00      	add	r7, sp, #0
9000a0c6:	6078      	str	r0, [r7, #4]
9000a0c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000a0ca:	683b      	ldr	r3, [r7, #0]
9000a0cc:	681b      	ldr	r3, [r3, #0]
9000a0ce:	2b00      	cmp	r3, #0
9000a0d0:	d121      	bne.n	9000a116 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000a0d2:	687b      	ldr	r3, [r7, #4]
9000a0d4:	681a      	ldr	r2, [r3, #0]
9000a0d6:	4b27      	ldr	r3, [pc, #156]	@ (9000a174 <FMC_SDRAM_Init+0xb4>)
9000a0d8:	4013      	ands	r3, r2
9000a0da:	683a      	ldr	r2, [r7, #0]
9000a0dc:	6851      	ldr	r1, [r2, #4]
9000a0de:	683a      	ldr	r2, [r7, #0]
9000a0e0:	6892      	ldr	r2, [r2, #8]
9000a0e2:	4311      	orrs	r1, r2
9000a0e4:	683a      	ldr	r2, [r7, #0]
9000a0e6:	68d2      	ldr	r2, [r2, #12]
9000a0e8:	4311      	orrs	r1, r2
9000a0ea:	683a      	ldr	r2, [r7, #0]
9000a0ec:	6912      	ldr	r2, [r2, #16]
9000a0ee:	4311      	orrs	r1, r2
9000a0f0:	683a      	ldr	r2, [r7, #0]
9000a0f2:	6952      	ldr	r2, [r2, #20]
9000a0f4:	4311      	orrs	r1, r2
9000a0f6:	683a      	ldr	r2, [r7, #0]
9000a0f8:	6992      	ldr	r2, [r2, #24]
9000a0fa:	4311      	orrs	r1, r2
9000a0fc:	683a      	ldr	r2, [r7, #0]
9000a0fe:	69d2      	ldr	r2, [r2, #28]
9000a100:	4311      	orrs	r1, r2
9000a102:	683a      	ldr	r2, [r7, #0]
9000a104:	6a12      	ldr	r2, [r2, #32]
9000a106:	4311      	orrs	r1, r2
9000a108:	683a      	ldr	r2, [r7, #0]
9000a10a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000a10c:	430a      	orrs	r2, r1
9000a10e:	431a      	orrs	r2, r3
9000a110:	687b      	ldr	r3, [r7, #4]
9000a112:	601a      	str	r2, [r3, #0]
9000a114:	e026      	b.n	9000a164 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000a116:	687b      	ldr	r3, [r7, #4]
9000a118:	681b      	ldr	r3, [r3, #0]
9000a11a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000a11e:	683b      	ldr	r3, [r7, #0]
9000a120:	69d9      	ldr	r1, [r3, #28]
9000a122:	683b      	ldr	r3, [r7, #0]
9000a124:	6a1b      	ldr	r3, [r3, #32]
9000a126:	4319      	orrs	r1, r3
9000a128:	683b      	ldr	r3, [r7, #0]
9000a12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a12c:	430b      	orrs	r3, r1
9000a12e:	431a      	orrs	r2, r3
9000a130:	687b      	ldr	r3, [r7, #4]
9000a132:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000a134:	687b      	ldr	r3, [r7, #4]
9000a136:	685a      	ldr	r2, [r3, #4]
9000a138:	4b0e      	ldr	r3, [pc, #56]	@ (9000a174 <FMC_SDRAM_Init+0xb4>)
9000a13a:	4013      	ands	r3, r2
9000a13c:	683a      	ldr	r2, [r7, #0]
9000a13e:	6851      	ldr	r1, [r2, #4]
9000a140:	683a      	ldr	r2, [r7, #0]
9000a142:	6892      	ldr	r2, [r2, #8]
9000a144:	4311      	orrs	r1, r2
9000a146:	683a      	ldr	r2, [r7, #0]
9000a148:	68d2      	ldr	r2, [r2, #12]
9000a14a:	4311      	orrs	r1, r2
9000a14c:	683a      	ldr	r2, [r7, #0]
9000a14e:	6912      	ldr	r2, [r2, #16]
9000a150:	4311      	orrs	r1, r2
9000a152:	683a      	ldr	r2, [r7, #0]
9000a154:	6952      	ldr	r2, [r2, #20]
9000a156:	4311      	orrs	r1, r2
9000a158:	683a      	ldr	r2, [r7, #0]
9000a15a:	6992      	ldr	r2, [r2, #24]
9000a15c:	430a      	orrs	r2, r1
9000a15e:	431a      	orrs	r2, r3
9000a160:	687b      	ldr	r3, [r7, #4]
9000a162:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000a164:	2300      	movs	r3, #0
}
9000a166:	4618      	mov	r0, r3
9000a168:	370c      	adds	r7, #12
9000a16a:	46bd      	mov	sp, r7
9000a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a170:	4770      	bx	lr
9000a172:	bf00      	nop
9000a174:	ffff8000 	.word	0xffff8000

9000a178 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000a178:	b480      	push	{r7}
9000a17a:	b085      	sub	sp, #20
9000a17c:	af00      	add	r7, sp, #0
9000a17e:	60f8      	str	r0, [r7, #12]
9000a180:	60b9      	str	r1, [r7, #8]
9000a182:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000a184:	687b      	ldr	r3, [r7, #4]
9000a186:	2b00      	cmp	r3, #0
9000a188:	d128      	bne.n	9000a1dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000a18a:	68fb      	ldr	r3, [r7, #12]
9000a18c:	689b      	ldr	r3, [r3, #8]
9000a18e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000a192:	68bb      	ldr	r3, [r7, #8]
9000a194:	681b      	ldr	r3, [r3, #0]
9000a196:	1e59      	subs	r1, r3, #1
9000a198:	68bb      	ldr	r3, [r7, #8]
9000a19a:	685b      	ldr	r3, [r3, #4]
9000a19c:	3b01      	subs	r3, #1
9000a19e:	011b      	lsls	r3, r3, #4
9000a1a0:	4319      	orrs	r1, r3
9000a1a2:	68bb      	ldr	r3, [r7, #8]
9000a1a4:	689b      	ldr	r3, [r3, #8]
9000a1a6:	3b01      	subs	r3, #1
9000a1a8:	021b      	lsls	r3, r3, #8
9000a1aa:	4319      	orrs	r1, r3
9000a1ac:	68bb      	ldr	r3, [r7, #8]
9000a1ae:	68db      	ldr	r3, [r3, #12]
9000a1b0:	3b01      	subs	r3, #1
9000a1b2:	031b      	lsls	r3, r3, #12
9000a1b4:	4319      	orrs	r1, r3
9000a1b6:	68bb      	ldr	r3, [r7, #8]
9000a1b8:	691b      	ldr	r3, [r3, #16]
9000a1ba:	3b01      	subs	r3, #1
9000a1bc:	041b      	lsls	r3, r3, #16
9000a1be:	4319      	orrs	r1, r3
9000a1c0:	68bb      	ldr	r3, [r7, #8]
9000a1c2:	695b      	ldr	r3, [r3, #20]
9000a1c4:	3b01      	subs	r3, #1
9000a1c6:	051b      	lsls	r3, r3, #20
9000a1c8:	4319      	orrs	r1, r3
9000a1ca:	68bb      	ldr	r3, [r7, #8]
9000a1cc:	699b      	ldr	r3, [r3, #24]
9000a1ce:	3b01      	subs	r3, #1
9000a1d0:	061b      	lsls	r3, r3, #24
9000a1d2:	430b      	orrs	r3, r1
9000a1d4:	431a      	orrs	r2, r3
9000a1d6:	68fb      	ldr	r3, [r7, #12]
9000a1d8:	609a      	str	r2, [r3, #8]
9000a1da:	e02d      	b.n	9000a238 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000a1dc:	68fb      	ldr	r3, [r7, #12]
9000a1de:	689a      	ldr	r2, [r3, #8]
9000a1e0:	4b19      	ldr	r3, [pc, #100]	@ (9000a248 <FMC_SDRAM_Timing_Init+0xd0>)
9000a1e2:	4013      	ands	r3, r2
9000a1e4:	68ba      	ldr	r2, [r7, #8]
9000a1e6:	68d2      	ldr	r2, [r2, #12]
9000a1e8:	3a01      	subs	r2, #1
9000a1ea:	0311      	lsls	r1, r2, #12
9000a1ec:	68ba      	ldr	r2, [r7, #8]
9000a1ee:	6952      	ldr	r2, [r2, #20]
9000a1f0:	3a01      	subs	r2, #1
9000a1f2:	0512      	lsls	r2, r2, #20
9000a1f4:	430a      	orrs	r2, r1
9000a1f6:	431a      	orrs	r2, r3
9000a1f8:	68fb      	ldr	r3, [r7, #12]
9000a1fa:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000a1fc:	68fb      	ldr	r3, [r7, #12]
9000a1fe:	68db      	ldr	r3, [r3, #12]
9000a200:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000a204:	68bb      	ldr	r3, [r7, #8]
9000a206:	681b      	ldr	r3, [r3, #0]
9000a208:	1e59      	subs	r1, r3, #1
9000a20a:	68bb      	ldr	r3, [r7, #8]
9000a20c:	685b      	ldr	r3, [r3, #4]
9000a20e:	3b01      	subs	r3, #1
9000a210:	011b      	lsls	r3, r3, #4
9000a212:	4319      	orrs	r1, r3
9000a214:	68bb      	ldr	r3, [r7, #8]
9000a216:	689b      	ldr	r3, [r3, #8]
9000a218:	3b01      	subs	r3, #1
9000a21a:	021b      	lsls	r3, r3, #8
9000a21c:	4319      	orrs	r1, r3
9000a21e:	68bb      	ldr	r3, [r7, #8]
9000a220:	691b      	ldr	r3, [r3, #16]
9000a222:	3b01      	subs	r3, #1
9000a224:	041b      	lsls	r3, r3, #16
9000a226:	4319      	orrs	r1, r3
9000a228:	68bb      	ldr	r3, [r7, #8]
9000a22a:	699b      	ldr	r3, [r3, #24]
9000a22c:	3b01      	subs	r3, #1
9000a22e:	061b      	lsls	r3, r3, #24
9000a230:	430b      	orrs	r3, r1
9000a232:	431a      	orrs	r2, r3
9000a234:	68fb      	ldr	r3, [r7, #12]
9000a236:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000a238:	2300      	movs	r3, #0
}
9000a23a:	4618      	mov	r0, r3
9000a23c:	3714      	adds	r7, #20
9000a23e:	46bd      	mov	sp, r7
9000a240:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a244:	4770      	bx	lr
9000a246:	bf00      	nop
9000a248:	ff0f0fff 	.word	0xff0f0fff

9000a24c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000a24c:	b480      	push	{r7}
9000a24e:	b085      	sub	sp, #20
9000a250:	af00      	add	r7, sp, #0
9000a252:	60f8      	str	r0, [r7, #12]
9000a254:	60b9      	str	r1, [r7, #8]
9000a256:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000a258:	68fb      	ldr	r3, [r7, #12]
9000a25a:	691a      	ldr	r2, [r3, #16]
9000a25c:	4b0c      	ldr	r3, [pc, #48]	@ (9000a290 <FMC_SDRAM_SendCommand+0x44>)
9000a25e:	4013      	ands	r3, r2
9000a260:	68ba      	ldr	r2, [r7, #8]
9000a262:	6811      	ldr	r1, [r2, #0]
9000a264:	68ba      	ldr	r2, [r7, #8]
9000a266:	6852      	ldr	r2, [r2, #4]
9000a268:	4311      	orrs	r1, r2
9000a26a:	68ba      	ldr	r2, [r7, #8]
9000a26c:	6892      	ldr	r2, [r2, #8]
9000a26e:	3a01      	subs	r2, #1
9000a270:	0152      	lsls	r2, r2, #5
9000a272:	4311      	orrs	r1, r2
9000a274:	68ba      	ldr	r2, [r7, #8]
9000a276:	68d2      	ldr	r2, [r2, #12]
9000a278:	0252      	lsls	r2, r2, #9
9000a27a:	430a      	orrs	r2, r1
9000a27c:	431a      	orrs	r2, r3
9000a27e:	68fb      	ldr	r3, [r7, #12]
9000a280:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000a282:	2300      	movs	r3, #0
}
9000a284:	4618      	mov	r0, r3
9000a286:	3714      	adds	r7, #20
9000a288:	46bd      	mov	sp, r7
9000a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a28e:	4770      	bx	lr
9000a290:	ffc00000 	.word	0xffc00000

9000a294 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000a294:	b480      	push	{r7}
9000a296:	b083      	sub	sp, #12
9000a298:	af00      	add	r7, sp, #0
9000a29a:	6078      	str	r0, [r7, #4]
9000a29c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000a29e:	687b      	ldr	r3, [r7, #4]
9000a2a0:	695a      	ldr	r2, [r3, #20]
9000a2a2:	4b07      	ldr	r3, [pc, #28]	@ (9000a2c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000a2a4:	4013      	ands	r3, r2
9000a2a6:	683a      	ldr	r2, [r7, #0]
9000a2a8:	0052      	lsls	r2, r2, #1
9000a2aa:	431a      	orrs	r2, r3
9000a2ac:	687b      	ldr	r3, [r7, #4]
9000a2ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000a2b0:	2300      	movs	r3, #0
}
9000a2b2:	4618      	mov	r0, r3
9000a2b4:	370c      	adds	r7, #12
9000a2b6:	46bd      	mov	sp, r7
9000a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a2bc:	4770      	bx	lr
9000a2be:	bf00      	nop
9000a2c0:	ffffc001 	.word	0xffffc001

9000a2c4 <setAllRowsInactive>:
volatile int lastRow = -1;
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;

void setAllRowsInactive(void)
{
9000a2c4:	b580      	push	{r7, lr}
9000a2c6:	b082      	sub	sp, #8
9000a2c8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000a2ca:	2300      	movs	r3, #0
9000a2cc:	607b      	str	r3, [r7, #4]
9000a2ce:	e00f      	b.n	9000a2f0 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000a2d0:	4a0b      	ldr	r2, [pc, #44]	@ (9000a300 <setAllRowsInactive+0x3c>)
9000a2d2:	687b      	ldr	r3, [r7, #4]
9000a2d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000a2d8:	4a09      	ldr	r2, [pc, #36]	@ (9000a300 <setAllRowsInactive+0x3c>)
9000a2da:	687b      	ldr	r3, [r7, #4]
9000a2dc:	00db      	lsls	r3, r3, #3
9000a2de:	4413      	add	r3, r2
9000a2e0:	889b      	ldrh	r3, [r3, #4]
9000a2e2:	2200      	movs	r2, #0
9000a2e4:	4619      	mov	r1, r3
9000a2e6:	f7f9 ff21 	bl	9000412c <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000a2ea:	687b      	ldr	r3, [r7, #4]
9000a2ec:	3301      	adds	r3, #1
9000a2ee:	607b      	str	r3, [r7, #4]
9000a2f0:	687b      	ldr	r3, [r7, #4]
9000a2f2:	2b04      	cmp	r3, #4
9000a2f4:	ddec      	ble.n	9000a2d0 <setAllRowsInactive+0xc>
    }
}
9000a2f6:	bf00      	nop
9000a2f8:	bf00      	nop
9000a2fa:	3708      	adds	r7, #8
9000a2fc:	46bd      	mov	sp, r7
9000a2fe:	bd80      	pop	{r7, pc}
9000a300:	20000010 	.word	0x20000010

9000a304 <setRowActive>:

void setRowActive(int row)
{
9000a304:	b580      	push	{r7, lr}
9000a306:	b082      	sub	sp, #8
9000a308:	af00      	add	r7, sp, #0
9000a30a:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000a30c:	687b      	ldr	r3, [r7, #4]
9000a30e:	2b00      	cmp	r3, #0
9000a310:	db12      	blt.n	9000a338 <setRowActive+0x34>
9000a312:	687b      	ldr	r3, [r7, #4]
9000a314:	2b04      	cmp	r3, #4
9000a316:	dc0f      	bgt.n	9000a338 <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000a318:	f7ff ffd4 	bl	9000a2c4 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000a31c:	4a08      	ldr	r2, [pc, #32]	@ (9000a340 <setRowActive+0x3c>)
9000a31e:	687b      	ldr	r3, [r7, #4]
9000a320:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000a324:	4a06      	ldr	r2, [pc, #24]	@ (9000a340 <setRowActive+0x3c>)
9000a326:	687b      	ldr	r3, [r7, #4]
9000a328:	00db      	lsls	r3, r3, #3
9000a32a:	4413      	add	r3, r2
9000a32c:	889b      	ldrh	r3, [r3, #4]
9000a32e:	2201      	movs	r2, #1
9000a330:	4619      	mov	r1, r3
9000a332:	f7f9 fefb 	bl	9000412c <HAL_GPIO_WritePin>
9000a336:	e000      	b.n	9000a33a <setRowActive+0x36>
        return;
9000a338:	bf00      	nop
}
9000a33a:	3708      	adds	r7, #8
9000a33c:	46bd      	mov	sp, r7
9000a33e:	bd80      	pop	{r7, pc}
9000a340:	20000010 	.word	0x20000010

9000a344 <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
9000a344:	b580      	push	{r7, lr}
9000a346:	b084      	sub	sp, #16
9000a348:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000a34a:	2300      	movs	r3, #0
9000a34c:	60fb      	str	r3, [r7, #12]
9000a34e:	e04c      	b.n	9000a3ea <ReadFlexiKeyboard+0xa6>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000a350:	68f8      	ldr	r0, [r7, #12]
9000a352:	f7ff ffd7 	bl	9000a304 <setRowActive>
        HAL_Delay(1);         // Small delay for settling
9000a356:	2001      	movs	r0, #1
9000a358:	f7f9 f882 	bl	90003460 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000a35c:	2300      	movs	r3, #0
9000a35e:	60bb      	str	r3, [r7, #8]
9000a360:	e03d      	b.n	9000a3de <ReadFlexiKeyboard+0x9a>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000a362:	4a26      	ldr	r2, [pc, #152]	@ (9000a3fc <ReadFlexiKeyboard+0xb8>)
9000a364:	68bb      	ldr	r3, [r7, #8]
9000a366:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000a36a:	4924      	ldr	r1, [pc, #144]	@ (9000a3fc <ReadFlexiKeyboard+0xb8>)
9000a36c:	68bb      	ldr	r3, [r7, #8]
9000a36e:	00db      	lsls	r3, r3, #3
9000a370:	440b      	add	r3, r1
9000a372:	889b      	ldrh	r3, [r3, #4]
9000a374:	4619      	mov	r1, r3
9000a376:	4610      	mov	r0, r2
9000a378:	f7f9 fec0 	bl	900040fc <HAL_GPIO_ReadPin>
9000a37c:	4603      	mov	r3, r0
9000a37e:	2b01      	cmp	r3, #1
9000a380:	d12a      	bne.n	9000a3d8 <ReadFlexiKeyboard+0x94>
            {
                uint32_t now = HAL_GetTick();
9000a382:	f7f9 f861 	bl	90003448 <HAL_GetTick>
9000a386:	6078      	str	r0, [r7, #4]

                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) { // Debounce/repeat suppression
9000a388:	4b1d      	ldr	r3, [pc, #116]	@ (9000a400 <ReadFlexiKeyboard+0xbc>)
9000a38a:	681b      	ldr	r3, [r3, #0]
9000a38c:	68fa      	ldr	r2, [r7, #12]
9000a38e:	429a      	cmp	r2, r3
9000a390:	d10d      	bne.n	9000a3ae <ReadFlexiKeyboard+0x6a>
9000a392:	4b1c      	ldr	r3, [pc, #112]	@ (9000a404 <ReadFlexiKeyboard+0xc0>)
9000a394:	681b      	ldr	r3, [r3, #0]
9000a396:	68ba      	ldr	r2, [r7, #8]
9000a398:	429a      	cmp	r2, r3
9000a39a:	d108      	bne.n	9000a3ae <ReadFlexiKeyboard+0x6a>
9000a39c:	4b1a      	ldr	r3, [pc, #104]	@ (9000a408 <ReadFlexiKeyboard+0xc4>)
9000a39e:	681b      	ldr	r3, [r3, #0]
9000a3a0:	687a      	ldr	r2, [r7, #4]
9000a3a2:	1ad3      	subs	r3, r2, r3
9000a3a4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
9000a3a8:	d201      	bcs.n	9000a3ae <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
9000a3aa:	234e      	movs	r3, #78	@ 0x4e
9000a3ac:	e021      	b.n	9000a3f2 <ReadFlexiKeyboard+0xae>
                }

                lastRow = row;
9000a3ae:	4a14      	ldr	r2, [pc, #80]	@ (9000a400 <ReadFlexiKeyboard+0xbc>)
9000a3b0:	68fb      	ldr	r3, [r7, #12]
9000a3b2:	6013      	str	r3, [r2, #0]
                lastCol = col;
9000a3b4:	4a13      	ldr	r2, [pc, #76]	@ (9000a404 <ReadFlexiKeyboard+0xc0>)
9000a3b6:	68bb      	ldr	r3, [r7, #8]
9000a3b8:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
9000a3ba:	4a13      	ldr	r2, [pc, #76]	@ (9000a408 <ReadFlexiKeyboard+0xc4>)
9000a3bc:	687b      	ldr	r3, [r7, #4]
9000a3be:	6013      	str	r3, [r2, #0]

                KeyboardButton receivedChar = keymap[row][col];
9000a3c0:	4912      	ldr	r1, [pc, #72]	@ (9000a40c <ReadFlexiKeyboard+0xc8>)
9000a3c2:	68fa      	ldr	r2, [r7, #12]
9000a3c4:	4613      	mov	r3, r2
9000a3c6:	009b      	lsls	r3, r3, #2
9000a3c8:	4413      	add	r3, r2
9000a3ca:	18ca      	adds	r2, r1, r3
9000a3cc:	68bb      	ldr	r3, [r7, #8]
9000a3ce:	4413      	add	r3, r2
9000a3d0:	781b      	ldrb	r3, [r3, #0]
9000a3d2:	70fb      	strb	r3, [r7, #3]
                //printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
                return receivedChar;
9000a3d4:	78fb      	ldrb	r3, [r7, #3]
9000a3d6:	e00c      	b.n	9000a3f2 <ReadFlexiKeyboard+0xae>
        for (int col = 0; col < NUM_COLS; col++)
9000a3d8:	68bb      	ldr	r3, [r7, #8]
9000a3da:	3301      	adds	r3, #1
9000a3dc:	60bb      	str	r3, [r7, #8]
9000a3de:	68bb      	ldr	r3, [r7, #8]
9000a3e0:	2b04      	cmp	r3, #4
9000a3e2:	ddbe      	ble.n	9000a362 <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000a3e4:	68fb      	ldr	r3, [r7, #12]
9000a3e6:	3301      	adds	r3, #1
9000a3e8:	60fb      	str	r3, [r7, #12]
9000a3ea:	68fb      	ldr	r3, [r7, #12]
9000a3ec:	2b04      	cmp	r3, #4
9000a3ee:	ddaf      	ble.n	9000a350 <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
9000a3f0:	234e      	movs	r3, #78	@ 0x4e
}
9000a3f2:	4618      	mov	r0, r3
9000a3f4:	3710      	adds	r7, #16
9000a3f6:	46bd      	mov	sp, r7
9000a3f8:	bd80      	pop	{r7, pc}
9000a3fa:	bf00      	nop
9000a3fc:	20000038 	.word	0x20000038
9000a400:	20000060 	.word	0x20000060
9000a404:	20000064 	.word	0x20000064
9000a408:	20000f48 	.word	0x20000f48
9000a40c:	9000c208 	.word	0x9000c208

9000a410 <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000a410:	b580      	push	{r7, lr}
9000a412:	b090      	sub	sp, #64	@ 0x40
9000a414:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000a416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a41a:	2200      	movs	r2, #0
9000a41c:	601a      	str	r2, [r3, #0]
9000a41e:	605a      	str	r2, [r3, #4]
9000a420:	609a      	str	r2, [r3, #8]
9000a422:	60da      	str	r2, [r3, #12]
9000a424:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000a426:	4b5c      	ldr	r3, [pc, #368]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a42c:	4a5a      	ldr	r2, [pc, #360]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a42e:	f043 0301 	orr.w	r3, r3, #1
9000a432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000a436:	4b58      	ldr	r3, [pc, #352]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a43c:	f003 0301 	and.w	r3, r3, #1
9000a440:	623b      	str	r3, [r7, #32]
9000a442:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000a444:	4b54      	ldr	r3, [pc, #336]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a44a:	4a53      	ldr	r2, [pc, #332]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a44c:	f043 0302 	orr.w	r3, r3, #2
9000a450:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000a454:	4b50      	ldr	r3, [pc, #320]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a45a:	f003 0302 	and.w	r3, r3, #2
9000a45e:	61fb      	str	r3, [r7, #28]
9000a460:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000a462:	4b4d      	ldr	r3, [pc, #308]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a468:	4a4b      	ldr	r2, [pc, #300]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a46a:	f043 0308 	orr.w	r3, r3, #8
9000a46e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000a472:	4b49      	ldr	r3, [pc, #292]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a478:	f003 0308 	and.w	r3, r3, #8
9000a47c:	61bb      	str	r3, [r7, #24]
9000a47e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000a480:	4b45      	ldr	r3, [pc, #276]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a486:	4a44      	ldr	r2, [pc, #272]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a488:	f043 0310 	orr.w	r3, r3, #16
9000a48c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000a490:	4b41      	ldr	r3, [pc, #260]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a496:	f003 0310 	and.w	r3, r3, #16
9000a49a:	617b      	str	r3, [r7, #20]
9000a49c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000a49e:	4b3e      	ldr	r3, [pc, #248]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a4a4:	4a3c      	ldr	r2, [pc, #240]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000a4aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000a4ae:	4b3a      	ldr	r3, [pc, #232]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a4b8:	613b      	str	r3, [r7, #16]
9000a4ba:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000a4bc:	4b36      	ldr	r3, [pc, #216]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a4c2:	4a35      	ldr	r2, [pc, #212]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000a4c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000a4cc:	4b32      	ldr	r3, [pc, #200]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000a4d6:	60fb      	str	r3, [r7, #12]
9000a4d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000a4da:	4b2f      	ldr	r3, [pc, #188]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a4e0:	4a2d      	ldr	r2, [pc, #180]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000a4e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000a4ea:	4b2b      	ldr	r3, [pc, #172]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a4f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000a4f4:	60bb      	str	r3, [r7, #8]
9000a4f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000a4f8:	4b27      	ldr	r3, [pc, #156]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a4fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a4fe:	4a26      	ldr	r2, [pc, #152]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a500:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000a504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000a508:	4b23      	ldr	r3, [pc, #140]	@ (9000a598 <InitFlexiKeyboard+0x188>)
9000a50a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000a50e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000a512:	607b      	str	r3, [r7, #4]
9000a514:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000a516:	2301      	movs	r3, #1
9000a518:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a51a:	2300      	movs	r3, #0
9000a51c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000a51e:	2300      	movs	r3, #0
9000a520:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000a522:	2300      	movs	r3, #0
9000a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000a526:	e012      	b.n	9000a54e <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000a528:	4a1c      	ldr	r2, [pc, #112]	@ (9000a59c <InitFlexiKeyboard+0x18c>)
9000a52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a52c:	00db      	lsls	r3, r3, #3
9000a52e:	4413      	add	r3, r2
9000a530:	889b      	ldrh	r3, [r3, #4]
9000a532:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000a534:	4a19      	ldr	r2, [pc, #100]	@ (9000a59c <InitFlexiKeyboard+0x18c>)
9000a536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000a53c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000a540:	4611      	mov	r1, r2
9000a542:	4618      	mov	r0, r3
9000a544:	f7f9 fc2a 	bl	90003d9c <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000a548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a54a:	3301      	adds	r3, #1
9000a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000a54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a550:	2b04      	cmp	r3, #4
9000a552:	dde9      	ble.n	9000a528 <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000a554:	2300      	movs	r3, #0
9000a556:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000a558:	2302      	movs	r3, #2
9000a55a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000a55c:	2300      	movs	r3, #0
9000a55e:	63bb      	str	r3, [r7, #56]	@ 0x38
9000a560:	e012      	b.n	9000a588 <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000a562:	4a0f      	ldr	r2, [pc, #60]	@ (9000a5a0 <InitFlexiKeyboard+0x190>)
9000a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a566:	00db      	lsls	r3, r3, #3
9000a568:	4413      	add	r3, r2
9000a56a:	889b      	ldrh	r3, [r3, #4]
9000a56c:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000a56e:	4a0c      	ldr	r2, [pc, #48]	@ (9000a5a0 <InitFlexiKeyboard+0x190>)
9000a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a572:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000a576:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000a57a:	4611      	mov	r1, r2
9000a57c:	4618      	mov	r0, r3
9000a57e:	f7f9 fc0d 	bl	90003d9c <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000a582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a584:	3301      	adds	r3, #1
9000a586:	63bb      	str	r3, [r7, #56]	@ 0x38
9000a588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a58a:	2b04      	cmp	r3, #4
9000a58c:	dde9      	ble.n	9000a562 <InitFlexiKeyboard+0x152>
	}
}
9000a58e:	bf00      	nop
9000a590:	bf00      	nop
9000a592:	3740      	adds	r7, #64	@ 0x40
9000a594:	46bd      	mov	sp, r7
9000a596:	bd80      	pop	{r7, pc}
9000a598:	58024400 	.word	0x58024400
9000a59c:	20000010 	.word	0x20000010
9000a5a0:	20000038 	.word	0x20000038

9000a5a4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000a5a4:	b580      	push	{r7, lr}
9000a5a6:	b082      	sub	sp, #8
9000a5a8:	af00      	add	r7, sp, #0
9000a5aa:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000a5ac:	687b      	ldr	r3, [r7, #4]
9000a5ae:	681b      	ldr	r3, [r3, #0]
9000a5b0:	4a22      	ldr	r2, [pc, #136]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5b2:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000a5b4:	687b      	ldr	r3, [r7, #4]
9000a5b6:	685b      	ldr	r3, [r3, #4]
9000a5b8:	4a20      	ldr	r2, [pc, #128]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5ba:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000a5bc:	687b      	ldr	r3, [r7, #4]
9000a5be:	689b      	ldr	r3, [r3, #8]
9000a5c0:	4a1e      	ldr	r2, [pc, #120]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5c2:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000a5c4:	687b      	ldr	r3, [r7, #4]
9000a5c6:	68db      	ldr	r3, [r3, #12]
9000a5c8:	4a1c      	ldr	r2, [pc, #112]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5ca:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000a5cc:	687b      	ldr	r3, [r7, #4]
9000a5ce:	691b      	ldr	r3, [r3, #16]
9000a5d0:	4a1a      	ldr	r2, [pc, #104]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5d2:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000a5d4:	687b      	ldr	r3, [r7, #4]
9000a5d6:	695b      	ldr	r3, [r3, #20]
9000a5d8:	4a18      	ldr	r2, [pc, #96]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5da:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000a5dc:	687b      	ldr	r3, [r7, #4]
9000a5de:	699b      	ldr	r3, [r3, #24]
9000a5e0:	4a16      	ldr	r2, [pc, #88]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5e2:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000a5e4:	687b      	ldr	r3, [r7, #4]
9000a5e6:	69db      	ldr	r3, [r3, #28]
9000a5e8:	4a14      	ldr	r2, [pc, #80]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5ea:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000a5ec:	687b      	ldr	r3, [r7, #4]
9000a5ee:	6a1b      	ldr	r3, [r3, #32]
9000a5f0:	4a12      	ldr	r2, [pc, #72]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5f2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000a5f4:	687b      	ldr	r3, [r7, #4]
9000a5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a5f8:	4a10      	ldr	r2, [pc, #64]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a5fa:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000a5fc:	687b      	ldr	r3, [r7, #4]
9000a5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a600:	4a0e      	ldr	r2, [pc, #56]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a602:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000a604:	4b0e      	ldr	r3, [pc, #56]	@ (9000a640 <UTIL_LCD_SetFuncDriver+0x9c>)
9000a606:	2200      	movs	r2, #0
9000a608:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000a60a:	4b0d      	ldr	r3, [pc, #52]	@ (9000a640 <UTIL_LCD_SetFuncDriver+0x9c>)
9000a60c:	2200      	movs	r2, #0
9000a60e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000a610:	4b0a      	ldr	r3, [pc, #40]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a612:	69db      	ldr	r3, [r3, #28]
9000a614:	4a0b      	ldr	r2, [pc, #44]	@ (9000a644 <UTIL_LCD_SetFuncDriver+0xa0>)
9000a616:	4611      	mov	r1, r2
9000a618:	2000      	movs	r0, #0
9000a61a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000a61c:	4b07      	ldr	r3, [pc, #28]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a61e:	6a1b      	ldr	r3, [r3, #32]
9000a620:	4a09      	ldr	r2, [pc, #36]	@ (9000a648 <UTIL_LCD_SetFuncDriver+0xa4>)
9000a622:	4611      	mov	r1, r2
9000a624:	2000      	movs	r0, #0
9000a626:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000a628:	4b04      	ldr	r3, [pc, #16]	@ (9000a63c <UTIL_LCD_SetFuncDriver+0x98>)
9000a62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a62c:	4a07      	ldr	r2, [pc, #28]	@ (9000a64c <UTIL_LCD_SetFuncDriver+0xa8>)
9000a62e:	4611      	mov	r1, r2
9000a630:	2000      	movs	r0, #0
9000a632:	4798      	blx	r3
}
9000a634:	bf00      	nop
9000a636:	3708      	adds	r7, #8
9000a638:	46bd      	mov	sp, r7
9000a63a:	bd80      	pop	{r7, pc}
9000a63c:	20000f8c 	.word	0x20000f8c
9000a640:	20000f4c 	.word	0x20000f4c
9000a644:	20000f60 	.word	0x20000f60
9000a648:	20000f64 	.word	0x20000f64
9000a64c:	20000f68 	.word	0x20000f68

9000a650 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000a650:	b580      	push	{r7, lr}
9000a652:	b082      	sub	sp, #8
9000a654:	af00      	add	r7, sp, #0
9000a656:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000a658:	4b0a      	ldr	r3, [pc, #40]	@ (9000a684 <UTIL_LCD_SetLayer+0x34>)
9000a65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a65c:	2b00      	cmp	r3, #0
9000a65e:	d00c      	beq.n	9000a67a <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000a660:	4b08      	ldr	r3, [pc, #32]	@ (9000a684 <UTIL_LCD_SetLayer+0x34>)
9000a662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a664:	4a08      	ldr	r2, [pc, #32]	@ (9000a688 <UTIL_LCD_SetLayer+0x38>)
9000a666:	6912      	ldr	r2, [r2, #16]
9000a668:	6879      	ldr	r1, [r7, #4]
9000a66a:	4610      	mov	r0, r2
9000a66c:	4798      	blx	r3
9000a66e:	4603      	mov	r3, r0
9000a670:	2b00      	cmp	r3, #0
9000a672:	d102      	bne.n	9000a67a <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000a674:	4a04      	ldr	r2, [pc, #16]	@ (9000a688 <UTIL_LCD_SetLayer+0x38>)
9000a676:	687b      	ldr	r3, [r7, #4]
9000a678:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000a67a:	bf00      	nop
9000a67c:	3708      	adds	r7, #8
9000a67e:	46bd      	mov	sp, r7
9000a680:	bd80      	pop	{r7, pc}
9000a682:	bf00      	nop
9000a684:	20000f8c 	.word	0x20000f8c
9000a688:	20000f4c 	.word	0x20000f4c

9000a68c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000a68c:	b480      	push	{r7}
9000a68e:	b083      	sub	sp, #12
9000a690:	af00      	add	r7, sp, #0
9000a692:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000a694:	4b06      	ldr	r3, [pc, #24]	@ (9000a6b0 <UTIL_LCD_SetTextColor+0x24>)
9000a696:	68db      	ldr	r3, [r3, #12]
9000a698:	4a05      	ldr	r2, [pc, #20]	@ (9000a6b0 <UTIL_LCD_SetTextColor+0x24>)
9000a69a:	015b      	lsls	r3, r3, #5
9000a69c:	4413      	add	r3, r2
9000a69e:	687a      	ldr	r2, [r7, #4]
9000a6a0:	601a      	str	r2, [r3, #0]
}
9000a6a2:	bf00      	nop
9000a6a4:	370c      	adds	r7, #12
9000a6a6:	46bd      	mov	sp, r7
9000a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a6ac:	4770      	bx	lr
9000a6ae:	bf00      	nop
9000a6b0:	20000f4c 	.word	0x20000f4c

9000a6b4 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000a6b4:	b480      	push	{r7}
9000a6b6:	b083      	sub	sp, #12
9000a6b8:	af00      	add	r7, sp, #0
9000a6ba:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000a6bc:	4b06      	ldr	r3, [pc, #24]	@ (9000a6d8 <UTIL_LCD_SetBackColor+0x24>)
9000a6be:	68db      	ldr	r3, [r3, #12]
9000a6c0:	4a05      	ldr	r2, [pc, #20]	@ (9000a6d8 <UTIL_LCD_SetBackColor+0x24>)
9000a6c2:	015b      	lsls	r3, r3, #5
9000a6c4:	4413      	add	r3, r2
9000a6c6:	3304      	adds	r3, #4
9000a6c8:	687a      	ldr	r2, [r7, #4]
9000a6ca:	601a      	str	r2, [r3, #0]
}
9000a6cc:	bf00      	nop
9000a6ce:	370c      	adds	r7, #12
9000a6d0:	46bd      	mov	sp, r7
9000a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a6d6:	4770      	bx	lr
9000a6d8:	20000f4c 	.word	0x20000f4c

9000a6dc <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000a6dc:	b480      	push	{r7}
9000a6de:	b083      	sub	sp, #12
9000a6e0:	af00      	add	r7, sp, #0
9000a6e2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000a6e4:	4b06      	ldr	r3, [pc, #24]	@ (9000a700 <UTIL_LCD_SetFont+0x24>)
9000a6e6:	68db      	ldr	r3, [r3, #12]
9000a6e8:	4a05      	ldr	r2, [pc, #20]	@ (9000a700 <UTIL_LCD_SetFont+0x24>)
9000a6ea:	015b      	lsls	r3, r3, #5
9000a6ec:	4413      	add	r3, r2
9000a6ee:	3308      	adds	r3, #8
9000a6f0:	687a      	ldr	r2, [r7, #4]
9000a6f2:	601a      	str	r2, [r3, #0]
}
9000a6f4:	bf00      	nop
9000a6f6:	370c      	adds	r7, #12
9000a6f8:	46bd      	mov	sp, r7
9000a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a6fe:	4770      	bx	lr
9000a700:	20000f4c 	.word	0x20000f4c

9000a704 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000a704:	b590      	push	{r4, r7, lr}
9000a706:	b087      	sub	sp, #28
9000a708:	af02      	add	r7, sp, #8
9000a70a:	60f8      	str	r0, [r7, #12]
9000a70c:	60b9      	str	r1, [r7, #8]
9000a70e:	607a      	str	r2, [r7, #4]
9000a710:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000a712:	4b08      	ldr	r3, [pc, #32]	@ (9000a734 <UTIL_LCD_FillRGBRect+0x30>)
9000a714:	685c      	ldr	r4, [r3, #4]
9000a716:	4b08      	ldr	r3, [pc, #32]	@ (9000a738 <UTIL_LCD_FillRGBRect+0x34>)
9000a718:	6918      	ldr	r0, [r3, #16]
9000a71a:	6a3b      	ldr	r3, [r7, #32]
9000a71c:	9301      	str	r3, [sp, #4]
9000a71e:	683b      	ldr	r3, [r7, #0]
9000a720:	9300      	str	r3, [sp, #0]
9000a722:	687b      	ldr	r3, [r7, #4]
9000a724:	68ba      	ldr	r2, [r7, #8]
9000a726:	68f9      	ldr	r1, [r7, #12]
9000a728:	47a0      	blx	r4
}
9000a72a:	bf00      	nop
9000a72c:	3714      	adds	r7, #20
9000a72e:	46bd      	mov	sp, r7
9000a730:	bd90      	pop	{r4, r7, pc}
9000a732:	bf00      	nop
9000a734:	20000f8c 	.word	0x20000f8c
9000a738:	20000f4c 	.word	0x20000f4c

9000a73c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000a73c:	b580      	push	{r7, lr}
9000a73e:	b084      	sub	sp, #16
9000a740:	af02      	add	r7, sp, #8
9000a742:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000a744:	4b07      	ldr	r3, [pc, #28]	@ (9000a764 <UTIL_LCD_Clear+0x28>)
9000a746:	695a      	ldr	r2, [r3, #20]
9000a748:	4b06      	ldr	r3, [pc, #24]	@ (9000a764 <UTIL_LCD_Clear+0x28>)
9000a74a:	6999      	ldr	r1, [r3, #24]
9000a74c:	687b      	ldr	r3, [r7, #4]
9000a74e:	9300      	str	r3, [sp, #0]
9000a750:	460b      	mov	r3, r1
9000a752:	2100      	movs	r1, #0
9000a754:	2000      	movs	r0, #0
9000a756:	f000 f8eb 	bl	9000a930 <UTIL_LCD_FillRect>
}
9000a75a:	bf00      	nop
9000a75c:	3708      	adds	r7, #8
9000a75e:	46bd      	mov	sp, r7
9000a760:	bd80      	pop	{r7, pc}
9000a762:	bf00      	nop
9000a764:	20000f4c 	.word	0x20000f4c

9000a768 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000a768:	b580      	push	{r7, lr}
9000a76a:	b084      	sub	sp, #16
9000a76c:	af00      	add	r7, sp, #0
9000a76e:	60f8      	str	r0, [r7, #12]
9000a770:	60b9      	str	r1, [r7, #8]
9000a772:	4613      	mov	r3, r2
9000a774:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a776:	4b16      	ldr	r3, [pc, #88]	@ (9000a7d0 <UTIL_LCD_DisplayChar+0x68>)
9000a778:	68db      	ldr	r3, [r3, #12]
9000a77a:	4a15      	ldr	r2, [pc, #84]	@ (9000a7d0 <UTIL_LCD_DisplayChar+0x68>)
9000a77c:	015b      	lsls	r3, r3, #5
9000a77e:	4413      	add	r3, r2
9000a780:	3308      	adds	r3, #8
9000a782:	681b      	ldr	r3, [r3, #0]
9000a784:	681a      	ldr	r2, [r3, #0]
9000a786:	79fb      	ldrb	r3, [r7, #7]
9000a788:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000a78a:	4911      	ldr	r1, [pc, #68]	@ (9000a7d0 <UTIL_LCD_DisplayChar+0x68>)
9000a78c:	68c9      	ldr	r1, [r1, #12]
9000a78e:	4810      	ldr	r0, [pc, #64]	@ (9000a7d0 <UTIL_LCD_DisplayChar+0x68>)
9000a790:	0149      	lsls	r1, r1, #5
9000a792:	4401      	add	r1, r0
9000a794:	3108      	adds	r1, #8
9000a796:	6809      	ldr	r1, [r1, #0]
9000a798:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a79a:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000a79e:	4b0c      	ldr	r3, [pc, #48]	@ (9000a7d0 <UTIL_LCD_DisplayChar+0x68>)
9000a7a0:	68db      	ldr	r3, [r3, #12]
9000a7a2:	480b      	ldr	r0, [pc, #44]	@ (9000a7d0 <UTIL_LCD_DisplayChar+0x68>)
9000a7a4:	015b      	lsls	r3, r3, #5
9000a7a6:	4403      	add	r3, r0
9000a7a8:	3308      	adds	r3, #8
9000a7aa:	681b      	ldr	r3, [r3, #0]
9000a7ac:	889b      	ldrh	r3, [r3, #4]
9000a7ae:	3307      	adds	r3, #7
9000a7b0:	2b00      	cmp	r3, #0
9000a7b2:	da00      	bge.n	9000a7b6 <UTIL_LCD_DisplayChar+0x4e>
9000a7b4:	3307      	adds	r3, #7
9000a7b6:	10db      	asrs	r3, r3, #3
9000a7b8:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a7bc:	4413      	add	r3, r2
9000a7be:	461a      	mov	r2, r3
9000a7c0:	68b9      	ldr	r1, [r7, #8]
9000a7c2:	68f8      	ldr	r0, [r7, #12]
9000a7c4:	f000 f8ee 	bl	9000a9a4 <DrawChar>
}
9000a7c8:	bf00      	nop
9000a7ca:	3710      	adds	r7, #16
9000a7cc:	46bd      	mov	sp, r7
9000a7ce:	bd80      	pop	{r7, pc}
9000a7d0:	20000f4c 	.word	0x20000f4c

9000a7d4 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000a7d4:	b580      	push	{r7, lr}
9000a7d6:	b08a      	sub	sp, #40	@ 0x28
9000a7d8:	af00      	add	r7, sp, #0
9000a7da:	60f8      	str	r0, [r7, #12]
9000a7dc:	60b9      	str	r1, [r7, #8]
9000a7de:	607a      	str	r2, [r7, #4]
9000a7e0:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000a7e2:	2301      	movs	r3, #1
9000a7e4:	627b      	str	r3, [r7, #36]	@ 0x24
9000a7e6:	2300      	movs	r3, #0
9000a7e8:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000a7ea:	2300      	movs	r3, #0
9000a7ec:	61fb      	str	r3, [r7, #28]
9000a7ee:	2300      	movs	r3, #0
9000a7f0:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000a7f2:	687b      	ldr	r3, [r7, #4]
9000a7f4:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000a7f6:	e002      	b.n	9000a7fe <UTIL_LCD_DisplayStringAt+0x2a>
9000a7f8:	69fb      	ldr	r3, [r7, #28]
9000a7fa:	3301      	adds	r3, #1
9000a7fc:	61fb      	str	r3, [r7, #28]
9000a7fe:	69bb      	ldr	r3, [r7, #24]
9000a800:	1c5a      	adds	r2, r3, #1
9000a802:	61ba      	str	r2, [r7, #24]
9000a804:	781b      	ldrb	r3, [r3, #0]
9000a806:	2b00      	cmp	r3, #0
9000a808:	d1f6      	bne.n	9000a7f8 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000a80a:	4b48      	ldr	r3, [pc, #288]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a80c:	695b      	ldr	r3, [r3, #20]
9000a80e:	4a47      	ldr	r2, [pc, #284]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a810:	68d2      	ldr	r2, [r2, #12]
9000a812:	4946      	ldr	r1, [pc, #280]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a814:	0152      	lsls	r2, r2, #5
9000a816:	440a      	add	r2, r1
9000a818:	3208      	adds	r2, #8
9000a81a:	6812      	ldr	r2, [r2, #0]
9000a81c:	8892      	ldrh	r2, [r2, #4]
9000a81e:	fbb3 f3f2 	udiv	r3, r3, r2
9000a822:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000a824:	78fb      	ldrb	r3, [r7, #3]
9000a826:	2b03      	cmp	r3, #3
9000a828:	d018      	beq.n	9000a85c <UTIL_LCD_DisplayStringAt+0x88>
9000a82a:	2b03      	cmp	r3, #3
9000a82c:	dc2a      	bgt.n	9000a884 <UTIL_LCD_DisplayStringAt+0xb0>
9000a82e:	2b01      	cmp	r3, #1
9000a830:	d002      	beq.n	9000a838 <UTIL_LCD_DisplayStringAt+0x64>
9000a832:	2b02      	cmp	r3, #2
9000a834:	d015      	beq.n	9000a862 <UTIL_LCD_DisplayStringAt+0x8e>
9000a836:	e025      	b.n	9000a884 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000a838:	697a      	ldr	r2, [r7, #20]
9000a83a:	69fb      	ldr	r3, [r7, #28]
9000a83c:	1ad3      	subs	r3, r2, r3
9000a83e:	4a3b      	ldr	r2, [pc, #236]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a840:	68d2      	ldr	r2, [r2, #12]
9000a842:	493a      	ldr	r1, [pc, #232]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a844:	0152      	lsls	r2, r2, #5
9000a846:	440a      	add	r2, r1
9000a848:	3208      	adds	r2, #8
9000a84a:	6812      	ldr	r2, [r2, #0]
9000a84c:	8892      	ldrh	r2, [r2, #4]
9000a84e:	fb02 f303 	mul.w	r3, r2, r3
9000a852:	085b      	lsrs	r3, r3, #1
9000a854:	68fa      	ldr	r2, [r7, #12]
9000a856:	4413      	add	r3, r2
9000a858:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a85a:	e016      	b.n	9000a88a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000a85c:	68fb      	ldr	r3, [r7, #12]
9000a85e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a860:	e013      	b.n	9000a88a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000a862:	697a      	ldr	r2, [r7, #20]
9000a864:	69fb      	ldr	r3, [r7, #28]
9000a866:	1ad3      	subs	r3, r2, r3
9000a868:	4a30      	ldr	r2, [pc, #192]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a86a:	68d2      	ldr	r2, [r2, #12]
9000a86c:	492f      	ldr	r1, [pc, #188]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a86e:	0152      	lsls	r2, r2, #5
9000a870:	440a      	add	r2, r1
9000a872:	3208      	adds	r2, #8
9000a874:	6812      	ldr	r2, [r2, #0]
9000a876:	8892      	ldrh	r2, [r2, #4]
9000a878:	fb03 f202 	mul.w	r2, r3, r2
9000a87c:	68fb      	ldr	r3, [r7, #12]
9000a87e:	1ad3      	subs	r3, r2, r3
9000a880:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a882:	e002      	b.n	9000a88a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000a884:	68fb      	ldr	r3, [r7, #12]
9000a886:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a888:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a88c:	2b00      	cmp	r3, #0
9000a88e:	d003      	beq.n	9000a898 <UTIL_LCD_DisplayStringAt+0xc4>
9000a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a896:	d31b      	bcc.n	9000a8d0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000a898:	2301      	movs	r3, #1
9000a89a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000a89c:	e018      	b.n	9000a8d0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000a89e:	687b      	ldr	r3, [r7, #4]
9000a8a0:	781b      	ldrb	r3, [r3, #0]
9000a8a2:	461a      	mov	r2, r3
9000a8a4:	68b9      	ldr	r1, [r7, #8]
9000a8a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000a8a8:	f7ff ff5e 	bl	9000a768 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000a8ac:	4b1f      	ldr	r3, [pc, #124]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a8ae:	68db      	ldr	r3, [r3, #12]
9000a8b0:	4a1e      	ldr	r2, [pc, #120]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a8b2:	015b      	lsls	r3, r3, #5
9000a8b4:	4413      	add	r3, r2
9000a8b6:	3308      	adds	r3, #8
9000a8b8:	681b      	ldr	r3, [r3, #0]
9000a8ba:	889b      	ldrh	r3, [r3, #4]
9000a8bc:	461a      	mov	r2, r3
9000a8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a8c0:	4413      	add	r3, r2
9000a8c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000a8c4:	687b      	ldr	r3, [r7, #4]
9000a8c6:	3301      	adds	r3, #1
9000a8c8:	607b      	str	r3, [r7, #4]
    i++;
9000a8ca:	6a3b      	ldr	r3, [r7, #32]
9000a8cc:	3301      	adds	r3, #1
9000a8ce:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000a8d0:	687b      	ldr	r3, [r7, #4]
9000a8d2:	781b      	ldrb	r3, [r3, #0]
9000a8d4:	2b00      	cmp	r3, #0
9000a8d6:	bf14      	ite	ne
9000a8d8:	2301      	movne	r3, #1
9000a8da:	2300      	moveq	r3, #0
9000a8dc:	b2da      	uxtb	r2, r3
9000a8de:	4b13      	ldr	r3, [pc, #76]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a8e0:	6959      	ldr	r1, [r3, #20]
9000a8e2:	4b12      	ldr	r3, [pc, #72]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a8e4:	68db      	ldr	r3, [r3, #12]
9000a8e6:	4811      	ldr	r0, [pc, #68]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a8e8:	015b      	lsls	r3, r3, #5
9000a8ea:	4403      	add	r3, r0
9000a8ec:	3308      	adds	r3, #8
9000a8ee:	681b      	ldr	r3, [r3, #0]
9000a8f0:	889b      	ldrh	r3, [r3, #4]
9000a8f2:	4618      	mov	r0, r3
9000a8f4:	6a3b      	ldr	r3, [r7, #32]
9000a8f6:	fb00 f303 	mul.w	r3, r0, r3
9000a8fa:	1acb      	subs	r3, r1, r3
9000a8fc:	b29b      	uxth	r3, r3
9000a8fe:	490b      	ldr	r1, [pc, #44]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a900:	68c9      	ldr	r1, [r1, #12]
9000a902:	480a      	ldr	r0, [pc, #40]	@ (9000a92c <UTIL_LCD_DisplayStringAt+0x158>)
9000a904:	0149      	lsls	r1, r1, #5
9000a906:	4401      	add	r1, r0
9000a908:	3108      	adds	r1, #8
9000a90a:	6809      	ldr	r1, [r1, #0]
9000a90c:	8889      	ldrh	r1, [r1, #4]
9000a90e:	428b      	cmp	r3, r1
9000a910:	bf2c      	ite	cs
9000a912:	2301      	movcs	r3, #1
9000a914:	2300      	movcc	r3, #0
9000a916:	b2db      	uxtb	r3, r3
9000a918:	4013      	ands	r3, r2
9000a91a:	b2db      	uxtb	r3, r3
9000a91c:	2b00      	cmp	r3, #0
9000a91e:	d1be      	bne.n	9000a89e <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000a920:	bf00      	nop
9000a922:	bf00      	nop
9000a924:	3728      	adds	r7, #40	@ 0x28
9000a926:	46bd      	mov	sp, r7
9000a928:	bd80      	pop	{r7, pc}
9000a92a:	bf00      	nop
9000a92c:	20000f4c 	.word	0x20000f4c

9000a930 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000a930:	b590      	push	{r4, r7, lr}
9000a932:	b087      	sub	sp, #28
9000a934:	af02      	add	r7, sp, #8
9000a936:	60f8      	str	r0, [r7, #12]
9000a938:	60b9      	str	r1, [r7, #8]
9000a93a:	607a      	str	r2, [r7, #4]
9000a93c:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000a93e:	4b17      	ldr	r3, [pc, #92]	@ (9000a99c <UTIL_LCD_FillRect+0x6c>)
9000a940:	69db      	ldr	r3, [r3, #28]
9000a942:	2b02      	cmp	r3, #2
9000a944:	d11a      	bne.n	9000a97c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000a946:	4b16      	ldr	r3, [pc, #88]	@ (9000a9a0 <UTIL_LCD_FillRect+0x70>)
9000a948:	691c      	ldr	r4, [r3, #16]
9000a94a:	4b14      	ldr	r3, [pc, #80]	@ (9000a99c <UTIL_LCD_FillRect+0x6c>)
9000a94c:	6918      	ldr	r0, [r3, #16]
9000a94e:	6a3b      	ldr	r3, [r7, #32]
9000a950:	08db      	lsrs	r3, r3, #3
9000a952:	f003 021f 	and.w	r2, r3, #31
9000a956:	6a3b      	ldr	r3, [r7, #32]
9000a958:	0a9b      	lsrs	r3, r3, #10
9000a95a:	015b      	lsls	r3, r3, #5
9000a95c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000a960:	431a      	orrs	r2, r3
9000a962:	6a3b      	ldr	r3, [r7, #32]
9000a964:	0cdb      	lsrs	r3, r3, #19
9000a966:	02db      	lsls	r3, r3, #11
9000a968:	b29b      	uxth	r3, r3
9000a96a:	4313      	orrs	r3, r2
9000a96c:	9301      	str	r3, [sp, #4]
9000a96e:	683b      	ldr	r3, [r7, #0]
9000a970:	9300      	str	r3, [sp, #0]
9000a972:	687b      	ldr	r3, [r7, #4]
9000a974:	68ba      	ldr	r2, [r7, #8]
9000a976:	68f9      	ldr	r1, [r7, #12]
9000a978:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000a97a:	e00b      	b.n	9000a994 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000a97c:	4b08      	ldr	r3, [pc, #32]	@ (9000a9a0 <UTIL_LCD_FillRect+0x70>)
9000a97e:	691c      	ldr	r4, [r3, #16]
9000a980:	4b06      	ldr	r3, [pc, #24]	@ (9000a99c <UTIL_LCD_FillRect+0x6c>)
9000a982:	6918      	ldr	r0, [r3, #16]
9000a984:	6a3b      	ldr	r3, [r7, #32]
9000a986:	9301      	str	r3, [sp, #4]
9000a988:	683b      	ldr	r3, [r7, #0]
9000a98a:	9300      	str	r3, [sp, #0]
9000a98c:	687b      	ldr	r3, [r7, #4]
9000a98e:	68ba      	ldr	r2, [r7, #8]
9000a990:	68f9      	ldr	r1, [r7, #12]
9000a992:	47a0      	blx	r4
}
9000a994:	bf00      	nop
9000a996:	3714      	adds	r7, #20
9000a998:	46bd      	mov	sp, r7
9000a99a:	bd90      	pop	{r4, r7, pc}
9000a99c:	20000f4c 	.word	0x20000f4c
9000a9a0:	20000f8c 	.word	0x20000f8c

9000a9a4 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000a9a4:	b580      	push	{r7, lr}
9000a9a6:	b0b2      	sub	sp, #200	@ 0xc8
9000a9a8:	af02      	add	r7, sp, #8
9000a9aa:	60f8      	str	r0, [r7, #12]
9000a9ac:	60b9      	str	r1, [r7, #8]
9000a9ae:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000a9b0:	2300      	movs	r3, #0
9000a9b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000a9b6:	2300      	movs	r3, #0
9000a9b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000a9bc:	4ba5      	ldr	r3, [pc, #660]	@ (9000ac54 <DrawChar+0x2b0>)
9000a9be:	68db      	ldr	r3, [r3, #12]
9000a9c0:	4aa4      	ldr	r2, [pc, #656]	@ (9000ac54 <DrawChar+0x2b0>)
9000a9c2:	015b      	lsls	r3, r3, #5
9000a9c4:	4413      	add	r3, r2
9000a9c6:	3308      	adds	r3, #8
9000a9c8:	681b      	ldr	r3, [r3, #0]
9000a9ca:	88db      	ldrh	r3, [r3, #6]
9000a9cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000a9d0:	4ba0      	ldr	r3, [pc, #640]	@ (9000ac54 <DrawChar+0x2b0>)
9000a9d2:	68db      	ldr	r3, [r3, #12]
9000a9d4:	4a9f      	ldr	r2, [pc, #636]	@ (9000ac54 <DrawChar+0x2b0>)
9000a9d6:	015b      	lsls	r3, r3, #5
9000a9d8:	4413      	add	r3, r2
9000a9da:	3308      	adds	r3, #8
9000a9dc:	681b      	ldr	r3, [r3, #0]
9000a9de:	889b      	ldrh	r3, [r3, #4]
9000a9e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000a9e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a9e8:	3307      	adds	r3, #7
9000a9ea:	f023 0207 	bic.w	r2, r3, #7
9000a9ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a9f2:	1ad3      	subs	r3, r2, r3
9000a9f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000a9f8:	2300      	movs	r3, #0
9000a9fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000a9fe:	e11c      	b.n	9000ac3a <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000aa00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000aa04:	3307      	adds	r3, #7
9000aa06:	08db      	lsrs	r3, r3, #3
9000aa08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000aa0c:	fb02 f303 	mul.w	r3, r2, r3
9000aa10:	687a      	ldr	r2, [r7, #4]
9000aa12:	4413      	add	r3, r2
9000aa14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000aa18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000aa1c:	3307      	adds	r3, #7
9000aa1e:	08db      	lsrs	r3, r3, #3
9000aa20:	2b01      	cmp	r3, #1
9000aa22:	d002      	beq.n	9000aa2a <DrawChar+0x86>
9000aa24:	2b02      	cmp	r3, #2
9000aa26:	d006      	beq.n	9000aa36 <DrawChar+0x92>
9000aa28:	e011      	b.n	9000aa4e <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000aa2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000aa2e:	781b      	ldrb	r3, [r3, #0]
9000aa30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000aa34:	e01d      	b.n	9000aa72 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000aa36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000aa3a:	781b      	ldrb	r3, [r3, #0]
9000aa3c:	021b      	lsls	r3, r3, #8
9000aa3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000aa42:	3201      	adds	r2, #1
9000aa44:	7812      	ldrb	r2, [r2, #0]
9000aa46:	4313      	orrs	r3, r2
9000aa48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000aa4c:	e011      	b.n	9000aa72 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000aa4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000aa52:	781b      	ldrb	r3, [r3, #0]
9000aa54:	041a      	lsls	r2, r3, #16
9000aa56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000aa5a:	3301      	adds	r3, #1
9000aa5c:	781b      	ldrb	r3, [r3, #0]
9000aa5e:	021b      	lsls	r3, r3, #8
9000aa60:	4313      	orrs	r3, r2
9000aa62:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000aa66:	3202      	adds	r2, #2
9000aa68:	7812      	ldrb	r2, [r2, #0]
9000aa6a:	4313      	orrs	r3, r2
9000aa6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000aa70:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000aa72:	4b78      	ldr	r3, [pc, #480]	@ (9000ac54 <DrawChar+0x2b0>)
9000aa74:	68db      	ldr	r3, [r3, #12]
9000aa76:	4a77      	ldr	r2, [pc, #476]	@ (9000ac54 <DrawChar+0x2b0>)
9000aa78:	015b      	lsls	r3, r3, #5
9000aa7a:	4413      	add	r3, r2
9000aa7c:	331c      	adds	r3, #28
9000aa7e:	681b      	ldr	r3, [r3, #0]
9000aa80:	2b02      	cmp	r3, #2
9000aa82:	f040 808c 	bne.w	9000ab9e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000aa86:	2300      	movs	r3, #0
9000aa88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000aa8c:	e074      	b.n	9000ab78 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000aa8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000aa92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000aa96:	1ad2      	subs	r2, r2, r3
9000aa98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000aa9c:	4413      	add	r3, r2
9000aa9e:	3b01      	subs	r3, #1
9000aaa0:	2201      	movs	r2, #1
9000aaa2:	fa02 f303 	lsl.w	r3, r2, r3
9000aaa6:	461a      	mov	r2, r3
9000aaa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000aaac:	4013      	ands	r3, r2
9000aaae:	2b00      	cmp	r3, #0
9000aab0:	d02d      	beq.n	9000ab0e <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000aab2:	4b68      	ldr	r3, [pc, #416]	@ (9000ac54 <DrawChar+0x2b0>)
9000aab4:	68db      	ldr	r3, [r3, #12]
9000aab6:	4a67      	ldr	r2, [pc, #412]	@ (9000ac54 <DrawChar+0x2b0>)
9000aab8:	015b      	lsls	r3, r3, #5
9000aaba:	4413      	add	r3, r2
9000aabc:	681b      	ldr	r3, [r3, #0]
9000aabe:	08db      	lsrs	r3, r3, #3
9000aac0:	b29b      	uxth	r3, r3
9000aac2:	f003 031f 	and.w	r3, r3, #31
9000aac6:	b29a      	uxth	r2, r3
9000aac8:	4b62      	ldr	r3, [pc, #392]	@ (9000ac54 <DrawChar+0x2b0>)
9000aaca:	68db      	ldr	r3, [r3, #12]
9000aacc:	4961      	ldr	r1, [pc, #388]	@ (9000ac54 <DrawChar+0x2b0>)
9000aace:	015b      	lsls	r3, r3, #5
9000aad0:	440b      	add	r3, r1
9000aad2:	681b      	ldr	r3, [r3, #0]
9000aad4:	0a9b      	lsrs	r3, r3, #10
9000aad6:	b29b      	uxth	r3, r3
9000aad8:	015b      	lsls	r3, r3, #5
9000aada:	b29b      	uxth	r3, r3
9000aadc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000aae0:	b29b      	uxth	r3, r3
9000aae2:	4313      	orrs	r3, r2
9000aae4:	b29a      	uxth	r2, r3
9000aae6:	4b5b      	ldr	r3, [pc, #364]	@ (9000ac54 <DrawChar+0x2b0>)
9000aae8:	68db      	ldr	r3, [r3, #12]
9000aaea:	495a      	ldr	r1, [pc, #360]	@ (9000ac54 <DrawChar+0x2b0>)
9000aaec:	015b      	lsls	r3, r3, #5
9000aaee:	440b      	add	r3, r1
9000aaf0:	681b      	ldr	r3, [r3, #0]
9000aaf2:	0cdb      	lsrs	r3, r3, #19
9000aaf4:	b29b      	uxth	r3, r3
9000aaf6:	02db      	lsls	r3, r3, #11
9000aaf8:	b29b      	uxth	r3, r3
9000aafa:	4313      	orrs	r3, r2
9000aafc:	b29a      	uxth	r2, r3
9000aafe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000ab02:	005b      	lsls	r3, r3, #1
9000ab04:	33c0      	adds	r3, #192	@ 0xc0
9000ab06:	443b      	add	r3, r7
9000ab08:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000ab0c:	e02f      	b.n	9000ab6e <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000ab0e:	4b51      	ldr	r3, [pc, #324]	@ (9000ac54 <DrawChar+0x2b0>)
9000ab10:	68db      	ldr	r3, [r3, #12]
9000ab12:	4a50      	ldr	r2, [pc, #320]	@ (9000ac54 <DrawChar+0x2b0>)
9000ab14:	015b      	lsls	r3, r3, #5
9000ab16:	4413      	add	r3, r2
9000ab18:	3304      	adds	r3, #4
9000ab1a:	681b      	ldr	r3, [r3, #0]
9000ab1c:	08db      	lsrs	r3, r3, #3
9000ab1e:	b29b      	uxth	r3, r3
9000ab20:	f003 031f 	and.w	r3, r3, #31
9000ab24:	b29a      	uxth	r2, r3
9000ab26:	4b4b      	ldr	r3, [pc, #300]	@ (9000ac54 <DrawChar+0x2b0>)
9000ab28:	68db      	ldr	r3, [r3, #12]
9000ab2a:	494a      	ldr	r1, [pc, #296]	@ (9000ac54 <DrawChar+0x2b0>)
9000ab2c:	015b      	lsls	r3, r3, #5
9000ab2e:	440b      	add	r3, r1
9000ab30:	3304      	adds	r3, #4
9000ab32:	681b      	ldr	r3, [r3, #0]
9000ab34:	0a9b      	lsrs	r3, r3, #10
9000ab36:	b29b      	uxth	r3, r3
9000ab38:	015b      	lsls	r3, r3, #5
9000ab3a:	b29b      	uxth	r3, r3
9000ab3c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000ab40:	b29b      	uxth	r3, r3
9000ab42:	4313      	orrs	r3, r2
9000ab44:	b29a      	uxth	r2, r3
9000ab46:	4b43      	ldr	r3, [pc, #268]	@ (9000ac54 <DrawChar+0x2b0>)
9000ab48:	68db      	ldr	r3, [r3, #12]
9000ab4a:	4942      	ldr	r1, [pc, #264]	@ (9000ac54 <DrawChar+0x2b0>)
9000ab4c:	015b      	lsls	r3, r3, #5
9000ab4e:	440b      	add	r3, r1
9000ab50:	3304      	adds	r3, #4
9000ab52:	681b      	ldr	r3, [r3, #0]
9000ab54:	0cdb      	lsrs	r3, r3, #19
9000ab56:	b29b      	uxth	r3, r3
9000ab58:	02db      	lsls	r3, r3, #11
9000ab5a:	b29b      	uxth	r3, r3
9000ab5c:	4313      	orrs	r3, r2
9000ab5e:	b29a      	uxth	r2, r3
9000ab60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000ab64:	005b      	lsls	r3, r3, #1
9000ab66:	33c0      	adds	r3, #192	@ 0xc0
9000ab68:	443b      	add	r3, r7
9000ab6a:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000ab6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000ab72:	3301      	adds	r3, #1
9000ab74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000ab78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000ab7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000ab80:	429a      	cmp	r2, r3
9000ab82:	d384      	bcc.n	9000aa8e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000ab84:	68b9      	ldr	r1, [r7, #8]
9000ab86:	1c4b      	adds	r3, r1, #1
9000ab88:	60bb      	str	r3, [r7, #8]
9000ab8a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000ab8e:	2301      	movs	r3, #1
9000ab90:	9300      	str	r3, [sp, #0]
9000ab92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000ab96:	68f8      	ldr	r0, [r7, #12]
9000ab98:	f7ff fdb4 	bl	9000a704 <UTIL_LCD_FillRGBRect>
9000ab9c:	e048      	b.n	9000ac30 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000ab9e:	2300      	movs	r3, #0
9000aba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000aba4:	e032      	b.n	9000ac0c <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000aba6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000abaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000abae:	1ad2      	subs	r2, r2, r3
9000abb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000abb4:	4413      	add	r3, r2
9000abb6:	3b01      	subs	r3, #1
9000abb8:	2201      	movs	r2, #1
9000abba:	fa02 f303 	lsl.w	r3, r2, r3
9000abbe:	461a      	mov	r2, r3
9000abc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000abc4:	4013      	ands	r3, r2
9000abc6:	2b00      	cmp	r3, #0
9000abc8:	d00d      	beq.n	9000abe6 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000abca:	4b22      	ldr	r3, [pc, #136]	@ (9000ac54 <DrawChar+0x2b0>)
9000abcc:	68db      	ldr	r3, [r3, #12]
9000abce:	4a21      	ldr	r2, [pc, #132]	@ (9000ac54 <DrawChar+0x2b0>)
9000abd0:	015b      	lsls	r3, r3, #5
9000abd2:	4413      	add	r3, r2
9000abd4:	681a      	ldr	r2, [r3, #0]
9000abd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000abda:	009b      	lsls	r3, r3, #2
9000abdc:	33c0      	adds	r3, #192	@ 0xc0
9000abde:	443b      	add	r3, r7
9000abe0:	f843 2cac 	str.w	r2, [r3, #-172]
9000abe4:	e00d      	b.n	9000ac02 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000abe6:	4b1b      	ldr	r3, [pc, #108]	@ (9000ac54 <DrawChar+0x2b0>)
9000abe8:	68db      	ldr	r3, [r3, #12]
9000abea:	4a1a      	ldr	r2, [pc, #104]	@ (9000ac54 <DrawChar+0x2b0>)
9000abec:	015b      	lsls	r3, r3, #5
9000abee:	4413      	add	r3, r2
9000abf0:	3304      	adds	r3, #4
9000abf2:	681a      	ldr	r2, [r3, #0]
9000abf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000abf8:	009b      	lsls	r3, r3, #2
9000abfa:	33c0      	adds	r3, #192	@ 0xc0
9000abfc:	443b      	add	r3, r7
9000abfe:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000ac02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000ac06:	3301      	adds	r3, #1
9000ac08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000ac0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000ac10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000ac14:	429a      	cmp	r2, r3
9000ac16:	d3c6      	bcc.n	9000aba6 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000ac18:	68b9      	ldr	r1, [r7, #8]
9000ac1a:	1c4b      	adds	r3, r1, #1
9000ac1c:	60bb      	str	r3, [r7, #8]
9000ac1e:	f107 0214 	add.w	r2, r7, #20
9000ac22:	2301      	movs	r3, #1
9000ac24:	9300      	str	r3, [sp, #0]
9000ac26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000ac2a:	68f8      	ldr	r0, [r7, #12]
9000ac2c:	f7ff fd6a 	bl	9000a704 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000ac30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000ac34:	3301      	adds	r3, #1
9000ac36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000ac3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000ac3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000ac42:	429a      	cmp	r2, r3
9000ac44:	f4ff aedc 	bcc.w	9000aa00 <DrawChar+0x5c>
    }
  }
}
9000ac48:	bf00      	nop
9000ac4a:	bf00      	nop
9000ac4c:	37c0      	adds	r7, #192	@ 0xc0
9000ac4e:	46bd      	mov	sp, r7
9000ac50:	bd80      	pop	{r7, pc}
9000ac52:	bf00      	nop
9000ac54:	20000f4c 	.word	0x20000f4c

9000ac58 <std>:
9000ac58:	2300      	movs	r3, #0
9000ac5a:	b510      	push	{r4, lr}
9000ac5c:	4604      	mov	r4, r0
9000ac5e:	e9c0 3300 	strd	r3, r3, [r0]
9000ac62:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000ac66:	6083      	str	r3, [r0, #8]
9000ac68:	8181      	strh	r1, [r0, #12]
9000ac6a:	6643      	str	r3, [r0, #100]	@ 0x64
9000ac6c:	81c2      	strh	r2, [r0, #14]
9000ac6e:	6183      	str	r3, [r0, #24]
9000ac70:	4619      	mov	r1, r3
9000ac72:	2208      	movs	r2, #8
9000ac74:	305c      	adds	r0, #92	@ 0x5c
9000ac76:	f000 fa1b 	bl	9000b0b0 <memset>
9000ac7a:	4b0d      	ldr	r3, [pc, #52]	@ (9000acb0 <std+0x58>)
9000ac7c:	6263      	str	r3, [r4, #36]	@ 0x24
9000ac7e:	4b0d      	ldr	r3, [pc, #52]	@ (9000acb4 <std+0x5c>)
9000ac80:	62a3      	str	r3, [r4, #40]	@ 0x28
9000ac82:	4b0d      	ldr	r3, [pc, #52]	@ (9000acb8 <std+0x60>)
9000ac84:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000ac86:	4b0d      	ldr	r3, [pc, #52]	@ (9000acbc <std+0x64>)
9000ac88:	6323      	str	r3, [r4, #48]	@ 0x30
9000ac8a:	4b0d      	ldr	r3, [pc, #52]	@ (9000acc0 <std+0x68>)
9000ac8c:	6224      	str	r4, [r4, #32]
9000ac8e:	429c      	cmp	r4, r3
9000ac90:	d006      	beq.n	9000aca0 <std+0x48>
9000ac92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000ac96:	4294      	cmp	r4, r2
9000ac98:	d002      	beq.n	9000aca0 <std+0x48>
9000ac9a:	33d0      	adds	r3, #208	@ 0xd0
9000ac9c:	429c      	cmp	r4, r3
9000ac9e:	d105      	bne.n	9000acac <std+0x54>
9000aca0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000aca8:	f000 ba7a 	b.w	9000b1a0 <__retarget_lock_init_recursive>
9000acac:	bd10      	pop	{r4, pc}
9000acae:	bf00      	nop
9000acb0:	9000af01 	.word	0x9000af01
9000acb4:	9000af23 	.word	0x9000af23
9000acb8:	9000af5b 	.word	0x9000af5b
9000acbc:	9000af7f 	.word	0x9000af7f
9000acc0:	20000fb8 	.word	0x20000fb8

9000acc4 <stdio_exit_handler>:
9000acc4:	4a02      	ldr	r2, [pc, #8]	@ (9000acd0 <stdio_exit_handler+0xc>)
9000acc6:	4903      	ldr	r1, [pc, #12]	@ (9000acd4 <stdio_exit_handler+0x10>)
9000acc8:	4803      	ldr	r0, [pc, #12]	@ (9000acd8 <stdio_exit_handler+0x14>)
9000acca:	f000 b869 	b.w	9000ada0 <_fwalk_sglue>
9000acce:	bf00      	nop
9000acd0:	20000070 	.word	0x20000070
9000acd4:	9000bd09 	.word	0x9000bd09
9000acd8:	20000080 	.word	0x20000080

9000acdc <cleanup_stdio>:
9000acdc:	6841      	ldr	r1, [r0, #4]
9000acde:	4b0c      	ldr	r3, [pc, #48]	@ (9000ad10 <cleanup_stdio+0x34>)
9000ace0:	4299      	cmp	r1, r3
9000ace2:	b510      	push	{r4, lr}
9000ace4:	4604      	mov	r4, r0
9000ace6:	d001      	beq.n	9000acec <cleanup_stdio+0x10>
9000ace8:	f001 f80e 	bl	9000bd08 <_fflush_r>
9000acec:	68a1      	ldr	r1, [r4, #8]
9000acee:	4b09      	ldr	r3, [pc, #36]	@ (9000ad14 <cleanup_stdio+0x38>)
9000acf0:	4299      	cmp	r1, r3
9000acf2:	d002      	beq.n	9000acfa <cleanup_stdio+0x1e>
9000acf4:	4620      	mov	r0, r4
9000acf6:	f001 f807 	bl	9000bd08 <_fflush_r>
9000acfa:	68e1      	ldr	r1, [r4, #12]
9000acfc:	4b06      	ldr	r3, [pc, #24]	@ (9000ad18 <cleanup_stdio+0x3c>)
9000acfe:	4299      	cmp	r1, r3
9000ad00:	d004      	beq.n	9000ad0c <cleanup_stdio+0x30>
9000ad02:	4620      	mov	r0, r4
9000ad04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ad08:	f000 bffe 	b.w	9000bd08 <_fflush_r>
9000ad0c:	bd10      	pop	{r4, pc}
9000ad0e:	bf00      	nop
9000ad10:	20000fb8 	.word	0x20000fb8
9000ad14:	20001020 	.word	0x20001020
9000ad18:	20001088 	.word	0x20001088

9000ad1c <global_stdio_init.part.0>:
9000ad1c:	b510      	push	{r4, lr}
9000ad1e:	4b0b      	ldr	r3, [pc, #44]	@ (9000ad4c <global_stdio_init.part.0+0x30>)
9000ad20:	4c0b      	ldr	r4, [pc, #44]	@ (9000ad50 <global_stdio_init.part.0+0x34>)
9000ad22:	4a0c      	ldr	r2, [pc, #48]	@ (9000ad54 <global_stdio_init.part.0+0x38>)
9000ad24:	601a      	str	r2, [r3, #0]
9000ad26:	4620      	mov	r0, r4
9000ad28:	2200      	movs	r2, #0
9000ad2a:	2104      	movs	r1, #4
9000ad2c:	f7ff ff94 	bl	9000ac58 <std>
9000ad30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000ad34:	2201      	movs	r2, #1
9000ad36:	2109      	movs	r1, #9
9000ad38:	f7ff ff8e 	bl	9000ac58 <std>
9000ad3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000ad40:	2202      	movs	r2, #2
9000ad42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ad46:	2112      	movs	r1, #18
9000ad48:	f7ff bf86 	b.w	9000ac58 <std>
9000ad4c:	200010f0 	.word	0x200010f0
9000ad50:	20000fb8 	.word	0x20000fb8
9000ad54:	9000acc5 	.word	0x9000acc5

9000ad58 <__sfp_lock_acquire>:
9000ad58:	4801      	ldr	r0, [pc, #4]	@ (9000ad60 <__sfp_lock_acquire+0x8>)
9000ad5a:	f000 ba22 	b.w	9000b1a2 <__retarget_lock_acquire_recursive>
9000ad5e:	bf00      	nop
9000ad60:	200010f9 	.word	0x200010f9

9000ad64 <__sfp_lock_release>:
9000ad64:	4801      	ldr	r0, [pc, #4]	@ (9000ad6c <__sfp_lock_release+0x8>)
9000ad66:	f000 ba1d 	b.w	9000b1a4 <__retarget_lock_release_recursive>
9000ad6a:	bf00      	nop
9000ad6c:	200010f9 	.word	0x200010f9

9000ad70 <__sinit>:
9000ad70:	b510      	push	{r4, lr}
9000ad72:	4604      	mov	r4, r0
9000ad74:	f7ff fff0 	bl	9000ad58 <__sfp_lock_acquire>
9000ad78:	6a23      	ldr	r3, [r4, #32]
9000ad7a:	b11b      	cbz	r3, 9000ad84 <__sinit+0x14>
9000ad7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ad80:	f7ff bff0 	b.w	9000ad64 <__sfp_lock_release>
9000ad84:	4b04      	ldr	r3, [pc, #16]	@ (9000ad98 <__sinit+0x28>)
9000ad86:	6223      	str	r3, [r4, #32]
9000ad88:	4b04      	ldr	r3, [pc, #16]	@ (9000ad9c <__sinit+0x2c>)
9000ad8a:	681b      	ldr	r3, [r3, #0]
9000ad8c:	2b00      	cmp	r3, #0
9000ad8e:	d1f5      	bne.n	9000ad7c <__sinit+0xc>
9000ad90:	f7ff ffc4 	bl	9000ad1c <global_stdio_init.part.0>
9000ad94:	e7f2      	b.n	9000ad7c <__sinit+0xc>
9000ad96:	bf00      	nop
9000ad98:	9000acdd 	.word	0x9000acdd
9000ad9c:	200010f0 	.word	0x200010f0

9000ada0 <_fwalk_sglue>:
9000ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000ada4:	4607      	mov	r7, r0
9000ada6:	4688      	mov	r8, r1
9000ada8:	4614      	mov	r4, r2
9000adaa:	2600      	movs	r6, #0
9000adac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000adb0:	f1b9 0901 	subs.w	r9, r9, #1
9000adb4:	d505      	bpl.n	9000adc2 <_fwalk_sglue+0x22>
9000adb6:	6824      	ldr	r4, [r4, #0]
9000adb8:	2c00      	cmp	r4, #0
9000adba:	d1f7      	bne.n	9000adac <_fwalk_sglue+0xc>
9000adbc:	4630      	mov	r0, r6
9000adbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000adc2:	89ab      	ldrh	r3, [r5, #12]
9000adc4:	2b01      	cmp	r3, #1
9000adc6:	d907      	bls.n	9000add8 <_fwalk_sglue+0x38>
9000adc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000adcc:	3301      	adds	r3, #1
9000adce:	d003      	beq.n	9000add8 <_fwalk_sglue+0x38>
9000add0:	4629      	mov	r1, r5
9000add2:	4638      	mov	r0, r7
9000add4:	47c0      	blx	r8
9000add6:	4306      	orrs	r6, r0
9000add8:	3568      	adds	r5, #104	@ 0x68
9000adda:	e7e9      	b.n	9000adb0 <_fwalk_sglue+0x10>

9000addc <iprintf>:
9000addc:	b40f      	push	{r0, r1, r2, r3}
9000adde:	b507      	push	{r0, r1, r2, lr}
9000ade0:	4906      	ldr	r1, [pc, #24]	@ (9000adfc <iprintf+0x20>)
9000ade2:	ab04      	add	r3, sp, #16
9000ade4:	6808      	ldr	r0, [r1, #0]
9000ade6:	f853 2b04 	ldr.w	r2, [r3], #4
9000adea:	6881      	ldr	r1, [r0, #8]
9000adec:	9301      	str	r3, [sp, #4]
9000adee:	f000 fc63 	bl	9000b6b8 <_vfiprintf_r>
9000adf2:	b003      	add	sp, #12
9000adf4:	f85d eb04 	ldr.w	lr, [sp], #4
9000adf8:	b004      	add	sp, #16
9000adfa:	4770      	bx	lr
9000adfc:	2000007c 	.word	0x2000007c

9000ae00 <_puts_r>:
9000ae00:	6a03      	ldr	r3, [r0, #32]
9000ae02:	b570      	push	{r4, r5, r6, lr}
9000ae04:	6884      	ldr	r4, [r0, #8]
9000ae06:	4605      	mov	r5, r0
9000ae08:	460e      	mov	r6, r1
9000ae0a:	b90b      	cbnz	r3, 9000ae10 <_puts_r+0x10>
9000ae0c:	f7ff ffb0 	bl	9000ad70 <__sinit>
9000ae10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000ae12:	07db      	lsls	r3, r3, #31
9000ae14:	d405      	bmi.n	9000ae22 <_puts_r+0x22>
9000ae16:	89a3      	ldrh	r3, [r4, #12]
9000ae18:	0598      	lsls	r0, r3, #22
9000ae1a:	d402      	bmi.n	9000ae22 <_puts_r+0x22>
9000ae1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000ae1e:	f000 f9c0 	bl	9000b1a2 <__retarget_lock_acquire_recursive>
9000ae22:	89a3      	ldrh	r3, [r4, #12]
9000ae24:	0719      	lsls	r1, r3, #28
9000ae26:	d502      	bpl.n	9000ae2e <_puts_r+0x2e>
9000ae28:	6923      	ldr	r3, [r4, #16]
9000ae2a:	2b00      	cmp	r3, #0
9000ae2c:	d135      	bne.n	9000ae9a <_puts_r+0x9a>
9000ae2e:	4621      	mov	r1, r4
9000ae30:	4628      	mov	r0, r5
9000ae32:	f000 f8e7 	bl	9000b004 <__swsetup_r>
9000ae36:	b380      	cbz	r0, 9000ae9a <_puts_r+0x9a>
9000ae38:	f04f 35ff 	mov.w	r5, #4294967295
9000ae3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000ae3e:	07da      	lsls	r2, r3, #31
9000ae40:	d405      	bmi.n	9000ae4e <_puts_r+0x4e>
9000ae42:	89a3      	ldrh	r3, [r4, #12]
9000ae44:	059b      	lsls	r3, r3, #22
9000ae46:	d402      	bmi.n	9000ae4e <_puts_r+0x4e>
9000ae48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000ae4a:	f000 f9ab 	bl	9000b1a4 <__retarget_lock_release_recursive>
9000ae4e:	4628      	mov	r0, r5
9000ae50:	bd70      	pop	{r4, r5, r6, pc}
9000ae52:	2b00      	cmp	r3, #0
9000ae54:	da04      	bge.n	9000ae60 <_puts_r+0x60>
9000ae56:	69a2      	ldr	r2, [r4, #24]
9000ae58:	429a      	cmp	r2, r3
9000ae5a:	dc17      	bgt.n	9000ae8c <_puts_r+0x8c>
9000ae5c:	290a      	cmp	r1, #10
9000ae5e:	d015      	beq.n	9000ae8c <_puts_r+0x8c>
9000ae60:	6823      	ldr	r3, [r4, #0]
9000ae62:	1c5a      	adds	r2, r3, #1
9000ae64:	6022      	str	r2, [r4, #0]
9000ae66:	7019      	strb	r1, [r3, #0]
9000ae68:	68a3      	ldr	r3, [r4, #8]
9000ae6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000ae6e:	3b01      	subs	r3, #1
9000ae70:	60a3      	str	r3, [r4, #8]
9000ae72:	2900      	cmp	r1, #0
9000ae74:	d1ed      	bne.n	9000ae52 <_puts_r+0x52>
9000ae76:	2b00      	cmp	r3, #0
9000ae78:	da11      	bge.n	9000ae9e <_puts_r+0x9e>
9000ae7a:	4622      	mov	r2, r4
9000ae7c:	210a      	movs	r1, #10
9000ae7e:	4628      	mov	r0, r5
9000ae80:	f000 f881 	bl	9000af86 <__swbuf_r>
9000ae84:	3001      	adds	r0, #1
9000ae86:	d0d7      	beq.n	9000ae38 <_puts_r+0x38>
9000ae88:	250a      	movs	r5, #10
9000ae8a:	e7d7      	b.n	9000ae3c <_puts_r+0x3c>
9000ae8c:	4622      	mov	r2, r4
9000ae8e:	4628      	mov	r0, r5
9000ae90:	f000 f879 	bl	9000af86 <__swbuf_r>
9000ae94:	3001      	adds	r0, #1
9000ae96:	d1e7      	bne.n	9000ae68 <_puts_r+0x68>
9000ae98:	e7ce      	b.n	9000ae38 <_puts_r+0x38>
9000ae9a:	3e01      	subs	r6, #1
9000ae9c:	e7e4      	b.n	9000ae68 <_puts_r+0x68>
9000ae9e:	6823      	ldr	r3, [r4, #0]
9000aea0:	1c5a      	adds	r2, r3, #1
9000aea2:	6022      	str	r2, [r4, #0]
9000aea4:	220a      	movs	r2, #10
9000aea6:	701a      	strb	r2, [r3, #0]
9000aea8:	e7ee      	b.n	9000ae88 <_puts_r+0x88>
	...

9000aeac <puts>:
9000aeac:	4b02      	ldr	r3, [pc, #8]	@ (9000aeb8 <puts+0xc>)
9000aeae:	4601      	mov	r1, r0
9000aeb0:	6818      	ldr	r0, [r3, #0]
9000aeb2:	f7ff bfa5 	b.w	9000ae00 <_puts_r>
9000aeb6:	bf00      	nop
9000aeb8:	2000007c 	.word	0x2000007c

9000aebc <siprintf>:
9000aebc:	b40e      	push	{r1, r2, r3}
9000aebe:	b510      	push	{r4, lr}
9000aec0:	b09d      	sub	sp, #116	@ 0x74
9000aec2:	ab1f      	add	r3, sp, #124	@ 0x7c
9000aec4:	9002      	str	r0, [sp, #8]
9000aec6:	9006      	str	r0, [sp, #24]
9000aec8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
9000aecc:	480a      	ldr	r0, [pc, #40]	@ (9000aef8 <siprintf+0x3c>)
9000aece:	9107      	str	r1, [sp, #28]
9000aed0:	9104      	str	r1, [sp, #16]
9000aed2:	490a      	ldr	r1, [pc, #40]	@ (9000aefc <siprintf+0x40>)
9000aed4:	f853 2b04 	ldr.w	r2, [r3], #4
9000aed8:	9105      	str	r1, [sp, #20]
9000aeda:	2400      	movs	r4, #0
9000aedc:	a902      	add	r1, sp, #8
9000aede:	6800      	ldr	r0, [r0, #0]
9000aee0:	9301      	str	r3, [sp, #4]
9000aee2:	941b      	str	r4, [sp, #108]	@ 0x6c
9000aee4:	f000 fac2 	bl	9000b46c <_svfiprintf_r>
9000aee8:	9b02      	ldr	r3, [sp, #8]
9000aeea:	701c      	strb	r4, [r3, #0]
9000aeec:	b01d      	add	sp, #116	@ 0x74
9000aeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000aef2:	b003      	add	sp, #12
9000aef4:	4770      	bx	lr
9000aef6:	bf00      	nop
9000aef8:	2000007c 	.word	0x2000007c
9000aefc:	ffff0208 	.word	0xffff0208

9000af00 <__sread>:
9000af00:	b510      	push	{r4, lr}
9000af02:	460c      	mov	r4, r1
9000af04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000af08:	f000 f8fc 	bl	9000b104 <_read_r>
9000af0c:	2800      	cmp	r0, #0
9000af0e:	bfab      	itete	ge
9000af10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000af12:	89a3      	ldrhlt	r3, [r4, #12]
9000af14:	181b      	addge	r3, r3, r0
9000af16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000af1a:	bfac      	ite	ge
9000af1c:	6563      	strge	r3, [r4, #84]	@ 0x54
9000af1e:	81a3      	strhlt	r3, [r4, #12]
9000af20:	bd10      	pop	{r4, pc}

9000af22 <__swrite>:
9000af22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000af26:	461f      	mov	r7, r3
9000af28:	898b      	ldrh	r3, [r1, #12]
9000af2a:	05db      	lsls	r3, r3, #23
9000af2c:	4605      	mov	r5, r0
9000af2e:	460c      	mov	r4, r1
9000af30:	4616      	mov	r6, r2
9000af32:	d505      	bpl.n	9000af40 <__swrite+0x1e>
9000af34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000af38:	2302      	movs	r3, #2
9000af3a:	2200      	movs	r2, #0
9000af3c:	f000 f8d0 	bl	9000b0e0 <_lseek_r>
9000af40:	89a3      	ldrh	r3, [r4, #12]
9000af42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000af46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000af4a:	81a3      	strh	r3, [r4, #12]
9000af4c:	4632      	mov	r2, r6
9000af4e:	463b      	mov	r3, r7
9000af50:	4628      	mov	r0, r5
9000af52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000af56:	f000 b8e7 	b.w	9000b128 <_write_r>

9000af5a <__sseek>:
9000af5a:	b510      	push	{r4, lr}
9000af5c:	460c      	mov	r4, r1
9000af5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000af62:	f000 f8bd 	bl	9000b0e0 <_lseek_r>
9000af66:	1c43      	adds	r3, r0, #1
9000af68:	89a3      	ldrh	r3, [r4, #12]
9000af6a:	bf15      	itete	ne
9000af6c:	6560      	strne	r0, [r4, #84]	@ 0x54
9000af6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000af72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000af76:	81a3      	strheq	r3, [r4, #12]
9000af78:	bf18      	it	ne
9000af7a:	81a3      	strhne	r3, [r4, #12]
9000af7c:	bd10      	pop	{r4, pc}

9000af7e <__sclose>:
9000af7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000af82:	f000 b89d 	b.w	9000b0c0 <_close_r>

9000af86 <__swbuf_r>:
9000af86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000af88:	460e      	mov	r6, r1
9000af8a:	4614      	mov	r4, r2
9000af8c:	4605      	mov	r5, r0
9000af8e:	b118      	cbz	r0, 9000af98 <__swbuf_r+0x12>
9000af90:	6a03      	ldr	r3, [r0, #32]
9000af92:	b90b      	cbnz	r3, 9000af98 <__swbuf_r+0x12>
9000af94:	f7ff feec 	bl	9000ad70 <__sinit>
9000af98:	69a3      	ldr	r3, [r4, #24]
9000af9a:	60a3      	str	r3, [r4, #8]
9000af9c:	89a3      	ldrh	r3, [r4, #12]
9000af9e:	071a      	lsls	r2, r3, #28
9000afa0:	d501      	bpl.n	9000afa6 <__swbuf_r+0x20>
9000afa2:	6923      	ldr	r3, [r4, #16]
9000afa4:	b943      	cbnz	r3, 9000afb8 <__swbuf_r+0x32>
9000afa6:	4621      	mov	r1, r4
9000afa8:	4628      	mov	r0, r5
9000afaa:	f000 f82b 	bl	9000b004 <__swsetup_r>
9000afae:	b118      	cbz	r0, 9000afb8 <__swbuf_r+0x32>
9000afb0:	f04f 37ff 	mov.w	r7, #4294967295
9000afb4:	4638      	mov	r0, r7
9000afb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000afb8:	6823      	ldr	r3, [r4, #0]
9000afba:	6922      	ldr	r2, [r4, #16]
9000afbc:	1a98      	subs	r0, r3, r2
9000afbe:	6963      	ldr	r3, [r4, #20]
9000afc0:	b2f6      	uxtb	r6, r6
9000afc2:	4283      	cmp	r3, r0
9000afc4:	4637      	mov	r7, r6
9000afc6:	dc05      	bgt.n	9000afd4 <__swbuf_r+0x4e>
9000afc8:	4621      	mov	r1, r4
9000afca:	4628      	mov	r0, r5
9000afcc:	f000 fe9c 	bl	9000bd08 <_fflush_r>
9000afd0:	2800      	cmp	r0, #0
9000afd2:	d1ed      	bne.n	9000afb0 <__swbuf_r+0x2a>
9000afd4:	68a3      	ldr	r3, [r4, #8]
9000afd6:	3b01      	subs	r3, #1
9000afd8:	60a3      	str	r3, [r4, #8]
9000afda:	6823      	ldr	r3, [r4, #0]
9000afdc:	1c5a      	adds	r2, r3, #1
9000afde:	6022      	str	r2, [r4, #0]
9000afe0:	701e      	strb	r6, [r3, #0]
9000afe2:	6962      	ldr	r2, [r4, #20]
9000afe4:	1c43      	adds	r3, r0, #1
9000afe6:	429a      	cmp	r2, r3
9000afe8:	d004      	beq.n	9000aff4 <__swbuf_r+0x6e>
9000afea:	89a3      	ldrh	r3, [r4, #12]
9000afec:	07db      	lsls	r3, r3, #31
9000afee:	d5e1      	bpl.n	9000afb4 <__swbuf_r+0x2e>
9000aff0:	2e0a      	cmp	r6, #10
9000aff2:	d1df      	bne.n	9000afb4 <__swbuf_r+0x2e>
9000aff4:	4621      	mov	r1, r4
9000aff6:	4628      	mov	r0, r5
9000aff8:	f000 fe86 	bl	9000bd08 <_fflush_r>
9000affc:	2800      	cmp	r0, #0
9000affe:	d0d9      	beq.n	9000afb4 <__swbuf_r+0x2e>
9000b000:	e7d6      	b.n	9000afb0 <__swbuf_r+0x2a>
	...

9000b004 <__swsetup_r>:
9000b004:	b538      	push	{r3, r4, r5, lr}
9000b006:	4b29      	ldr	r3, [pc, #164]	@ (9000b0ac <__swsetup_r+0xa8>)
9000b008:	4605      	mov	r5, r0
9000b00a:	6818      	ldr	r0, [r3, #0]
9000b00c:	460c      	mov	r4, r1
9000b00e:	b118      	cbz	r0, 9000b018 <__swsetup_r+0x14>
9000b010:	6a03      	ldr	r3, [r0, #32]
9000b012:	b90b      	cbnz	r3, 9000b018 <__swsetup_r+0x14>
9000b014:	f7ff feac 	bl	9000ad70 <__sinit>
9000b018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000b01c:	0719      	lsls	r1, r3, #28
9000b01e:	d422      	bmi.n	9000b066 <__swsetup_r+0x62>
9000b020:	06da      	lsls	r2, r3, #27
9000b022:	d407      	bmi.n	9000b034 <__swsetup_r+0x30>
9000b024:	2209      	movs	r2, #9
9000b026:	602a      	str	r2, [r5, #0]
9000b028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000b02c:	81a3      	strh	r3, [r4, #12]
9000b02e:	f04f 30ff 	mov.w	r0, #4294967295
9000b032:	e033      	b.n	9000b09c <__swsetup_r+0x98>
9000b034:	0758      	lsls	r0, r3, #29
9000b036:	d512      	bpl.n	9000b05e <__swsetup_r+0x5a>
9000b038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000b03a:	b141      	cbz	r1, 9000b04e <__swsetup_r+0x4a>
9000b03c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000b040:	4299      	cmp	r1, r3
9000b042:	d002      	beq.n	9000b04a <__swsetup_r+0x46>
9000b044:	4628      	mov	r0, r5
9000b046:	f000 f8bd 	bl	9000b1c4 <_free_r>
9000b04a:	2300      	movs	r3, #0
9000b04c:	6363      	str	r3, [r4, #52]	@ 0x34
9000b04e:	89a3      	ldrh	r3, [r4, #12]
9000b050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000b054:	81a3      	strh	r3, [r4, #12]
9000b056:	2300      	movs	r3, #0
9000b058:	6063      	str	r3, [r4, #4]
9000b05a:	6923      	ldr	r3, [r4, #16]
9000b05c:	6023      	str	r3, [r4, #0]
9000b05e:	89a3      	ldrh	r3, [r4, #12]
9000b060:	f043 0308 	orr.w	r3, r3, #8
9000b064:	81a3      	strh	r3, [r4, #12]
9000b066:	6923      	ldr	r3, [r4, #16]
9000b068:	b94b      	cbnz	r3, 9000b07e <__swsetup_r+0x7a>
9000b06a:	89a3      	ldrh	r3, [r4, #12]
9000b06c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000b070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000b074:	d003      	beq.n	9000b07e <__swsetup_r+0x7a>
9000b076:	4621      	mov	r1, r4
9000b078:	4628      	mov	r0, r5
9000b07a:	f000 fe93 	bl	9000bda4 <__smakebuf_r>
9000b07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000b082:	f013 0201 	ands.w	r2, r3, #1
9000b086:	d00a      	beq.n	9000b09e <__swsetup_r+0x9a>
9000b088:	2200      	movs	r2, #0
9000b08a:	60a2      	str	r2, [r4, #8]
9000b08c:	6962      	ldr	r2, [r4, #20]
9000b08e:	4252      	negs	r2, r2
9000b090:	61a2      	str	r2, [r4, #24]
9000b092:	6922      	ldr	r2, [r4, #16]
9000b094:	b942      	cbnz	r2, 9000b0a8 <__swsetup_r+0xa4>
9000b096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000b09a:	d1c5      	bne.n	9000b028 <__swsetup_r+0x24>
9000b09c:	bd38      	pop	{r3, r4, r5, pc}
9000b09e:	0799      	lsls	r1, r3, #30
9000b0a0:	bf58      	it	pl
9000b0a2:	6962      	ldrpl	r2, [r4, #20]
9000b0a4:	60a2      	str	r2, [r4, #8]
9000b0a6:	e7f4      	b.n	9000b092 <__swsetup_r+0x8e>
9000b0a8:	2000      	movs	r0, #0
9000b0aa:	e7f7      	b.n	9000b09c <__swsetup_r+0x98>
9000b0ac:	2000007c 	.word	0x2000007c

9000b0b0 <memset>:
9000b0b0:	4402      	add	r2, r0
9000b0b2:	4603      	mov	r3, r0
9000b0b4:	4293      	cmp	r3, r2
9000b0b6:	d100      	bne.n	9000b0ba <memset+0xa>
9000b0b8:	4770      	bx	lr
9000b0ba:	f803 1b01 	strb.w	r1, [r3], #1
9000b0be:	e7f9      	b.n	9000b0b4 <memset+0x4>

9000b0c0 <_close_r>:
9000b0c0:	b538      	push	{r3, r4, r5, lr}
9000b0c2:	4d06      	ldr	r5, [pc, #24]	@ (9000b0dc <_close_r+0x1c>)
9000b0c4:	2300      	movs	r3, #0
9000b0c6:	4604      	mov	r4, r0
9000b0c8:	4608      	mov	r0, r1
9000b0ca:	602b      	str	r3, [r5, #0]
9000b0cc:	f7f6 f8b4 	bl	90001238 <_close>
9000b0d0:	1c43      	adds	r3, r0, #1
9000b0d2:	d102      	bne.n	9000b0da <_close_r+0x1a>
9000b0d4:	682b      	ldr	r3, [r5, #0]
9000b0d6:	b103      	cbz	r3, 9000b0da <_close_r+0x1a>
9000b0d8:	6023      	str	r3, [r4, #0]
9000b0da:	bd38      	pop	{r3, r4, r5, pc}
9000b0dc:	200010f4 	.word	0x200010f4

9000b0e0 <_lseek_r>:
9000b0e0:	b538      	push	{r3, r4, r5, lr}
9000b0e2:	4d07      	ldr	r5, [pc, #28]	@ (9000b100 <_lseek_r+0x20>)
9000b0e4:	4604      	mov	r4, r0
9000b0e6:	4608      	mov	r0, r1
9000b0e8:	4611      	mov	r1, r2
9000b0ea:	2200      	movs	r2, #0
9000b0ec:	602a      	str	r2, [r5, #0]
9000b0ee:	461a      	mov	r2, r3
9000b0f0:	f7f6 f8c9 	bl	90001286 <_lseek>
9000b0f4:	1c43      	adds	r3, r0, #1
9000b0f6:	d102      	bne.n	9000b0fe <_lseek_r+0x1e>
9000b0f8:	682b      	ldr	r3, [r5, #0]
9000b0fa:	b103      	cbz	r3, 9000b0fe <_lseek_r+0x1e>
9000b0fc:	6023      	str	r3, [r4, #0]
9000b0fe:	bd38      	pop	{r3, r4, r5, pc}
9000b100:	200010f4 	.word	0x200010f4

9000b104 <_read_r>:
9000b104:	b538      	push	{r3, r4, r5, lr}
9000b106:	4d07      	ldr	r5, [pc, #28]	@ (9000b124 <_read_r+0x20>)
9000b108:	4604      	mov	r4, r0
9000b10a:	4608      	mov	r0, r1
9000b10c:	4611      	mov	r1, r2
9000b10e:	2200      	movs	r2, #0
9000b110:	602a      	str	r2, [r5, #0]
9000b112:	461a      	mov	r2, r3
9000b114:	f7f6 f857 	bl	900011c6 <_read>
9000b118:	1c43      	adds	r3, r0, #1
9000b11a:	d102      	bne.n	9000b122 <_read_r+0x1e>
9000b11c:	682b      	ldr	r3, [r5, #0]
9000b11e:	b103      	cbz	r3, 9000b122 <_read_r+0x1e>
9000b120:	6023      	str	r3, [r4, #0]
9000b122:	bd38      	pop	{r3, r4, r5, pc}
9000b124:	200010f4 	.word	0x200010f4

9000b128 <_write_r>:
9000b128:	b538      	push	{r3, r4, r5, lr}
9000b12a:	4d07      	ldr	r5, [pc, #28]	@ (9000b148 <_write_r+0x20>)
9000b12c:	4604      	mov	r4, r0
9000b12e:	4608      	mov	r0, r1
9000b130:	4611      	mov	r1, r2
9000b132:	2200      	movs	r2, #0
9000b134:	602a      	str	r2, [r5, #0]
9000b136:	461a      	mov	r2, r3
9000b138:	f7f6 f862 	bl	90001200 <_write>
9000b13c:	1c43      	adds	r3, r0, #1
9000b13e:	d102      	bne.n	9000b146 <_write_r+0x1e>
9000b140:	682b      	ldr	r3, [r5, #0]
9000b142:	b103      	cbz	r3, 9000b146 <_write_r+0x1e>
9000b144:	6023      	str	r3, [r4, #0]
9000b146:	bd38      	pop	{r3, r4, r5, pc}
9000b148:	200010f4 	.word	0x200010f4

9000b14c <__errno>:
9000b14c:	4b01      	ldr	r3, [pc, #4]	@ (9000b154 <__errno+0x8>)
9000b14e:	6818      	ldr	r0, [r3, #0]
9000b150:	4770      	bx	lr
9000b152:	bf00      	nop
9000b154:	2000007c 	.word	0x2000007c

9000b158 <__libc_init_array>:
9000b158:	b570      	push	{r4, r5, r6, lr}
9000b15a:	4d0d      	ldr	r5, [pc, #52]	@ (9000b190 <__libc_init_array+0x38>)
9000b15c:	4c0d      	ldr	r4, [pc, #52]	@ (9000b194 <__libc_init_array+0x3c>)
9000b15e:	1b64      	subs	r4, r4, r5
9000b160:	10a4      	asrs	r4, r4, #2
9000b162:	2600      	movs	r6, #0
9000b164:	42a6      	cmp	r6, r4
9000b166:	d109      	bne.n	9000b17c <__libc_init_array+0x24>
9000b168:	4d0b      	ldr	r5, [pc, #44]	@ (9000b198 <__libc_init_array+0x40>)
9000b16a:	4c0c      	ldr	r4, [pc, #48]	@ (9000b19c <__libc_init_array+0x44>)
9000b16c:	f000 fed8 	bl	9000bf20 <_init>
9000b170:	1b64      	subs	r4, r4, r5
9000b172:	10a4      	asrs	r4, r4, #2
9000b174:	2600      	movs	r6, #0
9000b176:	42a6      	cmp	r6, r4
9000b178:	d105      	bne.n	9000b186 <__libc_init_array+0x2e>
9000b17a:	bd70      	pop	{r4, r5, r6, pc}
9000b17c:	f855 3b04 	ldr.w	r3, [r5], #4
9000b180:	4798      	blx	r3
9000b182:	3601      	adds	r6, #1
9000b184:	e7ee      	b.n	9000b164 <__libc_init_array+0xc>
9000b186:	f855 3b04 	ldr.w	r3, [r5], #4
9000b18a:	4798      	blx	r3
9000b18c:	3601      	adds	r6, #1
9000b18e:	e7f2      	b.n	9000b176 <__libc_init_array+0x1e>
9000b190:	9000e600 	.word	0x9000e600
9000b194:	9000e600 	.word	0x9000e600
9000b198:	9000e600 	.word	0x9000e600
9000b19c:	9000e604 	.word	0x9000e604

9000b1a0 <__retarget_lock_init_recursive>:
9000b1a0:	4770      	bx	lr

9000b1a2 <__retarget_lock_acquire_recursive>:
9000b1a2:	4770      	bx	lr

9000b1a4 <__retarget_lock_release_recursive>:
9000b1a4:	4770      	bx	lr

9000b1a6 <memcpy>:
9000b1a6:	440a      	add	r2, r1
9000b1a8:	4291      	cmp	r1, r2
9000b1aa:	f100 33ff 	add.w	r3, r0, #4294967295
9000b1ae:	d100      	bne.n	9000b1b2 <memcpy+0xc>
9000b1b0:	4770      	bx	lr
9000b1b2:	b510      	push	{r4, lr}
9000b1b4:	f811 4b01 	ldrb.w	r4, [r1], #1
9000b1b8:	f803 4f01 	strb.w	r4, [r3, #1]!
9000b1bc:	4291      	cmp	r1, r2
9000b1be:	d1f9      	bne.n	9000b1b4 <memcpy+0xe>
9000b1c0:	bd10      	pop	{r4, pc}
	...

9000b1c4 <_free_r>:
9000b1c4:	b538      	push	{r3, r4, r5, lr}
9000b1c6:	4605      	mov	r5, r0
9000b1c8:	2900      	cmp	r1, #0
9000b1ca:	d041      	beq.n	9000b250 <_free_r+0x8c>
9000b1cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000b1d0:	1f0c      	subs	r4, r1, #4
9000b1d2:	2b00      	cmp	r3, #0
9000b1d4:	bfb8      	it	lt
9000b1d6:	18e4      	addlt	r4, r4, r3
9000b1d8:	f000 f8e0 	bl	9000b39c <__malloc_lock>
9000b1dc:	4a1d      	ldr	r2, [pc, #116]	@ (9000b254 <_free_r+0x90>)
9000b1de:	6813      	ldr	r3, [r2, #0]
9000b1e0:	b933      	cbnz	r3, 9000b1f0 <_free_r+0x2c>
9000b1e2:	6063      	str	r3, [r4, #4]
9000b1e4:	6014      	str	r4, [r2, #0]
9000b1e6:	4628      	mov	r0, r5
9000b1e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000b1ec:	f000 b8dc 	b.w	9000b3a8 <__malloc_unlock>
9000b1f0:	42a3      	cmp	r3, r4
9000b1f2:	d908      	bls.n	9000b206 <_free_r+0x42>
9000b1f4:	6820      	ldr	r0, [r4, #0]
9000b1f6:	1821      	adds	r1, r4, r0
9000b1f8:	428b      	cmp	r3, r1
9000b1fa:	bf01      	itttt	eq
9000b1fc:	6819      	ldreq	r1, [r3, #0]
9000b1fe:	685b      	ldreq	r3, [r3, #4]
9000b200:	1809      	addeq	r1, r1, r0
9000b202:	6021      	streq	r1, [r4, #0]
9000b204:	e7ed      	b.n	9000b1e2 <_free_r+0x1e>
9000b206:	461a      	mov	r2, r3
9000b208:	685b      	ldr	r3, [r3, #4]
9000b20a:	b10b      	cbz	r3, 9000b210 <_free_r+0x4c>
9000b20c:	42a3      	cmp	r3, r4
9000b20e:	d9fa      	bls.n	9000b206 <_free_r+0x42>
9000b210:	6811      	ldr	r1, [r2, #0]
9000b212:	1850      	adds	r0, r2, r1
9000b214:	42a0      	cmp	r0, r4
9000b216:	d10b      	bne.n	9000b230 <_free_r+0x6c>
9000b218:	6820      	ldr	r0, [r4, #0]
9000b21a:	4401      	add	r1, r0
9000b21c:	1850      	adds	r0, r2, r1
9000b21e:	4283      	cmp	r3, r0
9000b220:	6011      	str	r1, [r2, #0]
9000b222:	d1e0      	bne.n	9000b1e6 <_free_r+0x22>
9000b224:	6818      	ldr	r0, [r3, #0]
9000b226:	685b      	ldr	r3, [r3, #4]
9000b228:	6053      	str	r3, [r2, #4]
9000b22a:	4408      	add	r0, r1
9000b22c:	6010      	str	r0, [r2, #0]
9000b22e:	e7da      	b.n	9000b1e6 <_free_r+0x22>
9000b230:	d902      	bls.n	9000b238 <_free_r+0x74>
9000b232:	230c      	movs	r3, #12
9000b234:	602b      	str	r3, [r5, #0]
9000b236:	e7d6      	b.n	9000b1e6 <_free_r+0x22>
9000b238:	6820      	ldr	r0, [r4, #0]
9000b23a:	1821      	adds	r1, r4, r0
9000b23c:	428b      	cmp	r3, r1
9000b23e:	bf04      	itt	eq
9000b240:	6819      	ldreq	r1, [r3, #0]
9000b242:	685b      	ldreq	r3, [r3, #4]
9000b244:	6063      	str	r3, [r4, #4]
9000b246:	bf04      	itt	eq
9000b248:	1809      	addeq	r1, r1, r0
9000b24a:	6021      	streq	r1, [r4, #0]
9000b24c:	6054      	str	r4, [r2, #4]
9000b24e:	e7ca      	b.n	9000b1e6 <_free_r+0x22>
9000b250:	bd38      	pop	{r3, r4, r5, pc}
9000b252:	bf00      	nop
9000b254:	20001100 	.word	0x20001100

9000b258 <sbrk_aligned>:
9000b258:	b570      	push	{r4, r5, r6, lr}
9000b25a:	4e0f      	ldr	r6, [pc, #60]	@ (9000b298 <sbrk_aligned+0x40>)
9000b25c:	460c      	mov	r4, r1
9000b25e:	6831      	ldr	r1, [r6, #0]
9000b260:	4605      	mov	r5, r0
9000b262:	b911      	cbnz	r1, 9000b26a <sbrk_aligned+0x12>
9000b264:	f000 fe16 	bl	9000be94 <_sbrk_r>
9000b268:	6030      	str	r0, [r6, #0]
9000b26a:	4621      	mov	r1, r4
9000b26c:	4628      	mov	r0, r5
9000b26e:	f000 fe11 	bl	9000be94 <_sbrk_r>
9000b272:	1c43      	adds	r3, r0, #1
9000b274:	d103      	bne.n	9000b27e <sbrk_aligned+0x26>
9000b276:	f04f 34ff 	mov.w	r4, #4294967295
9000b27a:	4620      	mov	r0, r4
9000b27c:	bd70      	pop	{r4, r5, r6, pc}
9000b27e:	1cc4      	adds	r4, r0, #3
9000b280:	f024 0403 	bic.w	r4, r4, #3
9000b284:	42a0      	cmp	r0, r4
9000b286:	d0f8      	beq.n	9000b27a <sbrk_aligned+0x22>
9000b288:	1a21      	subs	r1, r4, r0
9000b28a:	4628      	mov	r0, r5
9000b28c:	f000 fe02 	bl	9000be94 <_sbrk_r>
9000b290:	3001      	adds	r0, #1
9000b292:	d1f2      	bne.n	9000b27a <sbrk_aligned+0x22>
9000b294:	e7ef      	b.n	9000b276 <sbrk_aligned+0x1e>
9000b296:	bf00      	nop
9000b298:	200010fc 	.word	0x200010fc

9000b29c <_malloc_r>:
9000b29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000b2a0:	1ccd      	adds	r5, r1, #3
9000b2a2:	f025 0503 	bic.w	r5, r5, #3
9000b2a6:	3508      	adds	r5, #8
9000b2a8:	2d0c      	cmp	r5, #12
9000b2aa:	bf38      	it	cc
9000b2ac:	250c      	movcc	r5, #12
9000b2ae:	2d00      	cmp	r5, #0
9000b2b0:	4606      	mov	r6, r0
9000b2b2:	db01      	blt.n	9000b2b8 <_malloc_r+0x1c>
9000b2b4:	42a9      	cmp	r1, r5
9000b2b6:	d904      	bls.n	9000b2c2 <_malloc_r+0x26>
9000b2b8:	230c      	movs	r3, #12
9000b2ba:	6033      	str	r3, [r6, #0]
9000b2bc:	2000      	movs	r0, #0
9000b2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b2c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000b398 <_malloc_r+0xfc>
9000b2c6:	f000 f869 	bl	9000b39c <__malloc_lock>
9000b2ca:	f8d8 3000 	ldr.w	r3, [r8]
9000b2ce:	461c      	mov	r4, r3
9000b2d0:	bb44      	cbnz	r4, 9000b324 <_malloc_r+0x88>
9000b2d2:	4629      	mov	r1, r5
9000b2d4:	4630      	mov	r0, r6
9000b2d6:	f7ff ffbf 	bl	9000b258 <sbrk_aligned>
9000b2da:	1c43      	adds	r3, r0, #1
9000b2dc:	4604      	mov	r4, r0
9000b2de:	d158      	bne.n	9000b392 <_malloc_r+0xf6>
9000b2e0:	f8d8 4000 	ldr.w	r4, [r8]
9000b2e4:	4627      	mov	r7, r4
9000b2e6:	2f00      	cmp	r7, #0
9000b2e8:	d143      	bne.n	9000b372 <_malloc_r+0xd6>
9000b2ea:	2c00      	cmp	r4, #0
9000b2ec:	d04b      	beq.n	9000b386 <_malloc_r+0xea>
9000b2ee:	6823      	ldr	r3, [r4, #0]
9000b2f0:	4639      	mov	r1, r7
9000b2f2:	4630      	mov	r0, r6
9000b2f4:	eb04 0903 	add.w	r9, r4, r3
9000b2f8:	f000 fdcc 	bl	9000be94 <_sbrk_r>
9000b2fc:	4581      	cmp	r9, r0
9000b2fe:	d142      	bne.n	9000b386 <_malloc_r+0xea>
9000b300:	6821      	ldr	r1, [r4, #0]
9000b302:	1a6d      	subs	r5, r5, r1
9000b304:	4629      	mov	r1, r5
9000b306:	4630      	mov	r0, r6
9000b308:	f7ff ffa6 	bl	9000b258 <sbrk_aligned>
9000b30c:	3001      	adds	r0, #1
9000b30e:	d03a      	beq.n	9000b386 <_malloc_r+0xea>
9000b310:	6823      	ldr	r3, [r4, #0]
9000b312:	442b      	add	r3, r5
9000b314:	6023      	str	r3, [r4, #0]
9000b316:	f8d8 3000 	ldr.w	r3, [r8]
9000b31a:	685a      	ldr	r2, [r3, #4]
9000b31c:	bb62      	cbnz	r2, 9000b378 <_malloc_r+0xdc>
9000b31e:	f8c8 7000 	str.w	r7, [r8]
9000b322:	e00f      	b.n	9000b344 <_malloc_r+0xa8>
9000b324:	6822      	ldr	r2, [r4, #0]
9000b326:	1b52      	subs	r2, r2, r5
9000b328:	d420      	bmi.n	9000b36c <_malloc_r+0xd0>
9000b32a:	2a0b      	cmp	r2, #11
9000b32c:	d917      	bls.n	9000b35e <_malloc_r+0xc2>
9000b32e:	1961      	adds	r1, r4, r5
9000b330:	42a3      	cmp	r3, r4
9000b332:	6025      	str	r5, [r4, #0]
9000b334:	bf18      	it	ne
9000b336:	6059      	strne	r1, [r3, #4]
9000b338:	6863      	ldr	r3, [r4, #4]
9000b33a:	bf08      	it	eq
9000b33c:	f8c8 1000 	streq.w	r1, [r8]
9000b340:	5162      	str	r2, [r4, r5]
9000b342:	604b      	str	r3, [r1, #4]
9000b344:	4630      	mov	r0, r6
9000b346:	f000 f82f 	bl	9000b3a8 <__malloc_unlock>
9000b34a:	f104 000b 	add.w	r0, r4, #11
9000b34e:	1d23      	adds	r3, r4, #4
9000b350:	f020 0007 	bic.w	r0, r0, #7
9000b354:	1ac2      	subs	r2, r0, r3
9000b356:	bf1c      	itt	ne
9000b358:	1a1b      	subne	r3, r3, r0
9000b35a:	50a3      	strne	r3, [r4, r2]
9000b35c:	e7af      	b.n	9000b2be <_malloc_r+0x22>
9000b35e:	6862      	ldr	r2, [r4, #4]
9000b360:	42a3      	cmp	r3, r4
9000b362:	bf0c      	ite	eq
9000b364:	f8c8 2000 	streq.w	r2, [r8]
9000b368:	605a      	strne	r2, [r3, #4]
9000b36a:	e7eb      	b.n	9000b344 <_malloc_r+0xa8>
9000b36c:	4623      	mov	r3, r4
9000b36e:	6864      	ldr	r4, [r4, #4]
9000b370:	e7ae      	b.n	9000b2d0 <_malloc_r+0x34>
9000b372:	463c      	mov	r4, r7
9000b374:	687f      	ldr	r7, [r7, #4]
9000b376:	e7b6      	b.n	9000b2e6 <_malloc_r+0x4a>
9000b378:	461a      	mov	r2, r3
9000b37a:	685b      	ldr	r3, [r3, #4]
9000b37c:	42a3      	cmp	r3, r4
9000b37e:	d1fb      	bne.n	9000b378 <_malloc_r+0xdc>
9000b380:	2300      	movs	r3, #0
9000b382:	6053      	str	r3, [r2, #4]
9000b384:	e7de      	b.n	9000b344 <_malloc_r+0xa8>
9000b386:	230c      	movs	r3, #12
9000b388:	6033      	str	r3, [r6, #0]
9000b38a:	4630      	mov	r0, r6
9000b38c:	f000 f80c 	bl	9000b3a8 <__malloc_unlock>
9000b390:	e794      	b.n	9000b2bc <_malloc_r+0x20>
9000b392:	6005      	str	r5, [r0, #0]
9000b394:	e7d6      	b.n	9000b344 <_malloc_r+0xa8>
9000b396:	bf00      	nop
9000b398:	20001100 	.word	0x20001100

9000b39c <__malloc_lock>:
9000b39c:	4801      	ldr	r0, [pc, #4]	@ (9000b3a4 <__malloc_lock+0x8>)
9000b39e:	f7ff bf00 	b.w	9000b1a2 <__retarget_lock_acquire_recursive>
9000b3a2:	bf00      	nop
9000b3a4:	200010f8 	.word	0x200010f8

9000b3a8 <__malloc_unlock>:
9000b3a8:	4801      	ldr	r0, [pc, #4]	@ (9000b3b0 <__malloc_unlock+0x8>)
9000b3aa:	f7ff befb 	b.w	9000b1a4 <__retarget_lock_release_recursive>
9000b3ae:	bf00      	nop
9000b3b0:	200010f8 	.word	0x200010f8

9000b3b4 <__ssputs_r>:
9000b3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000b3b8:	688e      	ldr	r6, [r1, #8]
9000b3ba:	461f      	mov	r7, r3
9000b3bc:	42be      	cmp	r6, r7
9000b3be:	680b      	ldr	r3, [r1, #0]
9000b3c0:	4682      	mov	sl, r0
9000b3c2:	460c      	mov	r4, r1
9000b3c4:	4690      	mov	r8, r2
9000b3c6:	d82d      	bhi.n	9000b424 <__ssputs_r+0x70>
9000b3c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000b3cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
9000b3d0:	d026      	beq.n	9000b420 <__ssputs_r+0x6c>
9000b3d2:	6965      	ldr	r5, [r4, #20]
9000b3d4:	6909      	ldr	r1, [r1, #16]
9000b3d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000b3da:	eba3 0901 	sub.w	r9, r3, r1
9000b3de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000b3e2:	1c7b      	adds	r3, r7, #1
9000b3e4:	444b      	add	r3, r9
9000b3e6:	106d      	asrs	r5, r5, #1
9000b3e8:	429d      	cmp	r5, r3
9000b3ea:	bf38      	it	cc
9000b3ec:	461d      	movcc	r5, r3
9000b3ee:	0553      	lsls	r3, r2, #21
9000b3f0:	d527      	bpl.n	9000b442 <__ssputs_r+0x8e>
9000b3f2:	4629      	mov	r1, r5
9000b3f4:	f7ff ff52 	bl	9000b29c <_malloc_r>
9000b3f8:	4606      	mov	r6, r0
9000b3fa:	b360      	cbz	r0, 9000b456 <__ssputs_r+0xa2>
9000b3fc:	6921      	ldr	r1, [r4, #16]
9000b3fe:	464a      	mov	r2, r9
9000b400:	f7ff fed1 	bl	9000b1a6 <memcpy>
9000b404:	89a3      	ldrh	r3, [r4, #12]
9000b406:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
9000b40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000b40e:	81a3      	strh	r3, [r4, #12]
9000b410:	6126      	str	r6, [r4, #16]
9000b412:	6165      	str	r5, [r4, #20]
9000b414:	444e      	add	r6, r9
9000b416:	eba5 0509 	sub.w	r5, r5, r9
9000b41a:	6026      	str	r6, [r4, #0]
9000b41c:	60a5      	str	r5, [r4, #8]
9000b41e:	463e      	mov	r6, r7
9000b420:	42be      	cmp	r6, r7
9000b422:	d900      	bls.n	9000b426 <__ssputs_r+0x72>
9000b424:	463e      	mov	r6, r7
9000b426:	6820      	ldr	r0, [r4, #0]
9000b428:	4632      	mov	r2, r6
9000b42a:	4641      	mov	r1, r8
9000b42c:	f000 fcf6 	bl	9000be1c <memmove>
9000b430:	68a3      	ldr	r3, [r4, #8]
9000b432:	1b9b      	subs	r3, r3, r6
9000b434:	60a3      	str	r3, [r4, #8]
9000b436:	6823      	ldr	r3, [r4, #0]
9000b438:	4433      	add	r3, r6
9000b43a:	6023      	str	r3, [r4, #0]
9000b43c:	2000      	movs	r0, #0
9000b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000b442:	462a      	mov	r2, r5
9000b444:	f000 fd36 	bl	9000beb4 <_realloc_r>
9000b448:	4606      	mov	r6, r0
9000b44a:	2800      	cmp	r0, #0
9000b44c:	d1e0      	bne.n	9000b410 <__ssputs_r+0x5c>
9000b44e:	6921      	ldr	r1, [r4, #16]
9000b450:	4650      	mov	r0, sl
9000b452:	f7ff feb7 	bl	9000b1c4 <_free_r>
9000b456:	230c      	movs	r3, #12
9000b458:	f8ca 3000 	str.w	r3, [sl]
9000b45c:	89a3      	ldrh	r3, [r4, #12]
9000b45e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000b462:	81a3      	strh	r3, [r4, #12]
9000b464:	f04f 30ff 	mov.w	r0, #4294967295
9000b468:	e7e9      	b.n	9000b43e <__ssputs_r+0x8a>
	...

9000b46c <_svfiprintf_r>:
9000b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000b470:	4698      	mov	r8, r3
9000b472:	898b      	ldrh	r3, [r1, #12]
9000b474:	061b      	lsls	r3, r3, #24
9000b476:	b09d      	sub	sp, #116	@ 0x74
9000b478:	4607      	mov	r7, r0
9000b47a:	460d      	mov	r5, r1
9000b47c:	4614      	mov	r4, r2
9000b47e:	d510      	bpl.n	9000b4a2 <_svfiprintf_r+0x36>
9000b480:	690b      	ldr	r3, [r1, #16]
9000b482:	b973      	cbnz	r3, 9000b4a2 <_svfiprintf_r+0x36>
9000b484:	2140      	movs	r1, #64	@ 0x40
9000b486:	f7ff ff09 	bl	9000b29c <_malloc_r>
9000b48a:	6028      	str	r0, [r5, #0]
9000b48c:	6128      	str	r0, [r5, #16]
9000b48e:	b930      	cbnz	r0, 9000b49e <_svfiprintf_r+0x32>
9000b490:	230c      	movs	r3, #12
9000b492:	603b      	str	r3, [r7, #0]
9000b494:	f04f 30ff 	mov.w	r0, #4294967295
9000b498:	b01d      	add	sp, #116	@ 0x74
9000b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000b49e:	2340      	movs	r3, #64	@ 0x40
9000b4a0:	616b      	str	r3, [r5, #20]
9000b4a2:	2300      	movs	r3, #0
9000b4a4:	9309      	str	r3, [sp, #36]	@ 0x24
9000b4a6:	2320      	movs	r3, #32
9000b4a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000b4ac:	f8cd 800c 	str.w	r8, [sp, #12]
9000b4b0:	2330      	movs	r3, #48	@ 0x30
9000b4b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 9000b650 <_svfiprintf_r+0x1e4>
9000b4b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000b4ba:	f04f 0901 	mov.w	r9, #1
9000b4be:	4623      	mov	r3, r4
9000b4c0:	469a      	mov	sl, r3
9000b4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
9000b4c6:	b10a      	cbz	r2, 9000b4cc <_svfiprintf_r+0x60>
9000b4c8:	2a25      	cmp	r2, #37	@ 0x25
9000b4ca:	d1f9      	bne.n	9000b4c0 <_svfiprintf_r+0x54>
9000b4cc:	ebba 0b04 	subs.w	fp, sl, r4
9000b4d0:	d00b      	beq.n	9000b4ea <_svfiprintf_r+0x7e>
9000b4d2:	465b      	mov	r3, fp
9000b4d4:	4622      	mov	r2, r4
9000b4d6:	4629      	mov	r1, r5
9000b4d8:	4638      	mov	r0, r7
9000b4da:	f7ff ff6b 	bl	9000b3b4 <__ssputs_r>
9000b4de:	3001      	adds	r0, #1
9000b4e0:	f000 80a7 	beq.w	9000b632 <_svfiprintf_r+0x1c6>
9000b4e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000b4e6:	445a      	add	r2, fp
9000b4e8:	9209      	str	r2, [sp, #36]	@ 0x24
9000b4ea:	f89a 3000 	ldrb.w	r3, [sl]
9000b4ee:	2b00      	cmp	r3, #0
9000b4f0:	f000 809f 	beq.w	9000b632 <_svfiprintf_r+0x1c6>
9000b4f4:	2300      	movs	r3, #0
9000b4f6:	f04f 32ff 	mov.w	r2, #4294967295
9000b4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000b4fe:	f10a 0a01 	add.w	sl, sl, #1
9000b502:	9304      	str	r3, [sp, #16]
9000b504:	9307      	str	r3, [sp, #28]
9000b506:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000b50a:	931a      	str	r3, [sp, #104]	@ 0x68
9000b50c:	4654      	mov	r4, sl
9000b50e:	2205      	movs	r2, #5
9000b510:	f814 1b01 	ldrb.w	r1, [r4], #1
9000b514:	484e      	ldr	r0, [pc, #312]	@ (9000b650 <_svfiprintf_r+0x1e4>)
9000b516:	f7f4 feeb 	bl	900002f0 <memchr>
9000b51a:	9a04      	ldr	r2, [sp, #16]
9000b51c:	b9d8      	cbnz	r0, 9000b556 <_svfiprintf_r+0xea>
9000b51e:	06d0      	lsls	r0, r2, #27
9000b520:	bf44      	itt	mi
9000b522:	2320      	movmi	r3, #32
9000b524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000b528:	0711      	lsls	r1, r2, #28
9000b52a:	bf44      	itt	mi
9000b52c:	232b      	movmi	r3, #43	@ 0x2b
9000b52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000b532:	f89a 3000 	ldrb.w	r3, [sl]
9000b536:	2b2a      	cmp	r3, #42	@ 0x2a
9000b538:	d015      	beq.n	9000b566 <_svfiprintf_r+0xfa>
9000b53a:	9a07      	ldr	r2, [sp, #28]
9000b53c:	4654      	mov	r4, sl
9000b53e:	2000      	movs	r0, #0
9000b540:	f04f 0c0a 	mov.w	ip, #10
9000b544:	4621      	mov	r1, r4
9000b546:	f811 3b01 	ldrb.w	r3, [r1], #1
9000b54a:	3b30      	subs	r3, #48	@ 0x30
9000b54c:	2b09      	cmp	r3, #9
9000b54e:	d94b      	bls.n	9000b5e8 <_svfiprintf_r+0x17c>
9000b550:	b1b0      	cbz	r0, 9000b580 <_svfiprintf_r+0x114>
9000b552:	9207      	str	r2, [sp, #28]
9000b554:	e014      	b.n	9000b580 <_svfiprintf_r+0x114>
9000b556:	eba0 0308 	sub.w	r3, r0, r8
9000b55a:	fa09 f303 	lsl.w	r3, r9, r3
9000b55e:	4313      	orrs	r3, r2
9000b560:	9304      	str	r3, [sp, #16]
9000b562:	46a2      	mov	sl, r4
9000b564:	e7d2      	b.n	9000b50c <_svfiprintf_r+0xa0>
9000b566:	9b03      	ldr	r3, [sp, #12]
9000b568:	1d19      	adds	r1, r3, #4
9000b56a:	681b      	ldr	r3, [r3, #0]
9000b56c:	9103      	str	r1, [sp, #12]
9000b56e:	2b00      	cmp	r3, #0
9000b570:	bfbb      	ittet	lt
9000b572:	425b      	neglt	r3, r3
9000b574:	f042 0202 	orrlt.w	r2, r2, #2
9000b578:	9307      	strge	r3, [sp, #28]
9000b57a:	9307      	strlt	r3, [sp, #28]
9000b57c:	bfb8      	it	lt
9000b57e:	9204      	strlt	r2, [sp, #16]
9000b580:	7823      	ldrb	r3, [r4, #0]
9000b582:	2b2e      	cmp	r3, #46	@ 0x2e
9000b584:	d10a      	bne.n	9000b59c <_svfiprintf_r+0x130>
9000b586:	7863      	ldrb	r3, [r4, #1]
9000b588:	2b2a      	cmp	r3, #42	@ 0x2a
9000b58a:	d132      	bne.n	9000b5f2 <_svfiprintf_r+0x186>
9000b58c:	9b03      	ldr	r3, [sp, #12]
9000b58e:	1d1a      	adds	r2, r3, #4
9000b590:	681b      	ldr	r3, [r3, #0]
9000b592:	9203      	str	r2, [sp, #12]
9000b594:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000b598:	3402      	adds	r4, #2
9000b59a:	9305      	str	r3, [sp, #20]
9000b59c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 9000b660 <_svfiprintf_r+0x1f4>
9000b5a0:	7821      	ldrb	r1, [r4, #0]
9000b5a2:	2203      	movs	r2, #3
9000b5a4:	4650      	mov	r0, sl
9000b5a6:	f7f4 fea3 	bl	900002f0 <memchr>
9000b5aa:	b138      	cbz	r0, 9000b5bc <_svfiprintf_r+0x150>
9000b5ac:	9b04      	ldr	r3, [sp, #16]
9000b5ae:	eba0 000a 	sub.w	r0, r0, sl
9000b5b2:	2240      	movs	r2, #64	@ 0x40
9000b5b4:	4082      	lsls	r2, r0
9000b5b6:	4313      	orrs	r3, r2
9000b5b8:	3401      	adds	r4, #1
9000b5ba:	9304      	str	r3, [sp, #16]
9000b5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
9000b5c0:	4824      	ldr	r0, [pc, #144]	@ (9000b654 <_svfiprintf_r+0x1e8>)
9000b5c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000b5c6:	2206      	movs	r2, #6
9000b5c8:	f7f4 fe92 	bl	900002f0 <memchr>
9000b5cc:	2800      	cmp	r0, #0
9000b5ce:	d036      	beq.n	9000b63e <_svfiprintf_r+0x1d2>
9000b5d0:	4b21      	ldr	r3, [pc, #132]	@ (9000b658 <_svfiprintf_r+0x1ec>)
9000b5d2:	bb1b      	cbnz	r3, 9000b61c <_svfiprintf_r+0x1b0>
9000b5d4:	9b03      	ldr	r3, [sp, #12]
9000b5d6:	3307      	adds	r3, #7
9000b5d8:	f023 0307 	bic.w	r3, r3, #7
9000b5dc:	3308      	adds	r3, #8
9000b5de:	9303      	str	r3, [sp, #12]
9000b5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000b5e2:	4433      	add	r3, r6
9000b5e4:	9309      	str	r3, [sp, #36]	@ 0x24
9000b5e6:	e76a      	b.n	9000b4be <_svfiprintf_r+0x52>
9000b5e8:	fb0c 3202 	mla	r2, ip, r2, r3
9000b5ec:	460c      	mov	r4, r1
9000b5ee:	2001      	movs	r0, #1
9000b5f0:	e7a8      	b.n	9000b544 <_svfiprintf_r+0xd8>
9000b5f2:	2300      	movs	r3, #0
9000b5f4:	3401      	adds	r4, #1
9000b5f6:	9305      	str	r3, [sp, #20]
9000b5f8:	4619      	mov	r1, r3
9000b5fa:	f04f 0c0a 	mov.w	ip, #10
9000b5fe:	4620      	mov	r0, r4
9000b600:	f810 2b01 	ldrb.w	r2, [r0], #1
9000b604:	3a30      	subs	r2, #48	@ 0x30
9000b606:	2a09      	cmp	r2, #9
9000b608:	d903      	bls.n	9000b612 <_svfiprintf_r+0x1a6>
9000b60a:	2b00      	cmp	r3, #0
9000b60c:	d0c6      	beq.n	9000b59c <_svfiprintf_r+0x130>
9000b60e:	9105      	str	r1, [sp, #20]
9000b610:	e7c4      	b.n	9000b59c <_svfiprintf_r+0x130>
9000b612:	fb0c 2101 	mla	r1, ip, r1, r2
9000b616:	4604      	mov	r4, r0
9000b618:	2301      	movs	r3, #1
9000b61a:	e7f0      	b.n	9000b5fe <_svfiprintf_r+0x192>
9000b61c:	ab03      	add	r3, sp, #12
9000b61e:	9300      	str	r3, [sp, #0]
9000b620:	462a      	mov	r2, r5
9000b622:	4b0e      	ldr	r3, [pc, #56]	@ (9000b65c <_svfiprintf_r+0x1f0>)
9000b624:	a904      	add	r1, sp, #16
9000b626:	4638      	mov	r0, r7
9000b628:	f3af 8000 	nop.w
9000b62c:	1c42      	adds	r2, r0, #1
9000b62e:	4606      	mov	r6, r0
9000b630:	d1d6      	bne.n	9000b5e0 <_svfiprintf_r+0x174>
9000b632:	89ab      	ldrh	r3, [r5, #12]
9000b634:	065b      	lsls	r3, r3, #25
9000b636:	f53f af2d 	bmi.w	9000b494 <_svfiprintf_r+0x28>
9000b63a:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000b63c:	e72c      	b.n	9000b498 <_svfiprintf_r+0x2c>
9000b63e:	ab03      	add	r3, sp, #12
9000b640:	9300      	str	r3, [sp, #0]
9000b642:	462a      	mov	r2, r5
9000b644:	4b05      	ldr	r3, [pc, #20]	@ (9000b65c <_svfiprintf_r+0x1f0>)
9000b646:	a904      	add	r1, sp, #16
9000b648:	4638      	mov	r0, r7
9000b64a:	f000 f9bb 	bl	9000b9c4 <_printf_i>
9000b64e:	e7ed      	b.n	9000b62c <_svfiprintf_r+0x1c0>
9000b650:	9000e5c4 	.word	0x9000e5c4
9000b654:	9000e5ce 	.word	0x9000e5ce
9000b658:	00000000 	.word	0x00000000
9000b65c:	9000b3b5 	.word	0x9000b3b5
9000b660:	9000e5ca 	.word	0x9000e5ca

9000b664 <__sfputc_r>:
9000b664:	6893      	ldr	r3, [r2, #8]
9000b666:	3b01      	subs	r3, #1
9000b668:	2b00      	cmp	r3, #0
9000b66a:	b410      	push	{r4}
9000b66c:	6093      	str	r3, [r2, #8]
9000b66e:	da08      	bge.n	9000b682 <__sfputc_r+0x1e>
9000b670:	6994      	ldr	r4, [r2, #24]
9000b672:	42a3      	cmp	r3, r4
9000b674:	db01      	blt.n	9000b67a <__sfputc_r+0x16>
9000b676:	290a      	cmp	r1, #10
9000b678:	d103      	bne.n	9000b682 <__sfputc_r+0x1e>
9000b67a:	f85d 4b04 	ldr.w	r4, [sp], #4
9000b67e:	f7ff bc82 	b.w	9000af86 <__swbuf_r>
9000b682:	6813      	ldr	r3, [r2, #0]
9000b684:	1c58      	adds	r0, r3, #1
9000b686:	6010      	str	r0, [r2, #0]
9000b688:	7019      	strb	r1, [r3, #0]
9000b68a:	4608      	mov	r0, r1
9000b68c:	f85d 4b04 	ldr.w	r4, [sp], #4
9000b690:	4770      	bx	lr

9000b692 <__sfputs_r>:
9000b692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000b694:	4606      	mov	r6, r0
9000b696:	460f      	mov	r7, r1
9000b698:	4614      	mov	r4, r2
9000b69a:	18d5      	adds	r5, r2, r3
9000b69c:	42ac      	cmp	r4, r5
9000b69e:	d101      	bne.n	9000b6a4 <__sfputs_r+0x12>
9000b6a0:	2000      	movs	r0, #0
9000b6a2:	e007      	b.n	9000b6b4 <__sfputs_r+0x22>
9000b6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
9000b6a8:	463a      	mov	r2, r7
9000b6aa:	4630      	mov	r0, r6
9000b6ac:	f7ff ffda 	bl	9000b664 <__sfputc_r>
9000b6b0:	1c43      	adds	r3, r0, #1
9000b6b2:	d1f3      	bne.n	9000b69c <__sfputs_r+0xa>
9000b6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000b6b8 <_vfiprintf_r>:
9000b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000b6bc:	460d      	mov	r5, r1
9000b6be:	b09d      	sub	sp, #116	@ 0x74
9000b6c0:	4614      	mov	r4, r2
9000b6c2:	4698      	mov	r8, r3
9000b6c4:	4606      	mov	r6, r0
9000b6c6:	b118      	cbz	r0, 9000b6d0 <_vfiprintf_r+0x18>
9000b6c8:	6a03      	ldr	r3, [r0, #32]
9000b6ca:	b90b      	cbnz	r3, 9000b6d0 <_vfiprintf_r+0x18>
9000b6cc:	f7ff fb50 	bl	9000ad70 <__sinit>
9000b6d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000b6d2:	07d9      	lsls	r1, r3, #31
9000b6d4:	d405      	bmi.n	9000b6e2 <_vfiprintf_r+0x2a>
9000b6d6:	89ab      	ldrh	r3, [r5, #12]
9000b6d8:	059a      	lsls	r2, r3, #22
9000b6da:	d402      	bmi.n	9000b6e2 <_vfiprintf_r+0x2a>
9000b6dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000b6de:	f7ff fd60 	bl	9000b1a2 <__retarget_lock_acquire_recursive>
9000b6e2:	89ab      	ldrh	r3, [r5, #12]
9000b6e4:	071b      	lsls	r3, r3, #28
9000b6e6:	d501      	bpl.n	9000b6ec <_vfiprintf_r+0x34>
9000b6e8:	692b      	ldr	r3, [r5, #16]
9000b6ea:	b99b      	cbnz	r3, 9000b714 <_vfiprintf_r+0x5c>
9000b6ec:	4629      	mov	r1, r5
9000b6ee:	4630      	mov	r0, r6
9000b6f0:	f7ff fc88 	bl	9000b004 <__swsetup_r>
9000b6f4:	b170      	cbz	r0, 9000b714 <_vfiprintf_r+0x5c>
9000b6f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000b6f8:	07dc      	lsls	r4, r3, #31
9000b6fa:	d504      	bpl.n	9000b706 <_vfiprintf_r+0x4e>
9000b6fc:	f04f 30ff 	mov.w	r0, #4294967295
9000b700:	b01d      	add	sp, #116	@ 0x74
9000b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000b706:	89ab      	ldrh	r3, [r5, #12]
9000b708:	0598      	lsls	r0, r3, #22
9000b70a:	d4f7      	bmi.n	9000b6fc <_vfiprintf_r+0x44>
9000b70c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000b70e:	f7ff fd49 	bl	9000b1a4 <__retarget_lock_release_recursive>
9000b712:	e7f3      	b.n	9000b6fc <_vfiprintf_r+0x44>
9000b714:	2300      	movs	r3, #0
9000b716:	9309      	str	r3, [sp, #36]	@ 0x24
9000b718:	2320      	movs	r3, #32
9000b71a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000b71e:	f8cd 800c 	str.w	r8, [sp, #12]
9000b722:	2330      	movs	r3, #48	@ 0x30
9000b724:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000b8d4 <_vfiprintf_r+0x21c>
9000b728:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000b72c:	f04f 0901 	mov.w	r9, #1
9000b730:	4623      	mov	r3, r4
9000b732:	469a      	mov	sl, r3
9000b734:	f813 2b01 	ldrb.w	r2, [r3], #1
9000b738:	b10a      	cbz	r2, 9000b73e <_vfiprintf_r+0x86>
9000b73a:	2a25      	cmp	r2, #37	@ 0x25
9000b73c:	d1f9      	bne.n	9000b732 <_vfiprintf_r+0x7a>
9000b73e:	ebba 0b04 	subs.w	fp, sl, r4
9000b742:	d00b      	beq.n	9000b75c <_vfiprintf_r+0xa4>
9000b744:	465b      	mov	r3, fp
9000b746:	4622      	mov	r2, r4
9000b748:	4629      	mov	r1, r5
9000b74a:	4630      	mov	r0, r6
9000b74c:	f7ff ffa1 	bl	9000b692 <__sfputs_r>
9000b750:	3001      	adds	r0, #1
9000b752:	f000 80a7 	beq.w	9000b8a4 <_vfiprintf_r+0x1ec>
9000b756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000b758:	445a      	add	r2, fp
9000b75a:	9209      	str	r2, [sp, #36]	@ 0x24
9000b75c:	f89a 3000 	ldrb.w	r3, [sl]
9000b760:	2b00      	cmp	r3, #0
9000b762:	f000 809f 	beq.w	9000b8a4 <_vfiprintf_r+0x1ec>
9000b766:	2300      	movs	r3, #0
9000b768:	f04f 32ff 	mov.w	r2, #4294967295
9000b76c:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000b770:	f10a 0a01 	add.w	sl, sl, #1
9000b774:	9304      	str	r3, [sp, #16]
9000b776:	9307      	str	r3, [sp, #28]
9000b778:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000b77c:	931a      	str	r3, [sp, #104]	@ 0x68
9000b77e:	4654      	mov	r4, sl
9000b780:	2205      	movs	r2, #5
9000b782:	f814 1b01 	ldrb.w	r1, [r4], #1
9000b786:	4853      	ldr	r0, [pc, #332]	@ (9000b8d4 <_vfiprintf_r+0x21c>)
9000b788:	f7f4 fdb2 	bl	900002f0 <memchr>
9000b78c:	9a04      	ldr	r2, [sp, #16]
9000b78e:	b9d8      	cbnz	r0, 9000b7c8 <_vfiprintf_r+0x110>
9000b790:	06d1      	lsls	r1, r2, #27
9000b792:	bf44      	itt	mi
9000b794:	2320      	movmi	r3, #32
9000b796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000b79a:	0713      	lsls	r3, r2, #28
9000b79c:	bf44      	itt	mi
9000b79e:	232b      	movmi	r3, #43	@ 0x2b
9000b7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000b7a4:	f89a 3000 	ldrb.w	r3, [sl]
9000b7a8:	2b2a      	cmp	r3, #42	@ 0x2a
9000b7aa:	d015      	beq.n	9000b7d8 <_vfiprintf_r+0x120>
9000b7ac:	9a07      	ldr	r2, [sp, #28]
9000b7ae:	4654      	mov	r4, sl
9000b7b0:	2000      	movs	r0, #0
9000b7b2:	f04f 0c0a 	mov.w	ip, #10
9000b7b6:	4621      	mov	r1, r4
9000b7b8:	f811 3b01 	ldrb.w	r3, [r1], #1
9000b7bc:	3b30      	subs	r3, #48	@ 0x30
9000b7be:	2b09      	cmp	r3, #9
9000b7c0:	d94b      	bls.n	9000b85a <_vfiprintf_r+0x1a2>
9000b7c2:	b1b0      	cbz	r0, 9000b7f2 <_vfiprintf_r+0x13a>
9000b7c4:	9207      	str	r2, [sp, #28]
9000b7c6:	e014      	b.n	9000b7f2 <_vfiprintf_r+0x13a>
9000b7c8:	eba0 0308 	sub.w	r3, r0, r8
9000b7cc:	fa09 f303 	lsl.w	r3, r9, r3
9000b7d0:	4313      	orrs	r3, r2
9000b7d2:	9304      	str	r3, [sp, #16]
9000b7d4:	46a2      	mov	sl, r4
9000b7d6:	e7d2      	b.n	9000b77e <_vfiprintf_r+0xc6>
9000b7d8:	9b03      	ldr	r3, [sp, #12]
9000b7da:	1d19      	adds	r1, r3, #4
9000b7dc:	681b      	ldr	r3, [r3, #0]
9000b7de:	9103      	str	r1, [sp, #12]
9000b7e0:	2b00      	cmp	r3, #0
9000b7e2:	bfbb      	ittet	lt
9000b7e4:	425b      	neglt	r3, r3
9000b7e6:	f042 0202 	orrlt.w	r2, r2, #2
9000b7ea:	9307      	strge	r3, [sp, #28]
9000b7ec:	9307      	strlt	r3, [sp, #28]
9000b7ee:	bfb8      	it	lt
9000b7f0:	9204      	strlt	r2, [sp, #16]
9000b7f2:	7823      	ldrb	r3, [r4, #0]
9000b7f4:	2b2e      	cmp	r3, #46	@ 0x2e
9000b7f6:	d10a      	bne.n	9000b80e <_vfiprintf_r+0x156>
9000b7f8:	7863      	ldrb	r3, [r4, #1]
9000b7fa:	2b2a      	cmp	r3, #42	@ 0x2a
9000b7fc:	d132      	bne.n	9000b864 <_vfiprintf_r+0x1ac>
9000b7fe:	9b03      	ldr	r3, [sp, #12]
9000b800:	1d1a      	adds	r2, r3, #4
9000b802:	681b      	ldr	r3, [r3, #0]
9000b804:	9203      	str	r2, [sp, #12]
9000b806:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000b80a:	3402      	adds	r4, #2
9000b80c:	9305      	str	r3, [sp, #20]
9000b80e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000b8e4 <_vfiprintf_r+0x22c>
9000b812:	7821      	ldrb	r1, [r4, #0]
9000b814:	2203      	movs	r2, #3
9000b816:	4650      	mov	r0, sl
9000b818:	f7f4 fd6a 	bl	900002f0 <memchr>
9000b81c:	b138      	cbz	r0, 9000b82e <_vfiprintf_r+0x176>
9000b81e:	9b04      	ldr	r3, [sp, #16]
9000b820:	eba0 000a 	sub.w	r0, r0, sl
9000b824:	2240      	movs	r2, #64	@ 0x40
9000b826:	4082      	lsls	r2, r0
9000b828:	4313      	orrs	r3, r2
9000b82a:	3401      	adds	r4, #1
9000b82c:	9304      	str	r3, [sp, #16]
9000b82e:	f814 1b01 	ldrb.w	r1, [r4], #1
9000b832:	4829      	ldr	r0, [pc, #164]	@ (9000b8d8 <_vfiprintf_r+0x220>)
9000b834:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000b838:	2206      	movs	r2, #6
9000b83a:	f7f4 fd59 	bl	900002f0 <memchr>
9000b83e:	2800      	cmp	r0, #0
9000b840:	d03f      	beq.n	9000b8c2 <_vfiprintf_r+0x20a>
9000b842:	4b26      	ldr	r3, [pc, #152]	@ (9000b8dc <_vfiprintf_r+0x224>)
9000b844:	bb1b      	cbnz	r3, 9000b88e <_vfiprintf_r+0x1d6>
9000b846:	9b03      	ldr	r3, [sp, #12]
9000b848:	3307      	adds	r3, #7
9000b84a:	f023 0307 	bic.w	r3, r3, #7
9000b84e:	3308      	adds	r3, #8
9000b850:	9303      	str	r3, [sp, #12]
9000b852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000b854:	443b      	add	r3, r7
9000b856:	9309      	str	r3, [sp, #36]	@ 0x24
9000b858:	e76a      	b.n	9000b730 <_vfiprintf_r+0x78>
9000b85a:	fb0c 3202 	mla	r2, ip, r2, r3
9000b85e:	460c      	mov	r4, r1
9000b860:	2001      	movs	r0, #1
9000b862:	e7a8      	b.n	9000b7b6 <_vfiprintf_r+0xfe>
9000b864:	2300      	movs	r3, #0
9000b866:	3401      	adds	r4, #1
9000b868:	9305      	str	r3, [sp, #20]
9000b86a:	4619      	mov	r1, r3
9000b86c:	f04f 0c0a 	mov.w	ip, #10
9000b870:	4620      	mov	r0, r4
9000b872:	f810 2b01 	ldrb.w	r2, [r0], #1
9000b876:	3a30      	subs	r2, #48	@ 0x30
9000b878:	2a09      	cmp	r2, #9
9000b87a:	d903      	bls.n	9000b884 <_vfiprintf_r+0x1cc>
9000b87c:	2b00      	cmp	r3, #0
9000b87e:	d0c6      	beq.n	9000b80e <_vfiprintf_r+0x156>
9000b880:	9105      	str	r1, [sp, #20]
9000b882:	e7c4      	b.n	9000b80e <_vfiprintf_r+0x156>
9000b884:	fb0c 2101 	mla	r1, ip, r1, r2
9000b888:	4604      	mov	r4, r0
9000b88a:	2301      	movs	r3, #1
9000b88c:	e7f0      	b.n	9000b870 <_vfiprintf_r+0x1b8>
9000b88e:	ab03      	add	r3, sp, #12
9000b890:	9300      	str	r3, [sp, #0]
9000b892:	462a      	mov	r2, r5
9000b894:	4b12      	ldr	r3, [pc, #72]	@ (9000b8e0 <_vfiprintf_r+0x228>)
9000b896:	a904      	add	r1, sp, #16
9000b898:	4630      	mov	r0, r6
9000b89a:	f3af 8000 	nop.w
9000b89e:	4607      	mov	r7, r0
9000b8a0:	1c78      	adds	r0, r7, #1
9000b8a2:	d1d6      	bne.n	9000b852 <_vfiprintf_r+0x19a>
9000b8a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000b8a6:	07d9      	lsls	r1, r3, #31
9000b8a8:	d405      	bmi.n	9000b8b6 <_vfiprintf_r+0x1fe>
9000b8aa:	89ab      	ldrh	r3, [r5, #12]
9000b8ac:	059a      	lsls	r2, r3, #22
9000b8ae:	d402      	bmi.n	9000b8b6 <_vfiprintf_r+0x1fe>
9000b8b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000b8b2:	f7ff fc77 	bl	9000b1a4 <__retarget_lock_release_recursive>
9000b8b6:	89ab      	ldrh	r3, [r5, #12]
9000b8b8:	065b      	lsls	r3, r3, #25
9000b8ba:	f53f af1f 	bmi.w	9000b6fc <_vfiprintf_r+0x44>
9000b8be:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000b8c0:	e71e      	b.n	9000b700 <_vfiprintf_r+0x48>
9000b8c2:	ab03      	add	r3, sp, #12
9000b8c4:	9300      	str	r3, [sp, #0]
9000b8c6:	462a      	mov	r2, r5
9000b8c8:	4b05      	ldr	r3, [pc, #20]	@ (9000b8e0 <_vfiprintf_r+0x228>)
9000b8ca:	a904      	add	r1, sp, #16
9000b8cc:	4630      	mov	r0, r6
9000b8ce:	f000 f879 	bl	9000b9c4 <_printf_i>
9000b8d2:	e7e4      	b.n	9000b89e <_vfiprintf_r+0x1e6>
9000b8d4:	9000e5c4 	.word	0x9000e5c4
9000b8d8:	9000e5ce 	.word	0x9000e5ce
9000b8dc:	00000000 	.word	0x00000000
9000b8e0:	9000b693 	.word	0x9000b693
9000b8e4:	9000e5ca 	.word	0x9000e5ca

9000b8e8 <_printf_common>:
9000b8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000b8ec:	4616      	mov	r6, r2
9000b8ee:	4698      	mov	r8, r3
9000b8f0:	688a      	ldr	r2, [r1, #8]
9000b8f2:	690b      	ldr	r3, [r1, #16]
9000b8f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000b8f8:	4293      	cmp	r3, r2
9000b8fa:	bfb8      	it	lt
9000b8fc:	4613      	movlt	r3, r2
9000b8fe:	6033      	str	r3, [r6, #0]
9000b900:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000b904:	4607      	mov	r7, r0
9000b906:	460c      	mov	r4, r1
9000b908:	b10a      	cbz	r2, 9000b90e <_printf_common+0x26>
9000b90a:	3301      	adds	r3, #1
9000b90c:	6033      	str	r3, [r6, #0]
9000b90e:	6823      	ldr	r3, [r4, #0]
9000b910:	0699      	lsls	r1, r3, #26
9000b912:	bf42      	ittt	mi
9000b914:	6833      	ldrmi	r3, [r6, #0]
9000b916:	3302      	addmi	r3, #2
9000b918:	6033      	strmi	r3, [r6, #0]
9000b91a:	6825      	ldr	r5, [r4, #0]
9000b91c:	f015 0506 	ands.w	r5, r5, #6
9000b920:	d106      	bne.n	9000b930 <_printf_common+0x48>
9000b922:	f104 0a19 	add.w	sl, r4, #25
9000b926:	68e3      	ldr	r3, [r4, #12]
9000b928:	6832      	ldr	r2, [r6, #0]
9000b92a:	1a9b      	subs	r3, r3, r2
9000b92c:	42ab      	cmp	r3, r5
9000b92e:	dc26      	bgt.n	9000b97e <_printf_common+0x96>
9000b930:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000b934:	6822      	ldr	r2, [r4, #0]
9000b936:	3b00      	subs	r3, #0
9000b938:	bf18      	it	ne
9000b93a:	2301      	movne	r3, #1
9000b93c:	0692      	lsls	r2, r2, #26
9000b93e:	d42b      	bmi.n	9000b998 <_printf_common+0xb0>
9000b940:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000b944:	4641      	mov	r1, r8
9000b946:	4638      	mov	r0, r7
9000b948:	47c8      	blx	r9
9000b94a:	3001      	adds	r0, #1
9000b94c:	d01e      	beq.n	9000b98c <_printf_common+0xa4>
9000b94e:	6823      	ldr	r3, [r4, #0]
9000b950:	6922      	ldr	r2, [r4, #16]
9000b952:	f003 0306 	and.w	r3, r3, #6
9000b956:	2b04      	cmp	r3, #4
9000b958:	bf02      	ittt	eq
9000b95a:	68e5      	ldreq	r5, [r4, #12]
9000b95c:	6833      	ldreq	r3, [r6, #0]
9000b95e:	1aed      	subeq	r5, r5, r3
9000b960:	68a3      	ldr	r3, [r4, #8]
9000b962:	bf0c      	ite	eq
9000b964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000b968:	2500      	movne	r5, #0
9000b96a:	4293      	cmp	r3, r2
9000b96c:	bfc4      	itt	gt
9000b96e:	1a9b      	subgt	r3, r3, r2
9000b970:	18ed      	addgt	r5, r5, r3
9000b972:	2600      	movs	r6, #0
9000b974:	341a      	adds	r4, #26
9000b976:	42b5      	cmp	r5, r6
9000b978:	d11a      	bne.n	9000b9b0 <_printf_common+0xc8>
9000b97a:	2000      	movs	r0, #0
9000b97c:	e008      	b.n	9000b990 <_printf_common+0xa8>
9000b97e:	2301      	movs	r3, #1
9000b980:	4652      	mov	r2, sl
9000b982:	4641      	mov	r1, r8
9000b984:	4638      	mov	r0, r7
9000b986:	47c8      	blx	r9
9000b988:	3001      	adds	r0, #1
9000b98a:	d103      	bne.n	9000b994 <_printf_common+0xac>
9000b98c:	f04f 30ff 	mov.w	r0, #4294967295
9000b990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000b994:	3501      	adds	r5, #1
9000b996:	e7c6      	b.n	9000b926 <_printf_common+0x3e>
9000b998:	18e1      	adds	r1, r4, r3
9000b99a:	1c5a      	adds	r2, r3, #1
9000b99c:	2030      	movs	r0, #48	@ 0x30
9000b99e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000b9a2:	4422      	add	r2, r4
9000b9a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000b9a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000b9ac:	3302      	adds	r3, #2
9000b9ae:	e7c7      	b.n	9000b940 <_printf_common+0x58>
9000b9b0:	2301      	movs	r3, #1
9000b9b2:	4622      	mov	r2, r4
9000b9b4:	4641      	mov	r1, r8
9000b9b6:	4638      	mov	r0, r7
9000b9b8:	47c8      	blx	r9
9000b9ba:	3001      	adds	r0, #1
9000b9bc:	d0e6      	beq.n	9000b98c <_printf_common+0xa4>
9000b9be:	3601      	adds	r6, #1
9000b9c0:	e7d9      	b.n	9000b976 <_printf_common+0x8e>
	...

9000b9c4 <_printf_i>:
9000b9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000b9c8:	7e0f      	ldrb	r7, [r1, #24]
9000b9ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000b9cc:	2f78      	cmp	r7, #120	@ 0x78
9000b9ce:	4691      	mov	r9, r2
9000b9d0:	4680      	mov	r8, r0
9000b9d2:	460c      	mov	r4, r1
9000b9d4:	469a      	mov	sl, r3
9000b9d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000b9da:	d807      	bhi.n	9000b9ec <_printf_i+0x28>
9000b9dc:	2f62      	cmp	r7, #98	@ 0x62
9000b9de:	d80a      	bhi.n	9000b9f6 <_printf_i+0x32>
9000b9e0:	2f00      	cmp	r7, #0
9000b9e2:	f000 80d1 	beq.w	9000bb88 <_printf_i+0x1c4>
9000b9e6:	2f58      	cmp	r7, #88	@ 0x58
9000b9e8:	f000 80b8 	beq.w	9000bb5c <_printf_i+0x198>
9000b9ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000b9f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000b9f4:	e03a      	b.n	9000ba6c <_printf_i+0xa8>
9000b9f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000b9fa:	2b15      	cmp	r3, #21
9000b9fc:	d8f6      	bhi.n	9000b9ec <_printf_i+0x28>
9000b9fe:	a101      	add	r1, pc, #4	@ (adr r1, 9000ba04 <_printf_i+0x40>)
9000ba00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000ba04:	9000ba5d 	.word	0x9000ba5d
9000ba08:	9000ba71 	.word	0x9000ba71
9000ba0c:	9000b9ed 	.word	0x9000b9ed
9000ba10:	9000b9ed 	.word	0x9000b9ed
9000ba14:	9000b9ed 	.word	0x9000b9ed
9000ba18:	9000b9ed 	.word	0x9000b9ed
9000ba1c:	9000ba71 	.word	0x9000ba71
9000ba20:	9000b9ed 	.word	0x9000b9ed
9000ba24:	9000b9ed 	.word	0x9000b9ed
9000ba28:	9000b9ed 	.word	0x9000b9ed
9000ba2c:	9000b9ed 	.word	0x9000b9ed
9000ba30:	9000bb6f 	.word	0x9000bb6f
9000ba34:	9000ba9b 	.word	0x9000ba9b
9000ba38:	9000bb29 	.word	0x9000bb29
9000ba3c:	9000b9ed 	.word	0x9000b9ed
9000ba40:	9000b9ed 	.word	0x9000b9ed
9000ba44:	9000bb91 	.word	0x9000bb91
9000ba48:	9000b9ed 	.word	0x9000b9ed
9000ba4c:	9000ba9b 	.word	0x9000ba9b
9000ba50:	9000b9ed 	.word	0x9000b9ed
9000ba54:	9000b9ed 	.word	0x9000b9ed
9000ba58:	9000bb31 	.word	0x9000bb31
9000ba5c:	6833      	ldr	r3, [r6, #0]
9000ba5e:	1d1a      	adds	r2, r3, #4
9000ba60:	681b      	ldr	r3, [r3, #0]
9000ba62:	6032      	str	r2, [r6, #0]
9000ba64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000ba68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000ba6c:	2301      	movs	r3, #1
9000ba6e:	e09c      	b.n	9000bbaa <_printf_i+0x1e6>
9000ba70:	6833      	ldr	r3, [r6, #0]
9000ba72:	6820      	ldr	r0, [r4, #0]
9000ba74:	1d19      	adds	r1, r3, #4
9000ba76:	6031      	str	r1, [r6, #0]
9000ba78:	0606      	lsls	r6, r0, #24
9000ba7a:	d501      	bpl.n	9000ba80 <_printf_i+0xbc>
9000ba7c:	681d      	ldr	r5, [r3, #0]
9000ba7e:	e003      	b.n	9000ba88 <_printf_i+0xc4>
9000ba80:	0645      	lsls	r5, r0, #25
9000ba82:	d5fb      	bpl.n	9000ba7c <_printf_i+0xb8>
9000ba84:	f9b3 5000 	ldrsh.w	r5, [r3]
9000ba88:	2d00      	cmp	r5, #0
9000ba8a:	da03      	bge.n	9000ba94 <_printf_i+0xd0>
9000ba8c:	232d      	movs	r3, #45	@ 0x2d
9000ba8e:	426d      	negs	r5, r5
9000ba90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000ba94:	4858      	ldr	r0, [pc, #352]	@ (9000bbf8 <_printf_i+0x234>)
9000ba96:	230a      	movs	r3, #10
9000ba98:	e011      	b.n	9000babe <_printf_i+0xfa>
9000ba9a:	6821      	ldr	r1, [r4, #0]
9000ba9c:	6833      	ldr	r3, [r6, #0]
9000ba9e:	0608      	lsls	r0, r1, #24
9000baa0:	f853 5b04 	ldr.w	r5, [r3], #4
9000baa4:	d402      	bmi.n	9000baac <_printf_i+0xe8>
9000baa6:	0649      	lsls	r1, r1, #25
9000baa8:	bf48      	it	mi
9000baaa:	b2ad      	uxthmi	r5, r5
9000baac:	2f6f      	cmp	r7, #111	@ 0x6f
9000baae:	4852      	ldr	r0, [pc, #328]	@ (9000bbf8 <_printf_i+0x234>)
9000bab0:	6033      	str	r3, [r6, #0]
9000bab2:	bf14      	ite	ne
9000bab4:	230a      	movne	r3, #10
9000bab6:	2308      	moveq	r3, #8
9000bab8:	2100      	movs	r1, #0
9000baba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000babe:	6866      	ldr	r6, [r4, #4]
9000bac0:	60a6      	str	r6, [r4, #8]
9000bac2:	2e00      	cmp	r6, #0
9000bac4:	db05      	blt.n	9000bad2 <_printf_i+0x10e>
9000bac6:	6821      	ldr	r1, [r4, #0]
9000bac8:	432e      	orrs	r6, r5
9000baca:	f021 0104 	bic.w	r1, r1, #4
9000bace:	6021      	str	r1, [r4, #0]
9000bad0:	d04b      	beq.n	9000bb6a <_printf_i+0x1a6>
9000bad2:	4616      	mov	r6, r2
9000bad4:	fbb5 f1f3 	udiv	r1, r5, r3
9000bad8:	fb03 5711 	mls	r7, r3, r1, r5
9000badc:	5dc7      	ldrb	r7, [r0, r7]
9000bade:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000bae2:	462f      	mov	r7, r5
9000bae4:	42bb      	cmp	r3, r7
9000bae6:	460d      	mov	r5, r1
9000bae8:	d9f4      	bls.n	9000bad4 <_printf_i+0x110>
9000baea:	2b08      	cmp	r3, #8
9000baec:	d10b      	bne.n	9000bb06 <_printf_i+0x142>
9000baee:	6823      	ldr	r3, [r4, #0]
9000baf0:	07df      	lsls	r7, r3, #31
9000baf2:	d508      	bpl.n	9000bb06 <_printf_i+0x142>
9000baf4:	6923      	ldr	r3, [r4, #16]
9000baf6:	6861      	ldr	r1, [r4, #4]
9000baf8:	4299      	cmp	r1, r3
9000bafa:	bfde      	ittt	le
9000bafc:	2330      	movle	r3, #48	@ 0x30
9000bafe:	f806 3c01 	strble.w	r3, [r6, #-1]
9000bb02:	f106 36ff 	addle.w	r6, r6, #4294967295
9000bb06:	1b92      	subs	r2, r2, r6
9000bb08:	6122      	str	r2, [r4, #16]
9000bb0a:	f8cd a000 	str.w	sl, [sp]
9000bb0e:	464b      	mov	r3, r9
9000bb10:	aa03      	add	r2, sp, #12
9000bb12:	4621      	mov	r1, r4
9000bb14:	4640      	mov	r0, r8
9000bb16:	f7ff fee7 	bl	9000b8e8 <_printf_common>
9000bb1a:	3001      	adds	r0, #1
9000bb1c:	d14a      	bne.n	9000bbb4 <_printf_i+0x1f0>
9000bb1e:	f04f 30ff 	mov.w	r0, #4294967295
9000bb22:	b004      	add	sp, #16
9000bb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000bb28:	6823      	ldr	r3, [r4, #0]
9000bb2a:	f043 0320 	orr.w	r3, r3, #32
9000bb2e:	6023      	str	r3, [r4, #0]
9000bb30:	4832      	ldr	r0, [pc, #200]	@ (9000bbfc <_printf_i+0x238>)
9000bb32:	2778      	movs	r7, #120	@ 0x78
9000bb34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000bb38:	6823      	ldr	r3, [r4, #0]
9000bb3a:	6831      	ldr	r1, [r6, #0]
9000bb3c:	061f      	lsls	r7, r3, #24
9000bb3e:	f851 5b04 	ldr.w	r5, [r1], #4
9000bb42:	d402      	bmi.n	9000bb4a <_printf_i+0x186>
9000bb44:	065f      	lsls	r7, r3, #25
9000bb46:	bf48      	it	mi
9000bb48:	b2ad      	uxthmi	r5, r5
9000bb4a:	6031      	str	r1, [r6, #0]
9000bb4c:	07d9      	lsls	r1, r3, #31
9000bb4e:	bf44      	itt	mi
9000bb50:	f043 0320 	orrmi.w	r3, r3, #32
9000bb54:	6023      	strmi	r3, [r4, #0]
9000bb56:	b11d      	cbz	r5, 9000bb60 <_printf_i+0x19c>
9000bb58:	2310      	movs	r3, #16
9000bb5a:	e7ad      	b.n	9000bab8 <_printf_i+0xf4>
9000bb5c:	4826      	ldr	r0, [pc, #152]	@ (9000bbf8 <_printf_i+0x234>)
9000bb5e:	e7e9      	b.n	9000bb34 <_printf_i+0x170>
9000bb60:	6823      	ldr	r3, [r4, #0]
9000bb62:	f023 0320 	bic.w	r3, r3, #32
9000bb66:	6023      	str	r3, [r4, #0]
9000bb68:	e7f6      	b.n	9000bb58 <_printf_i+0x194>
9000bb6a:	4616      	mov	r6, r2
9000bb6c:	e7bd      	b.n	9000baea <_printf_i+0x126>
9000bb6e:	6833      	ldr	r3, [r6, #0]
9000bb70:	6825      	ldr	r5, [r4, #0]
9000bb72:	6961      	ldr	r1, [r4, #20]
9000bb74:	1d18      	adds	r0, r3, #4
9000bb76:	6030      	str	r0, [r6, #0]
9000bb78:	062e      	lsls	r6, r5, #24
9000bb7a:	681b      	ldr	r3, [r3, #0]
9000bb7c:	d501      	bpl.n	9000bb82 <_printf_i+0x1be>
9000bb7e:	6019      	str	r1, [r3, #0]
9000bb80:	e002      	b.n	9000bb88 <_printf_i+0x1c4>
9000bb82:	0668      	lsls	r0, r5, #25
9000bb84:	d5fb      	bpl.n	9000bb7e <_printf_i+0x1ba>
9000bb86:	8019      	strh	r1, [r3, #0]
9000bb88:	2300      	movs	r3, #0
9000bb8a:	6123      	str	r3, [r4, #16]
9000bb8c:	4616      	mov	r6, r2
9000bb8e:	e7bc      	b.n	9000bb0a <_printf_i+0x146>
9000bb90:	6833      	ldr	r3, [r6, #0]
9000bb92:	1d1a      	adds	r2, r3, #4
9000bb94:	6032      	str	r2, [r6, #0]
9000bb96:	681e      	ldr	r6, [r3, #0]
9000bb98:	6862      	ldr	r2, [r4, #4]
9000bb9a:	2100      	movs	r1, #0
9000bb9c:	4630      	mov	r0, r6
9000bb9e:	f7f4 fba7 	bl	900002f0 <memchr>
9000bba2:	b108      	cbz	r0, 9000bba8 <_printf_i+0x1e4>
9000bba4:	1b80      	subs	r0, r0, r6
9000bba6:	6060      	str	r0, [r4, #4]
9000bba8:	6863      	ldr	r3, [r4, #4]
9000bbaa:	6123      	str	r3, [r4, #16]
9000bbac:	2300      	movs	r3, #0
9000bbae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000bbb2:	e7aa      	b.n	9000bb0a <_printf_i+0x146>
9000bbb4:	6923      	ldr	r3, [r4, #16]
9000bbb6:	4632      	mov	r2, r6
9000bbb8:	4649      	mov	r1, r9
9000bbba:	4640      	mov	r0, r8
9000bbbc:	47d0      	blx	sl
9000bbbe:	3001      	adds	r0, #1
9000bbc0:	d0ad      	beq.n	9000bb1e <_printf_i+0x15a>
9000bbc2:	6823      	ldr	r3, [r4, #0]
9000bbc4:	079b      	lsls	r3, r3, #30
9000bbc6:	d413      	bmi.n	9000bbf0 <_printf_i+0x22c>
9000bbc8:	68e0      	ldr	r0, [r4, #12]
9000bbca:	9b03      	ldr	r3, [sp, #12]
9000bbcc:	4298      	cmp	r0, r3
9000bbce:	bfb8      	it	lt
9000bbd0:	4618      	movlt	r0, r3
9000bbd2:	e7a6      	b.n	9000bb22 <_printf_i+0x15e>
9000bbd4:	2301      	movs	r3, #1
9000bbd6:	4632      	mov	r2, r6
9000bbd8:	4649      	mov	r1, r9
9000bbda:	4640      	mov	r0, r8
9000bbdc:	47d0      	blx	sl
9000bbde:	3001      	adds	r0, #1
9000bbe0:	d09d      	beq.n	9000bb1e <_printf_i+0x15a>
9000bbe2:	3501      	adds	r5, #1
9000bbe4:	68e3      	ldr	r3, [r4, #12]
9000bbe6:	9903      	ldr	r1, [sp, #12]
9000bbe8:	1a5b      	subs	r3, r3, r1
9000bbea:	42ab      	cmp	r3, r5
9000bbec:	dcf2      	bgt.n	9000bbd4 <_printf_i+0x210>
9000bbee:	e7eb      	b.n	9000bbc8 <_printf_i+0x204>
9000bbf0:	2500      	movs	r5, #0
9000bbf2:	f104 0619 	add.w	r6, r4, #25
9000bbf6:	e7f5      	b.n	9000bbe4 <_printf_i+0x220>
9000bbf8:	9000e5d5 	.word	0x9000e5d5
9000bbfc:	9000e5e6 	.word	0x9000e5e6

9000bc00 <__sflush_r>:
9000bc00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000bc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000bc08:	0716      	lsls	r6, r2, #28
9000bc0a:	4605      	mov	r5, r0
9000bc0c:	460c      	mov	r4, r1
9000bc0e:	d454      	bmi.n	9000bcba <__sflush_r+0xba>
9000bc10:	684b      	ldr	r3, [r1, #4]
9000bc12:	2b00      	cmp	r3, #0
9000bc14:	dc02      	bgt.n	9000bc1c <__sflush_r+0x1c>
9000bc16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000bc18:	2b00      	cmp	r3, #0
9000bc1a:	dd48      	ble.n	9000bcae <__sflush_r+0xae>
9000bc1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000bc1e:	2e00      	cmp	r6, #0
9000bc20:	d045      	beq.n	9000bcae <__sflush_r+0xae>
9000bc22:	2300      	movs	r3, #0
9000bc24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000bc28:	682f      	ldr	r7, [r5, #0]
9000bc2a:	6a21      	ldr	r1, [r4, #32]
9000bc2c:	602b      	str	r3, [r5, #0]
9000bc2e:	d030      	beq.n	9000bc92 <__sflush_r+0x92>
9000bc30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000bc32:	89a3      	ldrh	r3, [r4, #12]
9000bc34:	0759      	lsls	r1, r3, #29
9000bc36:	d505      	bpl.n	9000bc44 <__sflush_r+0x44>
9000bc38:	6863      	ldr	r3, [r4, #4]
9000bc3a:	1ad2      	subs	r2, r2, r3
9000bc3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000bc3e:	b10b      	cbz	r3, 9000bc44 <__sflush_r+0x44>
9000bc40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000bc42:	1ad2      	subs	r2, r2, r3
9000bc44:	2300      	movs	r3, #0
9000bc46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000bc48:	6a21      	ldr	r1, [r4, #32]
9000bc4a:	4628      	mov	r0, r5
9000bc4c:	47b0      	blx	r6
9000bc4e:	1c43      	adds	r3, r0, #1
9000bc50:	89a3      	ldrh	r3, [r4, #12]
9000bc52:	d106      	bne.n	9000bc62 <__sflush_r+0x62>
9000bc54:	6829      	ldr	r1, [r5, #0]
9000bc56:	291d      	cmp	r1, #29
9000bc58:	d82b      	bhi.n	9000bcb2 <__sflush_r+0xb2>
9000bc5a:	4a2a      	ldr	r2, [pc, #168]	@ (9000bd04 <__sflush_r+0x104>)
9000bc5c:	40ca      	lsrs	r2, r1
9000bc5e:	07d6      	lsls	r6, r2, #31
9000bc60:	d527      	bpl.n	9000bcb2 <__sflush_r+0xb2>
9000bc62:	2200      	movs	r2, #0
9000bc64:	6062      	str	r2, [r4, #4]
9000bc66:	04d9      	lsls	r1, r3, #19
9000bc68:	6922      	ldr	r2, [r4, #16]
9000bc6a:	6022      	str	r2, [r4, #0]
9000bc6c:	d504      	bpl.n	9000bc78 <__sflush_r+0x78>
9000bc6e:	1c42      	adds	r2, r0, #1
9000bc70:	d101      	bne.n	9000bc76 <__sflush_r+0x76>
9000bc72:	682b      	ldr	r3, [r5, #0]
9000bc74:	b903      	cbnz	r3, 9000bc78 <__sflush_r+0x78>
9000bc76:	6560      	str	r0, [r4, #84]	@ 0x54
9000bc78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000bc7a:	602f      	str	r7, [r5, #0]
9000bc7c:	b1b9      	cbz	r1, 9000bcae <__sflush_r+0xae>
9000bc7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000bc82:	4299      	cmp	r1, r3
9000bc84:	d002      	beq.n	9000bc8c <__sflush_r+0x8c>
9000bc86:	4628      	mov	r0, r5
9000bc88:	f7ff fa9c 	bl	9000b1c4 <_free_r>
9000bc8c:	2300      	movs	r3, #0
9000bc8e:	6363      	str	r3, [r4, #52]	@ 0x34
9000bc90:	e00d      	b.n	9000bcae <__sflush_r+0xae>
9000bc92:	2301      	movs	r3, #1
9000bc94:	4628      	mov	r0, r5
9000bc96:	47b0      	blx	r6
9000bc98:	4602      	mov	r2, r0
9000bc9a:	1c50      	adds	r0, r2, #1
9000bc9c:	d1c9      	bne.n	9000bc32 <__sflush_r+0x32>
9000bc9e:	682b      	ldr	r3, [r5, #0]
9000bca0:	2b00      	cmp	r3, #0
9000bca2:	d0c6      	beq.n	9000bc32 <__sflush_r+0x32>
9000bca4:	2b1d      	cmp	r3, #29
9000bca6:	d001      	beq.n	9000bcac <__sflush_r+0xac>
9000bca8:	2b16      	cmp	r3, #22
9000bcaa:	d11e      	bne.n	9000bcea <__sflush_r+0xea>
9000bcac:	602f      	str	r7, [r5, #0]
9000bcae:	2000      	movs	r0, #0
9000bcb0:	e022      	b.n	9000bcf8 <__sflush_r+0xf8>
9000bcb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000bcb6:	b21b      	sxth	r3, r3
9000bcb8:	e01b      	b.n	9000bcf2 <__sflush_r+0xf2>
9000bcba:	690f      	ldr	r7, [r1, #16]
9000bcbc:	2f00      	cmp	r7, #0
9000bcbe:	d0f6      	beq.n	9000bcae <__sflush_r+0xae>
9000bcc0:	0793      	lsls	r3, r2, #30
9000bcc2:	680e      	ldr	r6, [r1, #0]
9000bcc4:	bf08      	it	eq
9000bcc6:	694b      	ldreq	r3, [r1, #20]
9000bcc8:	600f      	str	r7, [r1, #0]
9000bcca:	bf18      	it	ne
9000bccc:	2300      	movne	r3, #0
9000bcce:	eba6 0807 	sub.w	r8, r6, r7
9000bcd2:	608b      	str	r3, [r1, #8]
9000bcd4:	f1b8 0f00 	cmp.w	r8, #0
9000bcd8:	dde9      	ble.n	9000bcae <__sflush_r+0xae>
9000bcda:	6a21      	ldr	r1, [r4, #32]
9000bcdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000bcde:	4643      	mov	r3, r8
9000bce0:	463a      	mov	r2, r7
9000bce2:	4628      	mov	r0, r5
9000bce4:	47b0      	blx	r6
9000bce6:	2800      	cmp	r0, #0
9000bce8:	dc08      	bgt.n	9000bcfc <__sflush_r+0xfc>
9000bcea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000bcee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000bcf2:	81a3      	strh	r3, [r4, #12]
9000bcf4:	f04f 30ff 	mov.w	r0, #4294967295
9000bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000bcfc:	4407      	add	r7, r0
9000bcfe:	eba8 0800 	sub.w	r8, r8, r0
9000bd02:	e7e7      	b.n	9000bcd4 <__sflush_r+0xd4>
9000bd04:	20400001 	.word	0x20400001

9000bd08 <_fflush_r>:
9000bd08:	b538      	push	{r3, r4, r5, lr}
9000bd0a:	690b      	ldr	r3, [r1, #16]
9000bd0c:	4605      	mov	r5, r0
9000bd0e:	460c      	mov	r4, r1
9000bd10:	b913      	cbnz	r3, 9000bd18 <_fflush_r+0x10>
9000bd12:	2500      	movs	r5, #0
9000bd14:	4628      	mov	r0, r5
9000bd16:	bd38      	pop	{r3, r4, r5, pc}
9000bd18:	b118      	cbz	r0, 9000bd22 <_fflush_r+0x1a>
9000bd1a:	6a03      	ldr	r3, [r0, #32]
9000bd1c:	b90b      	cbnz	r3, 9000bd22 <_fflush_r+0x1a>
9000bd1e:	f7ff f827 	bl	9000ad70 <__sinit>
9000bd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000bd26:	2b00      	cmp	r3, #0
9000bd28:	d0f3      	beq.n	9000bd12 <_fflush_r+0xa>
9000bd2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000bd2c:	07d0      	lsls	r0, r2, #31
9000bd2e:	d404      	bmi.n	9000bd3a <_fflush_r+0x32>
9000bd30:	0599      	lsls	r1, r3, #22
9000bd32:	d402      	bmi.n	9000bd3a <_fflush_r+0x32>
9000bd34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000bd36:	f7ff fa34 	bl	9000b1a2 <__retarget_lock_acquire_recursive>
9000bd3a:	4628      	mov	r0, r5
9000bd3c:	4621      	mov	r1, r4
9000bd3e:	f7ff ff5f 	bl	9000bc00 <__sflush_r>
9000bd42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000bd44:	07da      	lsls	r2, r3, #31
9000bd46:	4605      	mov	r5, r0
9000bd48:	d4e4      	bmi.n	9000bd14 <_fflush_r+0xc>
9000bd4a:	89a3      	ldrh	r3, [r4, #12]
9000bd4c:	059b      	lsls	r3, r3, #22
9000bd4e:	d4e1      	bmi.n	9000bd14 <_fflush_r+0xc>
9000bd50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000bd52:	f7ff fa27 	bl	9000b1a4 <__retarget_lock_release_recursive>
9000bd56:	e7dd      	b.n	9000bd14 <_fflush_r+0xc>

9000bd58 <__swhatbuf_r>:
9000bd58:	b570      	push	{r4, r5, r6, lr}
9000bd5a:	460c      	mov	r4, r1
9000bd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000bd60:	2900      	cmp	r1, #0
9000bd62:	b096      	sub	sp, #88	@ 0x58
9000bd64:	4615      	mov	r5, r2
9000bd66:	461e      	mov	r6, r3
9000bd68:	da0d      	bge.n	9000bd86 <__swhatbuf_r+0x2e>
9000bd6a:	89a3      	ldrh	r3, [r4, #12]
9000bd6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000bd70:	f04f 0100 	mov.w	r1, #0
9000bd74:	bf14      	ite	ne
9000bd76:	2340      	movne	r3, #64	@ 0x40
9000bd78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000bd7c:	2000      	movs	r0, #0
9000bd7e:	6031      	str	r1, [r6, #0]
9000bd80:	602b      	str	r3, [r5, #0]
9000bd82:	b016      	add	sp, #88	@ 0x58
9000bd84:	bd70      	pop	{r4, r5, r6, pc}
9000bd86:	466a      	mov	r2, sp
9000bd88:	f000 f862 	bl	9000be50 <_fstat_r>
9000bd8c:	2800      	cmp	r0, #0
9000bd8e:	dbec      	blt.n	9000bd6a <__swhatbuf_r+0x12>
9000bd90:	9901      	ldr	r1, [sp, #4]
9000bd92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000bd96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000bd9a:	4259      	negs	r1, r3
9000bd9c:	4159      	adcs	r1, r3
9000bd9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000bda2:	e7eb      	b.n	9000bd7c <__swhatbuf_r+0x24>

9000bda4 <__smakebuf_r>:
9000bda4:	898b      	ldrh	r3, [r1, #12]
9000bda6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000bda8:	079d      	lsls	r5, r3, #30
9000bdaa:	4606      	mov	r6, r0
9000bdac:	460c      	mov	r4, r1
9000bdae:	d507      	bpl.n	9000bdc0 <__smakebuf_r+0x1c>
9000bdb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000bdb4:	6023      	str	r3, [r4, #0]
9000bdb6:	6123      	str	r3, [r4, #16]
9000bdb8:	2301      	movs	r3, #1
9000bdba:	6163      	str	r3, [r4, #20]
9000bdbc:	b003      	add	sp, #12
9000bdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000bdc0:	ab01      	add	r3, sp, #4
9000bdc2:	466a      	mov	r2, sp
9000bdc4:	f7ff ffc8 	bl	9000bd58 <__swhatbuf_r>
9000bdc8:	9f00      	ldr	r7, [sp, #0]
9000bdca:	4605      	mov	r5, r0
9000bdcc:	4639      	mov	r1, r7
9000bdce:	4630      	mov	r0, r6
9000bdd0:	f7ff fa64 	bl	9000b29c <_malloc_r>
9000bdd4:	b948      	cbnz	r0, 9000bdea <__smakebuf_r+0x46>
9000bdd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000bdda:	059a      	lsls	r2, r3, #22
9000bddc:	d4ee      	bmi.n	9000bdbc <__smakebuf_r+0x18>
9000bdde:	f023 0303 	bic.w	r3, r3, #3
9000bde2:	f043 0302 	orr.w	r3, r3, #2
9000bde6:	81a3      	strh	r3, [r4, #12]
9000bde8:	e7e2      	b.n	9000bdb0 <__smakebuf_r+0xc>
9000bdea:	89a3      	ldrh	r3, [r4, #12]
9000bdec:	6020      	str	r0, [r4, #0]
9000bdee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000bdf2:	81a3      	strh	r3, [r4, #12]
9000bdf4:	9b01      	ldr	r3, [sp, #4]
9000bdf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000bdfa:	b15b      	cbz	r3, 9000be14 <__smakebuf_r+0x70>
9000bdfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000be00:	4630      	mov	r0, r6
9000be02:	f000 f837 	bl	9000be74 <_isatty_r>
9000be06:	b128      	cbz	r0, 9000be14 <__smakebuf_r+0x70>
9000be08:	89a3      	ldrh	r3, [r4, #12]
9000be0a:	f023 0303 	bic.w	r3, r3, #3
9000be0e:	f043 0301 	orr.w	r3, r3, #1
9000be12:	81a3      	strh	r3, [r4, #12]
9000be14:	89a3      	ldrh	r3, [r4, #12]
9000be16:	431d      	orrs	r5, r3
9000be18:	81a5      	strh	r5, [r4, #12]
9000be1a:	e7cf      	b.n	9000bdbc <__smakebuf_r+0x18>

9000be1c <memmove>:
9000be1c:	4288      	cmp	r0, r1
9000be1e:	b510      	push	{r4, lr}
9000be20:	eb01 0402 	add.w	r4, r1, r2
9000be24:	d902      	bls.n	9000be2c <memmove+0x10>
9000be26:	4284      	cmp	r4, r0
9000be28:	4623      	mov	r3, r4
9000be2a:	d807      	bhi.n	9000be3c <memmove+0x20>
9000be2c:	1e43      	subs	r3, r0, #1
9000be2e:	42a1      	cmp	r1, r4
9000be30:	d008      	beq.n	9000be44 <memmove+0x28>
9000be32:	f811 2b01 	ldrb.w	r2, [r1], #1
9000be36:	f803 2f01 	strb.w	r2, [r3, #1]!
9000be3a:	e7f8      	b.n	9000be2e <memmove+0x12>
9000be3c:	4402      	add	r2, r0
9000be3e:	4601      	mov	r1, r0
9000be40:	428a      	cmp	r2, r1
9000be42:	d100      	bne.n	9000be46 <memmove+0x2a>
9000be44:	bd10      	pop	{r4, pc}
9000be46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000be4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000be4e:	e7f7      	b.n	9000be40 <memmove+0x24>

9000be50 <_fstat_r>:
9000be50:	b538      	push	{r3, r4, r5, lr}
9000be52:	4d07      	ldr	r5, [pc, #28]	@ (9000be70 <_fstat_r+0x20>)
9000be54:	2300      	movs	r3, #0
9000be56:	4604      	mov	r4, r0
9000be58:	4608      	mov	r0, r1
9000be5a:	4611      	mov	r1, r2
9000be5c:	602b      	str	r3, [r5, #0]
9000be5e:	f7f5 f9f7 	bl	90001250 <_fstat>
9000be62:	1c43      	adds	r3, r0, #1
9000be64:	d102      	bne.n	9000be6c <_fstat_r+0x1c>
9000be66:	682b      	ldr	r3, [r5, #0]
9000be68:	b103      	cbz	r3, 9000be6c <_fstat_r+0x1c>
9000be6a:	6023      	str	r3, [r4, #0]
9000be6c:	bd38      	pop	{r3, r4, r5, pc}
9000be6e:	bf00      	nop
9000be70:	200010f4 	.word	0x200010f4

9000be74 <_isatty_r>:
9000be74:	b538      	push	{r3, r4, r5, lr}
9000be76:	4d06      	ldr	r5, [pc, #24]	@ (9000be90 <_isatty_r+0x1c>)
9000be78:	2300      	movs	r3, #0
9000be7a:	4604      	mov	r4, r0
9000be7c:	4608      	mov	r0, r1
9000be7e:	602b      	str	r3, [r5, #0]
9000be80:	f7f5 f9f6 	bl	90001270 <_isatty>
9000be84:	1c43      	adds	r3, r0, #1
9000be86:	d102      	bne.n	9000be8e <_isatty_r+0x1a>
9000be88:	682b      	ldr	r3, [r5, #0]
9000be8a:	b103      	cbz	r3, 9000be8e <_isatty_r+0x1a>
9000be8c:	6023      	str	r3, [r4, #0]
9000be8e:	bd38      	pop	{r3, r4, r5, pc}
9000be90:	200010f4 	.word	0x200010f4

9000be94 <_sbrk_r>:
9000be94:	b538      	push	{r3, r4, r5, lr}
9000be96:	4d06      	ldr	r5, [pc, #24]	@ (9000beb0 <_sbrk_r+0x1c>)
9000be98:	2300      	movs	r3, #0
9000be9a:	4604      	mov	r4, r0
9000be9c:	4608      	mov	r0, r1
9000be9e:	602b      	str	r3, [r5, #0]
9000bea0:	f7f5 f9fe 	bl	900012a0 <_sbrk>
9000bea4:	1c43      	adds	r3, r0, #1
9000bea6:	d102      	bne.n	9000beae <_sbrk_r+0x1a>
9000bea8:	682b      	ldr	r3, [r5, #0]
9000beaa:	b103      	cbz	r3, 9000beae <_sbrk_r+0x1a>
9000beac:	6023      	str	r3, [r4, #0]
9000beae:	bd38      	pop	{r3, r4, r5, pc}
9000beb0:	200010f4 	.word	0x200010f4

9000beb4 <_realloc_r>:
9000beb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000beb8:	4607      	mov	r7, r0
9000beba:	4614      	mov	r4, r2
9000bebc:	460d      	mov	r5, r1
9000bebe:	b921      	cbnz	r1, 9000beca <_realloc_r+0x16>
9000bec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000bec4:	4611      	mov	r1, r2
9000bec6:	f7ff b9e9 	b.w	9000b29c <_malloc_r>
9000beca:	b92a      	cbnz	r2, 9000bed8 <_realloc_r+0x24>
9000becc:	f7ff f97a 	bl	9000b1c4 <_free_r>
9000bed0:	4625      	mov	r5, r4
9000bed2:	4628      	mov	r0, r5
9000bed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000bed8:	f000 f81a 	bl	9000bf10 <_malloc_usable_size_r>
9000bedc:	4284      	cmp	r4, r0
9000bede:	4606      	mov	r6, r0
9000bee0:	d802      	bhi.n	9000bee8 <_realloc_r+0x34>
9000bee2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000bee6:	d8f4      	bhi.n	9000bed2 <_realloc_r+0x1e>
9000bee8:	4621      	mov	r1, r4
9000beea:	4638      	mov	r0, r7
9000beec:	f7ff f9d6 	bl	9000b29c <_malloc_r>
9000bef0:	4680      	mov	r8, r0
9000bef2:	b908      	cbnz	r0, 9000bef8 <_realloc_r+0x44>
9000bef4:	4645      	mov	r5, r8
9000bef6:	e7ec      	b.n	9000bed2 <_realloc_r+0x1e>
9000bef8:	42b4      	cmp	r4, r6
9000befa:	4622      	mov	r2, r4
9000befc:	4629      	mov	r1, r5
9000befe:	bf28      	it	cs
9000bf00:	4632      	movcs	r2, r6
9000bf02:	f7ff f950 	bl	9000b1a6 <memcpy>
9000bf06:	4629      	mov	r1, r5
9000bf08:	4638      	mov	r0, r7
9000bf0a:	f7ff f95b 	bl	9000b1c4 <_free_r>
9000bf0e:	e7f1      	b.n	9000bef4 <_realloc_r+0x40>

9000bf10 <_malloc_usable_size_r>:
9000bf10:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000bf14:	1f18      	subs	r0, r3, #4
9000bf16:	2b00      	cmp	r3, #0
9000bf18:	bfbc      	itt	lt
9000bf1a:	580b      	ldrlt	r3, [r1, r0]
9000bf1c:	18c0      	addlt	r0, r0, r3
9000bf1e:	4770      	bx	lr

9000bf20 <_init>:
9000bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000bf22:	bf00      	nop
9000bf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000bf26:	bc08      	pop	{r3}
9000bf28:	469e      	mov	lr, r3
9000bf2a:	4770      	bx	lr

9000bf2c <_fini>:
9000bf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000bf2e:	bf00      	nop
9000bf30:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000bf32:	bc08      	pop	{r3}
9000bf34:	469e      	mov	lr, r3
9000bf36:	4770      	bx	lr
